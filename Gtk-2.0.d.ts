
/*
 * Type Definitions for deno_gi (https://github.com/ahgilak/deno_gi)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * Gtk-2.0
 */

import type * as Gdk from './Gdk-2.0.js';
import type * as cairo from './cairo-1.0.js';
import type * as Pango from './Pango-1.0.js';
import type * as HarfBuzz from './HarfBuzz-0.0.js';
import type * as GObject from './GObject-2.0.js';
import type * as GLib from './GLib-2.0.js';
import type * as Gio from './Gio-2.0.js';
import type * as GdkPixbuf from './GdkPixbuf-2.0.js';
import type * as GModule from './GModule-2.0.js';
import type * as Atk from './Atk-1.0.js';

export enum AnchorType {
    CENTER,
    NORTH,
    NORTH_WEST,
    NORTH_EAST,
    SOUTH,
    SOUTH_WEST,
    SOUTH_EAST,
    WEST,
    EAST,
    N,
    NW,
    NE,
    S,
    SW,
    SE,
    W,
    E,
}
export enum ArrowPlacement {
    BOTH,
    START,
    END,
}
export enum ArrowType {
    UP,
    DOWN,
    LEFT,
    RIGHT,
    NONE,
}
/**
 * An enum for determining the page role inside the #GtkAssistant. It's
 * used to handle buttons sensitivity and visibility.
 * 
 * Note that an assistant needs to end its page flow with a page of type
 * %GTK_ASSISTANT_PAGE_CONFIRM, %GTK_ASSISTANT_PAGE_SUMMARY or
 * %GTK_ASSISTANT_PAGE_PROGRESS to be correct.
 */
export enum AssistantPageType {
    /**
     * The page has regular contents.
     */
    CONTENT,
    /**
     * The page contains an introduction to the
     *  assistant task.
     */
    INTRO,
    /**
     * The page lets the user confirm or deny the
     *  changes.
     */
    CONFIRM,
    /**
     * The page informs the user of the changes
     *  done.
     */
    SUMMARY,
    /**
     * Used for tasks that take a long time to
     *  complete, blocks the assistant until the page is marked as complete.
     */
    PROGRESS,
}
export enum BuilderError {
    INVALID_TYPE_FUNCTION,
    UNHANDLED_TAG,
    MISSING_ATTRIBUTE,
    INVALID_ATTRIBUTE,
    INVALID_TAG,
    MISSING_PROPERTY_VALUE,
    INVALID_VALUE,
    VERSION_MISMATCH,
    DUPLICATE_ID,
}
export enum ButtonBoxStyle {
    DEFAULT_STYLE,
    SPREAD,
    EDGE,
    START,
    END,
    CENTER,
}
/**
 * Prebuilt sets of buttons for the dialog. If
 * none of these choices are appropriate, simply use %GTK_BUTTONS_NONE
 * then call gtk_dialog_add_buttons().
 * <note>
 *  Please note that %GTK_BUTTONS_OK, %GTK_BUTTONS_YES_NO
 *  and %GTK_BUTTONS_OK_CANCEL are discouraged by the
 *  <ulink url="http://library.gnome.org/devel/hig-book/stable/">GNOME HIG</ulink>.
 * </note>
 */
export enum ButtonsType {
    /**
     * no buttons at all
     */
    NONE,
    /**
     * an OK button
     */
    OK,
    /**
     * a Close button
     */
    CLOSE,
    /**
     * a Cancel button
     */
    CANCEL,
    /**
     * Yes and No buttons
     */
    YES_NO,
    /**
     * OK and Cancel buttons
     */
    OK_CANCEL,
}
export enum CListDragPos {
    NONE,
    BEFORE,
    INTO,
    AFTER,
}
export enum CTreeExpanderStyle {
    NONE,
    SQUARE,
    TRIANGLE,
    CIRCULAR,
}
export enum CTreeExpansionType {
    EXPAND,
    EXPAND_RECURSIVE,
    COLLAPSE,
    COLLAPSE_RECURSIVE,
    TOGGLE,
    TOGGLE_RECURSIVE,
}
export enum CTreeLineStyle {
    NONE,
    SOLID,
    DOTTED,
    TABBED,
}
export enum CTreePos {
    BEFORE,
    AS_CHILD,
    AFTER,
}
export enum CellRendererAccelMode {
    GTK,
    OTHER,
}
export enum CellRendererMode {
    INERT,
    ACTIVATABLE,
    EDITABLE,
}
export enum CellType {
    EMPTY,
    TEXT,
    PIXMAP,
    PIXTEXT,
    WIDGET,
}
export enum CornerType {
    TOP_LEFT,
    BOTTOM_LEFT,
    TOP_RIGHT,
    BOTTOM_RIGHT,
}
export enum CurveType {
    LINEAR,
    SPLINE,
    FREE,
}
export enum DeleteType {
    CHARS,
    WORD_ENDS,
    WORDS,
    DISPLAY_LINES,
    DISPLAY_LINE_ENDS,
    PARAGRAPH_ENDS,
    PARAGRAPHS,
    WHITESPACE,
}
export enum DirectionType {
    TAB_FORWARD,
    TAB_BACKWARD,
    UP,
    DOWN,
    LEFT,
    RIGHT,
}
export enum DragResult {
    SUCCESS,
    NO_TARGET,
    USER_CANCELLED,
    TIMEOUT_EXPIRED,
    GRAB_BROKEN,
    ERROR,
}
export enum EntryIconPosition {
    PRIMARY,
    SECONDARY,
}
export enum ExpanderStyle {
    COLLAPSED,
    SEMI_COLLAPSED,
    SEMI_EXPANDED,
    EXPANDED,
}
/**
 * Describes whether a #GtkFileChooser is being used to open existing files
 * or to save to a possibly new file.
 */
export enum FileChooserAction {
    /**
     * Indicates open mode.  The file chooser
     *  will only let the user pick an existing file.
     */
    OPEN,
    /**
     * Indicates save mode.  The file chooser
     *  will let the user pick an existing file, or type in a new
     *  filename.
     */
    SAVE,
    /**
     * Indicates an Open mode for
     *  selecting folders.  The file chooser will let the user pick an
     *  existing folder.
     */
    SELECT_FOLDER,
    /**
     * Indicates a mode for creating a
     *  new folder.  The file chooser will let the user name an existing or
     *  new folder.
     */
    CREATE_FOLDER,
}
/**
 * Used as a return value of handlers for the
 * #GtkFileChooser::confirm-overwrite signal of a #GtkFileChooser. This
 * value determines whether the file chooser will present the stock
 * confirmation dialog, accept the user's choice of a filename, or
 * let the user choose another filename.
 */
export enum FileChooserConfirmation {
    /**
     * The file chooser will present
     *  its stock dialog to confirm about overwriting an existing file.
     */
    CONFIRM,
    /**
     * The file chooser will
     *  terminate and accept the user's choice of a file name.
     */
    ACCEPT_FILENAME,
    /**
     * The file chooser will
     *  continue running, so as to let the user select another file name.
     */
    SELECT_AGAIN,
}
/**
 * These identify the various errors that can occur while calling
 * #GtkFileChooser functions.
 */
export enum FileChooserError {
    /**
     * Indicates that a file does not exist.
     */
    NONEXISTENT,
    /**
     * Indicates a malformed filename.
     */
    BAD_FILENAME,
    /**
     * Indicates a duplicate path (e.g. when
     *  adding a bookmark).
     */
    ALREADY_EXISTS,
    /**
     * Indicates an incomplete hostname (e.g. "http://foo" without a slash after that).
     */
    INCOMPLETE_HOSTNAME,
}
export enum IMPreeditStyle {
    NOTHING,
    CALLBACK,
    NONE,
}
export enum IMStatusStyle {
    NOTHING,
    CALLBACK,
    NONE,
}
export enum IconSize {
    INVALID,
    MENU,
    SMALL_TOOLBAR,
    LARGE_TOOLBAR,
    BUTTON,
    DND,
    DIALOG,
}
/**
 * Error codes for GtkIconTheme operations.
 */
export enum IconThemeError {
    /**
     * The icon specified does not exist in the theme
     */
    NOT_FOUND,
    /**
     * An unspecified error occurred.
     */
    FAILED,
}
export enum IconViewDropPosition {
    NO_DROP,
    DROP_INTO,
    DROP_LEFT,
    DROP_RIGHT,
    DROP_ABOVE,
    DROP_BELOW,
}
/**
 * Describes the image data representation used by a #GtkImage. If you
 * want to get the image from the widget, you can only get the
 * currently-stored representation. e.g.  if the
 * gtk_image_get_storage_type() returns #GTK_IMAGE_PIXBUF, then you can
 * call gtk_image_get_pixbuf() but not gtk_image_get_stock().  For empty
 * images, you can request any storage type (call any of the "get"
 * functions), but they will all return %NULL values.
 */
export enum ImageType {
    /**
     * there is no image displayed by the widget
     */
    EMPTY,
    /**
     * the widget contains a #GdkPixmap
     */
    PIXMAP,
    /**
     * the widget contains a #GdkImage
     */
    IMAGE,
    /**
     * the widget contains a #GdkPixbuf
     */
    PIXBUF,
    /**
     * the widget contains a stock icon name (see <xref linkend="gtk-Stock-Items"/>)
     */
    STOCK,
    /**
     * the widget contains a #GtkIconSet
     */
    ICON_SET,
    /**
     * the widget contains a #GdkPixbufAnimation
     */
    ANIMATION,
    /**
     * the widget contains a named icon.
     *  This image type was added in GTK+ 2.6
     */
    ICON_NAME,
    /**
     * the widget contains a #GIcon.
     *  This image type was added in GTK+ 2.14
     */
    GICON,
}
export enum Justification {
    LEFT,
    RIGHT,
    CENTER,
    FILL,
}
export enum MatchType {
    ALL,
    ALL_TAIL,
    HEAD,
    TAIL,
    EXACT,
    LAST,
}
export enum MenuDirectionType {
    PARENT,
    CHILD,
    NEXT,
    PREV,
}
/**
 * The type of message being displayed in the dialog.
 */
export enum MessageType {
    /**
     * Informational message
     */
    INFO,
    /**
     * Nonfatal warning message
     */
    WARNING,
    /**
     * Question requiring a choice
     */
    QUESTION,
    /**
     * Fatal error message
     */
    ERROR,
    /**
     * None of the above, doesn't get an icon
     */
    OTHER,
}
export enum MetricType {
    PIXELS,
    INCHES,
    CENTIMETERS,
}
export enum MovementStep {
    LOGICAL_POSITIONS,
    VISUAL_POSITIONS,
    WORDS,
    DISPLAY_LINES,
    DISPLAY_LINE_ENDS,
    PARAGRAPHS,
    PARAGRAPH_ENDS,
    PAGES,
    BUFFER_ENDS,
    HORIZONTAL_PAGES,
}
export enum NotebookTab {
    FIRST,
    LAST,
}
export enum NumberUpLayout {
    LRTB,
    LRBT,
    RLTB,
    RLBT,
    TBLR,
    TBRL,
    BTLR,
    BTRL,
}
export enum Orientation {
    HORIZONTAL,
    VERTICAL,
}
export enum PackDirection {
    LTR,
    RTL,
    TTB,
    BTT,
}
export enum PackType {
    START,
    END,
}
export enum PageOrientation {
    PORTRAIT,
    LANDSCAPE,
    REVERSE_PORTRAIT,
    REVERSE_LANDSCAPE,
}
export enum PageSet {
    ALL,
    EVEN,
    ODD,
}
export enum PathPriorityType {
    LOWEST,
    GTK,
    APPLICATION,
    THEME,
    RC,
    HIGHEST,
}
export enum PathType {
    WIDGET,
    WIDGET_CLASS,
    CLASS,
}
export enum PolicyType {
    ALWAYS,
    AUTOMATIC,
    NEVER,
}
export enum PositionType {
    LEFT,
    RIGHT,
    TOP,
    BOTTOM,
}
export enum PreviewType {
    COLOR,
    GRAYSCALE,
}
export enum PrintDuplex {
    SIMPLEX,
    HORIZONTAL,
    VERTICAL,
}
export enum PrintError {
    GENERAL,
    INTERNAL_ERROR,
    NOMEM,
    INVALID_FILE,
}
export enum PrintOperationAction {
    PRINT_DIALOG,
    PRINT,
    PREVIEW,
    EXPORT,
}
export enum PrintOperationResult {
    ERROR,
    APPLY,
    CANCEL,
    IN_PROGRESS,
}
export enum PrintPages {
    ALL,
    CURRENT,
    RANGES,
    SELECTION,
}
export enum PrintQuality {
    LOW,
    NORMAL,
    HIGH,
    DRAFT,
}
export enum PrintStatus {
    INITIAL,
    PREPARING,
    GENERATING_DATA,
    SENDING_DATA,
    PENDING,
    PENDING_ISSUE,
    PRINTING,
    FINISHED,
    FINISHED_ABORTED,
}
export enum ProgressBarOrientation {
    LEFT_TO_RIGHT,
    RIGHT_TO_LEFT,
    BOTTOM_TO_TOP,
    TOP_TO_BOTTOM,
}
export enum ProgressBarStyle {
    CONTINUOUS,
    DISCRETE,
}
export enum RcTokenType {
    INVALID,
    INCLUDE,
    NORMAL,
    ACTIVE,
    PRELIGHT,
    SELECTED,
    INSENSITIVE,
    FG,
    BG,
    TEXT,
    BASE,
    XTHICKNESS,
    YTHICKNESS,
    FONT,
    FONTSET,
    FONT_NAME,
    BG_PIXMAP,
    PIXMAP_PATH,
    STYLE,
    BINDING,
    BIND,
    WIDGET,
    WIDGET_CLASS,
    CLASS,
    LOWEST,
    GTK,
    APPLICATION,
    THEME,
    RC,
    HIGHEST,
    ENGINE,
    MODULE_PATH,
    IM_MODULE_PATH,
    IM_MODULE_FILE,
    STOCK,
    LTR,
    RTL,
    COLOR,
    UNBIND,
    LAST,
}
export enum RecentChooserError {
    NOT_FOUND,
    INVALID_URI,
}
/**
 * Error codes for GtkRecentManager operations
 */
export enum RecentManagerError {
    /**
     * the URI specified does not exists in
     *   the recently used resources list.
     */
    NOT_FOUND,
    /**
     * the URI specified is not valid.
     */
    INVALID_URI,
    /**
     * the supplied string is not
     *   UTF-8 encoded.
     */
    INVALID_ENCODING,
    /**
     * no application has registered
     *   the specified item.
     */
    NOT_REGISTERED,
    /**
     * failure while reading the recently used
     *   resources file.
     */
    READ,
    /**
     * failure while writing the recently used
     *   resources file.
     */
    WRITE,
    /**
     * unspecified error.
     */
    UNKNOWN,
}
/**
 * Used to specify the sorting method to be applyed to the recently
 * used resource list.
 */
export enum RecentSortType {
    /**
     * Do not sort the returned list of recently used
     *   resources.
     */
    NONE,
    /**
     * Sort the returned list with the most recently used
     *   items first.
     */
    MRU,
    /**
     * Sort the returned list with the least recently used
     *   items first.
     */
    LRU,
    /**
     * Sort the returned list using a custom sorting
     *   function passed using gtk_recent_manager_set_sort_func().
     */
    CUSTOM,
}
export enum ReliefStyle {
    NORMAL,
    HALF,
    NONE,
}
export enum ResizeMode {
    PARENT,
    QUEUE,
    IMMEDIATE,
}
export enum ResponseType {
    NONE,
    REJECT,
    ACCEPT,
    DELETE_EVENT,
    OK,
    CANCEL,
    CLOSE,
    YES,
    NO,
    APPLY,
    HELP,
}
export enum ScrollStep {
    STEPS,
    PAGES,
    ENDS,
    HORIZONTAL_STEPS,
    HORIZONTAL_PAGES,
    HORIZONTAL_ENDS,
}
export enum ScrollType {
    NONE,
    JUMP,
    STEP_BACKWARD,
    STEP_FORWARD,
    PAGE_BACKWARD,
    PAGE_FORWARD,
    STEP_UP,
    STEP_DOWN,
    PAGE_UP,
    PAGE_DOWN,
    STEP_LEFT,
    STEP_RIGHT,
    PAGE_LEFT,
    PAGE_RIGHT,
    START,
    END,
}
export enum SelectionMode {
    NONE,
    SINGLE,
    BROWSE,
    MULTIPLE,
    EXTENDED,
}
export enum SensitivityType {
    AUTO,
    ON,
    OFF,
}
export enum ShadowType {
    NONE,
    IN,
    OUT,
    ETCHED_IN,
    ETCHED_OUT,
}
export enum SideType {
    TOP,
    BOTTOM,
    LEFT,
    RIGHT,
}
/**
 * The mode of the size group determines the directions in which the size
 * group affects the requested sizes of its component widgets.
 */
export enum SizeGroupMode {
    /**
     * group has no effect
     */
    NONE,
    /**
     * group affects horizontal requisition
     */
    HORIZONTAL,
    /**
     * group affects vertical requisition
     */
    VERTICAL,
    /**
     * group affects both horizontal and vertical requisition
     */
    BOTH,
}
export enum SortType {
    ASCENDING,
    DESCENDING,
}
export enum SpinButtonUpdatePolicy {
    ALWAYS,
    IF_VALID,
}
export enum SpinType {
    STEP_FORWARD,
    STEP_BACKWARD,
    PAGE_FORWARD,
    PAGE_BACKWARD,
    HOME,
    END,
    USER_DEFINED,
}
export enum StateType {
    NORMAL,
    ACTIVE,
    PRELIGHT,
    SELECTED,
    INSENSITIVE,
}
export enum SubmenuDirection {
    LEFT,
    RIGHT,
}
export enum SubmenuPlacement {
    TOP_BOTTOM,
    LEFT_RIGHT,
}
export enum TextBufferTargetInfo {
    BUFFER_CONTENTS,
    RICH_TEXT,
    TEXT,
}
export enum TextDirection {
    NONE,
    LTR,
    RTL,
}
export enum TextWindowType {
    PRIVATE,
    WIDGET,
    TEXT,
    LEFT,
    RIGHT,
    TOP,
    BOTTOM,
}
export enum ToolbarChildType {
    SPACE,
    BUTTON,
    TOGGLEBUTTON,
    RADIOBUTTON,
    WIDGET,
}
export enum ToolbarSpaceStyle {
    EMPTY,
    LINE,
}
export enum ToolbarStyle {
    ICONS,
    TEXT,
    BOTH,
    BOTH_HORIZ,
}
export enum TreeViewColumnSizing {
    GROW_ONLY,
    AUTOSIZE,
    FIXED,
}
export enum TreeViewDropPosition {
    BEFORE,
    AFTER,
    INTO_OR_BEFORE,
    INTO_OR_AFTER,
}
export enum TreeViewGridLines {
    NONE,
    HORIZONTAL,
    VERTICAL,
    BOTH,
}
export enum TreeViewMode {
    LINE,
    ITEM,
}
export enum Unit {
    PIXEL,
    POINTS,
    INCH,
    MM,
}
export enum UpdateType {
    CONTINUOUS,
    DISCONTINUOUS,
    DELAYED,
}
export enum Visibility {
    NONE,
    PARTIAL,
    FULL,
}
export enum WidgetHelpType {
    TOOLTIP,
    WHATS_THIS,
}
export enum WindowPosition {
    NONE,
    CENTER,
    MOUSE,
    CENTER_ALWAYS,
    CENTER_ON_PARENT,
}
export enum WindowType {
    TOPLEVEL,
    POPUP,
}
export enum WrapMode {
    NONE,
    CHAR,
    WORD,
    WORD_CHAR,
}
export enum AccelFlags {
    VISIBLE,
    LOCKED,
    MASK,
}
export enum ArgFlags {
    READABLE,
    WRITABLE,
    CONSTRUCT,
    CONSTRUCT_ONLY,
    CHILD_ARG,
}
export enum AttachOptions {
    EXPAND,
    SHRINK,
    FILL,
}
export enum ButtonAction {
    IGNORED,
    SELECTS,
    DRAGS,
    EXPANDS,
}
/**
 * These options can be used to influence the display and behaviour of a #GtkCalendar.
 * @bitfield 
 */
export enum CalendarDisplayOptions {
    /**
     * Specifies that the month and year should be displayed.
     */
    SHOW_HEADING,
    /**
     * Specifies that three letter day descriptions should be present.
     */
    SHOW_DAY_NAMES,
    /**
     * Prevents the user from switching months with the calendar.
     */
    NO_MONTH_CHANGE,
    /**
     * Displays each week numbers of the current year, down the
     * left side of the calendar.
     */
    SHOW_WEEK_NUMBERS,
    /**
     * Since GTK+ 2.4, this option is deprecated and ignored by GTK+.
     * The information on which day the calendar week starts is derived from the locale.
     */
    WEEK_START_MONDAY,
    /**
     * Just show an indicator, not the full details
     * text when details are provided. See gtk_calendar_set_detail_func().
     */
    SHOW_DETAILS,
}
export enum CellRendererState {
    SELECTED,
    PRELIT,
    INSENSITIVE,
    SORTED,
    FOCUSED,
}
export enum DebugFlag {
    MISC,
    PLUGSOCKET,
    TEXT,
    TREE,
    UPDATES,
    KEYBINDINGS,
    MULTIHEAD,
    MODULES,
    GEOMETRY,
    ICONTHEME,
    PRINTING,
    BUILDER,
}
export enum DestDefaults {
    MOTION,
    HIGHLIGHT,
    DROP,
    ALL,
}
export enum DialogFlags {
    MODAL,
    DESTROY_WITH_PARENT,
    NO_SEPARATOR,
}
export enum FileFilterFlags {
    FILENAME,
    URI,
    DISPLAY_NAME,
    MIME_TYPE,
}
/**
 * Used to specify options for gtk_icon_theme_lookup_icon()
 * @bitfield 
 */
export enum IconLookupFlags {
    /**
     * Never return SVG icons, even if gdk-pixbuf
     *   supports them. Cannot be used together with %GTK_ICON_LOOKUP_FORCE_SVG.
     */
    NO_SVG,
    /**
     * Return SVG icons, even if gdk-pixbuf
     *   doesn't support them.
     *   Cannot be used together with %GTK_ICON_LOOKUP_NO_SVG.
     */
    FORCE_SVG,
    /**
     * When passed to
     *   gtk_icon_theme_lookup_icon() includes builtin icons
     *   as well as files. For a builtin icon, gtk_icon_info_get_filename()
     *   returns %NULL and you need to call gtk_icon_info_get_builtin_pixbuf().
     */
    USE_BUILTIN,
    /**
     * Try to shorten icon name at '-'
     *   characters before looking at inherited themes. For more general
     *   fallback, see gtk_icon_theme_choose_icon(). Since 2.12.
     */
    GENERIC_FALLBACK,
    /**
     * Always return the icon scaled to the
     *   requested size. Since 2.14.
     */
    FORCE_SIZE,
}
export enum ObjectFlags {
    IN_DESTRUCTION,
    FLOATING,
    RESERVED_1,
    RESERVED_2,
}
export enum PrivateFlags {
    USER_STYLE,
    RESIZE_PENDING,
    HAS_POINTER,
    SHADOWED,
    HAS_SHAPE_MASK,
    IN_REPARENT,
    DIRECTION_SET,
    DIRECTION_LTR,
    ANCHORED,
    CHILD_VISIBLE,
    REDRAW_ON_ALLOC,
    ALLOC_NEEDED,
    REQUEST_NEEDED,
}
export enum RcFlags {
    FG,
    BG,
    TEXT,
    BASE,
}
export enum RecentFilterFlags {
    URI,
    DISPLAY_NAME,
    MIME_TYPE,
    APPLICATION,
    GROUP,
    AGE,
}
export enum SignalRunType {
    FIRST,
    LAST,
    BOTH,
    NO_RECURSE,
    ACTION,
    NO_HOOKS,
}
export enum TargetFlags {
    SAME_APP,
    SAME_WIDGET,
    OTHER_APP,
    OTHER_WIDGET,
}
export enum TextSearchFlags {
    VISIBLE_ONLY,
    TEXT_ONLY,
}
/**
 * Flags used to specify the supported drag targets.
 * @bitfield 
 */
export enum ToolPaletteDragTargets {
    /**
     * Support drag of items.
     */
    ITEMS,
    /**
     * Support drag of groups.
     */
    GROUPS,
}
export enum TreeModelFlags {
    ITERS_PERSIST,
    LIST_ONLY,
}
export enum UIManagerItemType {
    AUTO,
    MENUBAR,
    MENU,
    TOOLBAR,
    PLACEHOLDER,
    POPUP,
    MENUITEM,
    TOOLITEM,
    SEPARATOR,
    ACCELERATOR,
    POPUP_WITH_ACCELS,
}
/**
 * Tells about certain properties of the widget.
 * @bitfield 
 */
export enum WidgetFlags {
    /**
     * widgets without a real parent, as there are #GtkWindow<!-- -->s and
     *  #GtkMenu<!-- -->s have this flag set throughout their lifetime.
     *  Toplevel widgets always contain their own #GdkWindow.
     */
    TOPLEVEL,
    /**
     * Indicative for a widget that does not provide its own #GdkWindow.
     *  Visible action (e.g. drawing) is performed on the parent's #GdkWindow.
     */
    NO_WINDOW,
    /**
     * Set by gtk_widget_realize(), unset by gtk_widget_unrealize().
     *  A realized widget has an associated #GdkWindow.
     */
    REALIZED,
    /**
     * Set by gtk_widget_map(), unset by gtk_widget_unmap().
     *  Only realized widgets can be mapped. It means that gdk_window_show()
     *  has been called on the widgets window(s).
     */
    MAPPED,
    /**
     * Set by gtk_widget_show(), unset by gtk_widget_hide(). Implies that a
     *  widget will be mapped as soon as its parent is mapped.
     */
    VISIBLE,
    /**
     * Set and unset by gtk_widget_set_sensitive().
     *  The sensitivity of a widget determines whether it will receive
     *  certain events (e.g. button or key presses). One premise for
     *  the widget's sensitivity is to have this flag set.
     */
    SENSITIVE,
    /**
     * Set and unset by gtk_widget_set_sensitive() operations on the
     *  parents of the widget.
     *  This is the second premise for the widget's sensitivity. Once
     *  it has %GTK_SENSITIVE and %GTK_PARENT_SENSITIVE set, its state is
     *  effectively sensitive. This is expressed (and can be examined) by
     *  the #GTK_WIDGET_IS_SENSITIVE macro.
     */
    PARENT_SENSITIVE,
    /**
     * Determines whether a widget is able to handle focus grabs.
     */
    CAN_FOCUS,
    /**
     * Set by gtk_widget_grab_focus() for widgets that also
     *  have %GTK_CAN_FOCUS set. The flag will be unset once another widget
     *  grabs the focus.
     */
    HAS_FOCUS,
    /**
     * The widget is allowed to receive the default action via
     *  gtk_widget_grab_default() and will reserve space to draw the default if possible
     */
    CAN_DEFAULT,
    /**
     * The widget currently is receiving the default action and
     *  should be drawn appropriately if possible
     */
    HAS_DEFAULT,
    /**
     * Set by gtk_grab_add(), unset by gtk_grab_remove(). It means that the
     *  widget is in the grab_widgets stack, and will be the preferred one for
     *  receiving events other than ones of cosmetic value.
     */
    HAS_GRAB,
    /**
     * Indicates that the widget's style has been looked up through the rc
     *  mechanism. It does not imply that the widget actually had a style
     *  defined through the rc mechanism.
     */
    RC_STYLE,
    /**
     * Indicates that the widget is a composite child of its parent; see
     *  gtk_widget_push_composite_child(), gtk_widget_pop_composite_child().
     */
    COMPOSITE_CHILD,
    /**
     * Unused since before GTK+ 1.2, will be removed in a future version.
     */
    NO_REPARENT,
    /**
     * Set and unset by gtk_widget_set_app_paintable().
     *  Must be set on widgets whose window the application directly draws on,
     *  in order to keep GTK+ from overwriting the drawn stuff.  See
     *  <xref linkend="app-paintable-widgets"/> for a detailed
     *  description of this flag.
     */
    APP_PAINTABLE,
    /**
     * The widget when focused will receive the default action and have
     *  %GTK_HAS_DEFAULT set even if there is a different widget set as default.
     */
    RECEIVES_DEFAULT,
    /**
     * Set and unset by gtk_widget_set_double_buffered().
     *  Indicates that exposes done on the widget should be
     *  double-buffered.  See <xref linkend="double-buffering"/> for a
     *  detailed discussion of how double-buffering works in GTK+ and
     *  why you may want to disable it for special cases.
     */
    DOUBLE_BUFFERED,
    NO_SHOW_ALL,
}
export const ARG_READWRITE: number
export const BINARY_AGE: number
export const BUTTONBOX_DEFAULT: number
export const INPUT_ERROR: number
export const INTERFACE_AGE: number
export const MAJOR_VERSION: number
export const MAX_COMPOSE_LEN: number
export const MICRO_VERSION: number
export const MINOR_VERSION: number
export const NO_TEXT_INPUT_MOD_MASK: number
export const PAPER_NAME_A3: string
export const PAPER_NAME_A4: string
export const PAPER_NAME_A5: string
export const PAPER_NAME_B5: string
export const PAPER_NAME_EXECUTIVE: string
export const PAPER_NAME_LEGAL: string
export const PAPER_NAME_LETTER: string
export const PARAM_READABLE: number
export const PARAM_READWRITE: number
export const PARAM_WRITABLE: number
export const PATH_PRIO_MASK: number
export const PRINT_SETTINGS_COLLATE: string
export const PRINT_SETTINGS_DEFAULT_SOURCE: string
export const PRINT_SETTINGS_DITHER: string
export const PRINT_SETTINGS_DUPLEX: string
export const PRINT_SETTINGS_FINISHINGS: string
export const PRINT_SETTINGS_MEDIA_TYPE: string
export const PRINT_SETTINGS_NUMBER_UP: string
export const PRINT_SETTINGS_NUMBER_UP_LAYOUT: string
export const PRINT_SETTINGS_N_COPIES: string
export const PRINT_SETTINGS_ORIENTATION: string
export const PRINT_SETTINGS_OUTPUT_BIN: string
export const PRINT_SETTINGS_OUTPUT_FILE_FORMAT: string
export const PRINT_SETTINGS_OUTPUT_URI: string
export const PRINT_SETTINGS_PAGE_RANGES: string
export const PRINT_SETTINGS_PAGE_SET: string
export const PRINT_SETTINGS_PAPER_FORMAT: string
export const PRINT_SETTINGS_PAPER_HEIGHT: string
export const PRINT_SETTINGS_PAPER_WIDTH: string
export const PRINT_SETTINGS_PRINTER: string
export const PRINT_SETTINGS_PRINTER_LPI: string
export const PRINT_SETTINGS_PRINT_PAGES: string
export const PRINT_SETTINGS_QUALITY: string
export const PRINT_SETTINGS_RESOLUTION: string
export const PRINT_SETTINGS_RESOLUTION_X: string
export const PRINT_SETTINGS_RESOLUTION_Y: string
export const PRINT_SETTINGS_REVERSE: string
export const PRINT_SETTINGS_SCALE: string
export const PRINT_SETTINGS_USE_COLOR: string
export const PRINT_SETTINGS_WIN32_DRIVER_EXTRA: string
export const PRINT_SETTINGS_WIN32_DRIVER_VERSION: string
export const PRIORITY_REDRAW: number
export const PRIORITY_RESIZE: number
/**
 * The "About" item.
 * <inlinegraphic fileref="help-about.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ABOUT: string
/**
 * The "Add" item.
 * <inlinegraphic fileref="list-add.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ADD: string
/**
 * The "Apply" item.
 * <inlinegraphic fileref="gtk-apply.png" format="PNG"></inlinegraphic>
 */
export const STOCK_APPLY: string
/**
 * The "Bold" item.
 * <inlinegraphic fileref="format-text-bold.png" format="PNG"></inlinegraphic>
 */
export const STOCK_BOLD: string
/**
 * The "Cancel" item.
 * <inlinegraphic fileref="gtk-cancel.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CANCEL: string
/**
 * The "Caps Lock Warning" icon.
 * <inlinegraphic fileref="gtk-caps-lock-warning.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CAPS_LOCK_WARNING: string
/**
 * The "CD-Rom" item.
 * <inlinegraphic fileref="media-optical.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CDROM: string
/**
 * The "Clear" item.
 * <inlinegraphic fileref="edit-clear.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CLEAR: string
/**
 * The "Close" item.
 * <inlinegraphic fileref="window-close.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CLOSE: string
/**
 * The "Color Picker" item.
 * <inlinegraphic fileref="gtk-color-picker.png" format="PNG"></inlinegraphic>
 */
export const STOCK_COLOR_PICKER: string
/**
 * The "Connect" icon.
 * <inlinegraphic fileref="gtk-connect.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CONNECT: string
/**
 * The "Convert" item.
 * <inlinegraphic fileref="gtk-convert.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CONVERT: string
/**
 * The "Copy" item.
 * <inlinegraphic fileref="edit-copy.png" format="PNG"></inlinegraphic>
 */
export const STOCK_COPY: string
/**
 * The "Cut" item.
 * <inlinegraphic fileref="edit-cut.png" format="PNG"></inlinegraphic>
 */
export const STOCK_CUT: string
/**
 * The "Delete" item.
 * <inlinegraphic fileref="edit-delete.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DELETE: string
/**
 * The "Authentication" item.
 * <inlinegraphic fileref="dialog-password.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DIALOG_AUTHENTICATION: string
/**
 * The "Error" item.
 * <inlinegraphic fileref="dialog-error.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DIALOG_ERROR: string
/**
 * The "Information" item.
 * <inlinegraphic fileref="dialog-information.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DIALOG_INFO: string
/**
 * The "Question" item.
 * <inlinegraphic fileref="dialog-question.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DIALOG_QUESTION: string
/**
 * The "Warning" item.
 * <inlinegraphic fileref="dialog-warning.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DIALOG_WARNING: string
/**
 * The "Directory" icon.
 * <inlinegraphic fileref="folder.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DIRECTORY: string
/**
 * The "Discard" item.
 */
export const STOCK_DISCARD: string
/**
 * The "Disconnect" icon.
 * <inlinegraphic fileref="gtk-disconnect.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DISCONNECT: string
/**
 * The "Drag-And-Drop" icon.
 * <inlinegraphic fileref="gtk-dnd.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DND: string
/**
 * The "Drag-And-Drop multiple" icon.
 * <inlinegraphic fileref="gtk-dnd-multiple.png" format="PNG"></inlinegraphic>
 */
export const STOCK_DND_MULTIPLE: string
/**
 * The "Edit" item.
 * <inlinegraphic fileref="gtk-edit.png" format="PNG"></inlinegraphic>
 */
export const STOCK_EDIT: string
/**
 * The "Execute" item.
 * <inlinegraphic fileref="system-run.png" format="PNG"></inlinegraphic>
 */
export const STOCK_EXECUTE: string
/**
 * The "File" icon.
 * <inlinegraphic fileref="document-x-generic.png" format="PNG"></inlinegraphic>
 */
export const STOCK_FILE: string
/**
 * The "Find" item.
 * <inlinegraphic fileref="edit-find.png" format="PNG"></inlinegraphic>
 */
export const STOCK_FIND: string
/**
 * The "Find and Replace" item.
 * <inlinegraphic fileref="edit-find-replace.png" format="PNG"></inlinegraphic>
 */
export const STOCK_FIND_AND_REPLACE: string
/**
 * The "Floppy" item.
 * <inlinegraphic fileref="media-floppy.png" format="PNG"></inlinegraphic>
 */
export const STOCK_FLOPPY: string
/**
 * The "Fullscreen" item.
 * <inlinegraphic fileref="view-fullscreen.png" format="PNG"></inlinegraphic>
 */
export const STOCK_FULLSCREEN: string
/**
 * The "Bottom" item.
 * <inlinegraphic fileref="go-bottom.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GOTO_BOTTOM: string
/**
 * The "First" item.
 * <inlinegraphic fileref="go-first-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="go-first-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GOTO_FIRST: string
/**
 * The "Last" item.
 * <inlinegraphic fileref="go-last-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="go-last-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GOTO_LAST: string
/**
 * The "Top" item.
 * <inlinegraphic fileref="go-top.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GOTO_TOP: string
/**
 * The "Back" item.
 * <inlinegraphic fileref="go-previous-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="go-previous-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GO_BACK: string
/**
 * The "Down" item.
 * <inlinegraphic fileref="go-down.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GO_DOWN: string
/**
 * The "Forward" item.
 * <inlinegraphic fileref="go-next-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="go-next-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GO_FORWARD: string
/**
 * The "Up" item.
 * <inlinegraphic fileref="go-up.png" format="PNG"></inlinegraphic>
 */
export const STOCK_GO_UP: string
/**
 * The "Harddisk" item.
 * <inlinegraphic fileref="drive-harddisk.png" format="PNG"></inlinegraphic>
 */
export const STOCK_HARDDISK: string
/**
 * The "Help" item.
 * <inlinegraphic fileref="help-contents.png" format="PNG"></inlinegraphic>
 */
export const STOCK_HELP: string
/**
 * The "Home" item.
 * <inlinegraphic fileref="go-home.png" format="PNG"></inlinegraphic>
 */
export const STOCK_HOME: string
/**
 * The "Indent" item.
 * <inlinegraphic fileref="gtk-indent-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="gtk-indent-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_INDENT: string
/**
 * The "Index" item.
 * <inlinegraphic fileref="gtk-index.png" format="PNG"></inlinegraphic>
 */
export const STOCK_INDEX: string
/**
 * The "Info" item.
 * <inlinegraphic fileref="dialog-information.png" format="PNG"></inlinegraphic>
 */
export const STOCK_INFO: string
/**
 * The "Italic" item.
 * <inlinegraphic fileref="format-text-italic.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ITALIC: string
/**
 * The "Jump to" item.
 * <inlinegraphic fileref="go-jump-ltr.png" format="PNG"></inlinegraphic>
 * RTL-variant
 * <inlinegraphic fileref="go-jump-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_JUMP_TO: string
/**
 * The "Center" item.
 * <inlinegraphic fileref="format-justify-center.png" format="PNG"></inlinegraphic>
 */
export const STOCK_JUSTIFY_CENTER: string
/**
 * The "Fill" item.
 * <inlinegraphic fileref="format-justify-fill.png" format="PNG"></inlinegraphic>
 */
export const STOCK_JUSTIFY_FILL: string
/**
 * The "Left" item.
 * <inlinegraphic fileref="format-justify-left.png" format="PNG"></inlinegraphic>
 */
export const STOCK_JUSTIFY_LEFT: string
/**
 * The "Right" item.
 * <inlinegraphic fileref="format-justify-right.png" format="PNG"></inlinegraphic>
 */
export const STOCK_JUSTIFY_RIGHT: string
/**
 * The "Leave Fullscreen" item.
 * <inlinegraphic fileref="view-restore.png" format="PNG"></inlinegraphic>
 */
export const STOCK_LEAVE_FULLSCREEN: string
/**
 * The "Media Forward" item.
 * <inlinegraphic fileref="media-seek-forward-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="media-seek-forward-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_FORWARD: string
/**
 * The "Media Next" item.
 * <inlinegraphic fileref="media-skip-forward-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="media-skip-forward-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_NEXT: string
/**
 * The "Media Pause" item.
 * <inlinegraphic fileref="media-playback-pause.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_PAUSE: string
/**
 * The "Media Play" item.
 * <inlinegraphic fileref="media-playback-start-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="media-playback-start-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_PLAY: string
/**
 * The "Media Previous" item.
 * <inlinegraphic fileref="media-skip-backward-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="media-skip-backward-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_PREVIOUS: string
/**
 * The "Media Record" item.
 * <inlinegraphic fileref="media-record.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_RECORD: string
/**
 * The "Media Rewind" item.
 * <inlinegraphic fileref="media-seek-backward-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="media-seek-backward-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_REWIND: string
/**
 * The "Media Stop" item.
 * <inlinegraphic fileref="media-playback-stop.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MEDIA_STOP: string
/**
 * The "Missing image" icon.
 * <inlinegraphic fileref="image-missing.png" format="PNG"></inlinegraphic>
 */
export const STOCK_MISSING_IMAGE: string
/**
 * The "Network" item.
 * <inlinegraphic fileref="network-idle.png" format="PNG"></inlinegraphic>
 */
export const STOCK_NETWORK: string
/**
 * The "New" item.
 * <inlinegraphic fileref="document-new.png" format="PNG"></inlinegraphic>
 */
export const STOCK_NEW: string
/**
 * The "No" item.
 * <inlinegraphic fileref="gtk-no.png" format="PNG"></inlinegraphic>
 */
export const STOCK_NO: string
/**
 * The "OK" item.
 * <inlinegraphic fileref="gtk-ok.png" format="PNG"></inlinegraphic>
 */
export const STOCK_OK: string
/**
 * The "Open" item.
 * <inlinegraphic fileref="document-open.png" format="PNG"></inlinegraphic>
 */
export const STOCK_OPEN: string
/**
 * The "Landscape Orientation" item.
 * <inlinegraphic fileref="gtk-orientation-landscape.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ORIENTATION_LANDSCAPE: string
/**
 * The "Portrait Orientation" item.
 * <inlinegraphic fileref="gtk-orientation-portrait.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ORIENTATION_PORTRAIT: string
/**
 * The "Reverse Landscape Orientation" item.
 * <inlinegraphic fileref="gtk-orientation-reverse-landscape.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ORIENTATION_REVERSE_LANDSCAPE: string
/**
 * The "Reverse Portrait Orientation" item.
 * <inlinegraphic fileref="gtk-orientation-reverse-portrait.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ORIENTATION_REVERSE_PORTRAIT: string
/**
 * The "Page Setup" item.
 * <inlinegraphic fileref="gtk-page-setup.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PAGE_SETUP: string
/**
 * The "Paste" item.
 * <inlinegraphic fileref="edit-paste.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PASTE: string
/**
 * The "Preferences" item.
 * <inlinegraphic fileref="gtk-preferences.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PREFERENCES: string
/**
 * The "Print" item.
 * <inlinegraphic fileref="document-print.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PRINT: string
/**
 * The "Print Error" icon.
 * <inlinegraphic fileref="printer-error.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PRINT_ERROR: string
/**
 * The "Print Paused" icon.
 * <inlinegraphic fileref="printer-paused.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PRINT_PAUSED: string
/**
 * The "Print Preview" item.
 * <inlinegraphic fileref="document-print-preview.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PRINT_PREVIEW: string
/**
 * The "Print Report" icon.
 * <inlinegraphic fileref="printer-info.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PRINT_REPORT: string
/**
 * The "Print Warning" icon.
 * <inlinegraphic fileref="printer-warning.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PRINT_WARNING: string
/**
 * The "Properties" item.
 * <inlinegraphic fileref="document-properties.png" format="PNG"></inlinegraphic>
 */
export const STOCK_PROPERTIES: string
/**
 * The "Quit" item.
 * <inlinegraphic fileref="application-exit.png" format="PNG"></inlinegraphic>
 */
export const STOCK_QUIT: string
/**
 * The "Redo" item.
 * <inlinegraphic fileref="edit-redo-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="edit-redo-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_REDO: string
/**
 * The "Refresh" item.
 * <inlinegraphic fileref="view-refresh.png" format="PNG"></inlinegraphic>
 */
export const STOCK_REFRESH: string
/**
 * The "Remove" item.
 * <inlinegraphic fileref="list-remove.png" format="PNG"></inlinegraphic>
 */
export const STOCK_REMOVE: string
/**
 * The "Revert" item.
 * <inlinegraphic fileref="document-revert-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="document-revert-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_REVERT_TO_SAVED: string
/**
 * The "Save" item.
 * <inlinegraphic fileref="document-save.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SAVE: string
/**
 * The "Save As" item.
 * <inlinegraphic fileref="document-save-as.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SAVE_AS: string
/**
 * The "Select All" item.
 * <inlinegraphic fileref="edit-select-all.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SELECT_ALL: string
/**
 * The "Color" item.
 * <inlinegraphic fileref="gtk-select-color.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SELECT_COLOR: string
/**
 * The "Font" item.
 * <inlinegraphic fileref="gtk-font.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SELECT_FONT: string
/**
 * The "Ascending" item.
 * <inlinegraphic fileref="view-sort-ascending.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SORT_ASCENDING: string
/**
 * The "Descending" item.
 * <inlinegraphic fileref="view-sort-descending.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SORT_DESCENDING: string
/**
 * The "Spell Check" item.
 * <inlinegraphic fileref="tools-check-spelling.png" format="PNG"></inlinegraphic>
 */
export const STOCK_SPELL_CHECK: string
/**
 * The "Stop" item.
 * <inlinegraphic fileref="process-stop.png" format="PNG"></inlinegraphic>
 */
export const STOCK_STOP: string
/**
 * The "Strikethrough" item.
 * <inlinegraphic fileref="format-text-strikethrough.png" format="PNG"></inlinegraphic>
 */
export const STOCK_STRIKETHROUGH: string
/**
 * The "Undelete" item.
 * <inlinegraphic fileref="gtk-undelete-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="gtk-undelete-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_UNDELETE: string
/**
 * The "Underline" item.
 * <inlinegraphic fileref="format-text-underline.png" format="PNG"></inlinegraphic>
 */
export const STOCK_UNDERLINE: string
/**
 * The "Undo" item.
 * <inlinegraphic fileref="edit-undo-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="edit-undo-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_UNDO: string
/**
 * The "Unindent" item.
 * <inlinegraphic fileref="format-indent-less-ltr.png" format="PNG"></inlinegraphic>
 * RTL variant
 * <inlinegraphic fileref="format-indent-less-rtl.png" format="PNG"></inlinegraphic>
 */
export const STOCK_UNINDENT: string
/**
 * The "Yes" item.
 * <inlinegraphic fileref="gtk-yes.png" format="PNG"></inlinegraphic>
 */
export const STOCK_YES: string
/**
 * The "Zoom 100%" item.
 * <inlinegraphic fileref="zoom-original.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ZOOM_100: string
/**
 * The "Zoom to Fit" item.
 * <inlinegraphic fileref="zoom-fit-best.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ZOOM_FIT: string
/**
 * The "Zoom In" item.
 * <inlinegraphic fileref="zoom-in.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ZOOM_IN: string
/**
 * The "Zoom Out" item.
 * <inlinegraphic fileref="zoom-out.png" format="PNG"></inlinegraphic>
 */
export const STOCK_ZOOM_OUT: string
export const TEXT_VIEW_PRIORITY_VALIDATE: number
export const TOGGLE_GROUP_MOD_MASK: number
export const TYPE_FUNDAMENTAL_LAST: number
/**
 * Finds the first accelerator in any #GtkAccelGroup attached
 * to `object` that matches `accel_key` and `accel_mods,` and
 * activates that accelerator.
 * @param object the #GObject, usually a #GtkWindow, on which                 to activate the accelerator.
 * @param accelKey accelerator keyval from a key event
 * @param accelMods keyboard state mask from a key event
 */
export function accelGroupsActivate(object: GObject.Object, accelKey: number, accelMods: Gdk.ModifierType): boolean
/**
 * Gets a list of all accel groups which are attached to `object`.
 * @param object a #GObject, usually a #GtkWindow
 */
export function accelGroupsFromObject(object: GObject.Object): AccelGroup[]
/**
 * Gets the value set by gtk_accelerator_set_default_mod_mask().
 */
export function acceleratorGetDefaultModMask(): number
/**
 * Converts an accelerator keyval and modifier mask into a string
 * which can be used to represent the accelerator to the user.
 * @param acceleratorKey accelerator keyval
 * @param acceleratorMods accelerator modifier mask
 */
export function acceleratorGetLabel(acceleratorKey: number, acceleratorMods: Gdk.ModifierType): string
/**
 * Converts an accelerator keyval and modifier mask
 * into a string parseable by gtk_accelerator_parse().
 * For example, if you pass in #GDK_q and #GDK_CONTROL_MASK,
 * this function returns "&lt;Control&gt;q".
 * 
 * If you need to display accelerators in the user interface,
 * see gtk_accelerator_get_label().
 * @param acceleratorKey accelerator keyval
 * @param acceleratorMods accelerator modifier mask
 */
export function acceleratorName(acceleratorKey: number, acceleratorMods: Gdk.ModifierType): string
/**
 * Parses a string representing an accelerator. The
 * format looks like "&lt;Control&gt;a" or "&lt;Shift&gt;&lt;Alt&gt;F1" or
 * "&lt;Release&gt;z" (the last one is for key release).
 * The parser is fairly liberal and allows lower or upper case,
 * and also abbreviations such as "&lt;Ctl&gt;" and "&lt;Ctrl&gt;".
 * Key names are parsed using gdk_keyval_from_name(). For character keys the
 * name is not the symbol, but the lowercase name, e.g. one would use
 * "&lt;Ctrl&gt;minus" instead of "&lt;Ctrl&gt;-".
 * 
 * If the parse fails, `accelerator_key` and `accelerator_mods` will
 * be set to 0 (zero).
 * @param accelerator string representing an accelerator
 */
export function acceleratorParse(accelerator: string): [ /* acceleratorKey */ number, /* acceleratorMods */ Gdk.ModifierType ]
/**
 * Sets the modifiers that will be considered significant for keyboard
 * accelerators. The default mod mask is #GDK_CONTROL_MASK |
 * #GDK_SHIFT_MASK | #GDK_MOD1_MASK | #GDK_SUPER_MASK |
 * #GDK_HYPER_MASK | #GDK_META_MASK, that is, Control, Shift, Alt,
 * Super, Hyper and Meta. Other modifiers will by default be ignored
 * by #GtkAccelGroup.
 * You must include at least the three modifiers Control, Shift
 * and Alt in any value you pass to this function.
 * 
 * The default mod mask should be changed on application startup,
 * before using any accelerator groups.
 * @param defaultModMask accelerator modifier mask
 */
export function acceleratorSetDefaultModMask(defaultModMask: Gdk.ModifierType): void
/**
 * Determines whether a given keyval and modifier mask constitute
 * a valid keyboard accelerator. For example, the #GDK_a keyval
 * plus #GDK_CONTROL_MASK is valid - this is a "Ctrl+a" accelerator.
 * But, you can't, for instance, use the #GDK_Control_L keyval
 * as an accelerator.
 * @param keyval a GDK keyval
 * @param modifiers modifier mask
 */
export function acceleratorValid(keyval: number, modifiers: Gdk.ModifierType): boolean
/**
 * Returns %TRUE if dialogs are expected to use an alternative
 * button order on the screen `screen`. See
 * gtk_dialog_set_alternative_button_order() for more details
 * about alternative button order.
 * 
 * If you need to use this function, you should probably connect
 * to the ::notify:gtk-alternative-button-order signal on the
 * #GtkSettings object associated to `screen,` in order to be
 * notified if the button order setting changes.
 * @param screen a #GdkScreen, or %NULL to use the default screen
 */
export function alternativeDialogButtonOrder(screen: Gdk.Screen | null): boolean
/**
 * Override or install a new key binding for `keyval` with `modifiers` on
 * `binding_set`.
 * @param bindingSet a #GtkBindingSet to add a signal to
 * @param keyval key value
 * @param modifiers key modifier
 * @param signalName signal name to be bound
 * @param bindingArgs      list of #GtkBindingArg signal arguments
 */
export function bindingEntryAddSignall(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType, signalName: string, bindingArgs: BindingArg[]): void
/**
 * Clears a binding entry.
 * @param bindingSet binding set to clear an entry of
 * @param keyval key value of binding to clear
 * @param modifiers key modifier of binding to clear
 */
export function bindingEntryClear(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType): void
/**
 * Remove a binding previously installed via
 * gtk_binding_entry_add_signal() on `binding_set`.
 * @param bindingSet a #GtkBindingSet to remove an entry of
 * @param keyval key value of binding to remove
 * @param modifiers key modifier of binding to remove
 */
export function bindingEntryRemove(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType): void
/**
 * Install a binding on `binding_set` which causes key lookups
 * to be aborted, to prevent bindings from lower priority sets
 * to be activated.
 * @param bindingSet a #GtkBindingSet to skip an entry of
 * @param keyval key value of binding to skip
 * @param modifiers key modifier of binding to skip
 */
export function bindingEntrySkip(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType): void
/**
 * Parse a binding entry from a gtkrc file.
 * @param scanner GtkRC scanner
 */
export function bindingParseBinding(scanner: GLib.Scanner): number
/**
 * Find a binding set by its globally unique name. The `set_name` can
 * either be a name used for gtk_binding_set_new() or the type name of
 * a class used in gtk_binding_set_by_class().
 * @param setName unique binding set name
 */
export function bindingSetFind(setName: string): BindingSet
/**
 * Find a key binding matching `keyval` and `modifiers` and activate the
 * binding on `object`.
 * @param object object to activate when binding found
 * @param keyval key value of the binding
 * @param modifiers key modifier of the binding
 */
export function bindingsActivate(object: Object, keyval: number, modifiers: Gdk.ModifierType): boolean
/**
 * Looks up key bindings for `object` to find one matching
 * `event,` and if one was found, activate it.
 * @param object a #GtkObject (generally must be a widget)
 * @param event a #GdkEventKey
 */
export function bindingsActivateEvent(object: Object, event: Gdk.EventKey): boolean
export function builderErrorQuark(): GLib.Quark
/**
 * Checks that the GTK+ library in use is compatible with the
 * given version. Generally you would pass in the constants
 * #GTK_MAJOR_VERSION, #GTK_MINOR_VERSION, #GTK_MICRO_VERSION
 * as the three arguments to this function; that produces
 * a check that the library in use is compatible with
 * the version of GTK+ the application or module was compiled
 * against.
 * 
 * Compatibility is defined by two things: first the version
 * of the running library is newer than the version
 * `required_major`.required_minor.`required_micro`. Second
 * the running library must be binary compatible with the
 * version `required_major`.required_minor.`required_micro`
 * (same major version.)
 * 
 * This function is primarily for GTK+ modules; the module
 * can call this function to check that it wasn't loaded
 * into an incompatible version of GTK+. However, such a
 * a check isn't completely reliable, since the module may be
 * linked against an old version of GTK+ and calling the
 * old version of gtk_check_version(), but still get loaded
 * into an application using a newer version of GTK+.
 * @param requiredMajor the required major version.
 * @param requiredMinor the required minor version.
 * @param requiredMicro the required micro version.
 */
export function checkVersion(requiredMajor: number, requiredMinor: number, requiredMicro: number): string
export function ctreeNodeGetType(): GObject.GType
/**
 * Prevents gtk_init(), gtk_init_check(), gtk_init_with_args() and
 * gtk_parse_args() from automatically
 * calling <literal>setlocale (LC_ALL, "")</literal>. You would
 * want to use this function if you wanted to set the locale for
 * your program to something other than the user's locale, or if
 * you wanted to set different values for different locale categories.
 * 
 * Most programs should not need to call this function.
 */
export function disableSetlocale(): void
/**
 * Initiates a drag on the source side. The function
 * only needs to be used when the application is
 * starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is #NULL, then GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used by GTK+ to get information about the start position of the drag, for
 * example if the `event` is a GDK_MOTION_NOTIFY.
 * 
 * Generally there are three cases when you want to start a drag by hand by calling
 * this function:
 * 
 * 1. During a button-press-event handler, if you want to start a drag immediately
 * when the user presses the mouse button.  Pass the `event` that you have in your
 * button-press-event handler.
 * 
 * 2. During a motion-notify-event handler, if you want to start a drag when the mouse
 * moves past a certain threshold distance after a button-press.  Pass the `event` that you
 * have in your motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).  If you
 * can really not pass a real event, pass #NULL instead.
 * @param widget the source widget.
 * @param targets The targets (data formats) in which the    source can provide the data.
 * @param actions A bitmask of the allowed drag actions for this drag.
 * @param button The button the user clicked to start the drag.
 * @param event The event that triggered the start of the drag.
 */
export function dragBegin(widget: Widget, targets: TargetList, actions: Gdk.DragAction, button: number, event: Gdk.Event): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param widget a #GtkWidget
 * @param startX X coordinate of start of drag
 * @param startY Y coordinate of start of drag
 * @param currentX current X coordinate
 * @param currentY current Y coordinate
 */
export function dragCheckThreshold(widget: Widget, startX: number, startY: number, currentX: number, currentY: number): boolean
/**
 * Add the image targets supported by #GtkSelection to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 * @param widget a #GtkWidget that's a drag destination
 */
export function dragDestAddImageTargets(widget: Widget): void
/**
 * Add the text targets supported by #GtkSelection to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 * @param widget a #GtkWidget that's a drag destination
 */
export function dragDestAddTextTargets(widget: Widget): void
/**
 * Add the URI targets supported by #GtkSelection to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 * @param widget a #GtkWidget that's a drag destination
 */
export function dragDestAddUriTargets(widget: Widget): void
export function dragDestFindTarget(widget: Widget, context: Gdk.DragContext, targetList: TargetList | null): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @param widget a #GtkWidget
 */
export function dragDestGetTargetList(widget: Widget): TargetList
/**
 * Returns whether the widget has been configured to always
 * emit ::drag-motion signals.
 * @param widget a #GtkWidget that's a drag destination
 */
export function dragDestGetTrackMotion(widget: Widget): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget's drag-and-drop signals
 * (#GtkWidget:drag-motion, #GtkWidget:drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget's #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget:drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget:drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget:drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget:drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There's no way to set a default action here, you can use the
 * #GtkWidget:drag-motion callback for that. Here's an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * |[
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param widget a #GtkWidget
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of #GtkTargetEntry<!-- -->s     indicating the drop types that this `widget` will accept, or %NULL.     Later you can access the list with gtk_drag_dest_get_target_list()     and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this `widget`.
 */
export function dragDestSet(widget: Widget, flags: DestDefaults, targets: TargetEntry[] | null, actions: Gdk.DragAction): void
export function dragDestSetProxy(widget: Widget, proxyWindow: Gdk.Window, protocol: Gdk.DragProtocol, useCoordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param widget a #GtkWidget that's a drag destination
 * @param targetList list of droppable targets, or %NULL for none
 */
export function dragDestSetTargetList(widget: Widget, targetList: TargetList | null): void
/**
 * Tells the widget to emit ::drag-motion and ::drag-leave
 * events regardless of the targets and the %GTK_DEST_DEFAULT_MOTION
 * flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param widget a #GtkWidget that's a drag destination
 * @param trackMotion whether to accept all targets
 */
export function dragDestSetTrackMotion(widget: Widget, trackMotion: boolean): void
export function dragDestUnset(widget: Widget): void
export function dragFinish(context: Gdk.DragContext, success: boolean, del: boolean, time: number): void
export function dragGetData(widget: Widget, context: Gdk.DragContext, target: Gdk.Atom, time: number): void
/**
 * Determines the source widget for a drag.
 * @param context a (destination side) drag context
 */
export function dragGetSourceWidget(context: Gdk.DragContext): Widget
export function dragHighlight(widget: Widget): void
/**
 * Changes the default drag icon. GTK+ retains references for the
 * arguments, and will release them when they are no longer needed.
 * @param colormap the colormap of the icon
 * @param pixmap the image data for the icon
 * @param mask the transparency mask for an image, or %NULL
 * @param hotX The X offset within `widget` of the hotspot.
 * @param hotY The Y offset within `widget` of the hotspot.
 */
export function dragSetDefaultIcon(colormap: Gdk.Colormap, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null, hotX: number, hotY: number): void
/**
 * Sets the icon for a particular drag to the default
 * icon.
 * @param context the context for a drag. (This must be called              with a  context for the source side of a drag)
 */
export function dragSetIconDefault(context: Gdk.DragContext): void
/**
 * Sets the icon for a given drag from a named themed icon. See
 * the docs for #GtkIconTheme for more details. Note that the
 * size of the icon depends on the icon theme (the icon is
 * loaded at the symbolic size #GTK_ICON_SIZE_DND), thus
 * `hot_x` and `hot_y` have to be used with care.
 * @param context the context for a drag. (This must be called            with a context for the source side of a drag)
 * @param iconName name of icon to use
 * @param hotX the X offset of the hotspot within the icon
 * @param hotY the Y offset of the hotspot within the icon
 */
export function dragSetIconName(context: Gdk.DragContext, iconName: string, hotX: number, hotY: number): void
/**
 * Sets `pixbuf` as the icon for a given drag.
 * @param context the context for a drag. (This must be called            with a  context for the source side of a drag)
 * @param pixbuf the #GdkPixbuf to use as the drag icon.
 * @param hotX the X offset within `widget` of the hotspot.
 * @param hotY the Y offset within `widget` of the hotspot.
 */
export function dragSetIconPixbuf(context: Gdk.DragContext, pixbuf: GdkPixbuf.Pixbuf, hotX: number, hotY: number): void
/**
 * Sets `pixmap` as the icon for a given drag. GTK+ retains
 * references for the arguments, and will release them when
 * they are no longer needed. In general, gtk_drag_set_icon_pixbuf()
 * will be more convenient to use.
 * @param context the context for a drag. (This must be called            with a  context for the source side of a drag)
 * @param colormap the colormap of the icon
 * @param pixmap the image data for the icon
 * @param mask the transparency mask for the icon or %NULL for none.
 * @param hotX the X offset within `pixmap` of the hotspot.
 * @param hotY the Y offset within `pixmap` of the hotspot.
 */
export function dragSetIconPixmap(context: Gdk.DragContext, colormap: Gdk.Colormap, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null, hotX: number, hotY: number): void
/**
 * Sets the icon for a given drag from a stock ID.
 * @param context the context for a drag. (This must be called            with a  context for the source side of a drag)
 * @param stockId the ID of the stock icon to use for the drag.
 * @param hotX the X offset within the icon of the hotspot.
 * @param hotY the Y offset within the icon of the hotspot.
 */
export function dragSetIconStock(context: Gdk.DragContext, stockId: string, hotX: number, hotY: number): void
/**
 * Changes the icon for a widget to a given widget. GTK+
 * will not destroy the icon, so if you don't want
 * it to persist, you should connect to the "drag-end"
 * signal and destroy it yourself.
 * @param context the context for a drag. (This must be called           with a  context for the source side of a drag)
 * @param widget a toplevel window to use as an icon.
 * @param hotX the X offset within `widget` of the hotspot.
 * @param hotY the Y offset within `widget` of the hotspot.
 */
export function dragSetIconWidget(context: Gdk.DragContext, widget: Widget, hotX: number, hotY: number): void
/**
 * Add the writable image targets supported by #GtkSelection to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 * @param widget a #GtkWidget that's is a drag source
 */
export function dragSourceAddImageTargets(widget: Widget): void
/**
 * Add the text targets supported by #GtkSelection to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 * @param widget a #GtkWidget that's is a drag source
 */
export function dragSourceAddTextTargets(widget: Widget): void
/**
 * Add the URI targets supported by #GtkSelection to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 * @param widget a #GtkWidget that's is a drag source
 */
export function dragSourceAddUriTargets(widget: Widget): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @param widget a #GtkWidget
 */
export function dragSourceGetTargetList(widget: Widget): TargetList
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param widget a #GtkWidget
 * @param startButtonMask the bitmask of buttons that can start the drag
 * @param targets the table of targets that the drag will support,     may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
export function dragSourceSet(widget: Widget, startButtonMask: Gdk.ModifierType, targets: TargetEntry[] | null, actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a pixmap/mask. GTK+ retains references for the arguments, and
 * will release them when they are no longer needed.
 * Use gtk_drag_source_set_icon_pixbuf() instead.
 * @param widget a #GtkWidget
 * @param colormap the colormap of the icon
 * @param pixmap the image data for the icon
 * @param mask the transparency mask for an image.
 */
export function dragSourceSetIcon(widget: Widget, colormap: Gdk.Colormap, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param widget a #GtkWidget
 * @param iconName name of icon to use
 */
export function dragSourceSetIconName(widget: Widget, iconName: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param widget a #GtkWidget
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
export function dragSourceSetIconPixbuf(widget: Widget, pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param widget a #GtkWidget
 * @param stockId the ID of the stock icon to use
 */
export function dragSourceSetIconStock(widget: Widget, stockId: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param widget a #GtkWidget that's a drag source
 * @param targetList list of draggable targets, or %NULL for none
 */
export function dragSourceSetTargetList(widget: Widget, targetList: TargetList | null): void
export function dragSourceUnset(widget: Widget): void
export function dragUnhighlight(widget: Widget): void
/**
 * Draws an arrow in the given rectangle on `window` using the given
 * parameters. `arrow_type` determines the direction of the arrow.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param arrowType the type of arrow to draw
 * @param fill %TRUE if the arrow tip should be filled
 * @param x x origin of the rectangle to draw the arrow in
 * @param y y origin of the rectangle to draw the arrow in
 * @param width width of the rectangle to draw the arrow in
 * @param height height of the rectangle to draw the arrow in
 */
export function drawArrow(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, arrowType: ArrowType, fill: boolean, x: number, y: number, width: number, height: number): void
/**
 * Draws a box on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param x x origin of the box
 * @param y y origin of the box
 * @param width the width of the box
 * @param height the height of the box
 */
export function drawBox(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws a box in `window` using the given style and state and shadow type,
 * leaving a gap in one side.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param x x origin of the rectangle
 * @param y y origin of the rectangle
 * @param width width of the rectangle
 * @param height width of the rectangle
 * @param gapSide side in which to leave the gap
 * @param gapX starting position of the gap
 * @param gapWidth width of the gap
 */
export function drawBoxGap(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number): void
/**
 * Draws a check button indicator in the given rectangle on `window` with
 * the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param x x origin of the rectangle to draw the check in
 * @param y y origin of the rectangle to draw the check in
 * @param width the width of the rectangle to draw the check in
 * @param height the height of the rectangle to draw the check in
 */
export function drawCheck(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws a diamond in the given rectangle on `window` using the given
 * parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param x x origin of the rectangle to draw the diamond in
 * @param y y origin of the rectangle to draw the diamond in
 * @param width width of the rectangle to draw the diamond in
 * @param height height of the rectangle to draw the diamond in
 */
export function drawDiamond(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws an expander as used in #GtkTreeView.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param x the x position to draw the expander at
 * @param y the y position to draw the expander at
 * @param expanderStyle the style to draw the expander in
 */
export function drawExpander(style: Style, window: Gdk.Window, stateType: StateType, x: number, y: number, expanderStyle: ExpanderStyle): void
/**
 * Draws an extension, i.e. a notebook tab.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param x x origin of the extension
 * @param y y origin of the extension
 * @param width width of the extension
 * @param height width of the extension
 * @param gapSide the side on to which the extension is attached
 */
export function drawExtension(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number, gapSide: PositionType): void
/**
 * Draws a flat box on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param x x origin of the box
 * @param y y origin of the box
 * @param width the width of the box
 * @param height the height of the box
 */
export function drawFlatBox(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws a focus indicator around the given rectangle on `window` using the
 * given style.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param x the x origin of the rectangle around which to draw a focus indicator
 * @param y the y origin of the rectangle around which to draw a focus indicator
 * @param width the width of the rectangle around which to draw a focus indicator
 * @param height the height of the rectangle around which to draw a focus indicator
 */
export function drawFocus(style: Style, window: Gdk.Window, x: number, y: number, width: number, height: number): void
/**
 * Draws a handle as used in #GtkHandleBox and #GtkPaned.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param x x origin of the handle
 * @param y y origin of the handle
 * @param width with of the handle
 * @param height height of the handle
 * @param orientation the orientation of the handle
 */
export function drawHandle(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number, orientation: Orientation): void
/**
 * Draws a horizontal line from (`x1`, `y)` to (`x2`, `y)` in `window`
 * using the given style and state.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param x1 the starting x coordinate
 * @param x2 the ending x coordinate
 * @param y the y coordinate
 */
export function drawHline(style: Style, window: Gdk.Window, stateType: StateType, x1: number, x2: number, y: number): void
/**
 * Draws a text caret on `drawable` at `location`. This is not a style function
 * but merely a convenience function for drawing the standard cursor shape.
 * @param widget a #GtkWidget
 * @param drawable a #GdkDrawable
 * @param area rectangle to which the output is clipped, or %NULL if the        output should not be clipped
 * @param location location where to draw the cursor (`location->`width is ignored)
 * @param isPrimary if the cursor should be the primary cursor color.
 * @param direction whether the cursor is left-to-right or             right-to-left. Should never be #GTK_TEXT_DIR_NONE
 * @param drawArrow %TRUE to draw a directional arrow on the        cursor. Should be %FALSE unless the cursor is split.
 */
export function drawInsertionCursor(widget: Widget, drawable: Gdk.Drawable, area: Gdk.Rectangle | null, location: Gdk.Rectangle, isPrimary: boolean, direction: TextDirection, drawArrow: boolean): void
/**
 * Draws a layout on `window` using the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param useText whether to use the text or foreground            graphics context of `style`
 * @param x x origin
 * @param y y origin
 * @param layout the layout to draw
 */
export function drawLayout(style: Style, window: Gdk.Window, stateType: StateType, useText: boolean, x: number, y: number, layout: Pango.Layout): void
/**
 * Draws a radio button indicator in the given rectangle on `window` with
 * the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param x x origin of the rectangle to draw the option in
 * @param y y origin of the rectangle to draw the option in
 * @param width the width of the rectangle to draw the option in
 * @param height the height of the rectangle to draw the option in
 */
export function drawOption(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws a polygon on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param points an array of #GdkPoint<!-- -->s
 * @param npoints length of `points`
 * @param fill %TRUE if the polygon should be filled
 */
export function drawPolygon(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, points: Gdk.Point, npoints: number, fill: boolean): void
/**
 * Draws a resize grip in the given rectangle on `window` using the given
 * parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param edge the edge in which to draw the resize grip
 * @param x the x origin of the rectangle in which to draw the resize grip
 * @param y the y origin of the rectangle in which to draw the resize grip
 * @param width the width of the rectangle in which to draw the resize grip
 * @param height the height of the rectangle in which to draw the resize grip
 */
export function drawResizeGrip(style: Style, window: Gdk.Window, stateType: StateType, edge: Gdk.WindowEdge, x: number, y: number, width: number, height: number): void
/**
 * Draws a shadow around the given rectangle in `window`
 * using the given style and state and shadow type.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param x x origin of the rectangle
 * @param y y origin of the rectangle
 * @param width width of the rectangle
 * @param height width of the rectangle
 */
export function drawShadow(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws a shadow around the given rectangle in `window`
 * using the given style and state and shadow type, leaving a
 * gap in one side.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param x x origin of the rectangle
 * @param y y origin of the rectangle
 * @param width width of the rectangle
 * @param height width of the rectangle
 * @param gapSide side in which to leave the gap
 * @param gapX starting position of the gap
 * @param gapWidth width of the gap
 */
export function drawShadowGap(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number): void
/**
 * Draws a slider in the given rectangle on `window` using the
 * given style and orientation.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType a shadow
 * @param x the x origin of the rectangle in which to draw a slider
 * @param y the y origin of the rectangle in which to draw a slider
 * @param width the width of the rectangle in which to draw a slider
 * @param height the height of the rectangle in which to draw a slider
 * @param orientation the orientation to be used
 */
export function drawSlider(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number, orientation: Orientation): void
/**
 * Draws a text string on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param x x origin
 * @param y y origin
 * @param string the string to draw
 */
export function drawString(style: Style, window: Gdk.Window, stateType: StateType, x: number, y: number, string: string): void
/**
 * Draws an option menu tab (i.e. the up and down pointing arrows)
 * in the given rectangle on `window` using the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param x x origin of the rectangle to draw the tab in
 * @param y y origin of the rectangle to draw the tab in
 * @param width the width of the rectangle to draw the tab in
 * @param height the height of the rectangle to draw the tab in
 */
export function drawTab(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, x: number, y: number, width: number, height: number): void
/**
 * Draws a vertical line from (`x,` `y1`_) to (`x,` `y2`_) in `window`
 * using the given style and state.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param y1 the starting y coordinate
 * @param y2 the ending y coordinate
 * @param x the x coordinate
 */
export function drawVline(style: Style, window: Gdk.Window, stateType: StateType, y1: number, y2: number, x: number): void
export function eventsPending(): boolean
export function exit(errorCode: number): void
export function false_TODO(): boolean
/**
 * Registers an error quark for #GtkFileChooser if necessary.
 */
export function fileChooserErrorQuark(): GLib.Quark
export function gcRelease(gc: Gdk.GC): void
/**
 * Obtains a copy of the event currently being processed by GTK+.  For
 * example, if you get a "clicked" signal from #GtkButton, the current
 * event will be the #GdkEventButton that triggered the "clicked"
 * signal. The returned event must be freed with gdk_event_free().
 * If there is no current event, the function returns %NULL.
 */
export function getCurrentEvent(): Gdk.Event
/**
 * If there is a current event and it has a state field, place
 * that state field in `state` and return %TRUE, otherwise return
 * %FALSE.
 */
export function getCurrentEventState(): [ /* returnType */ boolean, /* state */ Gdk.ModifierType ]
/**
 * If there is a current event and it has a timestamp, return that
 * timestamp, otherwise return %GDK_CURRENT_TIME.
 */
export function getCurrentEventTime(): number
/**
 * Returns the #PangoLanguage for the default language currently in
 * effect. (Note that this can change over the life of an
 * application.)  The default language is derived from the current
 * locale. It determines, for example, whether GTK+ uses the
 * right-to-left or left-to-right text direction.
 * 
 * This function is equivalent to pango_language_get_default().  See
 * that function for details.
 */
export function getDefaultLanguage(): Pango.Language
/**
 * If `event` is %NULL or the event was not associated with any widget,
 * returns %NULL, otherwise returns the widget that received the event
 * originally.
 * @param event a #GdkEvent
 */
export function getEventWidget(event: Gdk.Event): Widget
/**
 * Returns a #GOptionGroup for the commandline arguments recognized
 * by GTK+ and GDK. You should add this group to your #GOptionContext
 * with g_option_context_add_group(), if you are using
 * g_option_context_parse() to parse your commandline arguments.
 * @param openDefaultDisplay whether to open the default display    when parsing the commandline arguments
 */
export function getOptionGroup(openDefaultDisplay: boolean): GLib.OptionGroup
export function grabAdd(widget: Widget): void
/**
 * Queries the current grab of the default window group.
 */
export function grabGetCurrent(): Widget
export function grabRemove(widget: Widget): void
/**
 * Looks up the icon size associated with `name`.
 * @param name the name to look up.
 */
export function iconSizeFromName(name: string): number
/**
 * Gets the canonical name of the given icon size. The returned string
 * is statically allocated and should not be freed.
 * @param size a #GtkIconSize.
 */
export function iconSizeGetName(size: number): string
/**
 * Obtains the pixel size of a semantic icon size, possibly
 * modified by user preferences for the default #GtkSettings.
 * (See gtk_icon_size_lookup_for_settings().)
 * Normally `size` would be
 * #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
 * isn't normally needed, gtk_widget_render_icon() is the usual
 * way to get an icon for rendering, then just look at the size of
 * the rendered pixbuf. The rendered pixbuf may not even correspond to
 * the width/height returned by gtk_icon_size_lookup(), because themes
 * are free to render the pixbuf however they like, including changing
 * the usual size.
 * @param size an icon size
 */
export function iconSizeLookup(size: number): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
/**
 * Obtains the pixel size of a semantic icon size, possibly
 * modified by user preferences for a particular
 * #GtkSettings. Normally `size` would be
 * #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
 * isn't normally needed, gtk_widget_render_icon() is the usual
 * way to get an icon for rendering, then just look at the size of
 * the rendered pixbuf. The rendered pixbuf may not even correspond to
 * the width/height returned by gtk_icon_size_lookup(), because themes
 * are free to render the pixbuf however they like, including changing
 * the usual size.
 * @param settings a #GtkSettings object, used to determine   which set of user preferences to used.
 * @param size an icon size
 */
export function iconSizeLookupForSettings(settings: Settings, size: number): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
/**
 * Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,
 * etc. Returns the integer value for the size.
 * @param name name of the icon size
 * @param width the icon width
 * @param height the icon height
 */
export function iconSizeRegister(name: string, width: number, height: number): number
/**
 * Registers `alias` as another name for `target`.
 * So calling gtk_icon_size_from_name() with `alias` as argument
 * will return `target`.
 * @param alias an alias for `target`
 * @param target an existing icon size
 */
export function iconSizeRegisterAlias(alias: string, target: number): void
export function iconThemeErrorQuark(): GLib.Quark
export function idleRemove(idleHandlerId: number): void
export function idleRemoveByData(data: object | null): void
/**
 * Call this function before using any other GTK+ functions in your GUI
 * applications.  It will initialize everything needed to operate the
 * toolkit and parses some standard command line options.
 * 
 * `argc` and `argv` are adjusted accordingly so your own code will
 * never see those standard arguments.
 * 
 * Note that there are some alternative ways to initialize GTK+:
 * if you are calling gtk_parse_args(), gtk_init_check(),
 * gtk_init_with_args() or g_option_context_parse() with
 * the option group returned by gtk_get_option_group(),
 * you <emphasis>don't</emphasis> have to call gtk_init().
 * 
 * <note><para>
 * This function will terminate your program if it was unable to
 * initialize the windowing system for some reason. If you want
 * your program to fall back to a textual interface you want to
 * call gtk_init_check() instead.
 * </para></note>
 * 
 * <note><para>
 * Since 2.18, GTK+ calls <literal>signal (SIGPIPE, SIG_IGN)</literal>
 * during initialization, to ignore SIGPIPE signals, since these are
 * almost never wanted in graphical applications. If you do need to
 * handle SIGPIPE for some reason, reset the handler after gtk_init(),
 * but notice that other libraries (e.g. libdbus or gvfs) might do
 * similar things.
 * </para></note>
 * @param argv Address of the     <parameter>argv</parameter> parameter of main(). Any options     understood by GTK+ are stripped before return.
 */
export function init(argv: string[] | null): /* argv */ string[] | null
/**
 * This function does the same work as gtk_init() with only
 * a single change: It does not terminate the program if the GUI can't be
 * initialized. Instead it returns %FALSE on failure.
 * 
 * This way the application can fall back to some other means of communication
 * with the user - for example a curses or command line interface.
 * @param argv Address of the <parameter>argv</parameter> parameter of main().   Any parameters understood by gtk_init() are stripped before return.
 */
export function initCheck(argv: string[] | null): [ /* returnType */ boolean, /* argv */ string[] | null ]
/**
 * This function does the same work as gtk_init_check().
 * Additionally, it allows you to add your own commandline options,
 * and it automatically generates nicely formatted
 * <option>--help</option> output. Note that your program will
 * be terminated after writing out the help output.
 * @param argv a pointer to the array of    command line arguments.
 * @param parameterString a string which is displayed in    the first line of <option>--help</option> output, after    <literal><replaceable>programname</replaceable> [OPTION...]</literal>
 * @param entries a %NULL-terminated array    of #GOptionEntry<!-- -->s describing the options of your program
 * @param translationDomain a translation domain to use for translating    the <option>--help</option> output for the options in `entries`    and the `parameter_string` with gettext(), or %NULL
 */
export function initWithArgs(argv: string[], parameterString: string, entries: GLib.OptionEntry[], translationDomain: string): [ /* returnType */ boolean, /* argv */ string[] ]
export function inputRemove(inputHandlerId: number): void
export function keySnooperRemove(snooperHandlerId: number): void
export function main(): void
export function mainDoEvent(event: Gdk.Event): void
export function mainIteration(): boolean
export function mainIterationDo(blocking: boolean): boolean
export function mainLevel(): number
export function mainQuit(): void
export function marshalBOOLEANPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalBOOLEANPOINTERINTINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalBOOLEANPOINTERINTINTUINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalBOOLEANPOINTERPOINTERINTINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalBOOLEANPOINTERSTRINGSTRINGPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalBOOLEANVOID(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalENUMENUM(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalINTPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalINTPOINTERCHARCHAR(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDENUMFLOAT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDENUMFLOATBOOLEAN(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDINTINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDINTINTPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERINTINTPOINTERUINTUINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERPOINTERPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERPOINTERUINTUINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERSTRINGSTRING(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERUINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERUINTENUM(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDPOINTERUINTUINT(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDSTRINGINTPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDUINTPOINTERUINTENUMENUMPOINTER(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDUINTPOINTERUINTUINTENUM(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
export function marshalVOIDUINTSTRING(closure: GObject.TClosure, returnValue: any, nParamValues: number, paramValues: any, invocationHint: object | null, marshalData: object | null): void
/**
 * Draws an arrow in the given rectangle on `window` using the given
 * parameters. `arrow_type` determines the direction of the arrow.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param arrowType the type of arrow to draw
 * @param fill %TRUE if the arrow tip should be filled
 * @param x x origin of the rectangle to draw the arrow in
 * @param y y origin of the rectangle to draw the arrow in
 * @param width width of the rectangle to draw the arrow in
 * @param height height of the rectangle to draw the arrow in
 */
export function paintArrow(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, arrowType: ArrowType, fill: boolean, x: number, y: number, width: number, height: number): void
/**
 * Draws a box on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the box
 * @param y y origin of the box
 * @param width the width of the box
 * @param height the height of the box
 */
export function paintBox(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a box in `window` using the given style and state and shadow type,
 * leaving a gap in one side.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle
 * @param y y origin of the rectangle
 * @param width width of the rectangle
 * @param height width of the rectangle
 * @param gapSide side in which to leave the gap
 * @param gapX starting position of the gap
 * @param gapWidth width of the gap
 */
export function paintBoxGap(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number): void
/**
 * Draws a check button indicator in the given rectangle on `window` with
 * the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle to draw the check in
 * @param y y origin of the rectangle to draw the check in
 * @param width the width of the rectangle to draw the check in
 * @param height the height of the rectangle to draw the check in
 */
export function paintCheck(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a diamond in the given rectangle on `window` using the given
 * parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle to draw the diamond in
 * @param y y origin of the rectangle to draw the diamond in
 * @param width width of the rectangle to draw the diamond in
 * @param height height of the rectangle to draw the diamond in
 */
export function paintDiamond(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws an expander as used in #GtkTreeView. `x` and `y` specify the
 * center the expander. The size of the expander is determined by the
 * "expander-size" style property of `widget`.  (If widget is not
 * specified or doesn't have an "expander-size" property, an
 * unspecified default size will be used, since the caller doesn't
 * have sufficient information to position the expander, this is
 * likely not useful.) The expander is expander_size pixels tall
 * in the collapsed position and expander_size pixels wide in the
 * expanded position.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x the x position to draw the expander at
 * @param y the y position to draw the expander at
 * @param expanderStyle the style to draw the expander in; determines   whether the expander is collapsed, expanded, or in an   intermediate state.
 */
export function paintExpander(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, expanderStyle: ExpanderStyle): void
/**
 * Draws an extension, i.e. a notebook tab.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the extension
 * @param y y origin of the extension
 * @param width width of the extension
 * @param height width of the extension
 * @param gapSide the side on to which the extension is attached
 */
export function paintExtension(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number, gapSide: PositionType): void
/**
 * Draws a flat box on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the box
 * @param y y origin of the box
 * @param width the width of the box
 * @param height the height of the box
 */
export function paintFlatBox(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a focus indicator around the given rectangle on `window` using the
 * given style.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x the x origin of the rectangle around which to draw a focus indicator
 * @param y the y origin of the rectangle around which to draw a focus indicator
 * @param width the width of the rectangle around which to draw a focus indicator
 * @param height the height of the rectangle around which to draw a focus indicator
 */
export function paintFocus(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a handle as used in #GtkHandleBox and #GtkPaned.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the handle
 * @param y y origin of the handle
 * @param width with of the handle
 * @param height height of the handle
 * @param orientation the orientation of the handle
 */
export function paintHandle(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number, orientation: Orientation): void
/**
 * Draws a horizontal line from (`x1`, `y)` to (`x2`, `y)` in `window`
 * using the given style and state.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area rectangle to which the output is clipped, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x1 the starting x coordinate
 * @param x2 the ending x coordinate
 * @param y the y coordinate
 */
export function paintHline(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x1: number, x2: number, y: number): void
/**
 * Draws a layout on `window` using the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param useText whether to use the text or foreground            graphics context of `style`
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin
 * @param y y origin
 * @param layout the layout to draw
 */
export function paintLayout(style: Style, window: Gdk.Window, stateType: StateType, useText: boolean, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, layout: Pango.Layout): void
/**
 * Draws a radio button indicator in the given rectangle on `window` with
 * the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle to draw the option in
 * @param y y origin of the rectangle to draw the option in
 * @param width the width of the rectangle to draw the option in
 * @param height the height of the rectangle to draw the option in
 */
export function paintOption(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a polygon on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param points an array of #GdkPoint<!-- -->s
 * @param nPoints length of `points`
 * @param fill %TRUE if the polygon should be filled
 */
export function paintPolygon(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, points: Gdk.Point, nPoints: number, fill: boolean): void
/**
 * Draws a resize grip in the given rectangle on `window` using the given
 * parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param edge the edge in which to draw the resize grip
 * @param x the x origin of the rectangle in which to draw the resize grip
 * @param y the y origin of the rectangle in which to draw the resize grip
 * @param width the width of the rectangle in which to draw the resize grip
 * @param height the height of the rectangle in which to draw the resize grip
 */
export function paintResizeGrip(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, edge: Gdk.WindowEdge, x: number, y: number, width: number, height: number): void
/**
 * Draws a shadow around the given rectangle in `window`
 * using the given style and state and shadow type.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param area clip rectangle or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle
 * @param y y origin of the rectangle
 * @param width width of the rectangle
 * @param height width of the rectangle
 */
export function paintShadow(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a shadow around the given rectangle in `window`
 * using the given style and state and shadow type, leaving a
 * gap in one side.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle
 * @param y y origin of the rectangle
 * @param width width of the rectangle
 * @param height width of the rectangle
 * @param gapSide side in which to leave the gap
 * @param gapX starting position of the gap
 * @param gapWidth width of the gap
 */
export function paintShadowGap(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number): void
/**
 * Draws a slider in the given rectangle on `window` using the
 * given style and orientation.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType a shadow
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x the x origin of the rectangle in which to draw a slider
 * @param y the y origin of the rectangle in which to draw a slider
 * @param width the width of the rectangle in which to draw a slider
 * @param height the height of the rectangle in which to draw a slider
 * @param orientation the orientation to be used
 */
export function paintSlider(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number, orientation: Orientation): void
/**
 * Draws a spinner on `window` using the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget (may be %NULL)
 * @param detail a style detail (may be %NULL)
 * @param step the nth step, a value between 0 and #GtkSpinner:num-steps
 * @param x the x origin of the rectangle in which to draw the spinner
 * @param y the y origin of the rectangle in which to draw the spinner
 * @param width the width of the rectangle in which to draw the spinner
 * @param height the height of the rectangle in which to draw the spinner
 */
export function paintSpinner(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, step: number, x: number, y: number, width: number, height: number): void
/**
 * Draws a text string on `window` with the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin
 * @param y y origin
 * @param string the string to draw
 */
export function paintString(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, string: string): void
/**
 * Draws an option menu tab (i.e. the up and down pointing arrows)
 * in the given rectangle on `window` using the given parameters.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param shadowType the type of shadow to draw
 * @param area clip rectangle, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param x x origin of the rectangle to draw the tab in
 * @param y y origin of the rectangle to draw the tab in
 * @param width the width of the rectangle to draw the tab in
 * @param height the height of the rectangle to draw the tab in
 */
export function paintTab(style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, x: number, y: number, width: number, height: number): void
/**
 * Draws a vertical line from (`x,` `y1`_) to (`x,` `y2`_) in `window`
 * using the given style and state.
 * @param style a #GtkStyle
 * @param window a #GdkWindow
 * @param stateType a state
 * @param area rectangle to which the output is clipped, or %NULL if the        output should not be clipped
 * @param widget the widget
 * @param detail a style detail
 * @param y1 the starting y coordinate
 * @param y2 the ending y coordinate
 * @param x the x coordinate
 */
export function paintVline(style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle | null, widget: Widget | null, detail: string | null, y1: number, y2: number, x: number): void
/**
 * Returns the name of the default paper size, which
 * depends on the current locale.
 */
export function paperSizeGetDefault(): string
/**
 * Creates a list of known paper sizes.
 * @param includeCustom whether to include custom paper sizes     as defined in the page setup dialog
 */
export function paperSizeGetPaperSizes(includeCustom: boolean): PaperSize[]
/**
 * Parses command line arguments, and initializes global
 * attributes of GTK+, but does not actually open a connection
 * to a display. (See gdk_display_open(), gdk_get_display_arg_name())
 * 
 * Any arguments used by GTK+ or GDK are removed from the array and
 * `argc` and `argv` are updated accordingly.
 * 
 * There is no need to call this function explicitely if you are using
 * gtk_init(), or gtk_init_check().
 * @param argv a pointer to the array of     command line arguments
 */
export function parseArgs(argv: string[]): [ /* returnType */ boolean, /* argv */ string[] ]
/**
 * Registers an error quark for #GtkPrintOperation if necessary.
 */
export function printErrorQuark(): GLib.Quark
/**
 * Runs a page setup dialog, letting the user modify the values from
 * `page_setup`. If the user cancels the dialog, the returned #GtkPageSetup
 * is identical to the passed in `page_setup,` otherwise it contains the
 * modifications done in the dialog.
 * 
 * Note that this function may use a recursive mainloop to show the page
 * setup dialog. See gtk_print_run_page_setup_dialog_async() if this is
 * a problem.
 * @param parent transient parent
 * @param pageSetup an existing #GtkPageSetup
 * @param settings a #GtkPrintSettings
 */
export function printRunPageSetupDialog(parent: Window | null, pageSetup: PageSetup | null, settings: PrintSettings): PageSetup
/**
 * Sends an event to a widget, propagating the event to parent widgets
 * if the event remains unhandled. Events received by GTK+ from GDK
 * normally begin in gtk_main_do_event(). Depending on the type of
 * event, existence of modal dialogs, grabs, etc., the event may be
 * propagated; if so, this function is used. gtk_propagate_event()
 * calls gtk_widget_event() on each widget it decides to send the
 * event to.  So gtk_widget_event() is the lowest-level function; it
 * simply emits the "event" and possibly an event-specific signal on a
 * widget.  gtk_propagate_event() is a bit higher-level, and
 * gtk_main_do_event() is the highest level.
 * 
 * All that said, you most likely don't want to use any of these
 * functions; synthesizing events is rarely needed. Consider asking on
 * the mailing list for better ways to achieve your goals. For
 * example, use gdk_window_invalidate_rect() or
 * gtk_widget_queue_draw() instead of making up expose events.
 * @param widget a #GtkWidget
 * @param event an event
 */
export function propagateEvent(widget: Widget, event: Gdk.Event): void
export function quitAddDestroy(mainLevel: number, object: Object): void
export function quitRemove(quitHandlerId: number): void
export function quitRemoveByData(data: object | null): void
export function rcAddClassStyle(rcStyle: RcStyle, pattern: string): void
/**
 * Adds a file to the list of files to be parsed at the
 * end of gtk_init().
 * @param filename the pathname to the file. If `filename` is not absolute, it    is searched in the current directory.
 */
export function rcAddDefaultFile(filename: string): void
export function rcAddWidgetClassStyle(rcStyle: RcStyle, pattern: string): void
export function rcAddWidgetNameStyle(rcStyle: RcStyle, pattern: string): void
/**
 * Searches for a theme engine in the GTK+ search path. This function
 * is not useful for applications and should not be used.
 * @param moduleFile name of a theme engine
 */
export function rcFindModuleInPath(moduleFile: string): string
/**
 * Looks up a file in pixmap path for the specified #GtkSettings.
 * If the file is not found, it outputs a warning message using
 * g_warning() and returns %NULL.
 * @param settings a #GtkSettings
 * @param scanner Scanner used to get line number information for the   warning message, or %NULL
 * @param pixmapFile name of the pixmap file to locate.
 */
export function rcFindPixmapInPath(settings: Settings, scanner: GLib.Scanner, pixmapFile: string): string
/**
 * Retrieves the current list of RC files that will be parsed
 * at the end of gtk_init().
 */
export function rcGetDefaultFiles(): string[]
/**
 * Obtains the path to the IM modules file. See the documentation
 * of the <link linkend="im-module-file"><envar>GTK_IM_MODULE_FILE</envar></link>
 * environment variable for more details.
 */
export function rcGetImModuleFile(): string
/**
 * Obtains the path in which to look for IM modules. See the documentation
 * of the <link linkend="im-module-path"><envar>GTK_PATH</envar></link>
 * environment variable for more details about looking up modules. This
 * function is useful solely for utilities supplied with GTK+ and should
 * not be used by applications under normal circumstances.
 */
export function rcGetImModulePath(): string
/**
 * Returns a directory in which GTK+ looks for theme engines.
 * For full information about the search for theme engines,
 * see the docs for <envar>GTK_PATH</envar> in
 * <xref linkend="gtk-running"/>.
 */
export function rcGetModuleDir(): string
/**
 * Finds all matching RC styles for a given widget,
 * composites them together, and then creates a
 * #GtkStyle representing the composite appearance.
 * (GTK+ actually keeps a cache of previously
 * created styles, so a new style may not be
 * created.)
 * @param widget a #GtkWidget
 */
export function rcGetStyle(widget: Widget): Style
/**
 * Creates up a #GtkStyle from styles defined in a RC file by providing
 * the raw components used in matching. This function may be useful
 * when creating pseudo-widgets that should be themed like widgets but
 * don't actually have corresponding GTK+ widgets. An example of this
 * would be items inside a GNOME canvas widget.
 * 
 * The action of gtk_rc_get_style() is similar to:
 * |[
 *  gtk_widget_path (widget, NULL, &path, NULL);
 *  gtk_widget_class_path (widget, NULL, &class_path, NULL);
 *  gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget),
 *                             path, class_path,
 *                             G_OBJECT_TYPE (widget));
 * ```
 * 
 * @param settings a #GtkSettings object
 * @param widgetPath the widget path to use when looking up the     style, or %NULL if no matching against the widget path should be done
 * @param classPath the class path to use when looking up the style,     or %NULL if no matching against the class path should be done.
 * @param type a type that will be used along with parent types of this type     when matching against class styles, or #G_TYPE_NONE
 */
export function rcGetStyleByPaths(settings: Settings, widgetPath: string | null, classPath: string | null, type: GObject.GType): Style
export function rcGetThemeDir(): string
export function rcParse(filename: string): void
/**
 * Parses a color in the <link linkend="color=format">format</link> expected
 * in a RC file.
 * 
 * Note that theme engines should use gtk_rc_parse_color_full() in
 * order to support symbolic colors.
 * @param scanner a #GScanner
 */
export function rcParseColor(scanner: GLib.Scanner): [ /* returnType */ number, /* color */ Gdk.Color ]
/**
 * Parses a color in the <link linkend="color=format">format</link> expected
 * in a RC file. If `style` is not %NULL, it will be consulted to resolve
 * references to symbolic colors.
 * @param scanner a #GScanner
 * @param style a #GtkRcStyle, or %NULL
 */
export function rcParseColorFull(scanner: GLib.Scanner, style: RcStyle | null): [ /* returnType */ number, /* color */ Gdk.Color ]
export function rcParsePriority(scanner: GLib.Scanner, priority: PathPriorityType): number
export function rcParseState(scanner: GLib.Scanner, state: StateType): number
export function rcParseString(rcString: string): void
/**
 * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
 * or gtk_widget_class_install_style_property_parser() which parses
 * borders in the form
 * <literal>"{ left, right, top, bottom }"</literal> for integers
 * %left, %right, %top and %bottom.
 * @param pspec a #GParamSpec
 * @param gstring the #GString to be parsed
 * @param propertyValue a #GValue which must hold boxed values.
 */
export function rcPropertyParseBorder(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
/**
 * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
 * or gtk_widget_class_install_style_property_parser() which parses a
 * color given either by its name or in the form
 * <literal>{ red, green, blue }</literal> where %red, %green and
 * %blue are integers between 0 and 65535 or floating-point numbers
 * between 0 and 1.
 * @param pspec a #GParamSpec
 * @param gstring the #GString to be parsed
 * @param propertyValue a #GValue which must hold #GdkColor values.
 */
export function rcPropertyParseColor(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
/**
 * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
 * or gtk_widget_class_install_style_property_parser() which parses a single
 * enumeration value.
 * 
 * The enumeration value can be specified by its name, its nickname or
 * its numeric value. For consistency with flags parsing, the value
 * may be surrounded by parentheses.
 * @param pspec a #GParamSpec
 * @param gstring the #GString to be parsed
 * @param propertyValue a #GValue which must hold enum values.
 */
export function rcPropertyParseEnum(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
/**
 * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
 * or gtk_widget_class_install_style_property_parser() which parses flags.
 * 
 * Flags can be specified by their name, their nickname or
 * numerically. Multiple flags can be specified in the form
 * <literal>"( flag1 | flag2 | ... )"</literal>.
 * @param pspec a #GParamSpec
 * @param gstring the #GString to be parsed
 * @param propertyValue a #GValue which must hold flags values.
 */
export function rcPropertyParseFlags(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
/**
 * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
 * or gtk_widget_class_install_style_property_parser() which parses a
 * requisition in the form
 * <literal>"{ width, height }"</literal> for integers %width and %height.
 * @param pspec a #GParamSpec
 * @param gstring the #GString to be parsed
 * @param propertyValue a #GValue which must hold boxed values.
 */
export function rcPropertyParseRequisition(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
/**
 * If the modification time on any previously read file for the
 * default #GtkSettings has changed, discard all style information
 * and then reread all previously read RC files.
 */
export function rcReparseAll(): boolean
/**
 * If the modification time on any previously read file
 * for the given #GtkSettings has changed, discard all style information
 * and then reread all previously read RC files.
 * @param settings a #GtkSettings
 * @param forceLoad load whether or not anything changed
 */
export function rcReparseAllForSettings(settings: Settings, forceLoad: boolean): boolean
/**
 * This function recomputes the styles for all widgets that use a
 * particular #GtkSettings object. (There is one #GtkSettings object
 * per #GdkScreen, see gtk_settings_get_for_screen()); It is useful
 * when some global parameter has changed that affects the appearance
 * of all widgets, because when a widget gets a new style, it will
 * both redraw and recompute any cached information about its
 * appearance. As an example, it is used when the default font size
 * set by the operating system changes. Note that this function
 * doesn't affect widgets that have a style set explicitely on them
 * with gtk_widget_set_style().
 * @param settings a #GtkSettings
 */
export function rcResetStyles(settings: Settings): void
/**
 * Sets the list of files that GTK+ will read at the
 * end of gtk_init().
 * @param filenames A %NULL-terminated list of filenames.
 */
export function rcSetDefaultFiles(filenames: string): void
export function recentChooserErrorQuark(): GLib.Quark
export function recentManagerErrorQuark(): GLib.Quark
/**
 * Converts a color from RGB space to HSV.
 * Input values must be in the [0.0, 1.0] range;
 * output values will be in the same range.
 * @param r Red
 * @param g Green
 * @param b Blue
 */
export function rgbToHsv(r: number, g: number, b: number): [ /* h */ number, /* s */ number, /* v */ number ]
/**
 * Appends a specified target to the list of supported targets for a
 * given widget and selection.
 * @param widget a #GtkTarget
 * @param selection the selection
 * @param target target to add.
 * @param info A unsigned integer which will be passed back to the application.
 */
export function selectionAddTarget(widget: Widget, selection: Gdk.Atom, target: Gdk.Atom, info: number): void
/**
 * Prepends a table of targets to the list of supported targets
 * for a given widget and selection.
 * @param widget a #GtkWidget
 * @param selection the selection
 * @param targets a table of targets to add
 */
export function selectionAddTargets(widget: Widget, selection: Gdk.Atom, targets: TargetEntry[]): void
/**
 * The default handler for the #GtkWidget::selection-clear-event
 * signal.
 * @param widget a #GtkWidget
 * @param event the event
 */
export function selectionClear(widget: Widget, event: Gdk.EventSelection): boolean
/**
 * Remove all targets registered for the given selection for the
 * widget.
 * @param widget a #GtkWidget
 * @param selection an atom representing a selection
 */
export function selectionClearTargets(widget: Widget, selection: Gdk.Atom): void
/**
 * Requests the contents of a selection. When received,
 * a "selection-received" signal will be generated.
 * @param widget The widget which acts as requestor
 * @param selection Which selection to get
 * @param target Form of information desired (e.g., STRING)
 * @param time Time of request (usually of triggering event)        In emergency, you could use #GDK_CURRENT_TIME
 */
export function selectionConvert(widget: Widget, selection: Gdk.Atom, target: Gdk.Atom, time: number): boolean
/**
 * Claims ownership of a given selection for a particular widget,
 * or, if `widget` is %NULL, release ownership of the selection.
 * @param widget a #GtkWidget, or %NULL.
 * @param selection an interned atom representing the selection to claim
 * @param time timestamp with which to claim the selection
 */
export function selectionOwnerSet(widget: Widget | null, selection: Gdk.Atom, time: number): boolean
/**
 * Claim ownership of a given selection for a particular widget, or,
 * if `widget` is %NULL, release ownership of the selection.
 * @param display the #Gdkdisplay where the selection is set
 * @param widget new selection owner (a #GdkWidget), or %NULL.
 * @param selection an interned atom representing the selection to claim.
 * @param time timestamp with which to claim the selection
 */
export function selectionOwnerSetForDisplay(display: Gdk.Display, widget: Widget | null, selection: Gdk.Atom, time: number): boolean
/**
 * Removes all handlers and unsets ownership of all
 * selections for a widget. Called when widget is being
 * destroyed. This function will not generally be
 * called by applications.
 * @param widget a #GtkWidget
 */
export function selectionRemoveAll(widget: Widget): void
/**
 * Initializes internationalization support for GTK+. gtk_init()
 * automatically does this, so there is typically no point
 * in calling this function.
 * 
 * If you are calling this function because you changed the locale
 * after GTK+ is was initialized, then calling this function
 * may help a bit. (Note, however, that changing the locale
 * after GTK+ is initialized may produce inconsistent results and
 * is not really supported.)
 * 
 * In detail - sets the current locale according to the
 * program environment. This is the same as calling the C library function
 * <literal>setlocale (LC_ALL, "")</literal> but also takes care of the
 * locale specific setup of the windowing system used by GDK.
 */
export function setLocale(): string
/**
 * This is a convenience function for launching the default application
 * to show the uri. The uri must be of a form understood by GIO (i.e. you
 * need to install gvfs to get support for uri schemes such as http://
 * or ftp://, as only local files are handled by GIO itself).
 * Typical examples are
 * <simplelist>
 *   <member><filename>file:///home/gnome/pict.jpg</filename></member>
 *   <member><filename>http://www.gnome.org</filename></member>
 *   <member><filename>mailto:me&commat;gnome.org</filename></member>
 * </simplelist>
 * Ideally the timestamp is taken from the event triggering
 * the gtk_show_uri() call. If timestamp is not known you can take
 * %GDK_CURRENT_TIME.
 * 
 * This function can be used as a replacement for gnome_vfs_url_show()
 * and gnome_url_show().
 * @param screen screen to show the uri on or %NULL for the default screen
 * @param uri the uri to show
 * @param timestamp a timestamp to prevent focus stealing.
 */
export function showUri(screen: Gdk.Screen | null, uri: string, timestamp: number): boolean
export function signalEmitStopByName(object: Object, name: string): void
export function signalEmitv(object: Object, signalId: number, args: Arg): void
export function signalEmitvByName(object: Object, name: string, args: Arg): void
export function signalNewv(name: string, signalFlags: SignalRunType, objectType: GObject.GType, functionOffset: number, marshaller: GObject.SignalCMarshaller, returnVal: GObject.GType, nArgs: number, args: GObject.GType): number
/**
 * Registers each of the stock items in `items`. If an item already
 * exists with the same stock ID as one of the `items,` the old item
 * gets replaced. The stock items are copied, so GTK+ does not hold
 * any pointer into `items` and `items` can be freed. Use
 * gtk_stock_add_static() if `items` is persistent and GTK+ need not
 * copy the array.
 * @param items a #GtkStockItem or array of items
 */
export function stockAdd(items: StockItem[]): void
/**
 * Same as gtk_stock_add(), but doesn't copy `items,` so
 * `items` must persist until application exit.
 * @param items a #GtkStockItem or array of #GtkStockItem
 */
export function stockAddStatic(items: StockItem[]): void
/**
 * Retrieves a list of all known stock IDs added to a #GtkIconFactory
 * or registered with gtk_stock_add(). The list must be freed with g_slist_free(),
 * and each string in the list must be freed with g_free().
 */
export function stockListIds(): string[]
/**
 * Fills `item` with the registered values for `stock_id,` returning %TRUE
 * if `stock_id` was known.
 * @param stockId a stock item name
 */
export function stockLookup(stockId: string): [ /* returnType */ boolean, /* item */ StockItem ]
/**
 * Sets a function to be used for translating the `label` of
 * a stock item.
 * 
 * If no function is registered for a translation domain,
 * g_dgettext() is used.
 * 
 * The function is used for all stock items whose
 * `translation_domain` matches `domain`. Note that it is possible
 * to use strings different from the actual gettext translation domain
 * of your application for this, as long as your #GtkTranslateFunc uses
 * the correct domain when calling dgettext(). This can be useful, e.g.
 * when dealing with message contexts:
 * 
 * |[
 * GtkStockItem items[] = {
 *  { MY_ITEM1, NC_("odd items", "Item 1"), 0, 0, "odd-item-domain" },
 *  { MY_ITEM2, NC_("even items", "Item 2"), 0, 0, "even-item-domain" },
 * };
 * 
 * gchar *
 * my_translate_func (const gchar *msgid,
 *                    gpointer     data)
 * {
 *   gchar *msgctxt = data;
 * 
 *   return (gchar*)g_dpgettext2 (GETTEXT_PACKAGE, msgctxt, msgid);
 * }
 * 
 * /&ast; ... &ast;/
 * 
 * gtk_stock_add (items, G_N_ELEMENTS (items));
 * gtk_stock_set_translate_func ("odd-item-domain", my_translate_func, "odd items");
 * gtk_stock_set_translate_func ("even-item-domain", my_translate_func, "even items");
 * ```
 * 
 * @param domain the translation domain for which `func` shall be used
 * @param func a #GtkTranslateFunc
 */
export function stockSetTranslateFunc(domain: string, func: TranslateFunc): void
/**
 * This function frees a target table as returned by
 * gtk_target_table_new_from_list()
 * @param targets a #GtkTargetEntry array
 */
export function targetTableFree(targets: TargetEntry[]): void
/**
 * This function creates an #GtkTargetEntry array that contains the
 * same targets as the passed %list. The returned table is newly
 * allocated and should be freed using gtk_target_table_free() when no
 * longer needed.
 * @param list a #GtkTargetList
 */
export function targetTableNewFromList(list: TargetList): TargetEntry[]
/**
 * Determines if any of the targets in `targets` can be used to
 * provide a #GdkPixbuf.
 * @param targets an array of #GdkAtom<!-- -->s
 * @param writable whether to accept only targets for which GTK+ knows   how to convert a pixbuf into the format
 */
export function targetsIncludeImage(targets: Gdk.Atom[], writable: boolean): boolean
/**
 * Determines if any of the targets in `targets` can be used to
 * provide rich text.
 * @param targets an array of #GdkAtom<!-- -->s
 * @param buffer a #GtkTextBuffer
 */
export function targetsIncludeRichText(targets: Gdk.Atom[], buffer: TextBuffer): boolean
/**
 * Determines if any of the targets in `targets` can be used to
 * provide text.
 * @param targets an array of #GdkAtom<!-- -->s
 */
export function targetsIncludeText(targets: Gdk.Atom[]): boolean
/**
 * Determines if any of the targets in `targets` can be used to
 * provide an uri list.
 * @param targets an array of #GdkAtom<!-- -->s
 */
export function targetsIncludeUri(targets: Gdk.Atom[]): boolean
/**
 * Create a simple window with window title `window_title` and
 * text contents `dialog_text`.
 * The window will quit any running gtk_main()-loop when destroyed, and it
 * will automatically be destroyed upon test function teardown.
 * @param windowTitle Title of the window to be displayed.
 * @param dialogText Text inside the window to be displayed.
 */
export function testCreateSimpleWindow(windowTitle: string, dialogText: string): Widget
/**
 * This function will search `widget` and all its descendants for a GtkLabel
 * widget with a text string matching `label_pattern`.
 * The `label_pattern` may contain asterisks '*' and question marks '?' as
 * placeholders, g_pattern_match() is used for the matching.
 * Note that locales other than "C" tend to alter (translate" label strings,
 * so this function is genrally only useful in test programs with
 * predetermined locales, see gtk_test_init() for more details.
 * @param widget Valid label or container widget.
 * @param labelPattern Shell-glob pattern to match a label string.
 */
export function testFindLabel(widget: Widget, labelPattern: string): Widget
/**
 * This function will search siblings of `base_widget` and siblings of its
 * ancestors for all widgets matching `widget_type`.
 * Of the matching widgets, the one that is geometrically closest to
 * `base_widget` will be returned.
 * The general purpose of this function is to find the most likely "action"
 * widget, relative to another labeling widget. Such as finding a
 * button or text entry widget, given it's corresponding label widget.
 * @param baseWidget Valid widget, part of a widget hierarchy
 * @param widgetType Type of a aearched for sibling widget
 */
export function testFindSibling(baseWidget: Widget, widgetType: GObject.GType): Widget
/**
 * This function will search the descendants of `widget` for a widget
 * of type `widget_type` that has a label matching `label_pattern` next
 * to it. This is most useful for automated GUI testing, e.g. to find
 * the "OK" button in a dialog and synthesize clicks on it.
 * However see gtk_test_find_label(), gtk_test_find_sibling() and
 * gtk_test_widget_click() for possible caveats involving the search of
 * such widgets and synthesizing widget events.
 * @param widget Container widget, usually a GtkWindow.
 * @param labelPattern Shell-glob pattern to match a label string.
 * @param widgetType Type of a aearched for label sibling widget.
 */
export function testFindWidget(widget: Widget, labelPattern: string, widgetType: GObject.GType): Widget
/**
 * Return the type ids that have been registered after
 * calling gtk_test_register_all_types().
 */
export function testListAllTypes(): GObject.GType[]
/**
 * Force registration of all core Gtk+ and Gdk object types.
 * This allowes to refer to any of those object types via
 * g_type_from_name() after calling this function.
 */
export function testRegisterAllTypes(): void
/**
 * Retrive the literal adjustment value for GtkRange based
 * widgets and spin buttons. Note that the value returned by
 * this function is anything between the lower and upper bounds
 * of the adjustment belonging to `widget,` and is not a percentage
 * as passed in to gtk_test_slider_set_perc().
 * @param widget valid widget pointer.
 */
export function testSliderGetValue(widget: Widget): number
/**
 * This function will adjust the slider position of all GtkRange
 * based widgets, such as scrollbars or scales, it'll also adjust
 * spin buttons. The adjustment value of these widgets is set to
 * a value between the lower and upper limits, according to the
 * `percentage` argument.
 * @param widget valid widget pointer.
 * @param percentage value between 0 and 100.
 */
export function testSliderSetPerc(widget: Widget, percentage: number): void
/**
 * This function will generate a `button` click in the upwards or downwards
 * spin button arrow areas, usually leading to an increase or decrease of
 * spin button's value.
 * @param spinner valid GtkSpinButton widget.
 * @param button Number of the pointer button for the event, usually 1, 2 or 3.
 * @param upwards %TRUE for upwards arrow click, %FALSE for downwards arrow click.
 */
export function testSpinButtonClick(spinner: SpinButton, button: number, upwards: boolean): boolean
/**
 * Retrive the text string of `widget` if it is a GtkLabel,
 * GtkEditable (entry and text widgets) or GtkTextView.
 * @param widget valid widget pointer.
 */
export function testTextGet(widget: Widget): string
/**
 * Set the text string of `widget` to `string` if it is a GtkLabel,
 * GtkEditable (entry and text widgets) or GtkTextView.
 * @param widget valid widget pointer.
 * @param string a 0-terminated C string
 */
export function testTextSet(widget: Widget, string: string): void
/**
 * This function will generate a `button` click (button press and button
 * release event) in the middle of the first GdkWindow found that belongs
 * to `widget`.
 * For %GTK_NO_WINDOW widgets like GtkButton, this will often be an
 * input-only event window. For other widgets, this is usually widget->window.
 * Certain caveats should be considered when using this function, in
 * particular because the mouse pointer is warped to the button click
 * location, see gdk_test_simulate_button() for details.
 * @param widget Widget to generate a button click on.
 * @param button Number of the pointer button for the event, usually 1, 2 or 3.
 * @param modifiers Keyboard modifiers the event is setup with.
 */
export function testWidgetClick(widget: Widget, button: number, modifiers: Gdk.ModifierType): boolean
/**
 * This function will generate keyboard press and release events in
 * the middle of the first GdkWindow found that belongs to `widget`.
 * For %GTK_NO_WINDOW widgets like GtkButton, this will often be an
 * input-only event window. For other widgets, this is usually widget->window.
 * Certain caveats should be considered when using this function, in
 * particular because the mouse pointer is warped to the key press
 * location, see gdk_test_simulate_key() for details.
 * @param widget Widget to generate a key press and release on.
 * @param keyval A Gdk keyboard value.
 * @param modifiers Keyboard modifiers the event is setup with.
 */
export function testWidgetSendKey(widget: Widget, keyval: number, modifiers: Gdk.ModifierType): boolean
export function textAnchoredChildSetLayout(child: Widget, layout: TextLayout): void
export function timeoutRemove(timeoutHandlerId: number): void
/**
 * Obtains a `tree_model` and `path` from selection data of target type
 * %GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
 * This function can only be used if `selection_data` originates from the same
 * process that's calling this function, because a pointer to the tree model
 * is being passed around. If you aren't in the same process, then you'll
 * get memory corruption. In the #GtkTreeDragDest drag_data_received handler,
 * you can assume that selection data of type %GTK_TREE_MODEL_ROW is
 * in from the current process. The returned path must be freed with
 * gtk_tree_path_free().
 * @param selectionData a #GtkSelectionData
 */
export function treeGetRowDragData(selectionData: SelectionData): [ /* returnType */ boolean, /* treeModel */ TreeModel, /* path */ TreePath ]
/**
 * Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
 * know that the model emitted the "row_deleted" signal.
 * @param proxy A #GObject
 * @param path The path position that was deleted
 */
export function treeRowReferenceDeleted(proxy: GObject.Object, path: TreePath): void
/**
 * Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
 * know that the model emitted the "row_inserted" signal.
 * @param proxy A #GObject
 * @param path The row position that was inserted
 */
export function treeRowReferenceInserted(proxy: GObject.Object, path: TreePath): void
/**
 * Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
 * know that the model emitted the "rows_reordered" signal.
 * @param proxy A #GObject
 * @param path The parent path of the reordered signal
 * @param iter The iter pointing to the parent of the reordered
 * @param newOrder The new order of rows
 */
export function treeRowReferenceReordered(proxy: GObject.Object, path: TreePath, iter: TreeIter, newOrder: number): void
/**
 * Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
 * in a drag_data_get handler.
 * @param selectionData some #GtkSelectionData
 * @param treeModel a #GtkTreeModel
 * @param path a row in `tree_model`
 */
export function treeSetRowDragData(selectionData: SelectionData, treeModel: TreeModel, path: TreePath): boolean
export function true_TODO(): boolean
/**
 * Returns a pointer pointing to the class of `type` or %NULL if there
 * was any trouble identifying `type`.  Initializes the class if
 * necessary.
 * @param type a #GtkType.
 */
export function typeClass(type: Type): object | null
export function typeInit(debugFlags: GObject.TypeDebugFlags): void
export function typeNew(type: Type): object | null
export function typeUnique(parentType: Type, gtkinfo: TypeInfo): Type
/**
 * The type of a function which is called when a URL or email
 * link is activated.
 * @callback 
 * @param about the #GtkAboutDialog in which the link was activated
 * @param link the URL or email address to which the activated link points
 * @param data user data that was passed when the function was registered  with gtk_about_dialog_set_email_hook() or  gtk_about_dialog_set_url_hook()
 */
export interface AboutDialogActivateLinkFunc {
    (about: AboutDialog, link: string, data: object | null): void
}
export interface AccelGroupActivate {
    (accelGroup: AccelGroup, acceleratable: GObject.Object, keyval: number, modifier: Gdk.ModifierType): boolean
}
export interface AccelGroupFindFunc {
    (key: AccelKey, closure: GObject.TClosure, data: object | null): boolean
}
export interface AccelMapForeach {
    (data: object | null, accelPath: string, accelKey: number, accelMods: Gdk.ModifierType, changed: boolean): void
}
/**
 * A function used by gtk_assistant_set_forward_page_func() to know which
 * is the next page given a current one. It's called both for computing the
 * next page when the user presses the "forward" button and for handling
 * the behavior of the "last" button.
 * @callback 
 * @param currentPage The page number used to calculate the next page.
 * @param data user data.
 */
export interface AssistantPageFunc {
    (currentPage: number, data: object | null): number
}
/**
 * This is the signature of a function used to connect signals.  It is used
 * by the gtk_builder_connect_signals() and gtk_builder_connect_signals_full()
 * methods.  It is mainly intended for interpreted language bindings, but
 * could be useful where the programmer wants more control over the signal
 * connection process.
 * @callback 
 * @param builder a #GtkBuilder
 * @param object object to connect a signal to
 * @param signalName name of the signal
 * @param handlerName name of the handler
 * @param connectObject a #GObject, if non-%NULL, use g_signal_connect_object()
 * @param flags #GConnectFlags to use
 */
export interface BuilderConnectFunc {
    (builder: Builder, object: GObject.Object, signalName: string, handlerName: string, connectObject: GObject.Object, flags: GObject.ConnectFlags): void
}
export interface CListCompareFunc {
    (clist: CList, ptr1: object | null, ptr2: object | null): number
}
export interface CTreeCompareDragFunc {
    (ctree: CTree, sourceNode: CTreeNode, newParent: CTreeNode, newSibling: CTreeNode): boolean
}
export interface CTreeFunc {
    (ctree: CTree, node: CTreeNode, data: object | null): void
}
export interface CTreeGNodeFunc {
    (ctree: CTree, depth: number, gnode: GLib.Node, cnode: CTreeNode, data: object | null): boolean
}
/**
 * This kind of functions provide Pango markup with detail information for the
 * specified day. Examples for such details are holidays or appointments. The
 * function returns %NULL when no information is available.
 * @callback 
 * @param calendar a #GtkCalendar.
 * @param year the year for which details are needed.
 * @param month the month for which details are needed.
 * @param day the day of `month` for which details are needed.
 */
export interface CalendarDetailFunc {
    (calendar: Calendar, year: number, month: number, day: number): string
}
/**
 * The type of the callback functions used for e.g. iterating over
 * the children of a container, see gtk_container_foreach().
 * @callback 
 * @param widget the widget to operate on
 * @param data user-supplied data
 */
export interface Callback {
    (widget: Widget, data: object | null): void
}
export interface CallbackMarshal {
    (object: Object, data: object | null, nArgs: number, args: Arg): void
}
export interface CellLayoutDataFunc {
    (cellLayout: CellLayout, cell: CellRenderer, treeModel: TreeModel, iter: TreeIter, data: object | null): void
}
export interface ClipboardClearFunc {
    (clipboard: Clipboard, userDataOrOwner: object | null): void
}
export interface ClipboardGetFunc {
    (clipboard: Clipboard, selectionData: SelectionData, info: number, userDataOrOwner: object | null): void
}
export interface ClipboardImageReceivedFunc {
    (clipboard: Clipboard, pixbuf: GdkPixbuf.Pixbuf, data: object | null): void
}
export interface ClipboardReceivedFunc {
    (clipboard: Clipboard, selectionData: SelectionData, data: object | null): void
}
export interface ClipboardRichTextReceivedFunc {
    (clipboard: Clipboard, format: Gdk.Atom, text: number, length: number, data: object | null): void
}
export interface ClipboardTargetsReceivedFunc {
    (clipboard: Clipboard, atoms: Gdk.Atom, nAtoms: number, data: object | null): void
}
export interface ClipboardTextReceivedFunc {
    (clipboard: Clipboard, text: string, data: object | null): void
}
export interface ClipboardURIReceivedFunc {
    (clipboard: Clipboard, uris: string, data: object | null): void
}
export interface ColorSelectionChangePaletteFunc {
    (colors: Gdk.Color, nColors: number): void
}
export interface ColorSelectionChangePaletteWithScreenFunc {
    (screen: Gdk.Screen, colors: Gdk.Color, nColors: number): void
}
export interface DestroyNotify {
    (data: object | null): void
}
export interface EntryCompletionMatchFunc {
    (completion: EntryCompletion, key: string, iter: TreeIter): boolean
}
export interface FileFilterFunc {
    (filterInfo: FileFilterInfo, data: object | null): boolean
}
export interface Function {
    (data: object | null): boolean
}
export interface IconViewForeachFunc {
    (iconView: IconView, path: TreePath, data: object | null): void
}
export interface ItemFactoryCallback {
    (): void
}
export interface ItemFactoryCallback1 {
    (callbackData: object | null, callbackAction: number, widget: Widget): void
}
export interface ItemFactoryCallback2 {
    (widget: Widget, callbackData: object | null, callbackAction: number): void
}
export interface KeySnoopFunc {
    (grabWidget: Widget, event: Gdk.EventKey, funcData: object | null): number
}
export interface LinkButtonUriFunc {
    (button: LinkButton, link: string): void
}
export interface MenuCallback {
    (widget: Widget): void
}
export interface MenuDetachFunc {
    (attachWidget: Widget, menu: Menu): void
}
export interface MenuPositionFunc {
    (menu: Menu, x: number, y: number, pushIn: boolean): void
}
export interface ModuleDisplayInitFunc {
    (display: Gdk.Display): void
}
export interface ModuleInitFunc {
    (argc: number, argv: string): void
}
export interface PageSetupDoneFunc {
    (pageSetup: PageSetup, data: object | null): void
}
export interface PrintFunc {
    (funcData: object | null, str: string): void
}
export interface PrintSettingsFunc {
    (key: string, value: string): void
}
export interface RcPropertyParser {
    (pspec: GObject.ParamSpec, rcString: GLib.String, propertyValue: any): boolean
}
export interface RecentFilterFunc {
    (filterInfo: RecentFilterInfo): boolean
}
export interface RecentSortFunc {
    (a: RecentInfo, b: RecentInfo): number
}
export interface SignalFunc {
    (): void
}
export interface TextBufferDeserializeFunc {
    (registerBuffer: TextBuffer, contentBuffer: TextBuffer, iter: TextIter, data: number, length: number, createTags: boolean): boolean
}
export interface TextBufferSerializeFunc {
    (registerBuffer: TextBuffer, contentBuffer: TextBuffer, start: TextIter, end: TextIter, length: number): number
}
export interface TextCharPredicate {
    (ch: string): boolean
}
export interface TextFunction {
    (editable: OldEditable, time: number): void
}
export interface TextTagTableForeach {
    (tag: TextTag, data: object | null): void
}
export interface TranslateFunc {
    (path: string, funcData: object | null): string
}
export interface TreeCellDataFunc {
    (treeColumn: TreeViewColumn, cell: CellRenderer, treeModel: TreeModel, iter: TreeIter, data: object | null): void
}
export interface TreeDestroyCountFunc {
    (treeView: TreeView, path: TreePath, children: number): void
}
export interface TreeIterCompareFunc {
    (model: TreeModel, a: TreeIter, b: TreeIter): number
}
export interface TreeModelFilterModifyFunc {
    (model: TreeModel, iter: TreeIter, value: any, column: number, data: object | null): void
}
export interface TreeModelFilterVisibleFunc {
    (model: TreeModel, iter: TreeIter, data: object | null): boolean
}
export interface TreeModelForeachFunc {
    (model: TreeModel, path: TreePath, iter: TreeIter, data: object | null): boolean
}
export interface TreeSelectionForeachFunc {
    (model: TreeModel, path: TreePath, iter: TreeIter, data: object | null): void
}
export interface TreeSelectionFunc {
    (selection: TreeSelection, model: TreeModel, path: TreePath, pathCurrentlySelected: boolean, data: object | null): boolean
}
export interface TreeViewColumnDropFunc {
    (treeView: TreeView, column: TreeViewColumn, prevColumn: TreeViewColumn, nextColumn: TreeViewColumn, data: object | null): boolean
}
export interface TreeViewMappingFunc {
    (treeView: TreeView, path: TreePath): void
}
export interface TreeViewRowSeparatorFunc {
    (model: TreeModel, iter: TreeIter, data: object | null): boolean
}
export interface TreeViewSearchEqualFunc {
    (model: TreeModel, column: number, key: string, iter: TreeIter, searchData: object | null): boolean
}
export interface TreeViewSearchPositionFunc {
    (treeView: TreeView, searchDialog: Widget): void
}
export interface WindowKeysForeachFunc {
    (window: Window, keyval: number, modifiers: Gdk.ModifierType, isMnemonic: boolean, data: object | null): void
}
export module Activatable {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Activatable

        /**
         * The action that this activatable will activate and receive
         * updates from for various states and possibly appearance.
         * 
         * <note><para>#GtkActivatable implementors need to handle the this property and
         * call gtk_activatable_do_set_related_action() when it changes.</para></note>
         */
        relatedAction?: Action | null
        /**
         * Whether this activatable should reset its layout
         * and appearance when setting the related action or when
         * the action changes appearance.
         * 
         * See the #GtkAction documentation directly to find which properties
         * should be ignored by the #GtkActivatable when this property is %FALSE.
         * 
         * <note><para>#GtkActivatable implementors need to handle this property
         * and call gtk_activatable_sync_action_properties() on the activatable
         * widget when it changes.</para></note>
         */
        useActionAppearance?: boolean | null
    }

}

export interface Activatable {

    // Own properties of Gtk-2.0.Gtk.Activatable

    /**
     * The action that this activatable will activate and receive
     * updates from for various states and possibly appearance.
     * 
     * <note><para>#GtkActivatable implementors need to handle the this property and
     * call gtk_activatable_do_set_related_action() when it changes.</para></note>
     */
    relatedAction: Action
    /**
     * Whether this activatable should reset its layout
     * and appearance when setting the related action or when
     * the action changes appearance.
     * 
     * See the #GtkAction documentation directly to find which properties
     * should be ignored by the #GtkActivatable when this property is %FALSE.
     * 
     * <note><para>#GtkActivatable implementors need to handle this property
     * and call gtk_activatable_sync_action_properties() on the activatable
     * widget when it changes.</para></note>
     */
    useActionAppearance: boolean

    // Owm methods of Gtk-2.0.Gtk.Activatable

    /**
     * This is a utility function for #GtkActivatable implementors.
     * 
     * When implementing #GtkActivatable you must call this when
     * handling changes of the #GtkActivatable:related-action, and
     * you must also use this to break references in #GObject->dispose().
     * 
     * This function adds a reference to the currently set related
     * action for you, it also makes sure the #GtkActivatable->update()
     * method is called when the related #GtkAction properties change
     * and registers to the action's proxy list.
     * 
     * <note><para>Be careful to call this before setting the local
     * copy of the #GtkAction property, since this function uses
     * gtk_activatable_get_action() to retrieve the previous action</para></note>
     * @param action the #GtkAction to set
     */
    doSetRelatedAction(action: Action): void
    /**
     * Gets the related #GtkAction for `activatable`.
     */
    getRelatedAction(): Action
    /**
     * Gets whether this activatable should reset its layout
     * and appearance when setting the related action or when
     * the action changes appearance.
     */
    getUseActionAppearance(): boolean
    /**
     * Sets the related action on the `activatable` object.
     * 
     * <note><para>#GtkActivatable implementors need to handle the #GtkActivatable:related-action
     * property and call gtk_activatable_do_set_related_action() when it changes.</para></note>
     * @param action the #GtkAction to set
     */
    setRelatedAction(action: Action): void
    /**
     * Sets whether this activatable should reset its layout and appearance
     * when setting the related action or when the action changes appearance
     * 
     * <note><para>#GtkActivatable implementors need to handle the
     * #GtkActivatable:use-action-appearance property and call
     * gtk_activatable_sync_action_properties() to update `activatable`
     * if needed.</para></note>
     * @param useAppearance whether to use the actions appearance
     */
    setUseActionAppearance(useAppearance: boolean): void
    // Has conflict: syncActionProperties(action: Action | null): void

    // Own virtual methods of Gtk-2.0.Gtk.Activatable

    /**
     * This is called to update the activatable completely, this is called
     * internally when the #GtkActivatable::related-action property is set
     * or unset and by the implementing class when
     * #GtkActivatable::use-action-appearance changes.
     * @virtual 
     * @param action the related #GtkAction or %NULL
     */
    syncActionProperties(action: Action | null): void
    update(action: Action, propertyName: string): void

    // Class property signals of Gtk-2.0.Gtk.Activatable

    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * Activatable widgets can be connected to a #GtkAction and reflects
 * the state of its action. A #GtkActivatable can also provide feedback
 * through its action, as they are responsible for activating their
 * related actions.
 * 
 * <refsect2>
 * <title>Implementing GtkActivatable</title>
 * <para>
 * When extending a class that is already #GtkActivatable; it is only
 * necessary to implement the #GtkActivatable->sync_action_properties()
 * and #GtkActivatable->update() methods and chain up to the parent
 * implementation, however when introducing
 * a new #GtkActivatable class; the #GtkActivatable:related-action and
 * #GtkActivatable:use-action-appearance properties need to be handled by
 * the implementor. Handling these properties is mostly a matter of installing
 * the action pointer and boolean flag on your instance, and calling
 * gtk_activatable_do_set_related_action() and
 * gtk_activatable_sync_action_properties() at the appropriate times.
 * </para>
 * <example>
 * <title>A class fragment implementing #GtkActivatable</title>
 * <programlisting><![CDATA[
 * 
 * enum {
 * ...
 * 
 * PROP_ACTIVATABLE_RELATED_ACTION,
 * PROP_ACTIVATABLE_USE_ACTION_APPEARANCE
 * }
 * 
 * struct _FooBarPrivate
 * {
 * 
 *   ...
 * 
 *   GtkAction      *action;
 *   gboolean        use_action_appearance;
 * };
 * 
 * ...
 * 
 * static void foo_bar_activatable_interface_init         (GtkActivatableIface  *iface);
 * static void foo_bar_activatable_update                 (GtkActivatable       *activatable,
 * 						           GtkAction            *action,
 * 						           const gchar          *property_name);
 * static void foo_bar_activatable_sync_action_properties (GtkActivatable       *activatable,
 * 						           GtkAction            *action);
 * ...
 * 
 * 
 * static void
 * foo_bar_class_init (FooBarClass *klass)
 * {
 * 
 *   ...
 * 
 *   g_object_class_override_property (gobject_class, PROP_ACTIVATABLE_RELATED_ACTION, "related-action");
 *   g_object_class_override_property (gobject_class, PROP_ACTIVATABLE_USE_ACTION_APPEARANCE, "use-action-appearance");
 * 
 *   ...
 * }
 * 
 * 
 * static void
 * foo_bar_activatable_interface_init (GtkActivatableIface  *iface)
 * {
 *   iface->update = foo_bar_activatable_update;
 *   iface->sync_action_properties = foo_bar_activatable_sync_action_properties;
 * }
 * 
 * ... Break the reference using gtk_activatable_do_set_related_action()...
 * 
 * static void
 * foo_bar_dispose (GObject *object)
 * {
 *   FooBar *bar = FOO_BAR (object);
 *   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
 * 
 *   ...
 * 
 *   if (priv->action)
 *     {
 *       gtk_activatable_do_set_related_action (GTK_ACTIVATABLE (bar), NULL);
 *       priv->action = NULL;
 *     }
 *   G_OBJECT_CLASS (foo_bar_parent_class)->dispose (object);
 * }
 * 
 * ... Handle the "related-action" and "use-action-appearance" properties ...
 * 
 * static void
 * foo_bar_set_property (GObject         *object,
 *                       guint            prop_id,
 *                       const GValue    *value,
 *                       GParamSpec      *pspec)
 * {
 *   FooBar *bar = FOO_BAR (object);
 *   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
 * 
 *   switch (prop_id)
 *     {
 * 
 *       ...
 * 
 *     case PROP_ACTIVATABLE_RELATED_ACTION:
 *       foo_bar_set_related_action (bar, g_value_get_object (value));
 *       break;
 *     case PROP_ACTIVATABLE_USE_ACTION_APPEARANCE:
 *       foo_bar_set_use_action_appearance (bar, g_value_get_boolean (value));
 *       break;
 *     default:
 *       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
 *       break;
 *     }
 * }
 * 
 * static void
 * foo_bar_get_property (GObject         *object,
 *                          guint            prop_id,
 *                          GValue          *value,
 *                          GParamSpec      *pspec)
 * {
 *   FooBar *bar = FOO_BAR (object);
 *   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
 * 
 *   switch (prop_id)
 *     {
 * 
 *       ...
 * 
 *     case PROP_ACTIVATABLE_RELATED_ACTION:
 *       g_value_set_object (value, priv->action);
 *       break;
 *     case PROP_ACTIVATABLE_USE_ACTION_APPEARANCE:
 *       g_value_set_boolean (value, priv->use_action_appearance);
 *       break;
 *     default:
 *       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
 *       break;
 *     }
 * }
 * 
 * 
 * static void
 * foo_bar_set_use_action_appearance (FooBar   *bar,
 * 				   gboolean  use_appearance)
 * {
 *   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
 * 
 *   if (priv->use_action_appearance != use_appearance)
 *     {
 *       priv->use_action_appearance = use_appearance;
 *       
 *       gtk_activatable_sync_action_properties (GTK_ACTIVATABLE (bar), priv->action);
 *     }
 * }
 * 
 * ... call gtk_activatable_do_set_related_action() and then assign the action pointer,
 * no need to reference the action here since gtk_activatable_do_set_related_action() already
 * holds a reference here for you...
 * static void
 * foo_bar_set_related_action (FooBar    *bar,
 * 			    GtkAction *action)
 * {
 *   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);
 * 
 *   if (priv->action == action)
 *     return;
 * 
 *   gtk_activatable_do_set_related_action (GTK_ACTIVATABLE (bar), action);
 * 
 *   priv->action = action;
 * }
 * 
 * ... Selectively reset and update activatable depending on the use-action-appearance property ...
 * static void
 * gtk_button_activatable_sync_action_properties (GtkActivatable       *activatable,
 * 		                                  GtkAction            *action)
 * {
 *   GtkButtonPrivate *priv = GTK_BUTTON_GET_PRIVATE (activatable);
 * 
 *   if (!action)
 *     return;
 * 
 *   if (gtk_action_is_visible (action))
 *     gtk_widget_show (GTK_WIDGET (activatable));
 *   else
 *     gtk_widget_hide (GTK_WIDGET (activatable));
 *   
 *   gtk_widget_set_sensitive (GTK_WIDGET (activatable), gtk_action_is_sensitive (action));
 * 
 *   ...
 *   
 *   if (priv->use_action_appearance)
 *     {
 *       if (gtk_action_get_stock_id (action))
 * 	foo_bar_set_stock (button, gtk_action_get_stock_id (action));
 *       else if (gtk_action_get_label (action))
 * 	foo_bar_set_label (button, gtk_action_get_label (action));
 * 
 *       ...
 * 
 *     }
 * }
 * 
 * static void
 * foo_bar_activatable_update (GtkActivatable       *activatable,
 * 			       GtkAction            *action,
 * 			       const gchar          *property_name)
 * {
 *   FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (activatable);
 * 
 *   if (strcmp (property_name, "visible") == 0)
 *     {
 *       if (gtk_action_is_visible (action))
 * 	gtk_widget_show (GTK_WIDGET (activatable));
 *       else
 * 	gtk_widget_hide (GTK_WIDGET (activatable));
 *     }
 *   else if (strcmp (property_name, "sensitive") == 0)
 *     gtk_widget_set_sensitive (GTK_WIDGET (activatable), gtk_action_is_sensitive (action));
 * 
 *   ...
 * 
 *   if (!priv->use_action_appearance)
 *     return;
 * 
 *   if (strcmp (property_name, "stock-id") == 0)
 *     foo_bar_set_stock (button, gtk_action_get_stock_id (action));
 *   else if (strcmp (property_name, "label") == 0)
 *     foo_bar_set_label (button, gtk_action_get_label (action));
 * 
 *   ...
 * }]]></programlisting>
 * </example>
 * </refsect2>
 * @interface 
 */
export class Activatable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Activatable

    static name: string

    // Constructors of Gtk-2.0.Gtk.Activatable

    constructor(config?: Activatable.ConstructorProperties) 
    _init(config?: Activatable.ConstructorProperties): void
}

export module Buildable {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface Buildable {

    // Owm methods of Gtk-2.0.Gtk.Buildable

    // Has conflict: addChild(builder: Builder, child: GObject.Object, type: string | null): void
    // Has conflict: constructChild(builder: Builder, name: string): GObject.Object
    // Has conflict: customFinished(builder: Builder, child: GObject.Object | null, tagname: string, data: object | null): void
    // Has conflict: customTagEnd(builder: Builder, child: GObject.Object | null, tagname: string, data: object | null): void
    // Has conflict: customTagStart(builder: Builder, child: GObject.Object | null, tagname: string): [ /* returnType */ boolean, /* parser */ GLib.MarkupParser, /* data */ object | null ]
    // Has conflict: getInternalChild(builder: Builder, childname: string): GObject.Object
    // Has conflict: getName(): string
    // Has conflict: parserFinished(builder: Builder): void
    // Has conflict: setBuildableProperty(builder: Builder, name: string, value: any): void
    // Has conflict: setName(name: string): void

    // Own virtual methods of Gtk-2.0.Gtk.Buildable

    /**
     * Adds a child to `buildable`. `type` is an optional string
     * describing how the child should be added.
     * @virtual 
     * @param builder a #GtkBuilder
     * @param child child to add
     * @param type kind of child or %NULL
     */
    addChild(builder: Builder, child: GObject.Object, type: string | null): void
    /**
     * Constructs a child of `buildable` with the name `name`.
     * 
     * #GtkBuilder calls this function if a "constructor" has been
     * specified in the UI definition.
     * @virtual 
     * @param builder #GtkBuilder used to construct this object
     * @param name name of child to construct
     */
    constructChild(builder: Builder, name: string): GObject.Object
    /**
     * This is similar to gtk_buildable_parser_finished() but is
     * called once for each custom tag handled by the `buildable`.
     * @virtual 
     * @param builder a #GtkBuilder
     * @param child child object or %NULL for non-child tags
     * @param tagname the name of the tag
     * @param data user data created in custom_tag_start
     */
    customFinished(builder: Builder, child: GObject.Object | null, tagname: string, data: object | null): void
    /**
     * This is called at the end of each custom element handled by
     * the buildable.
     * @virtual 
     * @param builder #GtkBuilder used to construct this object
     * @param child child object or %NULL for non-child tags
     * @param tagname name of tag
     * @param data user data that will be passed in to parser functions
     */
    customTagEnd(builder: Builder, child: GObject.Object | null, tagname: string, data: object | null): void
    /**
     * This is called for each unknown element under &lt;child&gt;.
     * @virtual 
     * @param builder a #GtkBuilder used to construct this object
     * @param child child object or %NULL for non-child tags
     * @param tagname name of tag
     */
    customTagStart(builder: Builder, child: GObject.Object | null, tagname: string): [ /* returnType */ boolean, /* parser */ GLib.MarkupParser, /* data */ object | null ]
    /**
     * Get the internal child called `childname` of the `buildable` object.
     * @virtual 
     * @param builder a #GtkBuilder
     * @param childname name of child
     */
    getInternalChild(builder: Builder, childname: string): GObject.Object
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Called when the builder finishes the parsing of a
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>.
     * Note that this will be called once for each time
     * gtk_builder_add_from_file() or gtk_builder_add_from_string()
     * is called on a builder.
     * @virtual 
     * @param builder a #GtkBuilder
     */
    parserFinished(builder: Builder): void
    /**
     * Sets the property name `name` to `value` on the `buildable` object.
     * @virtual 
     * @param builder a #GtkBuilder
     * @param name name of property
     * @param value value of property
     */
    setBuildableProperty(builder: Builder, name: string, value: any): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void

    // Class property signals of Gtk-2.0.Gtk.Buildable

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * In order to allow construction from a <link linkend="BUILDER-UI">GtkBuilder
 * UI description</link>, an object class must implement the
 * GtkBuildable interface. The interface includes methods for setting
 * names and properties of objects, parsing custom tags, constructing
 * child objects.
 * 
 * The GtkBuildable interface is implemented by all widgets and
 * many of the non-widget objects that are provided by GTK+. The
 * main user of this interface is #GtkBuilder, there should be
 * very little need for applications to call any
 * <function>gtk_buildable_...</function> functions.
 * @interface 
 */
export class Buildable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Buildable

    static name: string

    // Constructors of Gtk-2.0.Gtk.Buildable

    constructor(config?: Buildable.ConstructorProperties) 
    _init(config?: Buildable.ConstructorProperties): void
}

export module CellEditable {

    // Signal callback interfaces

    /**
     * Signal callback interface for `editing-done`
     */
    export interface EditingDoneSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `remove-widget`
     */
    export interface RemoveWidgetSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Widget.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellEditable

        /**
         * Indicates whether editing on the cell has been canceled.
         */
        editingCanceled?: boolean | null
    }

}

export interface CellEditable extends Widget {

    // Own properties of Gtk-2.0.Gtk.CellEditable

    /**
     * Indicates whether editing on the cell has been canceled.
     */
    editingCanceled: boolean

    // Owm methods of Gtk-2.0.Gtk.CellEditable

    // Has conflict: editingDone(): void
    // Has conflict: removeWidget(): void
    // Has conflict: startEditing(event: Gdk.Event | null): void

    // Conflicting methods

    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void

    // Own virtual methods of Gtk-2.0.Gtk.CellEditable

    /**
     * Emits the #GtkCellEditable::editing-done signal.
     * @virtual 
     */
    editingDone(): void
    /**
     * Emits the #GtkCellEditable::remove-widget signal.
     * @virtual 
     */
    removeWidget(): void
    /**
     * Begins editing on a `cell_editable`. `event` is the #GdkEvent that began
     * the editing process. It may be %NULL, in the instance that editing was
     * initiated through programatic means.
     * @virtual 
     * @param event A #GdkEvent, or %NULL
     */
    startEditing(event: Gdk.Event | null): void

    // Own signals of Gtk-2.0.Gtk.CellEditable

    connect(sigName: "editing-done", callback: CellEditable.EditingDoneSignalCallback): number
    on(sigName: "editing-done", callback: CellEditable.EditingDoneSignalCallback): number
    once(sigName: "editing-done", callback: CellEditable.EditingDoneSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "editing-done", ...args: any[]): void
    connect(sigName: "remove-widget", callback: CellEditable.RemoveWidgetSignalCallback): number
    on(sigName: "remove-widget", callback: CellEditable.RemoveWidgetSignalCallback): number
    once(sigName: "remove-widget", callback: CellEditable.RemoveWidgetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "remove-widget", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CellEditable

    connect(sigName: "notify::editing-canceled", callback: any): number
    on(sigName: "notify::editing-canceled", callback: any): number
    once(sigName: "notify::editing-canceled", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellEditable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.CellEditable

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellEditable

    constructor(config?: CellEditable.ConstructorProperties) 
    _init(config?: CellEditable.ConstructorProperties): void
}

export module CellLayout {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface CellLayout {

    // Owm methods of Gtk-2.0.Gtk.CellLayout

    // Has conflict: addAttribute(cell: CellRenderer, attribute: string, column: number): void
    // Has conflict: clear(): void
    // Has conflict: clearAttributes(cell: CellRenderer): void
    // Has conflict: getCells(): CellRenderer[]
    // Has conflict: packEnd(cell: CellRenderer, expand: boolean): void
    // Has conflict: packStart(cell: CellRenderer, expand: boolean): void
    // Has conflict: reorder(cell: CellRenderer, position: number): void
    // Has conflict: setCellDataFunc(cell: CellRenderer, func: CellLayoutDataFunc): void

    // Own virtual methods of Gtk-2.0.Gtk.CellLayout

    /**
     * Adds an attribute mapping to the list in `cell_layout`. The `column` is the
     * column of the model to get a value from, and the `attribute` is the
     * parameter on `cell` to be set from the value. So for example if column 2
     * of the model contains strings, you could have the "text" attribute of a
     * #GtkCellRendererText get its values from column 2.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param attribute An attribute on the renderer.
     * @param column The column position on the model to get the attribute from.
     */
    addAttribute(cell: CellRenderer, attribute: string, column: number): void
    /**
     * Unsets all the mappings on all renderers on `cell_layout` and
     * removes all renderers from `cell_layout`.
     * @virtual 
     */
    clear(): void
    /**
     * Clears all existing attributes previously set with
     * gtk_cell_layout_set_attributes().
     * @virtual 
     * @param cell A #GtkCellRenderer to clear the attribute mapping on.
     */
    clearAttributes(cell: CellRenderer): void
    /**
     * Returns the cell renderers which have been added to `cell_layout`.
     * @virtual 
     */
    getCells(): CellRenderer[]
    /**
     * Adds the `cell` to the end of `cell_layout`. If `expand` is %FALSE, then the
     * `cell` is allocated no more space than it needs. Any unused space is
     * divided evenly between cells for which `expand` is %TRUE.
     * 
     * Note that reusing the same cell renderer is not supported.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param expand %TRUE if `cell` is to be given extra space allocated to `cell_layout`.
     */
    packEnd(cell: CellRenderer, expand: boolean): void
    /**
     * Packs the `cell` into the beginning of `cell_layout`. If `expand` is %FALSE,
     * then the `cell` is allocated no more space than it needs. Any unused space
     * is divided evenly between cells for which `expand` is %TRUE.
     * 
     * Note that reusing the same cell renderer is not supported.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param expand %TRUE if `cell` is to be given extra space allocated to `cell_layout`.
     */
    packStart(cell: CellRenderer, expand: boolean): void
    /**
     * Re-inserts `cell` at `position`. Note that `cell` has already to be packed
     * into `cell_layout` for this to function properly.
     * @virtual 
     * @param cell A #GtkCellRenderer to reorder.
     * @param position New position to insert `cell` at.
     */
    reorder(cell: CellRenderer, position: number): void
    /**
     * Sets the #GtkCellLayoutDataFunc to use for `cell_layout`. This function
     * is used instead of the standard attributes mapping for setting the
     * column value, and should set the value of `cell_layout'`s cell renderer(s)
     * as appropriate. `func` may be %NULL to remove and older one.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param func The #GtkCellLayoutDataFunc to use.
     */
    setCellDataFunc(cell: CellRenderer, func: CellLayoutDataFunc): void

    // Class property signals of Gtk-2.0.Gtk.CellLayout

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellLayout extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.CellLayout

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellLayout

    constructor(config?: CellLayout.ConstructorProperties) 
    _init(config?: CellLayout.ConstructorProperties): void
}

export module Editable {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `delete-text`
     */
    export interface DeleteTextSignalCallback {
        (startPos: number, endPos: number): void
    }

    /**
     * Signal callback interface for `insert-text`
     */
    export interface InsertTextSignalCallback {
        (newText: string, newTextLength: number, position: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface Editable {

    // Owm methods of Gtk-2.0.Gtk.Editable

    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    /**
     * Deletes the currently selected text of the editable.
     * This call doesn't do anything if there is no selected text.
     */
    deleteSelection(): void
    /**
     * Deletes a sequence of characters. The characters that are deleted are
     * those characters at positions from `start_pos` up to, but not including
     * `end_pos`. If `end_pos` is negative, then the the characters deleted
     * are those from `start_pos` to the end of the text.
     * 
     * Note that the positions are specified in characters, not bytes.
     * @param startPos start position
     * @param endPos end position
     */
    deleteText(startPos: number, endPos: number): void
    /**
     * Retrieves a sequence of characters. The characters that are retrieved
     * are those characters at positions from `start_pos` up to, but not
     * including `end_pos`. If `end_pos` is negative, then the the characters
     * retrieved are those characters from `start_pos` to the end of the text.
     * 
     * Note that positions are specified in characters, not bytes.
     * @param startPos start of text
     * @param endPos end of text
     */
    getChars(startPos: number, endPos: number): string
    /**
     * Retrieves whether `editable` is editable. See
     * gtk_editable_set_editable().
     */
    getEditable(): boolean
    /**
     * Retrieves the current position of the cursor relative to the start
     * of the content of the editable.
     * 
     * Note that this position is in characters, not in bytes.
     */
    getPosition(): number
    /**
     * Retrieves the selection bound of the editable. start_pos will be filled
     * with the start of the selection and `end_pos` with end. If no text was
     * selected both will be identical and %FALSE will be returned.
     * 
     * Note that positions are specified in characters, not bytes.
     */
    getSelectionBounds(): [ /* returnType */ boolean, /* startPos */ number, /* endPos */ number ]
    /**
     * Inserts `new_text_length` bytes of `new_text` into the contents of the
     * widget, at position `position`.
     * 
     * Note that the position is in characters, not in bytes.
     * The function updates `position` to point after the newly inserted text.
     * @param newText the text to append
     * @param newTextLength the length of the text in bytes, or -1
     * @param position location of the position text will be inserted at
     */
    insertText(newText: string, newTextLength: number, position: number): /* position */ number
    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void
    /**
     * Selects a region of text. The characters that are selected are
     * those characters at positions from `start_pos` up to, but not
     * including `end_pos`. If `end_pos` is negative, then the the
     * characters selected are those characters from `start_pos` to
     * the end of the text.
     * 
     * Note that positions are specified in characters, not bytes.
     * @param startPos start of region
     * @param endPos end of region
     */
    selectRegion(startPos: number, endPos: number): void
    /**
     * Determines if the user can edit the text in the editable
     * widget or not.
     * @param isEditable %TRUE if the user is allowed to edit the text   in the widget
     */
    setEditable(isEditable: boolean): void
    /**
     * Sets the cursor position in the editable to the given value.
     * 
     * The cursor is displayed before the character with the given (base 0)
     * index in the contents of the editable. The value must be less than or
     * equal to the number of characters in the editable. A value of -1
     * indicates that the position should be set after the last character
     * of the editable. Note that `position` is in characters, not in bytes.
     * @param position the position of the cursor
     */
    setPosition(position: number): void

    // Own signals of Gtk-2.0.Gtk.Editable

    connect(sigName: "changed", callback: Editable.ChangedSignalCallback): number
    on(sigName: "changed", callback: Editable.ChangedSignalCallback): number
    once(sigName: "changed", callback: Editable.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void
    connect(sigName: "delete-text", callback: Editable.DeleteTextSignalCallback): number
    on(sigName: "delete-text", callback: Editable.DeleteTextSignalCallback): number
    once(sigName: "delete-text", callback: Editable.DeleteTextSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "delete-text", endPos: number, ...args: any[]): void
    connect(sigName: "insert-text", callback: Editable.InsertTextSignalCallback): number
    on(sigName: "insert-text", callback: Editable.InsertTextSignalCallback): number
    once(sigName: "insert-text", callback: Editable.InsertTextSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-text", newTextLength: number, position: number, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Editable

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Editable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Editable

    static name: string

    // Constructors of Gtk-2.0.Gtk.Editable

    constructor(config?: Editable.ConstructorProperties) 
    _init(config?: Editable.ConstructorProperties): void
}

export module FileChooser {

    // Signal callback interfaces

    /**
     * Signal callback interface for `confirm-overwrite`
     */
    export interface ConfirmOverwriteSignalCallback {
        (): FileChooserConfirmation
    }

    /**
     * Signal callback interface for `current-folder-changed`
     */
    export interface CurrentFolderChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `file-activated`
     */
    export interface FileActivatedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `selection-changed`
     */
    export interface SelectionChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `update-preview`
     */
    export interface UpdatePreviewSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Widget.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.FileChooser

        action?: FileChooserAction | null
        /**
         * Whether a file chooser not in %GTK_FILE_CHOOSER_ACTION_OPEN mode
         * will offer the user to create new folders.
         */
        createFolders?: boolean | null
        /**
         * Whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode
         * will present an overwrite confirmation dialog if the user
         * selects a file name that already exists.
         */
        doOverwriteConfirmation?: boolean | null
        extraWidget?: Widget | null
        fileSystemBackend?: string | null
        filter?: FileFilter | null
        localOnly?: boolean | null
        previewWidget?: Widget | null
        previewWidgetActive?: boolean | null
        selectMultiple?: boolean | null
        showHidden?: boolean | null
        usePreviewLabel?: boolean | null
    }

}

export interface FileChooser extends Widget {

    // Own properties of Gtk-2.0.Gtk.FileChooser

    action: FileChooserAction
    /**
     * Whether a file chooser not in %GTK_FILE_CHOOSER_ACTION_OPEN mode
     * will offer the user to create new folders.
     */
    createFolders: boolean
    /**
     * Whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode
     * will present an overwrite confirmation dialog if the user
     * selects a file name that already exists.
     */
    doOverwriteConfirmation: boolean
    extraWidget: Widget
    readonly fileSystemBackend: string
    filter: FileFilter
    localOnly: boolean
    previewWidget: Widget
    previewWidgetActive: boolean
    selectMultiple: boolean
    showHidden: boolean
    usePreviewLabel: boolean

    // Owm methods of Gtk-2.0.Gtk.FileChooser

    /**
     * Adds `filter` to the list of filters that the user can select between.
     * When a filter is selected, only files that are passed by that
     * filter are displayed.
     * 
     * Note that the `chooser` takes ownership of the filter, so you have to
     * ref and sink it if you want to keep a reference.
     * @param filter a #GtkFileFilter
     */
    addFilter(filter: FileFilter): void
    /**
     * Adds a folder to be displayed with the shortcut folders in a file chooser.
     * Note that shortcut folders do not get saved, as they are provided by the
     * application.  For example, you can use this to add a
     * "/usr/share/mydrawprogram/Clipart" folder to the volume list.
     * @param folder filename of the folder to add
     */
    addShortcutFolder(folder: string): boolean
    /**
     * Adds a folder URI to be displayed with the shortcut folders in a file
     * chooser.  Note that shortcut folders do not get saved, as they are provided
     * by the application.  For example, you can use this to add a
     * "file:///usr/share/mydrawprogram/Clipart" folder to the volume list.
     * @param uri URI of the folder to add
     */
    addShortcutFolderUri(uri: string): boolean
    /**
     * Gets the type of operation that the file chooser is performing; see
     * gtk_file_chooser_set_action().
     */
    getAction(): FileChooserAction
    /**
     * Gets whether file choser will offer to create new folders.
     * See gtk_file_chooser_set_create_folders().
     */
    getCreateFolders(): boolean
    /**
     * Gets the current folder of `chooser` as a local filename.
     * See gtk_file_chooser_set_current_folder().
     * 
     * Note that this is the folder that the file chooser is currently displaying
     * (e.g. "/home/username/Documents"), which is <emphasis>not the same</emphasis>
     * as the currently-selected folder if the chooser is in
     * %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode
     * (e.g. "/home/username/Documents/selected-folder/".  To get the
     * currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
     * usual way to get the selection.
     */
    getCurrentFolder(): string
    /**
     * Gets the current folder of `chooser` as #GFile.
     * See gtk_file_chooser_get_current_folder_uri().
     */
    getCurrentFolderFile(): Gio.File
    /**
     * Gets the current folder of `chooser` as an URI.
     * See gtk_file_chooser_set_current_folder_uri().
     * 
     * Note that this is the folder that the file chooser is currently displaying
     * (e.g. "file:///home/username/Documents"), which is <emphasis>not the same</emphasis>
     * as the currently-selected folder if the chooser is in
     * %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode
     * (e.g. "file:///home/username/Documents/selected-folder/".  To get the
     * currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
     * usual way to get the selection.
     */
    getCurrentFolderUri(): string
    /**
     * Queries whether a file chooser is set to confirm for overwriting when the user
     * types a file name that already exists.
     */
    getDoOverwriteConfirmation(): boolean
    /**
     * Gets the current preview widget; see
     * gtk_file_chooser_set_extra_widget().
     */
    getExtraWidget(): Widget
    /**
     * Gets the #GFile for the currently selected file in
     * the file selector. If multiple files are selected,
     * one of the files will be returned at random.
     * 
     * If the file chooser is in folder mode, this function returns the selected
     * folder.
     */
    getFile(): Gio.File
    /**
     * Gets the filename for the currently selected file in
     * the file selector. If multiple files are selected,
     * one of the filenames will be returned at random.
     * 
     * If the file chooser is in folder mode, this function returns the selected
     * folder.
     */
    getFilename(): string
    /**
     * Lists all the selected files and subfolders in the current folder of
     * `chooser`. The returned names are full absolute paths. If files in the current
     * folder cannot be represented as local filenames they will be ignored. (See
     * gtk_file_chooser_get_uris())
     */
    getFilenames(): string[]
    /**
     * Lists all the selected files and subfolders in the current folder of `chooser`
     * as #GFile. An internal function, see gtk_file_chooser_get_uris().
     */
    getFiles(): Gio.File[]
    /**
     * Gets the current filter; see gtk_file_chooser_set_filter().
     */
    getFilter(): FileFilter
    /**
     * Gets whether only local files can be selected in the
     * file selector. See gtk_file_chooser_set_local_only()
     */
    getLocalOnly(): boolean
    /**
     * Gets the #GFile that should be previewed in a custom preview
     * Internal function, see gtk_file_chooser_get_preview_uri().
     */
    getPreviewFile(): Gio.File
    /**
     * Gets the filename that should be previewed in a custom preview
     * widget. See gtk_file_chooser_set_preview_widget().
     */
    getPreviewFilename(): string
    /**
     * Gets the URI that should be previewed in a custom preview
     * widget. See gtk_file_chooser_set_preview_widget().
     */
    getPreviewUri(): string
    /**
     * Gets the current preview widget; see
     * gtk_file_chooser_set_preview_widget().
     */
    getPreviewWidget(): Widget
    /**
     * Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()
     * should be shown for the current filename. See
     * gtk_file_chooser_set_preview_widget_active().
     */
    getPreviewWidgetActive(): boolean
    /**
     * Gets whether multiple files can be selected in the file
     * selector. See gtk_file_chooser_set_select_multiple().
     */
    getSelectMultiple(): boolean
    /**
     * Gets whether hidden files and folders are displayed in the file selector.
     * See gtk_file_chooser_set_show_hidden().
     */
    getShowHidden(): boolean
    /**
     * Gets the URI for the currently selected file in
     * the file selector. If multiple files are selected,
     * one of the filenames will be returned at random.
     * 
     * If the file chooser is in folder mode, this function returns the selected
     * folder.
     */
    getUri(): string
    /**
     * Lists all the selected files and subfolders in the current folder of
     * `chooser`. The returned names are full absolute URIs.
     */
    getUris(): string[]
    /**
     * Gets whether a stock label should be drawn with the name of the previewed
     * file.  See gtk_file_chooser_set_use_preview_label().
     */
    getUsePreviewLabel(): boolean
    /**
     * Lists the current set of user-selectable filters; see
     * gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
     */
    listFilters(): FileFilter[]
    /**
     * Queries the list of shortcut folders in the file chooser, as set by
     * gtk_file_chooser_add_shortcut_folder_uri().
     */
    listShortcutFolderUris(): string[]
    /**
     * Queries the list of shortcut folders in the file chooser, as set by
     * gtk_file_chooser_add_shortcut_folder().
     */
    listShortcutFolders(): string[]
    /**
     * Removes `filter` from the list of filters that the user can select between.
     * @param filter a #GtkFileFilter
     */
    removeFilter(filter: FileFilter): void
    /**
     * Removes a folder from a file chooser's list of shortcut folders.
     * @param folder filename of the folder to remove
     */
    removeShortcutFolder(folder: string): boolean
    /**
     * Removes a folder URI from a file chooser's list of shortcut folders.
     * @param uri URI of the folder to remove
     */
    removeShortcutFolderUri(uri: string): boolean
    /**
     * Selects all the files in the current folder of a file chooser.
     */
    selectAll(): void
    /**
     * Selects the file referred to by `file`. An internal function. See
     * _gtk_file_chooser_select_uri().
     * @param file the file to select
     */
    selectFile(file: Gio.File): boolean
    /**
     * Selects a filename. If the file name isn't in the current
     * folder of `chooser,` then the current folder of `chooser` will
     * be changed to the folder containing `filename`.
     * @param filename the filename to select
     */
    selectFilename(filename: string): boolean
    /**
     * Selects the file to by `uri`. If the URI doesn't refer to a
     * file in the current folder of `chooser,` then the current folder of
     * `chooser` will be changed to the folder containing `filename`.
     * @param uri the URI to select
     */
    selectUri(uri: string): boolean
    /**
     * Sets the type of operation that the chooser is performing; the
     * user interface is adapted to suit the selected action. For example,
     * an option to create a new folder might be shown if the action is
     * %GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
     * %GTK_FILE_CHOOSER_ACTION_OPEN.
     * @param action the action that the file selector is performing
     */
    setAction(action: FileChooserAction): void
    /**
     * Sets whether file choser will offer to create new folders.
     * This is only relevant if the action is not set to be
     * %GTK_FILE_CHOOSER_ACTION_OPEN.
     * @param createFolders %TRUE if the New Folder button should be displayed
     */
    setCreateFolders(createFolders: boolean): void
    /**
     * Sets the current folder for `chooser` from a local filename.
     * The user will be shown the full contents of the current folder,
     * plus user interface elements for navigating to other folders.
     * @param filename the full path of the new current folder
     */
    setCurrentFolder(filename: string): boolean
    /**
     * Sets the current folder for `chooser` from a #GFile.
     * Internal function, see gtk_file_chooser_set_current_folder_uri().
     * @param file the #GFile for the new folder
     */
    setCurrentFolderFile(file: Gio.File): boolean
    /**
     * Sets the current folder for `chooser` from an URI.
     * The user will be shown the full contents of the current folder,
     * plus user interface elements for navigating to other folders.
     * @param uri the URI for the new current folder
     */
    setCurrentFolderUri(uri: string): boolean
    /**
     * Sets the current name in the file selector, as if entered
     * by the user. Note that the name passed in here is a UTF-8
     * string rather than a filename. This function is meant for
     * such uses as a suggested name in a "Save As..." dialog.
     * 
     * If you want to preselect a particular existing file, you should use
     * gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead.
     * Please see the documentation for those functions for an example of using
     * gtk_file_chooser_set_current_name() as well.
     * @param name the filename to use, as a UTF-8 string
     */
    setCurrentName(name: string): void
    /**
     * Sets whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode will present
     * a confirmation dialog if the user types a file name that already exists.  This
     * is %FALSE by default.
     * 
     * Regardless of this setting, the `chooser` will emit the
     * #GtkFileChooser::confirm-overwrite signal when appropriate.
     * 
     * If all you need is the stock confirmation dialog, set this property to %TRUE.
     * You can override the way confirmation is done by actually handling the
     * #GtkFileChooser::confirm-overwrite signal; please refer to its documentation
     * for the details.
     * @param doOverwriteConfirmation whether to confirm overwriting in save mode
     */
    setDoOverwriteConfirmation(doOverwriteConfirmation: boolean): void
    /**
     * Sets an application-supplied widget to provide extra options to the user.
     * @param extraWidget widget for extra options
     */
    setExtraWidget(extraWidget: Widget): void
    /**
     * Sets `file` as the current filename for the file chooser, by changing
     * to the file's parent folder and actually selecting the file in list.  If
     * the `chooser` is in %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name
     * will also appear in the dialog's file name entry.
     * 
     * If the file name isn't in the current folder of `chooser,` then the current
     * folder of `chooser` will be changed to the folder containing `filename`. This
     * is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
     * gtk_file_chooser_select_filename().
     * 
     * Note that the file must exist, or nothing will be done except
     * for the directory change.
     * 
     * If you are implementing a <guimenuitem>File/Save As...</guimenuitem> dialog,
     * you should use this function if you already have a file name to which the
     * user may save; for example, when the user opens an existing file and then
     * does <guimenuitem>File/Save As...</guimenuitem> on it.  If you don't have
     * a file name already &mdash; for example, if the user just created a new
     * file and is saving it for the first time, do not call this function.
     * Instead, use something similar to this:
     * |[
     * if (document_is_new)
     *   {
     *     /&ast; the user just created a new document &ast;/
     *     gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);
     *     gtk_file_chooser_set_current_name (chooser, "Untitled document");
     *   }
     * else
     *   {
     *     /&ast; the user edited an existing document &ast;/
     *     gtk_file_chooser_set_file (chooser, existing_file);
     *   }
     * ```
     * 
     * @param file the #GFile to set as current
     */
    setFile(file: Gio.File): boolean
    /**
     * Sets `filename` as the current filename for the file chooser, by changing
     * to the file's parent folder and actually selecting the file in list.  If
     * the `chooser` is in %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name
     * will also appear in the dialog's file name entry.
     * 
     * If the file name isn't in the current folder of `chooser,` then the current
     * folder of `chooser` will be changed to the folder containing `filename`. This
     * is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
     * gtk_file_chooser_select_filename().
     * 
     * Note that the file must exist, or nothing will be done except
     * for the directory change.
     * 
     * If you are implementing a <guimenuitem>File/Save As...</guimenuitem> dialog,
     * you should use this function if you already have a file name to which the
     * user may save; for example, when the user opens an existing file and then
     * does <guimenuitem>File/Save As...</guimenuitem> on it.  If you don't have
     * a file name already &mdash; for example, if the user just created a new
     * file and is saving it for the first time, do not call this function.
     * Instead, use something similar to this:
     * |[
     * if (document_is_new)
     *   {
     *     /&ast; the user just created a new document &ast;/
     *     gtk_file_chooser_set_current_folder (chooser, default_folder_for_saving);
     *     gtk_file_chooser_set_current_name (chooser, "Untitled document");
     *   }
     * else
     *   {
     *     /&ast; the user edited an existing document &ast;/
     *     gtk_file_chooser_set_filename (chooser, existing_filename);
     *   }
     * ```
     * 
     * @param filename the filename to set as current
     */
    setFilename(filename: string): boolean
    /**
     * Sets the current filter; only the files that pass the
     * filter will be displayed. If the user-selectable list of filters
     * is non-empty, then the filter should be one of the filters
     * in that list. Setting the current filter when the list of
     * filters is empty is useful if you want to restrict the displayed
     * set of files without letting the user change it.
     * @param filter a #GtkFileFilter
     */
    setFilter(filter: FileFilter): void
    /**
     * Sets whether only local files can be selected in the
     * file selector. If `local_only` is %TRUE (the default),
     * then the selected file are files are guaranteed to be
     * accessible through the operating systems native file
     * file system and therefore the application only
     * needs to worry about the filename functions in
     * #GtkFileChooser, like gtk_file_chooser_get_filename(),
     * rather than the URI functions like
     * gtk_file_chooser_get_uri(),
     * 
     * On some systems non-native files may still be
     * available using the native filesystem via a userspace
     * filesystem (FUSE).
     * @param localOnly %TRUE if only local files can be selected
     */
    setLocalOnly(localOnly: boolean): void
    /**
     * Sets an application-supplied widget to use to display a custom preview
     * of the currently selected file. To implement a preview, after setting the
     * preview widget, you connect to the #GtkFileChooser::update-preview
     * signal, and call gtk_file_chooser_get_preview_filename() or
     * gtk_file_chooser_get_preview_uri() on each change. If you can
     * display a preview of the new file, update your widget and
     * set the preview active using gtk_file_chooser_set_preview_widget_active().
     * Otherwise, set the preview inactive.
     * 
     * When there is no application-supplied preview widget, or the
     * application-supplied preview widget is not active, the file chooser
     * may display an internally generated preview of the current file or
     * it may display no preview at all.
     * @param previewWidget widget for displaying preview.
     */
    setPreviewWidget(previewWidget: Widget): void
    /**
     * Sets whether the preview widget set by
     * gtk_file_chooser_set_preview_widget() should be shown for the
     * current filename. When `active` is set to false, the file chooser
     * may display an internally generated preview of the current file
     * or it may display no preview at all. See
     * gtk_file_chooser_set_preview_widget() for more details.
     * @param active whether to display the user-specified preview widget
     */
    setPreviewWidgetActive(active: boolean): void
    /**
     * Sets whether multiple files can be selected in the file selector.  This is
     * only relevant if the action is set to be %GTK_FILE_CHOOSER_ACTION_OPEN or
     * %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
     * @param selectMultiple %TRUE if multiple files can be selected.
     */
    setSelectMultiple(selectMultiple: boolean): void
    /**
     * Sets whether hidden files and folders are displayed in the file selector.
     * @param showHidden %TRUE if hidden files and folders should be displayed.
     */
    setShowHidden(showHidden: boolean): void
    /**
     * Sets the file referred to by `uri` as the current file for the file chooser,
     * by changing to the URI's parent folder and actually selecting the URI in the
     * list.  If the `chooser` is %GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI's base
     * name will also appear in the dialog's file name entry.
     * 
     * If the URI isn't in the current folder of `chooser,` then the current folder
     * of `chooser` will be changed to the folder containing `uri`. This is equivalent
     * to a sequence of gtk_file_chooser_unselect_all() followed by
     * gtk_file_chooser_select_uri().
     * 
     * Note that the URI must exist, or nothing will be done except for the
     * directory change.
     * If you are implementing a <guimenuitem>File/Save As...</guimenuitem> dialog,
     * you should use this function if you already have a file name to which the
     * user may save; for example, when the user opens an existing file and then
     * does <guimenuitem>File/Save As...</guimenuitem> on it.  If you don't have
     * a file name already &mdash; for example, if the user just created a new
     * file and is saving it for the first time, do not call this function.
     * Instead, use something similar to this:
     * |[
     * if (document_is_new)
     *   {
     *     /&ast; the user just created a new document &ast;/
     *     gtk_file_chooser_set_current_folder_uri (chooser, default_folder_for_saving);
     *     gtk_file_chooser_set_current_name (chooser, "Untitled document");
     *   }
     * else
     *   {
     *     /&ast; the user edited an existing document &ast;/
     *     gtk_file_chooser_set_uri (chooser, existing_uri);
     *   }
     * ```
     * 
     * @param uri the URI to set as current
     */
    setUri(uri: string): boolean
    /**
     * Sets whether the file chooser should display a stock label with the name of
     * the file that is being previewed; the default is %TRUE.  Applications that
     * want to draw the whole preview area themselves should set this to %FALSE and
     * display the name themselves in their preview widget.
     * 
     * See also: gtk_file_chooser_set_preview_widget()
     * @param useLabel whether to display a stock label with the name of the previewed file
     */
    setUsePreviewLabel(useLabel: boolean): void
    /**
     * Unselects all the files in the current folder of a file chooser.
     */
    unselectAll(): void
    /**
     * Unselects the file referred to by `file`. If the file is not in the current
     * directory, does not exist, or is otherwise not currently selected, does nothing.
     * @param file a #GFile
     */
    unselectFile(file: Gio.File): void
    /**
     * Unselects a currently selected filename. If the filename
     * is not in the current directory, does not exist, or
     * is otherwise not currently selected, does nothing.
     * @param filename the filename to unselect
     */
    unselectFilename(filename: string): void
    /**
     * Unselects the file referred to by `uri`. If the file
     * is not in the current directory, does not exist, or
     * is otherwise not currently selected, does nothing.
     * @param uri the URI to unselect
     */
    unselectUri(uri: string): void

    // Conflicting methods

    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void

    // Own signals of Gtk-2.0.Gtk.FileChooser

    connect(sigName: "confirm-overwrite", callback: FileChooser.ConfirmOverwriteSignalCallback): number
    on(sigName: "confirm-overwrite", callback: FileChooser.ConfirmOverwriteSignalCallback): number
    once(sigName: "confirm-overwrite", callback: FileChooser.ConfirmOverwriteSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "confirm-overwrite", ...args: any[]): void
    connect(sigName: "current-folder-changed", callback: FileChooser.CurrentFolderChangedSignalCallback): number
    on(sigName: "current-folder-changed", callback: FileChooser.CurrentFolderChangedSignalCallback): number
    once(sigName: "current-folder-changed", callback: FileChooser.CurrentFolderChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "current-folder-changed", ...args: any[]): void
    connect(sigName: "file-activated", callback: FileChooser.FileActivatedSignalCallback): number
    on(sigName: "file-activated", callback: FileChooser.FileActivatedSignalCallback): number
    once(sigName: "file-activated", callback: FileChooser.FileActivatedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "file-activated", ...args: any[]): void
    connect(sigName: "selection-changed", callback: FileChooser.SelectionChangedSignalCallback): number
    on(sigName: "selection-changed", callback: FileChooser.SelectionChangedSignalCallback): number
    once(sigName: "selection-changed", callback: FileChooser.SelectionChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-changed", ...args: any[]): void
    connect(sigName: "update-preview", callback: FileChooser.UpdatePreviewSignalCallback): number
    on(sigName: "update-preview", callback: FileChooser.UpdatePreviewSignalCallback): number
    once(sigName: "update-preview", callback: FileChooser.UpdatePreviewSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "update-preview", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.FileChooser

    connect(sigName: "notify::action", callback: any): number
    on(sigName: "notify::action", callback: any): number
    once(sigName: "notify::action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action", ...args: any[]): void
    connect(sigName: "notify::create-folders", callback: any): number
    on(sigName: "notify::create-folders", callback: any): number
    once(sigName: "notify::create-folders", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::create-folders", ...args: any[]): void
    connect(sigName: "notify::do-overwrite-confirmation", callback: any): number
    on(sigName: "notify::do-overwrite-confirmation", callback: any): number
    once(sigName: "notify::do-overwrite-confirmation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::do-overwrite-confirmation", ...args: any[]): void
    connect(sigName: "notify::extra-widget", callback: any): number
    on(sigName: "notify::extra-widget", callback: any): number
    once(sigName: "notify::extra-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extra-widget", ...args: any[]): void
    connect(sigName: "notify::file-system-backend", callback: any): number
    on(sigName: "notify::file-system-backend", callback: any): number
    once(sigName: "notify::file-system-backend", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::file-system-backend", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::preview-widget", callback: any): number
    on(sigName: "notify::preview-widget", callback: any): number
    once(sigName: "notify::preview-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget", ...args: any[]): void
    connect(sigName: "notify::preview-widget-active", callback: any): number
    on(sigName: "notify::preview-widget-active", callback: any): number
    once(sigName: "notify::preview-widget-active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget-active", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-hidden", callback: any): number
    on(sigName: "notify::show-hidden", callback: any): number
    once(sigName: "notify::show-hidden", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-hidden", ...args: any[]): void
    connect(sigName: "notify::use-preview-label", callback: any): number
    on(sigName: "notify::use-preview-label", callback: any): number
    once(sigName: "notify::use-preview-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-preview-label", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkFileChooser is an interface that can be implemented by file
 * selection widgets.  In GTK+, the main objects that implement this
 * interface are #GtkFileChooserWidget, #GtkFileChooserDialog, and
 * #GtkFileChooserButton.  You do not need to write an object that
 * implements the #GtkFileChooser interface unless you are trying to
 * adapt an existing file selector to expose a standard programming
 * interface.
 * 
 * #GtkFileChooser allows for shortcuts to various places in the filesystem.
 * In the default implementation these are displayed in the left pane. It
 * may be a bit confusing at first that these shortcuts come from various
 * sources and in various flavours, so lets explain the terminology here:
 * <variablelist>
 *    <varlistentry>
 *       <term>Bookmarks</term>
 *       <listitem>
 *          are created by the user, by dragging folders from the
 *          right pane to the left pane, or by using the "Add". Bookmarks
 *          can be renamed and deleted by the user.
 *       </listitem>
 *    </varlistentry>
 *    <varlistentry>
 *       <term>Shortcuts</term>
 *       <listitem>
 *          can be provided by the application or by the underlying filesystem
 *          abstraction (e.g. both the gnome-vfs and the Windows filesystems
 *          provide "Desktop" shortcuts). Shortcuts cannot be modified by the
 *          user.
 *       </listitem>
 *    </varlistentry>
 *    <varlistentry>
 *       <term>Volumes</term>
 *       <listitem>
 *          are provided by the underlying filesystem abstraction. They are
 *          the "roots" of the filesystem.
 *       </listitem>
 *    </varlistentry>
 * </variablelist>
 * 
 * <refsect2 id="gtkfilechooser-encodings">
 * <title>File Names and Encodings</title>
 * When the user is finished selecting files in a
 * #GtkFileChooser, your program can get the selected names
 * either as filenames or as URIs.  For URIs, the normal escaping
 * rules are applied if the URI contains non-ASCII characters.
 * However, filenames are <emphasis>always</emphasis> returned in
 * the character set specified by the
 * <envar>G_FILENAME_ENCODING</envar> environment variable.
 * Please see the Glib documentation for more details about this
 * variable.
 * <note>
 *    This means that while you can pass the result of
 *    gtk_file_chooser_get_filename() to
 *    <function>open(2)</function> or
 *    <function>fopen(3)</function>, you may not be able to
 *    directly set it as the text of a #GtkLabel widget unless you
 *    convert it first to UTF-8, which all GTK+ widgets expect.
 *    You should use g_filename_to_utf8() to convert filenames
 *    into strings that can be passed to GTK+ widgets.
 * </note>
 * </refsect2>
 * <refsect2 id="gtkfilechooser-preview">
 * <title>Adding a Preview Widget</title>
 * <para>
 * You can add a custom preview widget to a file chooser and then
 * get notification about when the preview needs to be updated.
 * To install a preview widget, use
 * gtk_file_chooser_set_preview_widget().  Then, connect to the
 * #GtkFileChooser::update-preview signal to get notified when
 * you need to update the contents of the preview.
 * </para>
 * <para>
 * Your callback should use
 * gtk_file_chooser_get_preview_filename() to see what needs
 * previewing.  Once you have generated the preview for the
 * corresponding file, you must call
 * gtk_file_chooser_set_preview_widget_active() with a boolean
 * flag that indicates whether your callback could successfully
 * generate a preview.
 * </para>
 * <example id="example-gtkfilechooser-preview">
 * <title>Sample Usage</title>
 * <programlisting>
 * {
 *   GtkImage *preview;
 * 
 *   ...
 * 
 *   preview = gtk_image_new (<!-- -->);
 * 
 *   gtk_file_chooser_set_preview_widget (my_file_chooser, preview);
 *   g_signal_connect (my_file_chooser, "update-preview",
 * 		    G_CALLBACK (update_preview_cb), preview);
 * }
 * 
 * static void
 * update_preview_cb (GtkFileChooser *file_chooser, gpointer data)
 * {
 *   GtkWidget *preview;
 *   char *filename;
 *   GdkPixbuf *pixbuf;
 *   gboolean have_preview;
 * 
 *   preview = GTK_WIDGET (data);
 *   filename = gtk_file_chooser_get_preview_filename (file_chooser);
 * 
 *   pixbuf = gdk_pixbuf_new_from_file_at_size (filename, 128, 128, NULL);
 *   have_preview = (pixbuf != NULL);
 *   g_free (filename);
 * 
 *   gtk_image_set_from_pixbuf (GTK_IMAGE (preview), pixbuf);
 *   if (pixbuf)
 *     g_object_unref (pixbuf);
 * 
 *   gtk_file_chooser_set_preview_widget_active (file_chooser, have_preview);
 * }
 * </programlisting>
 * </example>
 * </refsect2>
 * <refsect2 id="gtkfilechooser-extra">
 * <title>Adding Extra Widgets</title>
 * <para>
 * You can add extra widgets to a file chooser to provide options
 * that are not present in the default design.  For example, you
 * can add a toggle button to give the user the option to open a
 * file in read-only mode.  You can use
 * gtk_file_chooser_set_extra_widget() to insert additional
 * widgets in a file chooser.
 * </para>
 * <example id="example-gtkfilechooser-extra">
 * <title>Sample Usage</title>
 * <programlisting>
 * 
 *   GtkWidget *toggle;
 * 
 *   ...
 * 
 *   toggle = gtk_check_button_new_with_label ("Open file read-only");
 *   gtk_widget_show (toggle);
 *   gtk_file_chooser_set_extra_widget (my_file_chooser, toggle);
 * }
 * </programlisting>
 * </example>
 * <note>
 *    If you want to set more than one extra widget in the file
 *    chooser, you can a container such as a #GtkVBox or a #GtkTable
 *    and include your widgets in it.  Then, set the container as
 *    the whole extra widget.
 * </note>
 * </refsect2>
 * <refsect2 id="gtkfilechooser-key-bindings">
 * <title>Key Bindings</title>
 * <para>
 * Internally, GTK+ implements a file chooser's graphical user
 * interface with the private
 * <classname>GtkFileChooserDefaultClass</classname>.  This
 * widget has several <link linkend="gtk-Bindings">key
 * bindings</link> and their associated signals.  This section
 * describes the available key binding signals.
 * </para>
 * <example id="gtkfilechooser-key-binding-example">
 * <title>GtkFileChooser key binding example</title>
 * <para>
 * The default keys that activate the key-binding signals in
 * <classname>GtkFileChooserDefaultClass</classname> are as
 * follows:
 * </para>
 * 	<informaltable>
 * 	  <tgroup cols="2">
 * 	    <tbody>
 * 	      <row>
 * 		<entry>Signal name</entry>
 * 		<entry>Default key combinations</entry>
 * 	      </row>
 * 	      <row>
 * 		<entry>location-popup</entry>
 * 		<entry>
 * 		  <keycombo><keycap>Control</keycap><keycap>L</keycap></keycombo> (empty path);
 * 		  <keycap>/</keycap> (path of "/")
 *                <footnote>
 * 		      Both the individual <keycap>/</keycap> key and the
 * 		      numeric keypad's "divide" key are supported.
 * 		  </footnote>;
 * 		  <keycap>~</keycap> (path of "~")
 * 		</entry>
 * 	      </row>
 * 	      <row>
 * 		<entry>up-folder</entry>
 * 		<entry>
 * 		  <keycombo><keycap>Alt</keycap><keycap>Up</keycap></keycombo>;
 *                <keycombo><keycap>Alt</keycap><keycap>Shift</keycap><keycap>Up</keycap></keycombo>
 *                <footnote>
 * 		      Both the individual Up key and the numeric
 * 		      keypad's Up key are supported.
 * 		  </footnote>;
 * 		  <keycap>Backspace</keycap>
 * 		</entry>
 * 	      </row>
 * 	      <row>
 * 		<entry>down-folder</entry>
 * 		<entry>
 *                <keycombo><keycap>Alt</keycap><keycap>Down</keycap></keycombo>;
 *                <keycombo><keycap>Alt</keycap><keycap>Shift</keycap><keycap>Down</keycap></keycombo>
 *                <footnote>
 * 		      Both the individual Down key and the numeric
 * 		      keypad's Down key are supported.
 * 		  </footnote>
 *              </entry>
 * 	      </row>
 * 	      <row>
 * 		<entry>home-folder</entry>
 * 		<entry><keycombo><keycap>Alt</keycap><keycap>Home</keycap></keycombo></entry>
 * 	      </row>
 * 	      <row>
 * 		<entry>desktop-folder</entry>
 * 		<entry><keycombo><keycap>Alt</keycap><keycap>D</keycap></keycombo></entry>
 * 	      </row>
 * 	      <row>
 * 		<entry>quick-bookmark</entry>
 * 		<entry><keycombo><keycap>Alt</keycap><keycap>1</keycap></keycombo> through <keycombo><keycap>Alt</keycap><keycap>0</keycap></keycombo></entry>
 * 	      </row>
 * 	    </tbody>
 * 	  </tgroup>
 * 	</informaltable>
 * <para>
 * You can change these defaults to something else.  For
 * example, to add a <keycap>Shift</keycap> modifier to a few
 * of the default bindings, you can include the following
 * fragment in your <filename>.gtkrc-3.0</filename> file:
 * </para>
 * <programlisting>
 * binding "my-own-gtkfilechooser-bindings" {
 * 	bind "&lt;Alt&gt;&lt;Shift&gt;Up" {
 * 		"up-folder" ()
 * 	}
 * 	bind "&lt;Alt&gt;&lt;Shift&gt;Down" {
 * 		"down-folder" ()
 * 	}
 * 	bind "&lt;Alt&gt;&lt;Shift&gt;Home" {
 * 		"home-folder" ()
 * 	}
 * }
 * 
 * class "GtkFileChooserDefault" binding "my-own-gtkfilechooser-bindings"
 * </programlisting>
 * </example>
 * <refsect3 id="GtkFileChooserDefault-location-popup">
 * <title>The &quot;GtkFileChooserDefault::location-popup&quot; signal</title>
 * <programlisting>
 *    void user_function (GtkFileChooserDefault *chooser,
 *                        const char            *path,
 * <link linkend="gpointer">gpointer</link>      user_data);
 * </programlisting>
 * <para>
 * This is used to make the file chooser show a "Location"
 * dialog which the user can use to manually type the name of
 * the file he wishes to select.  The
 * <parameter>path</parameter> argument is a string that gets
 * put in the text entry for the file name.  By default this is bound to
 * <keycombo><keycap>Control</keycap><keycap>L</keycap></keycombo>
 * with a <parameter>path</parameter> string of "" (the empty
 * string).  It is also bound to <keycap>/</keycap> with a
 * <parameter>path</parameter> string of "<literal>/</literal>"
 * (a slash):  this lets you type <keycap>/</keycap> and
 * immediately type a path name.  On Unix systems, this is bound to
 * <keycap>~</keycap> (tilde) with a <parameter>path</parameter> string
 * of "~" itself for access to home directories.
 * </para>
 * 	<variablelist role="params">
 * 	  <varlistentry>
 * 	    <term><parameter>chooser</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		the object which received the signal.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>path</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		default contents for the text entry for the file name
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>user_data</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		user data set when the signal handler was connected.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	</variablelist>
 * <note>
 *    You can create your own bindings for the
 *    #GtkFileChooserDefault::location-popup signal with custom
 *    <parameter>path</parameter> strings, and have a crude form
 *    of easily-to-type bookmarks.  For example, say you access
 *    the path <filename>/home/username/misc</filename> very
 *    frequently.  You could then create an <keycombo>
 *    <keycap>Alt</keycap> <keycap>M</keycap> </keycombo>
 *    shortcut by including the following in your
 *    <filename>.gtkrc-3.0</filename>:
 *    <programlisting>
 *    binding "misc-shortcut" {
 *       bind "&lt;Alt&gt;M" {
 *          "location-popup" ("/home/username/misc")
 * 	 }
 *    }
 * 
 *    class "GtkFileChooserDefault" binding "misc-shortcut"
 *    </programlisting>
 * </note>
 * </refsect3>
 * <refsect3 id="GtkFileChooserDefault-up-folder">
 * <title>The &quot;GtkFileChooserDefault::up-folder&quot; signal</title>
 * <programlisting>
 *           void user_function (GtkFileChooserDefault *chooser,
 *                               <link linkend="gpointer">gpointer</link> user_data);
 * </programlisting>
 * <para>
 * This is used to make the file chooser go to the parent of
 * the current folder in the file hierarchy.  By default this
 * is bound to <keycap>Backspace</keycap> and
 * <keycombo><keycap>Alt</keycap><keycap>Up</keycap></keycombo>
 * (the Up key in the numeric keypad also works).
 * </para>
 * 	<variablelist role="params">
 * 	  <varlistentry>
 * 	    <term><parameter>chooser</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		the object which received the signal.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>user_data</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		user data set when the signal handler was connected.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	</variablelist>
 * </refsect3>
 * <refsect3 id="GtkFileChooserDefault-down-folder">
 * <title>The &quot;GtkFileChooserDefault::down-folder&quot; signal</title>
 * <programlisting>
 *           void user_function (GtkFileChooserDefault *chooser,
 *                               <link linkend="gpointer">gpointer</link> user_data);
 * </programlisting>
 * <para>
 * This is used to make the file chooser go to a child of the
 * current folder in the file hierarchy.  The subfolder that
 * will be used is displayed in the path bar widget of the file
 * chooser.  For example, if the path bar is showing
 * "/foo/<emphasis>bar/</emphasis>baz", then this will cause
 * the file chooser to switch to the "baz" subfolder.  By
 * default this is bound to
 * <keycombo><keycap>Alt</keycap><keycap>Down</keycap></keycombo>
 * (the Down key in the numeric keypad also works).
 * </para>
 * 	<variablelist role="params">
 * 	  <varlistentry>
 * 	    <term><parameter>chooser</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		the object which received the signal.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>user_data</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		user data set when the signal handler was connected.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	</variablelist>
 * </refsect3>
 * <refsect3 id="GtkFileChooserDefault-home-folder">
 * <title>The &quot;GtkFileChooserDefault::home-folder&quot; signal</title>
 * <programlisting>
 *           void user_function (GtkFileChooserDefault *chooser,
 *                               <link linkend="gpointer">gpointer</link> user_data);
 * </programlisting>
 * <para>
 * This is used to make the file chooser show the user's home
 * folder in the file list.  By default this is bound to
 * <keycombo><keycap>Alt</keycap><keycap>Home</keycap></keycombo>
 * (the Home key in the numeric keypad also works).
 * </para>
 * 	<variablelist role="params">
 * 	  <varlistentry>
 * 	    <term><parameter>chooser</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		the object which received the signal.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>user_data</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		user data set when the signal handler was connected.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	</variablelist>
 * </refsect3>
 * <refsect3 id="GtkFileChooserDefault-desktop-folder">
 * <title>The &quot;GtkFileChooserDefault::desktop-folder&quot; signal</title>
 * <programlisting>
 *           void user_function (GtkFileChooserDefault *chooser,
 *                               <link linkend="gpointer">gpointer</link> user_data);
 * </programlisting>
 * <para>
 * This is used to make the file chooser show the user's Desktop
 * folder in the file list.  By default this is bound to
 * <keycombo><keycap>Alt</keycap><keycap>D</keycap></keycombo>.
 * </para>
 * 	<variablelist role="params">
 * 	  <varlistentry>
 * 	    <term><parameter>chooser</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		the object which received the signal.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>user_data</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		user data set when the signal handler was connected.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	</variablelist>
 * </refsect3>
 * <refsect3 id="GtkFileChooserDefault-quick-bookmark">
 * <title>The &quot;GtkFileChooserDefault::quick-bookmark&quot; signal</title>
 * <programlisting>
 *           void user_function (GtkFileChooserDefault *chooser,
 *                               gint bookmark_index,
 *                               <link linkend="gpointer">gpointer</link> user_data);
 * </programlisting>
 * <para>
 * This is used to make the file chooser switch to the bookmark
 * specified in the <parameter>bookmark_index</parameter> parameter.
 * For example, if you have three bookmarks, you can pass 0, 1, 2 to
 * this signal to switch to each of them, respectively.  By default this is bound to
 * <keycombo><keycap>Alt</keycap><keycap>1</keycap></keycombo>,
 * <keycombo><keycap>Alt</keycap><keycap>2</keycap></keycombo>,
 * etc. until
 * <keycombo><keycap>Alt</keycap><keycap>0</keycap></keycombo>.  Note
 * that in the default binding,
 * that <keycombo><keycap>Alt</keycap><keycap>1</keycap></keycombo> is
 * actually defined to switch to the bookmark at index 0, and so on
 * successively;
 * <keycombo><keycap>Alt</keycap><keycap>0</keycap></keycombo> is
 * defined to switch to the bookmark at index 10.
 * </para>
 * 	<variablelist role="params">
 * 	  <varlistentry>
 * 	    <term><parameter>chooser</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		the object which received the signal.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>bookmark_indes</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		index of the bookmark to switch to; the indices start at 0.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	  <varlistentry>
 * 	    <term><parameter>user_data</parameter>&nbsp;:</term>
 * 	    <listitem>
 * 	      <simpara>
 * 		user data set when the signal handler was connected.
 * 	      </simpara>
 * 	    </listitem>
 * 	  </varlistentry>
 * 	</variablelist>
 * </refsect3>
 * </refsect2>
 * <refsect2 id="gtkfilechooser-configuration-options">
 * <title>Configuration Options</title>
 * <para>
 * In GTK+ 2.x, the file chooser saves its state and configuration options in a
 * <filename>gtk-2.0/gtkfilechooser.ini</filename> file under the directory that
 * g_get_user_config_dir() returns.  (On Unix, this usually resolves to
 * <filename>$HOME/username/.config/gtk-2.0/gtkfilechooser.ini</filename>.)  While some of
 * the available options can be changed directly through the file chooser's user
 * interface, a couple are only editable by hand or by third-party tools (such
 * as <ulink
 * url="https://wiki.gnome.org/action/show/Apps/GnomeTweakTool">gnome-tweak-tool</ulink>).
 * This section describes the available options.
 * </para>
 * <para>
 * This is a sample of the contents of a <filename>gtkfilechooser.ini</filename>
 * file.  Note that all the following options go under a
 * <literal>[Filechooser Settings]</literal> heading.
 * </para>
 * <programlisting>
 * [Filechooser Settings]
 * LocationMode=filename-entry
 * ShowHidden=false
 * ExpandFolders=true
 * GeometryX=570
 * GeometryY=273
 * GeometryWidth=780
 * GeometryHeight=585
 * ShowSizeColumn=true
 * SortColumn=name
 * SortOrder=ascending
 * StartupMode=recent
 * </programlisting>
 * <refsect3 id="gtkfilechooser-settings-location-mode">
 * <title>LocationMode key</title>
 * <para>
 * The <literal>LocationMode</literal> key controls whether the file chooser
 * shows just a path bar, or a visible entry for the filename as well, for the
 * benefit of typing-oriented users.  The possible string values for these modes
 * are <literal>path-bar</literal> and <literal>filename-entry</literal>,
 * respectively.
 * </para>
 * </refsect3>
 * <refsect3 id="gtkfilechooser-settings-show-hidden">
 * <title>ShowHidden key</title>
 * <para>
 * The <literal>ShowHidden</literal> key controls whether the file chooser shows
 * hidden files or not.  The value can be be <literal>true</literal> or
 * <literal>false</literal>.
 * </para>
 * </refsect3>
 * <refsect3 id="gtkfilechooser-settings-show-size-column">
 * <title>ShowSizeColumn key</title>
 * <para>
 * The <literal>ShowSize</literal> key controls whether the file chooser shows
 * a column with file sizes.  The value can be be <literal>true</literal> or
 * <literal>false</literal>.
 * </para>
 * </refsect3>
 * <refsect3 id="gtkfilechooser-settings-geometry-keys">
 * <title>Geometry keys</title>
 * <para>
 * The four keys <literal>GeometryX</literal>, <literal>GeometryY</literal>,
 * <literal>GeometryWidth</literal>, <literal>GeometryHeight</literal> save the
 * position and dimensions of the #GtkFileChooserDialog's window.
 * </para>
 * </refsect3>
 * <refsect3 id="gtkfilechooser-settings-sort-column">
 * <title>SortColumn key</title>
 * <para>
 * The <literal>SortColumn</literal> key can be one of the strings
 * <literal>name</literal>, <literal>modified</literal>, or
 * <literal>size</literal>.  It controls which of the columns in the file
 * chooser is used for sorting the list of files.
 * </para>
 * </refsect3>
 * <refsect3 id="gtkfilechooser-settings-sort-order">
 * <title>SortOrder key</title>
 * <para>
 * The <literal>SortOrder</literal> key can be one of the strings
 * <literal>ascending</literal> or <literal>descending</literal>.
 * </para>
 * </refsect3>
 * <refsect3 id="gtkfilechooser-settings-startup-mode">
 * <title>StartupMode key</title>
 * <para>
 * The <literal>StartupMode</literal> key controls whether the file chooser
 * starts up showing the list of recently-used files, or the contents of the
 * current working directory.  Respectively, the values can be
 * <literal>recent</literal> or <literal>cwd</literal>.
 * </para>
 * </refsect3>
 * </refsect2>
 * @interface 
 */
export class FileChooser extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.FileChooser

    static name: string

    // Constructors of Gtk-2.0.Gtk.FileChooser

    constructor(config?: FileChooser.ConstructorProperties) 
    _init(config?: FileChooser.ConstructorProperties): void
}

export module Orientable {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Orientable

        /**
         * The orientation of the orientable.
         */
        orientation?: Orientation | null
    }

}

export interface Orientable {

    // Own properties of Gtk-2.0.Gtk.Orientable

    /**
     * The orientation of the orientable.
     */
    orientation: Orientation

    // Owm methods of Gtk-2.0.Gtk.Orientable

    /**
     * Retrieves the orientation of the `orientable`.
     */
    getOrientation(): Orientation
    /**
     * Sets the orientation of the `orientable`.
     * @param orientation the orientable's new orientation.
     */
    setOrientation(orientation: Orientation): void

    // Class property signals of Gtk-2.0.Gtk.Orientable

    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Orientable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Orientable

    static name: string

    // Constructors of Gtk-2.0.Gtk.Orientable

    constructor(config?: Orientable.ConstructorProperties) 
    _init(config?: Orientable.ConstructorProperties): void
}

export module PrintOperationPreview {

    // Signal callback interfaces

    /**
     * Signal callback interface for `got-page-size`
     */
    export interface GotPageSizeSignalCallback {
        (context: PrintContext, pageSetup: PageSetup): void
    }

    /**
     * Signal callback interface for `ready`
     */
    export interface ReadySignalCallback {
        (context: PrintContext): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface PrintOperationPreview {

    // Owm methods of Gtk-2.0.Gtk.PrintOperationPreview

    // Has conflict: endPreview(): void
    // Has conflict: isSelected(pageNr: number): boolean
    // Has conflict: renderPage(pageNr: number): void

    // Own virtual methods of Gtk-2.0.Gtk.PrintOperationPreview

    /**
     * Ends a preview.
     * 
     * This function must be called to finish a custom print preview.
     * @virtual 
     */
    endPreview(): void
    gotPageSize(context: PrintContext, pageSetup: PageSetup): void
    /**
     * Returns whether the given page is included in the set of pages that
     * have been selected for printing.
     * @virtual 
     * @param pageNr a page number
     */
    isSelected(pageNr: number): boolean
    ready(context: PrintContext): void
    /**
     * Renders a page to the preview, using the print context that
     * was passed to the #GtkPrintOperation::preview handler together
     * with `preview`.
     * 
     * A custom iprint preview should use this function in its ::expose
     * handler to render the currently selected page.
     * 
     * Note that this function requires a suitable cairo context to
     * be associated with the print context.
     * @virtual 
     * @param pageNr the page to render
     */
    renderPage(pageNr: number): void

    // Own signals of Gtk-2.0.Gtk.PrintOperationPreview

    connect(sigName: "got-page-size", callback: PrintOperationPreview.GotPageSizeSignalCallback): number
    on(sigName: "got-page-size", callback: PrintOperationPreview.GotPageSizeSignalCallback): number
    once(sigName: "got-page-size", callback: PrintOperationPreview.GotPageSizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "got-page-size", pageSetup: PageSetup, ...args: any[]): void
    connect(sigName: "ready", callback: PrintOperationPreview.ReadySignalCallback): number
    on(sigName: "ready", callback: PrintOperationPreview.ReadySignalCallback): number
    once(sigName: "ready", callback: PrintOperationPreview.ReadySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "ready", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.PrintOperationPreview

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class PrintOperationPreview extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.PrintOperationPreview

    static name: string

    // Constructors of Gtk-2.0.Gtk.PrintOperationPreview

    constructor(config?: PrintOperationPreview.ConstructorProperties) 
    _init(config?: PrintOperationPreview.ConstructorProperties): void
}

export module RecentChooser {

    // Signal callback interfaces

    /**
     * Signal callback interface for `item-activated`
     */
    export interface ItemActivatedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `selection-changed`
     */
    export interface SelectionChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RecentChooser

        /**
         * The #GtkRecentFilter object to be used when displaying
         * the recently used resources.
         */
        filter?: RecentFilter | null
        /**
         * The maximum number of recently used resources to be displayed,
         * or -1 to display all items. By default, the
         * GtkSetting:gtk-recent-files-limit setting is respected: you can
         * override that limit on a particular instance of #GtkRecentChooser
         * by setting this property.
         */
        limit?: number | null
        /**
         * Whether this #GtkRecentChooser should display only local (file:)
         * resources.
         */
        localOnly?: boolean | null
        /**
         * The #GtkRecentManager instance used by the #GtkRecentChooser to
         * display the list of recently used resources.
         */
        recentManager?: RecentManager | null
        /**
         * Allow the user to select multiple resources.
         */
        selectMultiple?: boolean | null
        /**
         * Whether this #GtkRecentChooser should display an icon near the item.
         */
        showIcons?: boolean | null
        /**
         * Whether this #GtkRecentChooser should display the recently used resources
         * even if not present anymore. Setting this to %FALSE will perform a
         * potentially expensive check on every local resource (every remote
         * resource will always be displayed).
         */
        showNotFound?: boolean | null
        showPrivate?: boolean | null
        /**
         * Whether this #GtkRecentChooser should display a tooltip containing the
         * full path of the recently used resources.
         */
        showTips?: boolean | null
        /**
         * Sorting order to be used when displaying the recently used resources.
         */
        sortType?: RecentSortType | null
    }

}

export interface RecentChooser {

    // Own properties of Gtk-2.0.Gtk.RecentChooser

    /**
     * The #GtkRecentFilter object to be used when displaying
     * the recently used resources.
     */
    filter: RecentFilter
    /**
     * The maximum number of recently used resources to be displayed,
     * or -1 to display all items. By default, the
     * GtkSetting:gtk-recent-files-limit setting is respected: you can
     * override that limit on a particular instance of #GtkRecentChooser
     * by setting this property.
     */
    limit: number
    /**
     * Whether this #GtkRecentChooser should display only local (file:)
     * resources.
     */
    localOnly: boolean
    /**
     * The #GtkRecentManager instance used by the #GtkRecentChooser to
     * display the list of recently used resources.
     */
    readonly recentManager: RecentManager
    /**
     * Allow the user to select multiple resources.
     */
    selectMultiple: boolean
    /**
     * Whether this #GtkRecentChooser should display an icon near the item.
     */
    showIcons: boolean
    /**
     * Whether this #GtkRecentChooser should display the recently used resources
     * even if not present anymore. Setting this to %FALSE will perform a
     * potentially expensive check on every local resource (every remote
     * resource will always be displayed).
     */
    showNotFound: boolean
    showPrivate: boolean
    /**
     * Whether this #GtkRecentChooser should display a tooltip containing the
     * full path of the recently used resources.
     */
    showTips: boolean
    /**
     * Sorting order to be used when displaying the recently used resources.
     */
    sortType: RecentSortType

    // Owm methods of Gtk-2.0.Gtk.RecentChooser

    // Has conflict: addFilter(filter: RecentFilter): void
    /**
     * Gets the #GtkRecentInfo currently selected by `chooser`.
     */
    getCurrentItem(): RecentInfo
    // Has conflict: getCurrentUri(): string
    /**
     * Gets the #GtkRecentFilter object currently used by `chooser` to affect
     * the display of the recently used resources.
     */
    getFilter(): RecentFilter
    // Has conflict: getItems(): RecentInfo[]
    /**
     * Gets the number of items returned by gtk_recent_chooser_get_items()
     * and gtk_recent_chooser_get_uris().
     */
    getLimit(): number
    /**
     * Gets whether only local resources should be shown in the recently used
     * resources selector.  See gtk_recent_chooser_set_local_only()
     */
    getLocalOnly(): boolean
    /**
     * Gets whether `chooser` can select multiple items.
     */
    getSelectMultiple(): boolean
    /**
     * Retrieves whether `chooser` should show an icon near the resource.
     */
    getShowIcons(): boolean
    /**
     * Retrieves whether `chooser` should show the recently used resources that
     * were not found.
     */
    getShowNotFound(): boolean
    /**
     * Returns whether `chooser` should display recently used resources
     * prepended by a unique number.
     */
    getShowNumbers(): boolean
    /**
     * Returns whether `chooser` should display recently used resources
     * registered as private.
     */
    getShowPrivate(): boolean
    /**
     * Gets whether `chooser` should display tooltips containing the full path
     * of a recently user resource.
     */
    getShowTips(): boolean
    /**
     * Gets the value set by gtk_recent_chooser_set_sort_type().
     */
    getSortType(): RecentSortType
    /**
     * Gets the URI of the recently used resources.
     * 
     * The return value of this function is affected by the "sort-type" and "limit"
     * properties of `chooser`.
     * 
     * Since the returned array is %NULL terminated, `length` may be %NULL.
     */
    getUris(): string[]
    // Has conflict: listFilters(): RecentFilter[]
    // Has conflict: removeFilter(filter: RecentFilter): void
    // Has conflict: selectAll(): void
    // Has conflict: selectUri(uri: string): boolean
    // Has conflict: setCurrentUri(uri: string): boolean
    /**
     * Sets `filter` as the current #GtkRecentFilter object used by `chooser`
     * to affect the displayed recently used resources.
     * @param filter a #GtkRecentFilter
     */
    setFilter(filter: RecentFilter): void
    /**
     * Sets the number of items that should be returned by
     * gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
     * @param limit a positive integer, or -1 for all items
     */
    setLimit(limit: number): void
    /**
     * Sets whether only local resources, that is resources using the file:// URI
     * scheme, should be shown in the recently used resources selector.  If
     * `local_only` is %TRUE (the default) then the shown resources are guaranteed
     * to be accessible through the operating system native file system.
     * @param localOnly %TRUE if only local files can be shown
     */
    setLocalOnly(localOnly: boolean): void
    /**
     * Sets whether `chooser` can select multiple items.
     * @param selectMultiple %TRUE if `chooser` can select more than one item
     */
    setSelectMultiple(selectMultiple: boolean): void
    /**
     * Sets whether `chooser` should show an icon near the resource when
     * displaying it.
     * @param showIcons whether to show an icon near the resource
     */
    setShowIcons(showIcons: boolean): void
    /**
     * Sets whether `chooser` should display the recently used resources that
     * it didn't find.  This only applies to local resources.
     * @param showNotFound whether to show the local items we didn't find
     */
    setShowNotFound(showNotFound: boolean): void
    /**
     * Whether to show recently used resources prepended by a unique number.
     * @param showNumbers %TRUE to show numbers, %FALSE otherwise
     */
    setShowNumbers(showNumbers: boolean): void
    /**
     * Whether to show recently used resources marked registered as private.
     * @param showPrivate %TRUE to show private items, %FALSE otherwise
     */
    setShowPrivate(showPrivate: boolean): void
    /**
     * Sets whether to show a tooltips containing the full path of each
     * recently used resource in a #GtkRecentChooser widget.
     * @param showTips %TRUE if tooltips should be shown
     */
    setShowTips(showTips: boolean): void
    // Has conflict: setSortFunc(sortFunc: RecentSortFunc): void
    /**
     * Changes the sorting order of the recently used resources list displayed by
     * `chooser`.
     * @param sortType sort order that the chooser should use
     */
    setSortType(sortType: RecentSortType): void
    // Has conflict: unselectAll(): void
    // Has conflict: unselectUri(uri: string): void

    // Own virtual methods of Gtk-2.0.Gtk.RecentChooser

    /**
     * Adds `filter` to the list of #GtkRecentFilter objects held by `chooser`.
     * 
     * If no previous filter objects were defined, this function will call
     * gtk_recent_chooser_set_filter().
     * @virtual 
     * @param filter a #GtkRecentFilter
     */
    addFilter(filter: RecentFilter): void
    /**
     * Gets the URI currently selected by `chooser`.
     * @virtual 
     */
    getCurrentUri(): string
    /**
     * Gets the list of recently used resources in form of #GtkRecentInfo objects.
     * 
     * The return value of this function is affected by the "sort-type" and
     * "limit" properties of `chooser`.
     * @virtual 
     */
    getItems(): RecentInfo[]
    itemActivated(): void
    /**
     * Gets the #GtkRecentFilter objects held by `chooser`.
     * @virtual 
     */
    listFilters(): RecentFilter[]
    /**
     * Removes `filter` from the list of #GtkRecentFilter objects held by `chooser`.
     * @virtual 
     * @param filter a #GtkRecentFilter
     */
    removeFilter(filter: RecentFilter): void
    /**
     * Selects all the items inside `chooser,` if the `chooser` supports
     * multiple selection.
     * @virtual 
     */
    selectAll(): void
    /**
     * Selects `uri` inside `chooser`.
     * @virtual 
     * @param uri a URI
     */
    selectUri(uri: string): boolean
    selectionChanged(): void
    /**
     * Sets `uri` as the current URI for `chooser`.
     * @virtual 
     * @param uri a URI
     */
    setCurrentUri(uri: string): boolean
    /**
     * Sets the comparison function used when sorting to be `sort_func`.  If
     * the `chooser` has the sort type set to #GTK_RECENT_SORT_CUSTOM then
     * the chooser will sort using this function.
     * 
     * To the comparison function will be passed two #GtkRecentInfo structs and
     * `sort_data;`  `sort_func` should return a positive integer if the first
     * item comes before the second, zero if the two items are equal and
     * a negative integer if the first item comes after the second.
     * @virtual 
     * @param sortFunc the comparison function
     */
    setSortFunc(sortFunc: RecentSortFunc): void
    /**
     * Unselects all the items inside `chooser`.
     * @virtual 
     */
    unselectAll(): void
    /**
     * Unselects `uri` inside `chooser`.
     * @virtual 
     * @param uri a URI
     */
    unselectUri(uri: string): void

    // Own signals of Gtk-2.0.Gtk.RecentChooser

    connect(sigName: "item-activated", callback: RecentChooser.ItemActivatedSignalCallback): number
    on(sigName: "item-activated", callback: RecentChooser.ItemActivatedSignalCallback): number
    once(sigName: "item-activated", callback: RecentChooser.ItemActivatedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "item-activated", ...args: any[]): void
    connect(sigName: "selection-changed", callback: RecentChooser.SelectionChangedSignalCallback): number
    on(sigName: "selection-changed", callback: RecentChooser.SelectionChangedSignalCallback): number
    once(sigName: "selection-changed", callback: RecentChooser.SelectionChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.RecentChooser

    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::limit", callback: any): number
    on(sigName: "notify::limit", callback: any): number
    once(sigName: "notify::limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::limit", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::recent-manager", callback: any): number
    on(sigName: "notify::recent-manager", callback: any): number
    once(sigName: "notify::recent-manager", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::recent-manager", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-icons", callback: any): number
    on(sigName: "notify::show-icons", callback: any): number
    once(sigName: "notify::show-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-icons", ...args: any[]): void
    connect(sigName: "notify::show-not-found", callback: any): number
    on(sigName: "notify::show-not-found", callback: any): number
    once(sigName: "notify::show-not-found", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-not-found", ...args: any[]): void
    connect(sigName: "notify::show-private", callback: any): number
    on(sigName: "notify::show-private", callback: any): number
    once(sigName: "notify::show-private", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-private", ...args: any[]): void
    connect(sigName: "notify::show-tips", callback: any): number
    on(sigName: "notify::show-tips", callback: any): number
    once(sigName: "notify::show-tips", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-tips", ...args: any[]): void
    connect(sigName: "notify::sort-type", callback: any): number
    on(sigName: "notify::sort-type", callback: any): number
    once(sigName: "notify::sort-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sort-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentChooser extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.RecentChooser

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentChooser

    constructor(config?: RecentChooser.ConstructorProperties) 
    _init(config?: RecentChooser.ConstructorProperties): void
}

export module ToolShell {

    // Constructor properties interface

    export interface ConstructorProperties extends Widget.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

export interface ToolShell extends Widget {

    // Owm methods of Gtk-2.0.Gtk.ToolShell

    // Has conflict: getEllipsizeMode(): Pango.EllipsizeMode
    // Has conflict: getIconSize(): number
    // Has conflict: getOrientation(): Orientation
    // Has conflict: getReliefStyle(): ReliefStyle
    // Has conflict: getStyle(): ToolbarStyle
    // Has conflict: getTextAlignment(): number
    // Has conflict: getTextOrientation(): Orientation
    // Has conflict: getTextSizeGroup(): SizeGroup
    // Has conflict: rebuildMenu(): void

    // Conflicting methods

    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void

    // Own virtual methods of Gtk-2.0.Gtk.ToolShell

    /**
     * Retrieves the current ellipsize mode for the tool shell. Tool items must not
     * call this function directly, but rely on gtk_tool_item_get_ellipsize_mode()
     * instead.
     * @virtual 
     */
    getEllipsizeMode(): Pango.EllipsizeMode
    getIconSize(): IconSize
    /**
     * Retrieves the current orientation for the tool shell. Tool items must not
     * call this function directly, but rely on gtk_tool_item_get_orientation()
     * instead.
     * @virtual 
     */
    getOrientation(): Orientation
    /**
     * Returns the relief style of buttons on `shell`. Tool items must not call this
     * function directly, but rely on gtk_tool_item_get_relief_style() instead.
     * @virtual 
     */
    getReliefStyle(): ReliefStyle
    /**
     * Retrieves whether the tool shell has text, icons, or both. Tool items must
     * not call this function directly, but rely on gtk_tool_item_get_style()
     * instead.
     * @virtual 
     */
    getStyle(): ToolbarStyle

    // Overloads of getStyle

    /**
     * Simply an accessor function that returns `widget->`style.
     */
    getStyle(): Style
    /**
     * Retrieves the current text alignment for the tool shell. Tool items must not
     * call this function directly, but rely on gtk_tool_item_get_text_alignment()
     * instead.
     * @virtual 
     */
    getTextAlignment(): number
    /**
     * Retrieves the current text orientation for the tool shell. Tool items must not
     * call this function directly, but rely on gtk_tool_item_get_text_orientation()
     * instead.
     * @virtual 
     */
    getTextOrientation(): Orientation
    /**
     * Retrieves the current text size group for the tool shell. Tool items must not
     * call this function directly, but rely on gtk_tool_item_get_text_size_group()
     * instead.
     * @virtual 
     */
    getTextSizeGroup(): SizeGroup
    /**
     * Calling this function signals the tool shell that the overflow menu item for
     * tool items have changed. If there is an overflow menu and if it is visible
     * when this function it called, the menu will be rebuilt.
     * 
     * Tool items must not call this function directly, but rely on
     * gtk_tool_item_rebuild_menu() instead.
     * @virtual 
     */
    rebuildMenu(): void

    // Class property signals of Gtk-2.0.Gtk.ToolShell

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkToolShell interface allows container widgets to provide additional
 * information when embedding #GtkToolItem widgets.
 * @interface 
 */
export class ToolShell extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.ToolShell

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToolShell

    constructor(config?: ToolShell.ConstructorProperties) 
    _init(config?: ToolShell.ConstructorProperties): void
}

export module TreeDragDest {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface TreeDragDest {

    // Owm methods of Gtk-2.0.Gtk.TreeDragDest

    // Has conflict: dragDataReceived(dest: TreePath, selectionData: SelectionData): boolean
    // Has conflict: rowDropPossible(destPath: TreePath, selectionData: SelectionData): boolean

    // Own virtual methods of Gtk-2.0.Gtk.TreeDragDest

    /**
     * Asks the #GtkTreeDragDest to insert a row before the path `dest,`
     * deriving the contents of the row from `selection_data`. If `dest` is
     * outside the tree so that inserting before it is impossible, %FALSE
     * will be returned. Also, %FALSE may be returned if the new row is
     * not created for some model-specific reason.  Should robustly handle
     * a `dest` no longer found in the model!
     * @virtual 
     * @param dest row to drop in front of
     * @param selectionData data to drop
     */
    dragDataReceived(dest: TreePath, selectionData: SelectionData): boolean
    /**
     * Determines whether a drop is possible before the given `dest_path,`
     * at the same depth as `dest_path`. i.e., can we drop the data in
     * `selection_data` at that location. `dest_path` does not have to
     * exist; the return value will almost certainly be %FALSE if the
     * parent of `dest_path` doesn't exist, though.
     * @virtual 
     * @param destPath destination row
     * @param selectionData the data being dragged
     */
    rowDropPossible(destPath: TreePath, selectionData: SelectionData): boolean

    // Class property signals of Gtk-2.0.Gtk.TreeDragDest

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeDragDest extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeDragDest

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeDragDest

    constructor(config?: TreeDragDest.ConstructorProperties) 
    _init(config?: TreeDragDest.ConstructorProperties): void
}

export module TreeDragSource {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface TreeDragSource {

    // Owm methods of Gtk-2.0.Gtk.TreeDragSource

    // Has conflict: dragDataDelete(path: TreePath): boolean
    // Has conflict: dragDataGet(path: TreePath): [ /* returnType */ boolean, /* selectionData */ SelectionData ]
    // Has conflict: rowDraggable(path: TreePath): boolean

    // Own virtual methods of Gtk-2.0.Gtk.TreeDragSource

    /**
     * Asks the #GtkTreeDragSource to delete the row at `path,` because
     * it was moved somewhere else via drag-and-drop. Returns %FALSE
     * if the deletion fails because `path` no longer exists, or for
     * some model-specific reason. Should robustly handle a `path` no
     * longer found in the model!
     * @virtual 
     * @param path row that was being dragged
     */
    dragDataDelete(path: TreePath): boolean
    /**
     * Asks the #GtkTreeDragSource to fill in `selection_data` with a
     * representation of the row at `path`. `selection_data->`target gives
     * the required type of the data.  Should robustly handle a `path` no
     * longer found in the model!
     * @virtual 
     * @param path row that was dragged
     */
    dragDataGet(path: TreePath): [ /* returnType */ boolean, /* selectionData */ SelectionData ]
    /**
     * Asks the #GtkTreeDragSource whether a particular row can be used as
     * the source of a DND operation. If the source doesn't implement
     * this interface, the row is assumed draggable.
     * @virtual 
     * @param path row on which user is initiating a drag
     */
    rowDraggable(path: TreePath): boolean

    // Class property signals of Gtk-2.0.Gtk.TreeDragSource

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeDragSource extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeDragSource

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeDragSource

    constructor(config?: TreeDragSource.ConstructorProperties) 
    _init(config?: TreeDragSource.ConstructorProperties): void
}

export module TreeModel {

    // Signal callback interfaces

    /**
     * Signal callback interface for `row-changed`
     */
    export interface RowChangedSignalCallback {
        (path: TreePath, iter: TreeIter): void
    }

    /**
     * Signal callback interface for `row-deleted`
     */
    export interface RowDeletedSignalCallback {
        (path: TreePath): void
    }

    /**
     * Signal callback interface for `row-has-child-toggled`
     */
    export interface RowHasChildToggledSignalCallback {
        (path: TreePath, iter: TreeIter): void
    }

    /**
     * Signal callback interface for `row-inserted`
     */
    export interface RowInsertedSignalCallback {
        (path: TreePath, iter: TreeIter): void
    }

    /**
     * Signal callback interface for `rows-reordered`
     */
    export interface RowsReorderedSignalCallback {
        (path: TreePath, iter: TreeIter, newOrder: object | null): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface TreeModel {

    // Owm methods of Gtk-2.0.Gtk.TreeModel

    /**
     * Creates a new #GtkTreeModel, with `child_model` as the child_model
     * and `root` as the virtual root.
     * @param root A #GtkTreePath or %NULL.
     */
    filterNew(root: TreePath | null): TreeModel
    /**
     * Calls func on each node in model in a depth-first fashion.
     * If `func` returns %TRUE, then the tree ceases to be walked, and
     * gtk_tree_model_foreach() returns.
     * @param func A function to be called on each row
     */
    foreach(func: TreeModelForeachFunc): void
    // Has conflict: getColumnType(index: number): GObject.GType
    // Has conflict: getFlags(): TreeModelFlags
    // Has conflict: getIter(path: TreePath): [ /* returnType */ boolean, /* iter */ TreeIter ]
    /**
     * Initializes `iter` with the first iterator in the tree (the one at the path
     * "0") and returns %TRUE.  Returns %FALSE if the tree is empty.
     */
    getIterFirst(): [ /* returnType */ boolean, /* iter */ TreeIter ]
    /**
     * Sets `iter` to a valid iterator pointing to `path_string,` if it
     * exists. Otherwise, `iter` is left invalid and %FALSE is returned.
     * @param pathString A string representation of a #GtkTreePath.
     */
    getIterFromString(pathString: string): [ /* returnType */ boolean, /* iter */ TreeIter ]
    // Has conflict: getNColumns(): number
    // Has conflict: getPath(iter: TreeIter): TreePath
    /**
     * Generates a string representation of the iter. This string is a ':'
     * separated list of numbers. For example, "4:10:0:3" would be an
     * acceptable return value for this string.
     * @param iter An #GtkTreeIter.
     */
    getStringFromIter(iter: TreeIter): string
    // Has conflict: getValue(iter: TreeIter, column: number): /* value */ any
    // Has conflict: iterChildren(parent: TreeIter | null): [ /* returnType */ boolean, /* iter */ TreeIter ]
    // Has conflict: iterHasChild(iter: TreeIter): boolean
    // Has conflict: iterNChildren(iter: TreeIter | null): number
    // Has conflict: iterNext(iter: TreeIter): boolean
    // Has conflict: iterNthChild(parent: TreeIter | null, n: number): [ /* returnType */ boolean, /* iter */ TreeIter ]
    // Has conflict: iterParent(child: TreeIter): [ /* returnType */ boolean, /* iter */ TreeIter ]
    // Has conflict: refNode(iter: TreeIter): void
    // Has conflict: rowChanged(path: TreePath, iter: TreeIter): void
    // Has conflict: rowDeleted(path: TreePath): void
    // Has conflict: rowHasChildToggled(path: TreePath, iter: TreeIter): void
    // Has conflict: rowInserted(path: TreePath, iter: TreeIter): void
    // Has conflict: rowsReordered(path: TreePath, iter: TreeIter, newOrder: number): void
    /**
     * Creates a new #GtkTreeModel, with `child_model` as the child model.
     */
    sortNewWithModel(): TreeModel
    // Has conflict: unrefNode(iter: TreeIter): void

    // Own virtual methods of Gtk-2.0.Gtk.TreeModel

    /**
     * Returns the type of the column.
     * @virtual 
     * @param index The column index.
     */
    getColumnType(index: number): GObject.GType
    /**
     * Returns a set of flags supported by this interface.  The flags are a bitwise
     * combination of #GtkTreeModelFlags.  The flags supported should not change
     * during the lifecycle of the `tree_model`.
     * @virtual 
     */
    getFlags(): TreeModelFlags
    /**
     * Sets `iter` to a valid iterator pointing to `path`.
     * @virtual 
     * @param path The #GtkTreePath.
     */
    getIter(path: TreePath): [ /* returnType */ boolean, /* iter */ TreeIter ]
    /**
     * Returns the number of columns supported by `tree_model`.
     * @virtual 
     */
    getNColumns(): number
    /**
     * Returns a newly-created #GtkTreePath referenced by `iter`.  This path should
     * be freed with gtk_tree_path_free().
     * @virtual 
     * @param iter The #GtkTreeIter.
     */
    getPath(iter: TreeIter): TreePath
    /**
     * Initializes and sets `value` to that at `column`.
     * When done with `value,` g_value_unset() needs to be called
     * to free any allocated memory.
     * @virtual 
     * @param iter The #GtkTreeIter.
     * @param column The column to lookup the value at.
     */
    getValue(iter: TreeIter, column: number): /* value */ any
    /**
     * Sets `iter` to point to the first child of `parent`.  If `parent` has no
     * children, %FALSE is returned and `iter` is set to be invalid.  `parent`
     * will remain a valid node after this function has been called.
     * 
     * If `parent` is %NULL returns the first node, equivalent to
     * <literal>gtk_tree_model_get_iter_first (tree_model, iter);</literal>
     * @virtual 
     * @param parent The #GtkTreeIter, or %NULL
     */
    iterChildren(parent: TreeIter | null): [ /* returnType */ boolean, /* iter */ TreeIter ]
    /**
     * Returns %TRUE if `iter` has children, %FALSE otherwise.
     * @virtual 
     * @param iter The #GtkTreeIter to test for children.
     */
    iterHasChild(iter: TreeIter): boolean
    /**
     * Returns the number of children that `iter` has.  As a special case, if `iter`
     * is %NULL, then the number of toplevel nodes is returned.
     * @virtual 
     * @param iter The #GtkTreeIter, or %NULL.
     */
    iterNChildren(iter: TreeIter | null): number
    /**
     * Sets `iter` to point to the node following it at the current level.  If there
     * is no next `iter,` %FALSE is returned and `iter` is set to be invalid.
     * @virtual 
     * @param iter The #GtkTreeIter.
     */
    iterNext(iter: TreeIter): boolean
    /**
     * Sets `iter` to be the child of `parent,` using the given index.  The first
     * index is 0.  If `n` is too big, or `parent` has no children, `iter` is set
     * to an invalid iterator and %FALSE is returned.  `parent` will remain a valid
     * node after this function has been called.  As a special case, if `parent` is
     * %NULL, then the `n<`!-- -->th root node is set.
     * @virtual 
     * @param parent The #GtkTreeIter to get the child from, or %NULL.
     * @param n Then index of the desired child.
     */
    iterNthChild(parent: TreeIter | null, n: number): [ /* returnType */ boolean, /* iter */ TreeIter ]
    /**
     * Sets `iter` to be the parent of `child`.  If `child` is at the toplevel, and
     * doesn't have a parent, then `iter` is set to an invalid iterator and %FALSE
     * is returned.  `child` will remain a valid node after this function has been
     * called.
     * @virtual 
     * @param child The #GtkTreeIter.
     */
    iterParent(child: TreeIter): [ /* returnType */ boolean, /* iter */ TreeIter ]
    /**
     * Lets the tree ref the node.  This is an optional method for models to
     * implement.  To be more specific, models may ignore this call as it exists
     * primarily for performance reasons.
     * 
     * This function is primarily meant as a way for views to let caching model
     * know when nodes are being displayed (and hence, whether or not to cache that
     * node.)  For example, a file-system based model would not want to keep the
     * entire file-hierarchy in memory, just the sections that are currently being
     * displayed by every current view.
     * 
     * A model should be expected to be able to get an iter independent of its
     * reffed state.
     * @virtual 
     * @param iter The #GtkTreeIter.
     */
    refNode(iter: TreeIter): void
    /**
     * Emits the "row-changed" signal on `tree_model`.
     * @virtual 
     * @param path A #GtkTreePath pointing to the changed row
     * @param iter A valid #GtkTreeIter pointing to the changed row
     */
    rowChanged(path: TreePath, iter: TreeIter): void
    /**
     * Emits the "row-deleted" signal on `tree_model`.  This should be called by
     * models after a row has been removed.  The location pointed to by `path`
     * should be the location that the row previously was at.  It may not be a
     * valid location anymore.
     * @virtual 
     * @param path A #GtkTreePath pointing to the previous location of the deleted row.
     */
    rowDeleted(path: TreePath): void
    /**
     * Emits the "row-has-child-toggled" signal on `tree_model`.  This should be
     * called by models after the child state of a node changes.
     * @virtual 
     * @param path A #GtkTreePath pointing to the changed row
     * @param iter A valid #GtkTreeIter pointing to the changed row
     */
    rowHasChildToggled(path: TreePath, iter: TreeIter): void
    /**
     * Emits the "row-inserted" signal on `tree_model`
     * @virtual 
     * @param path A #GtkTreePath pointing to the inserted row
     * @param iter A valid #GtkTreeIter pointing to the inserted row
     */
    rowInserted(path: TreePath, iter: TreeIter): void
    /**
     * Emits the "rows-reordered" signal on `tree_model`.  This should be called by
     * models when their rows have been reordered.
     * @virtual 
     * @param path A #GtkTreePath pointing to the tree node whose children have been      reordered
     * @param iter A valid #GtkTreeIter pointing to the node whose children have been      reordered, or %NULL if the depth of `path` is 0.
     * @param newOrder an array of integers mapping the current position of each child      to its old position before the re-ordering,      i.e. `new_order<`literal>[newpos] = oldpos</literal>.
     */
    rowsReordered(path: TreePath, iter: TreeIter, newOrder: number): void
    /**
     * Lets the tree unref the node.  This is an optional method for models to
     * implement.  To be more specific, models may ignore this call as it exists
     * primarily for performance reasons.
     * 
     * For more information on what this means, see gtk_tree_model_ref_node().
     * Please note that nodes that are deleted are not unreffed.
     * @virtual 
     * @param iter The #GtkTreeIter.
     */
    unrefNode(iter: TreeIter): void

    // Own signals of Gtk-2.0.Gtk.TreeModel

    connect(sigName: "row-changed", callback: TreeModel.RowChangedSignalCallback): number
    on(sigName: "row-changed", callback: TreeModel.RowChangedSignalCallback): number
    once(sigName: "row-changed", callback: TreeModel.RowChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-changed", iter: TreeIter, ...args: any[]): void
    connect(sigName: "row-deleted", callback: TreeModel.RowDeletedSignalCallback): number
    on(sigName: "row-deleted", callback: TreeModel.RowDeletedSignalCallback): number
    once(sigName: "row-deleted", callback: TreeModel.RowDeletedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-deleted", ...args: any[]): void
    connect(sigName: "row-has-child-toggled", callback: TreeModel.RowHasChildToggledSignalCallback): number
    on(sigName: "row-has-child-toggled", callback: TreeModel.RowHasChildToggledSignalCallback): number
    once(sigName: "row-has-child-toggled", callback: TreeModel.RowHasChildToggledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-has-child-toggled", iter: TreeIter, ...args: any[]): void
    connect(sigName: "row-inserted", callback: TreeModel.RowInsertedSignalCallback): number
    on(sigName: "row-inserted", callback: TreeModel.RowInsertedSignalCallback): number
    once(sigName: "row-inserted", callback: TreeModel.RowInsertedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-inserted", iter: TreeIter, ...args: any[]): void
    connect(sigName: "rows-reordered", callback: TreeModel.RowsReorderedSignalCallback): number
    on(sigName: "rows-reordered", callback: TreeModel.RowsReorderedSignalCallback): number
    once(sigName: "rows-reordered", callback: TreeModel.RowsReorderedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "rows-reordered", iter: TreeIter, newOrder: object | null, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TreeModel

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeModel extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeModel

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeModel

    constructor(config?: TreeModel.ConstructorProperties) 
    _init(config?: TreeModel.ConstructorProperties): void
}

export module TreeSortable {

    // Signal callback interfaces

    /**
     * Signal callback interface for `sort-column-changed`
     */
    export interface SortColumnChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends TreeModel.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

export interface TreeSortable extends TreeModel {

    // Owm methods of Gtk-2.0.Gtk.TreeSortable

    // Has conflict: getSortColumnId(sortColumnId: number, order: SortType): boolean
    // Has conflict: hasDefaultSortFunc(): boolean
    // Has conflict: setDefaultSortFunc(sortFunc: TreeIterCompareFunc): void
    // Has conflict: setSortColumnId(sortColumnId: number, order: SortType): void
    // Has conflict: setSortFunc(sortColumnId: number, sortFunc: TreeIterCompareFunc): void
    // Has conflict: sortColumnChanged(): void

    // Own virtual methods of Gtk-2.0.Gtk.TreeSortable

    /**
     * Fills in `sort_column_id` and `order` with the current sort column and the
     * order. It returns %TRUE unless the `sort_column_id` is
     * %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or
     * %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
     * @virtual 
     * @param sortColumnId The sort column id to be filled in
     * @param order The #GtkSortType to be filled in
     */
    getSortColumnId(sortColumnId: number, order: SortType): boolean
    /**
     * Returns %TRUE if the model has a default sort function. This is used
     * primarily by GtkTreeViewColumns in order to determine if a model can
     * go back to the default state, or not.
     * @virtual 
     */
    hasDefaultSortFunc(): boolean
    /**
     * Sets the default comparison function used when sorting to be `sort_func`.
     * If the current sort column id of `sortable` is
     * %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using
     * this function.
     * 
     * If `sort_func` is %NULL, then there will be no default comparison function.
     * This means that once the model  has been sorted, it can't go back to the
     * default state. In this case, when the current sort column id of `sortable`
     * is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
     * @virtual 
     * @param func 
     */
    setDefaultSortFunc(func: TreeIterCompareFunc): void
    /**
     * Sets the current sort column to be `sort_column_id`. The `sortable` will
     * resort itself to reflect this change, after emitting a
     * #GtkTreeSortable::sort-column-changed signal. `sort_column_id` may either be
     * a regular column id, or one of the following special values:
     * <variablelist>
     * <varlistentry>
     *   <term>%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID</term>
     *   <listitem>the default sort function will be used, if it is set</listitem>
     * </varlistentry>
     * <varlistentry>
     *   <term>%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID</term>
     *   <listitem>no sorting will occur</listitem>
     * </varlistentry>
     * </variablelist>
     * @virtual 
     * @param sortColumnId the sort column id to set
     * @param order The sort order of the column
     */
    setSortColumnId(sortColumnId: number, order: SortType): void
    /**
     * Sets the comparison function used when sorting to be `sort_func`. If the
     * current sort column id of `sortable` is the same as `sort_column_id,` then
     * the model will sort using this function.
     * @virtual 
     * @param sortColumnId the sort column id to set the function for
     * @param func 
     */
    setSortFunc(sortColumnId: number, func: TreeIterCompareFunc): void
    /**
     * Emits a #GtkTreeSortable::sort-column-changed signal on `sortable`.
     * @virtual 
     */
    sortColumnChanged(): void

    // Own signals of Gtk-2.0.Gtk.TreeSortable

    connect(sigName: "sort-column-changed", callback: TreeSortable.SortColumnChangedSignalCallback): number
    on(sigName: "sort-column-changed", callback: TreeSortable.SortColumnChangedSignalCallback): number
    once(sigName: "sort-column-changed", callback: TreeSortable.SortColumnChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "sort-column-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TreeSortable

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeSortable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeSortable

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeSortable

    constructor(config?: TreeSortable.ConstructorProperties) 
    _init(config?: TreeSortable.ConstructorProperties): void
}

export module AboutDialog {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate-link`
     */
    export interface ActivateLinkSignalCallback {
        (uri: string): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Dialog.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.AboutDialog

        /**
         * The people who contributed artwork to the program, as a %NULL-terminated
         * array of strings. Each string may contain email addresses and URLs, which
         * will be displayed as links, see the introduction for more details.
         */
        artists?: string[] | null
        /**
         * The authors of the program, as a %NULL-terminated array of strings.
         * Each string may contain email addresses and URLs, which will be displayed
         * as links, see the introduction for more details.
         */
        authors?: string[] | null
        /**
         * Comments about the program. This string is displayed in a label
         * in the main dialog, thus it should be a short explanation of
         * the main purpose of the program, not a detailed list of features.
         */
        comments?: string | null
        /**
         * Copyright information for the program.
         */
        copyright?: string | null
        /**
         * The people documenting the program, as a %NULL-terminated array of strings.
         * Each string may contain email addresses and URLs, which will be displayed
         * as links, see the introduction for more details.
         */
        documenters?: string[] | null
        /**
         * The license of the program. This string is displayed in a
         * text view in a secondary dialog, therefore it is fine to use
         * a long multi-paragraph text. Note that the text is only wrapped
         * in the text view if the "wrap-license" property is set to %TRUE;
         * otherwise the text itself must contain the intended linebreaks.
         */
        license?: string | null
        /**
         * A logo for the about box. If this is not set, it defaults to
         * gtk_window_get_default_icon_list().
         */
        logo?: GdkPixbuf.Pixbuf | null
        /**
         * A named icon to use as the logo for the about box. This property
         * overrides the #GtkAboutDialog:logo property.
         */
        logoIconName?: string | null
        /**
         * The name of the program.
         * If this is not set, it defaults to g_get_application_name().
         */
        programName?: string | null
        /**
         * Credits to the translators. This string should be marked as translatable.
         * The string may contain email addresses and URLs, which will be displayed
         * as links, see the introduction for more details.
         */
        translatorCredits?: string | null
        /**
         * The version of the program.
         */
        version?: string | null
        /**
         * The URL for the link to the website of the program.
         * This should be a string starting with "http://.
         */
        website?: string | null
        /**
         * The label for the link to the website of the program. If this is not set,
         * it defaults to the URL specified in the #GtkAboutDialog:website property.
         */
        websiteLabel?: string | null
        /**
         * Whether to wrap the text in the license dialog.
         */
        wrapLicense?: boolean | null
    }

}

export interface AboutDialog extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.AboutDialog

    /**
     * The people who contributed artwork to the program, as a %NULL-terminated
     * array of strings. Each string may contain email addresses and URLs, which
     * will be displayed as links, see the introduction for more details.
     */
    artists: string[]
    /**
     * The authors of the program, as a %NULL-terminated array of strings.
     * Each string may contain email addresses and URLs, which will be displayed
     * as links, see the introduction for more details.
     */
    authors: string[]
    /**
     * Comments about the program. This string is displayed in a label
     * in the main dialog, thus it should be a short explanation of
     * the main purpose of the program, not a detailed list of features.
     */
    comments: string
    /**
     * Copyright information for the program.
     */
    copyright: string
    /**
     * The people documenting the program, as a %NULL-terminated array of strings.
     * Each string may contain email addresses and URLs, which will be displayed
     * as links, see the introduction for more details.
     */
    documenters: string[]
    /**
     * The license of the program. This string is displayed in a
     * text view in a secondary dialog, therefore it is fine to use
     * a long multi-paragraph text. Note that the text is only wrapped
     * in the text view if the "wrap-license" property is set to %TRUE;
     * otherwise the text itself must contain the intended linebreaks.
     */
    license: string
    /**
     * A logo for the about box. If this is not set, it defaults to
     * gtk_window_get_default_icon_list().
     */
    logo: GdkPixbuf.Pixbuf
    /**
     * A named icon to use as the logo for the about box. This property
     * overrides the #GtkAboutDialog:logo property.
     */
    logoIconName: string
    /**
     * The name of the program.
     * If this is not set, it defaults to g_get_application_name().
     */
    programName: string
    /**
     * Credits to the translators. This string should be marked as translatable.
     * The string may contain email addresses and URLs, which will be displayed
     * as links, see the introduction for more details.
     */
    translatorCredits: string
    /**
     * The version of the program.
     */
    version: string
    /**
     * The URL for the link to the website of the program.
     * This should be a string starting with "http://.
     */
    website: string
    /**
     * The label for the link to the website of the program. If this is not set,
     * it defaults to the URL specified in the #GtkAboutDialog:website property.
     */
    websiteLabel: string
    /**
     * Whether to wrap the text in the license dialog.
     */
    wrapLicense: boolean

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Own fields of Gtk-2.0.Gtk.AboutDialog

    parentInstance: any

    // Owm methods of Gtk-2.0.Gtk.AboutDialog

    /**
     * Returns the string which are displayed in the artists tab
     * of the secondary credits dialog.
     */
    getArtists(): string[]
    /**
     * Returns the string which are displayed in the authors tab
     * of the secondary credits dialog.
     */
    getAuthors(): string[]
    /**
     * Returns the comments string.
     */
    getComments(): string
    /**
     * Returns the copyright string.
     */
    getCopyright(): string
    /**
     * Returns the string which are displayed in the documenters
     * tab of the secondary credits dialog.
     */
    getDocumenters(): string[]
    /**
     * Returns the license information.
     */
    getLicense(): string
    /**
     * Returns the pixbuf displayed as logo in the about dialog.
     */
    getLogo(): GdkPixbuf.Pixbuf
    /**
     * Returns the icon name displayed as logo in the about dialog.
     */
    getLogoIconName(): string
    /**
     * Returns the program name displayed in the about dialog.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string
    /**
     * Returns the program name displayed in the about dialog.
     */
    getProgramName(): string
    /**
     * Returns the translator credits string which is displayed
     * in the translators tab of the secondary credits dialog.
     */
    getTranslatorCredits(): string
    /**
     * Returns the version string.
     */
    getVersion(): string
    /**
     * Returns the website URL.
     */
    getWebsite(): string
    /**
     * Returns the label used for the website link.
     */
    getWebsiteLabel(): string
    /**
     * Returns whether the license text in `about` is
     * automatically wrapped.
     */
    getWrapLicense(): boolean
    /**
     * Sets the strings which are displayed in the artists tab
     * of the secondary credits dialog.
     * @param artists a %NULL-terminated array of strings
     */
    setArtists(artists: string): void
    /**
     * Sets the strings which are displayed in the authors tab
     * of the secondary credits dialog.
     * @param authors a %NULL-terminated array of strings
     */
    setAuthors(authors: string): void
    /**
     * Sets the comments string to display in the about dialog.
     * This should be a short string of one or two lines.
     * @param comments a comments string
     */
    setComments(comments: string | null): void
    /**
     * Sets the copyright string to display in the about dialog.
     * This should be a short string of one or two lines.
     * @param copyright the copyright string
     */
    setCopyright(copyright: string | null): void
    /**
     * Sets the strings which are displayed in the documenters tab
     * of the secondary credits dialog.
     * @param documenters a %NULL-terminated array of strings
     */
    setDocumenters(documenters: string): void
    /**
     * Sets the license information to be displayed in the secondary
     * license dialog. If `license` is %NULL, the license button is
     * hidden.
     * @param license the license information or %NULL
     */
    setLicense(license: string | null): void
    /**
     * Sets the pixbuf to be displayed as logo in the about dialog.
     * If it is %NULL, the default window icon set with
     * gtk_window_set_default_icon() will be used.
     * @param logo a #GdkPixbuf, or %NULL
     */
    setLogo(logo: GdkPixbuf.Pixbuf | null): void
    /**
     * Sets the pixbuf to be displayed as logo in the about dialog.
     * If it is %NULL, the default window icon set with
     * gtk_window_set_default_icon() will be used.
     * @param iconName an icon name, or %NULL
     */
    setLogoIconName(iconName: string | null): void
    /**
     * Sets the name to display in the about dialog.
     * If this is not set, it defaults to g_get_application_name().
     * @param name the program name
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void
    /**
     * Sets the name to display in the about dialog.
     * If this is not set, it defaults to g_get_application_name().
     * @param name the program name
     */
    setProgramName(name: string): void
    /**
     * Sets the translator credits string which is displayed in
     * the translators tab of the secondary credits dialog.
     * 
     * The intended use for this string is to display the translator
     * of the language which is currently used in the user interface.
     * Using gettext(), a simple way to achieve that is to mark the
     * string for translation:
     * |[
     *  gtk_about_dialog_set_translator_credits (about, _("translator-credits"));
     * ```
     * 
     * It is a good idea to use the customary msgid "translator-credits" for this
     * purpose, since translators will already know the purpose of that msgid, and
     * since #GtkAboutDialog will detect if "translator-credits" is untranslated
     * and hide the tab.
     * @param translatorCredits the translator credits
     */
    setTranslatorCredits(translatorCredits: string | null): void
    /**
     * Sets the version string to display in the about dialog.
     * @param version the version string
     */
    setVersion(version: string | null): void
    /**
     * Sets the URL to use for the website link.
     * 
     * Note that that the hook functions need to be set up
     * before calling this function.
     * @param website a URL string starting with "http://"
     */
    setWebsite(website: string | null): void
    /**
     * Sets the label to be used for the website link.
     * It defaults to the website URL.
     * @param websiteLabel the label used for the website link
     */
    setWebsiteLabel(websiteLabel: string): void
    /**
     * Sets whether the license text in `about` is
     * automatically wrapped.
     * @param wrapLicense whether to wrap the license
     */
    setWrapLicense(wrapLicense: boolean): void

    // Conflicting methods

    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.AboutDialog

    activateLink(uri: string): boolean

    // Own signals of Gtk-2.0.Gtk.AboutDialog

    connect(sigName: "activate-link", callback: AboutDialog.ActivateLinkSignalCallback): number
    on(sigName: "activate-link", callback: AboutDialog.ActivateLinkSignalCallback): number
    once(sigName: "activate-link", callback: AboutDialog.ActivateLinkSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-link", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.AboutDialog

    connect(sigName: "notify::artists", callback: any): number
    on(sigName: "notify::artists", callback: any): number
    once(sigName: "notify::artists", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::artists", ...args: any[]): void
    connect(sigName: "notify::authors", callback: any): number
    on(sigName: "notify::authors", callback: any): number
    once(sigName: "notify::authors", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::authors", ...args: any[]): void
    connect(sigName: "notify::comments", callback: any): number
    on(sigName: "notify::comments", callback: any): number
    once(sigName: "notify::comments", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::comments", ...args: any[]): void
    connect(sigName: "notify::copyright", callback: any): number
    on(sigName: "notify::copyright", callback: any): number
    once(sigName: "notify::copyright", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::copyright", ...args: any[]): void
    connect(sigName: "notify::documenters", callback: any): number
    on(sigName: "notify::documenters", callback: any): number
    once(sigName: "notify::documenters", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::documenters", ...args: any[]): void
    connect(sigName: "notify::license", callback: any): number
    on(sigName: "notify::license", callback: any): number
    once(sigName: "notify::license", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::license", ...args: any[]): void
    connect(sigName: "notify::logo", callback: any): number
    on(sigName: "notify::logo", callback: any): number
    once(sigName: "notify::logo", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::logo", ...args: any[]): void
    connect(sigName: "notify::logo-icon-name", callback: any): number
    on(sigName: "notify::logo-icon-name", callback: any): number
    once(sigName: "notify::logo-icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::logo-icon-name", ...args: any[]): void
    connect(sigName: "notify::program-name", callback: any): number
    on(sigName: "notify::program-name", callback: any): number
    once(sigName: "notify::program-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::program-name", ...args: any[]): void
    connect(sigName: "notify::translator-credits", callback: any): number
    on(sigName: "notify::translator-credits", callback: any): number
    once(sigName: "notify::translator-credits", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::translator-credits", ...args: any[]): void
    connect(sigName: "notify::version", callback: any): number
    on(sigName: "notify::version", callback: any): number
    once(sigName: "notify::version", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::version", ...args: any[]): void
    connect(sigName: "notify::website", callback: any): number
    on(sigName: "notify::website", callback: any): number
    once(sigName: "notify::website", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::website", ...args: any[]): void
    connect(sigName: "notify::website-label", callback: any): number
    on(sigName: "notify::website-label", callback: any): number
    once(sigName: "notify::website-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::website-label", ...args: any[]): void
    connect(sigName: "notify::wrap-license", callback: any): number
    on(sigName: "notify::wrap-license", callback: any): number
    once(sigName: "notify::wrap-license", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-license", ...args: any[]): void
    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkAboutDialog offers a simple way to display information about
 * a program like its logo, name, copyright, website and license. It is
 * also possible to give credits to the authors, documenters, translators
 * and artists who have worked on the program. An about dialog is typically
 * opened when the user selects the <literal>About</literal> option from
 * the <literal>Help</literal> menu. All parts of the dialog are optional.
 * 
 * About dialog often contain links and email addresses. #GtkAboutDialog
 * supports this by offering global hooks, which are called when the user
 * clicks on a link or email address, see gtk_about_dialog_set_email_hook()
 * and gtk_about_dialog_set_url_hook(). Email addresses in the
 * authors, documenters and artists properties are recognized by looking for
 * <literal>&lt;user`<`!-- -->host&gt;</literal>, URLs are
 * recognized by looking for <literal>http://url</literal>, with
 * <literal>url</literal> extending to the next space, tab or line break.
 * 
 * <para id="gtk-about-dialog-hook-setup">
 * Since 2.18 #GtkAboutDialog provides default website and email hooks that
 * use gtk_show_uri().
 * </para>
 * 
 * If you want provide your own hooks overriding the default ones, it is
 * important to do so before setting the website and email URL properties,
 * like this:
 * <informalexample><programlisting>
 * gtk_about_dialog_set_url_hook (GTK_ABOUT_DIALOG (dialog), launch_url, NULL, NULL);
 * gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (dialog), app_url);
 * </programlisting></informalexample>
 * To disable the default hooks, you can pass %NULL as the hook func. Then,
 * the #GtkAboutDialog widget will not display the website or the
 * email addresses as clickable.
 * 
 * To make constructing a #GtkAboutDialog as convenient as possible, you can
 * use the function gtk_show_about_dialog() which constructs and shows a dialog
 * and keeps it around so that it can be shown again.
 * 
 * Note that GTK+ sets a default title of <literal>_("About &percnt;s")</literal>
 * on the dialog window (where &percnt;s is replaced by the name of the
 * application, but in order to ensure proper translation of the title,
 * applications should set the title property explicitly when constructing
 * a #GtkAboutDialog, as shown in the following example:
 * <informalexample><programlisting>
 * gtk_show_about_dialog (NULL,
 *                        "program-name", "ExampleCode",
 *                        "logo", example_logo,
 *                        "title" _("About ExampleCode"),
 *                        NULL);
 * </programlisting></informalexample>
 * Note that prior to GTK+ 2.12, the #GtkAboutDialog:program-name property
 * was called "name". This was changed to avoid the conflict with the
 * #GtkWidget:name property.
 * @class 
 */
export class AboutDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.AboutDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.AboutDialog

    constructor(config?: AboutDialog.ConstructorProperties) 
    /**
     * Creates a new #GtkAboutDialog.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkAboutDialog.
     * @constructor 
     */
    static new(): AboutDialog

    // Overloads of new

    static new(): Dialog
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: AboutDialog.ConstructorProperties): void
}

export module AccelGroup {

    // Signal callback interfaces

    /**
     * Signal callback interface for `accel-activate`
     */
    export interface AccelActivateSignalCallback {
        (acceleratable: GObject.Object, keyval: number, modifier: Gdk.ModifierType): boolean
    }

    /**
     * Signal callback interface for `accel-changed`
     */
    export interface AccelChangedSignalCallback {
        (keyval: number, modifier: Gdk.ModifierType, accelClosure: GObject.TClosure): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface AccelGroup {

    // Own properties of Gtk-2.0.Gtk.AccelGroup

    readonly isLocked: boolean

    // Own fields of Gtk-2.0.Gtk.AccelGroup

    parent: GObject.Object
    lockCount: number
    modifierMask: Gdk.ModifierType
    acceleratables: object[]
    nAccels: number
    privAccels: AccelGroupEntry

    // Owm methods of Gtk-2.0.Gtk.AccelGroup

    /**
     * Finds the first accelerator in `accel_group`
     * that matches `accel_key` and `accel_mods,` and
     * activates it.
     * @param accelQuark the quark for the accelerator name
     * @param acceleratable the #GObject, usually a #GtkWindow, on which                 to activate the accelerator.
     * @param accelKey accelerator keyval from a key event
     * @param accelMods keyboard state mask from a key event
     */
    activate(accelQuark: GLib.Quark, acceleratable: GObject.Object, accelKey: number, accelMods: Gdk.ModifierType): boolean
    // Has conflict: connect(accelKey: number, accelMods: Gdk.ModifierType, accelFlags: AccelFlags, closure: GObject.TClosure): void
    /**
     * Installs an accelerator in this group, using an accelerator path to look
     * up the appropriate key and modifiers (see gtk_accel_map_add_entry()).
     * When `accel_group` is being activated in response to a call to
     * gtk_accel_groups_activate(), `closure` will be invoked if the `accel_key` and
     * `accel_mods` from gtk_accel_groups_activate() match the key and modifiers
     * for the path.
     * 
     * The signature used for the `closure` is that of #GtkAccelGroupActivate.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used for determining key and modifiers.
     * @param closure closure to be executed upon accelerator activation
     */
    connectByPath(accelPath: string, closure: GObject.TClosure): void
    /**
     * Removes an accelerator previously installed through
     * gtk_accel_group_connect().
     * 
     * Since 2.20 `closure` can be %NULL.
     * @param closure the closure to remove from this accelerator group, or %NULL               to remove all closures
     */
    disconnect(closure: GObject.TClosure | null): boolean
    /**
     * Removes an accelerator previously installed through
     * gtk_accel_group_connect().
     * @param accelKey key value of the accelerator
     * @param accelMods modifier combination of the accelerator
     */
    disconnectKey(accelKey: number, accelMods: Gdk.ModifierType): boolean
    /**
     * Locks are added and removed using gtk_accel_group_lock() and
     * gtk_accel_group_unlock().
     */
    getIsLocked(): boolean
    /**
     * Gets a #GdkModifierType representing the mask for this
     * `accel_group`. For example, #GDK_CONTROL_MASK, #GDK_SHIFT_MASK, etc.
     */
    getModifierMask(): Gdk.ModifierType
    /**
     * Locks the given accelerator group.
     * 
     * Locking an acelerator group prevents the accelerators contained
     * within it to be changed during runtime. Refer to
     * gtk_accel_map_change_entry() about runtime accelerator changes.
     * 
     * If called more than once, `accel_group` remains locked until
     * gtk_accel_group_unlock() has been called an equivalent number
     * of times.
     */
    lock(): void
    /**
     * Undoes the last call to gtk_accel_group_lock() on this `accel_group`.
     */
    unlock(): void

    // Own virtual methods of Gtk-2.0.Gtk.AccelGroup

    accelChanged(keyval: number, modifier: Gdk.ModifierType, accelClosure: GObject.TClosure): void

    // Own signals of Gtk-2.0.Gtk.AccelGroup

    connect(sigName: "accel-activate", callback: AccelGroup.AccelActivateSignalCallback): number
    on(sigName: "accel-activate", callback: AccelGroup.AccelActivateSignalCallback): number
    once(sigName: "accel-activate", callback: AccelGroup.AccelActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "accel-activate", keyval: number, modifier: Gdk.ModifierType, ...args: any[]): void
    connect(sigName: "accel-changed", callback: AccelGroup.AccelChangedSignalCallback): number
    on(sigName: "accel-changed", callback: AccelGroup.AccelChangedSignalCallback): number
    once(sigName: "accel-changed", callback: AccelGroup.AccelChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "accel-changed", modifier: Gdk.ModifierType, accelClosure: GObject.TClosure, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.AccelGroup

    connect(sigName: "notify::is-locked", callback: any): number
    on(sigName: "notify::is-locked", callback: any): number
    once(sigName: "notify::is-locked", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-locked", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A #GtkAccelGroup represents a group of keyboard accelerators,
 * typically attached to a toplevel #GtkWindow (with
 * gtk_window_add_accel_group()). Usually you won't need to create a
 * #GtkAccelGroup directly; instead, when using #GtkItemFactory, GTK+
 * automatically sets up the accelerators for your menus in the item
 * factory's #GtkAccelGroup.
 * 
 * 
 * Note that <firstterm>accelerators</firstterm> are different from
 * <firstterm>mnemonics</firstterm>. Accelerators are shortcuts for
 * activating a menu item; they appear alongside the menu item they're a
 * shortcut for. For example "Ctrl+Q" might appear alongside the "Quit"
 * menu item. Mnemonics are shortcuts for GUI elements such as text
 * entries or buttons; they appear as underlined characters. See
 * gtk_label_new_with_mnemonic(). Menu items can have both accelerators
 * and mnemonics, of course.
 * @class 
 */
export class AccelGroup extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.AccelGroup

    static name: string

    // Constructors of Gtk-2.0.Gtk.AccelGroup

    constructor(config?: AccelGroup.ConstructorProperties) 
    /**
     * Creates a new #GtkAccelGroup.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkAccelGroup.
     * @constructor 
     */
    static new(): AccelGroup
    _init(config?: AccelGroup.ConstructorProperties): void
    /**
     * Finds the #GtkAccelGroup to which `closure` is connected;
     * see gtk_accel_group_connect().
     * @param closure a #GClosure
     */
    static fromAccelClosure(closure: GObject.TClosure): AccelGroup
}

export module AccelLabel {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Label.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.AccelLabel

        accelClosure?: GObject.TClosure | null
        accelWidget?: Widget | null
    }

}

export interface AccelLabel extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.AccelLabel

    label: any
    gtkReserved: number
    accelPadding: number
    accelWidget: Widget
    accelClosure: GObject.TClosure
    accelGroup: AccelGroup
    accelString: string
    accelStringWidth: number

    // Owm methods of Gtk-2.0.Gtk.AccelLabel

    /**
     * Fetches the widget monitored by this accelerator label. See
     * gtk_accel_label_set_accel_widget().
     */
    getAccelWidget(): Widget
    /**
     * Returns the width needed to display the accelerator key(s).
     * This is used by menus to align all of the #GtkMenuItem widgets, and shouldn't
     * be needed by applications.
     */
    getAccelWidth(): number
    /**
     * Recreates the string representing the accelerator keys.
     * This should not be needed since the string is automatically updated whenever
     * accelerators are added or removed from the associated widget.
     */
    refetch(): boolean
    /**
     * Sets the closure to be monitored by this accelerator label. The closure
     * must be connected to an accelerator group; see gtk_accel_group_connect().
     * @param accelClosure the closure to monitor for accelerator changes.
     */
    setAccelClosure(accelClosure: GObject.TClosure): void
    /**
     * Sets the widget to be monitored by this accelerator label.
     * @param accelWidget the widget to be monitored.
     */
    setAccelWidget(accelWidget: Widget): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.AccelLabel

    connect(sigName: "notify::angle", callback: any): number
    on(sigName: "notify::angle", callback: any): number
    once(sigName: "notify::angle", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::angle", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: any): number
    on(sigName: "notify::cursor-position", callback: any): number
    once(sigName: "notify::cursor-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::justify", callback: any): number
    on(sigName: "notify::justify", callback: any): number
    once(sigName: "notify::justify", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::justify", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::max-width-chars", callback: any): number
    on(sigName: "notify::max-width-chars", callback: any): number
    once(sigName: "notify::max-width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-width-chars", ...args: any[]): void
    connect(sigName: "notify::mnemonic-keyval", callback: any): number
    on(sigName: "notify::mnemonic-keyval", callback: any): number
    once(sigName: "notify::mnemonic-keyval", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonic-keyval", ...args: any[]): void
    connect(sigName: "notify::mnemonic-widget", callback: any): number
    on(sigName: "notify::mnemonic-widget", callback: any): number
    once(sigName: "notify::mnemonic-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonic-widget", ...args: any[]): void
    connect(sigName: "notify::pattern", callback: any): number
    on(sigName: "notify::pattern", callback: any): number
    once(sigName: "notify::pattern", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pattern", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: any): number
    on(sigName: "notify::selectable", callback: any): number
    once(sigName: "notify::selectable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: any): number
    on(sigName: "notify::selection-bound", callback: any): number
    once(sigName: "notify::selection-bound", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::single-line-mode", callback: any): number
    on(sigName: "notify::single-line-mode", callback: any): number
    once(sigName: "notify::single-line-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-line-mode", ...args: any[]): void
    connect(sigName: "notify::track-visited-links", callback: any): number
    on(sigName: "notify::track-visited-links", callback: any): number
    once(sigName: "notify::track-visited-links", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::track-visited-links", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: any): number
    on(sigName: "notify::use-markup", callback: any): number
    once(sigName: "notify::use-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap", callback: any): number
    on(sigName: "notify::wrap", callback: any): number
    once(sigName: "notify::wrap", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkAccelLabel widget is a subclass of #GtkLabel that also displays an
 * accelerator key on the right of the label text, e.g. 'Ctl+S'.
 * It is commonly used in menus to show the keyboard short-cuts for commands.
 * 
 * The accelerator key to display is not set explicitly.
 * Instead, the #GtkAccelLabel displays the accelerators which have been added to
 * a particular widget. This widget is set by calling
 * gtk_accel_label_set_accel_widget().
 * 
 * For example, a #GtkMenuItem widget may have an accelerator added to emit the
 * "activate" signal when the 'Ctl+S' key combination is pressed.
 * A #GtkAccelLabel is created and added to the #GtkMenuItem, and
 * gtk_accel_label_set_accel_widget() is called with the #GtkMenuItem as the
 * second argument. The #GtkAccelLabel will now display 'Ctl+S' after its label.
 * 
 * Note that creating a #GtkMenuItem with gtk_menu_item_new_with_label() (or
 * one of the similar functions for #GtkCheckMenuItem and #GtkRadioMenuItem)
 * automatically adds a #GtkAccelLabel to the #GtkMenuItem and calls
 * gtk_accel_label_set_accel_widget() to set it up for you.
 * 
 * A #GtkAccelLabel will only display accelerators which have %GTK_ACCEL_VISIBLE
 * set (see #GtkAccelFlags).
 * A #GtkAccelLabel can display multiple accelerators and even signal names,
 * though it is almost always used to display just one accelerator key.
 * <example>
 * <title>Creating a simple menu item with an accelerator key.</title>
 * <programlisting>
 *   GtkWidget *save_item;
 *   GtkAccelGroup *accel_group;
 * 
 *   /<!---->* Create a GtkAccelGroup and add it to the window. *<!---->/
 *   accel_group = gtk_accel_group_new (<!-- -->);
 *   gtk_window_add_accel_group (GTK_WINDOW (window), accel_group);
 * 
 *   /<!---->* Create the menu item using the convenience function. *<!---->/
 *   save_item = gtk_menu_item_new_with_label ("Save");
 *   gtk_widget_show (save_item);
 *   gtk_container_add (GTK_CONTAINER (menu), save_item);
 * 
 *   /<!---->* Now add the accelerator to the GtkMenuItem. Note that since we called
 *      gtk_menu_item_new_with_label(<!-- -->) to create the GtkMenuItem the
 *      GtkAccelLabel is automatically set up to display the GtkMenuItem
 *      accelerators. We just need to make sure we use GTK_ACCEL_VISIBLE here. *<!---->/
 *   gtk_widget_add_accelerator (save_item, "activate", accel_group,
 *                               GDK_s, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
 * </programlisting>
 * </example>
 * @class 
 */
export class AccelLabel extends Label {

    // Own properties of Gtk-2.0.Gtk.AccelLabel

    static name: string

    // Constructors of Gtk-2.0.Gtk.AccelLabel

    constructor(config?: AccelLabel.ConstructorProperties) 
    /**
     * Creates a new #GtkAccelLabel.
     * @constructor 
     * @param string the label string. Must be non-%NULL.
     */
    constructor(string: string) 
    /**
     * Creates a new #GtkAccelLabel.
     * @constructor 
     * @param string the label string. Must be non-%NULL.
     */
    static new(string: string): AccelLabel
    _init(config?: AccelLabel.ConstructorProperties): void
}

export module AccelMap {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (accelPath: string, accelKey: number, accelMods: Gdk.ModifierType): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface AccelMap {

    // Own signals of Gtk-2.0.Gtk.AccelMap

    connect(sigName: "changed", callback: AccelMap.ChangedSignalCallback): number
    on(sigName: "changed", callback: AccelMap.ChangedSignalCallback): number
    once(sigName: "changed", callback: AccelMap.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", accelKey: number, accelMods: Gdk.ModifierType, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.AccelMap

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class AccelMap extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.AccelMap

    static name: string

    // Constructors of Gtk-2.0.Gtk.AccelMap

    constructor(config?: AccelMap.ConstructorProperties) 
    _init(config?: AccelMap.ConstructorProperties): void
    /**
     * Registers a new accelerator with the global accelerator map.
     * This function should only be called once per `accel_path`
     * with the canonical `accel_key` and `accel_mods` for this path.
     * To change the accelerator during runtime programatically, use
     * gtk_accel_map_change_entry().
     * The accelerator path must consist of "&lt;WINDOWTYPE&gt;/Category1/Category2/.../Action",
     * where &lt;WINDOWTYPE&gt; should be a unique application-specific identifier, that
     * corresponds to the kind of window the accelerator is being used in, e.g. "Gimp-Image",
     * "Abiword-Document" or "Gnumeric-Settings".
     * The Category1/.../Action portion is most appropriately chosen by the action the
     * accelerator triggers, i.e. for accelerators on menu items, choose the item's menu path,
     * e.g. "File/Save As", "Image/View/Zoom" or "Edit/Select All".
     * So a full valid accelerator path may look like:
     * "&lt;Gimp-Toolbox&gt;/File/Dialogs/Tool Options...".
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath valid accelerator path
     * @param accelKey the accelerator key
     * @param accelMods the accelerator modifiers
     */
    static addEntry(accelPath: string, accelKey: number, accelMods: Gdk.ModifierType): void
    /**
     * Adds a filter to the global list of accel path filters.
     * 
     * Accel map entries whose accel path matches one of the filters
     * are skipped by gtk_accel_map_foreach().
     * 
     * This function is intended for GTK+ modules that create their own
     * menus, but don't want them to be saved into the applications accelerator
     * map dump.
     * @param filterPattern a pattern (see #GPatternSpec)
     */
    static addFilter(filterPattern: string): void
    /**
     * Changes the `accel_key` and `accel_mods` currently associated with `accel_path`.
     * Due to conflicts with other accelerators, a change may not always be possible,
     * `replace` indicates whether other accelerators may be deleted to resolve such
     * conflicts. A change will only occur if all conflicts could be resolved (which
     * might not be the case if conflicting accelerators are locked). Successful
     * changes are indicated by a %TRUE return value.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath a valid accelerator path
     * @param accelKey the new accelerator key
     * @param accelMods the new accelerator modifiers
     * @param replace %TRUE if other accelerators may be deleted upon conflicts
     */
    static changeEntry(accelPath: string, accelKey: number, accelMods: Gdk.ModifierType, replace: boolean): boolean
    /**
     * Parses a file previously saved with gtk_accel_map_save() for
     * accelerator specifications, and propagates them accordingly.
     * @param fileName a file containing accelerator specifications,   in the GLib file name encoding
     */
    static load(fileName: string): void
    /**
     * Filedescriptor variant of gtk_accel_map_load().
     * 
     * Note that the file descriptor will not be closed by this function.
     * @param fd a valid readable file descriptor
     */
    static loadFd(fd: number): void
    /**
     * #GScanner variant of gtk_accel_map_load().
     * @param scanner a #GScanner which has already been provided with an input file
     */
    static loadScanner(scanner: GLib.Scanner): void
    /**
     * Locks the given accelerator path. If the accelerator map doesn't yet contain
     * an entry for `accel_path,` a new one is created.
     * 
     * Locking an accelerator path prevents its accelerator from being changed
     * during runtime. A locked accelerator path can be unlocked by
     * gtk_accel_map_unlock_path(). Refer to gtk_accel_map_change_entry()
     * for information about runtime accelerator changes.
     * 
     * If called more than once, `accel_path` remains locked until
     * gtk_accel_map_unlock_path() has been called an equivalent number
     * of times.
     * 
     * Note that locking of individual accelerator paths is independent from
     * locking the #GtkAccelGroup containing them. For runtime accelerator
     * changes to be possible both the accelerator path and its #GtkAccelGroup
     * have to be unlocked.
     * @param accelPath a valid accelerator path
     */
    static lockPath(accelPath: string): void
    /**
     * Looks up the accelerator entry for `accel_path` and fills in `key`.
     * @param accelPath a valid accelerator path
     * @param key the accelerator key to be filled in (optional)
     */
    static lookupEntry(accelPath: string, key: AccelKey): boolean
    /**
     * Saves current accelerator specifications (accelerator path, key
     * and modifiers) to `file_name`.
     * The file is written in a format suitable to be read back in by
     * gtk_accel_map_load().
     * @param fileName the name of the file to contain accelerator specifications,   in the GLib file name encoding
     */
    static save(fileName: string): void
    /**
     * Filedescriptor variant of gtk_accel_map_save().
     * 
     * Note that the file descriptor will not be closed by this function.
     * @param fd a valid writable file descriptor
     */
    static saveFd(fd: number): void
    /**
     * Undoes the last call to gtk_accel_map_lock_path() on this `accel_path`.
     * Refer to gtk_accel_map_lock_path() for information about accelerator path locking.
     * @param accelPath a valid accelerator path
     */
    static unlockPath(accelPath: string): void
}

export module Accessible {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.Object.ConstructorProperties {
    }

}

export interface Accessible {

    // Own fields of Gtk-2.0.Gtk.Accessible

    parent: Atk.Object & GObject.Object
    widget: Widget

    // Owm methods of Gtk-2.0.Gtk.Accessible

    // Has conflict: connectWidgetDestroyed(): void
    /**
     * Gets the #GtkWidget corresponding to the #GtkAccessible. The returned widget
     * does not have a reference added, so you do not need to unref it.
     */
    getWidget(): Widget
    /**
     * Sets the #GtkWidget corresponding to the #GtkAccessible.
     * @param widget a #GtkWidget
     */
    setWidget(widget: Widget): void

    // Own virtual methods of Gtk-2.0.Gtk.Accessible

    /**
     * This function specifies the callback function to be called when the widget
     * corresponding to a GtkAccessible is destroyed.
     * @virtual 
     */
    connectWidgetDestroyed(): void

    // Class property signals of Gtk-2.0.Gtk.Accessible

    connect(sigName: "notify::accessible-component-layer", callback: any): number
    on(sigName: "notify::accessible-component-layer", callback: any): number
    once(sigName: "notify::accessible-component-layer", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-component-layer", ...args: any[]): void
    connect(sigName: "notify::accessible-component-mdi-zorder", callback: any): number
    on(sigName: "notify::accessible-component-mdi-zorder", callback: any): number
    once(sigName: "notify::accessible-component-mdi-zorder", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-component-mdi-zorder", ...args: any[]): void
    connect(sigName: "notify::accessible-description", callback: any): number
    on(sigName: "notify::accessible-description", callback: any): number
    once(sigName: "notify::accessible-description", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-description", ...args: any[]): void
    connect(sigName: "notify::accessible-hypertext-nlinks", callback: any): number
    on(sigName: "notify::accessible-hypertext-nlinks", callback: any): number
    once(sigName: "notify::accessible-hypertext-nlinks", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-hypertext-nlinks", ...args: any[]): void
    connect(sigName: "notify::accessible-name", callback: any): number
    on(sigName: "notify::accessible-name", callback: any): number
    once(sigName: "notify::accessible-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-name", ...args: any[]): void
    connect(sigName: "notify::accessible-role", callback: any): number
    on(sigName: "notify::accessible-role", callback: any): number
    once(sigName: "notify::accessible-role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-role", ...args: any[]): void
    connect(sigName: "notify::accessible-table-caption", callback: any): number
    on(sigName: "notify::accessible-table-caption", callback: any): number
    once(sigName: "notify::accessible-table-caption", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-caption", ...args: any[]): void
    connect(sigName: "notify::accessible-table-caption-object", callback: any): number
    on(sigName: "notify::accessible-table-caption-object", callback: any): number
    once(sigName: "notify::accessible-table-caption-object", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-caption-object", ...args: any[]): void
    connect(sigName: "notify::accessible-table-column-description", callback: any): number
    on(sigName: "notify::accessible-table-column-description", callback: any): number
    once(sigName: "notify::accessible-table-column-description", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-column-description", ...args: any[]): void
    connect(sigName: "notify::accessible-table-column-header", callback: any): number
    on(sigName: "notify::accessible-table-column-header", callback: any): number
    once(sigName: "notify::accessible-table-column-header", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-column-header", ...args: any[]): void
    connect(sigName: "notify::accessible-table-row-description", callback: any): number
    on(sigName: "notify::accessible-table-row-description", callback: any): number
    once(sigName: "notify::accessible-table-row-description", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-row-description", ...args: any[]): void
    connect(sigName: "notify::accessible-table-row-header", callback: any): number
    on(sigName: "notify::accessible-table-row-header", callback: any): number
    once(sigName: "notify::accessible-table-row-header", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-row-header", ...args: any[]): void
    connect(sigName: "notify::accessible-table-summary", callback: any): number
    on(sigName: "notify::accessible-table-summary", callback: any): number
    once(sigName: "notify::accessible-table-summary", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-table-summary", ...args: any[]): void
    connect(sigName: "notify::accessible-value", callback: any): number
    on(sigName: "notify::accessible-value", callback: any): number
    once(sigName: "notify::accessible-value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accessible-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Accessible extends Atk.Object {

    // Own properties of Gtk-2.0.Gtk.Accessible

    static name: string

    // Constructors of Gtk-2.0.Gtk.Accessible

    constructor(config?: Accessible.ConstructorProperties) 
    _init(config?: Accessible.ConstructorProperties): void
}

export module Action {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Action

        actionGroup?: ActionGroup | null
        /**
         * If %TRUE, the action's menu item proxies will ignore the #GtkSettings:gtk-menu-images
         * setting and always show their image, if available.
         * 
         * Use this property if the menu item would be useless or hard to use
         * without their image.
         */
        alwaysShowImage?: boolean | null
        /**
         * The #GIcon displayed in the #GtkAction.
         * 
         * Note that the stock icon is preferred, if the #GtkAction:stock-id
         * property holds the id of an existing stock icon.
         * 
         * This is an appearance property and thus only applies if
         * #GtkActivatable:use-action-appearance is %TRUE.
         */
        gicon?: Gio.Icon | null
        hideIfEmpty?: boolean | null
        /**
         * The name of the icon from the icon theme.
         * 
         * Note that the stock icon is preferred, if the #GtkAction:stock-id
         * property holds the id of an existing stock icon, and the #GIcon is
         * preferred if the #GtkAction:gicon property is set.
         * 
         * This is an appearance property and thus only applies if
         * #GtkActivatable:use-action-appearance is %TRUE.
         */
        iconName?: string | null
        isImportant?: boolean | null
        /**
         * The label used for menu items and buttons that activate
         * this action. If the label is %NULL, GTK+ uses the stock
         * label specified via the stock-id property.
         * 
         * This is an appearance property and thus only applies if
         * #GtkActivatable:use-action-appearance is %TRUE.
         */
        label?: string | null
        name?: string | null
        sensitive?: boolean | null
        /**
         * A shorter label that may be used on toolbar buttons.
         * 
         * This is an appearance property and thus only applies if
         * #GtkActivatable:use-action-appearance is %TRUE.
         */
        shortLabel?: string | null
        /**
         * The stock icon displayed in widgets representing this action.
         * 
         * This is an appearance property and thus only applies if
         * #GtkActivatable:use-action-appearance is %TRUE.
         */
        stockId?: string | null
        tooltip?: string | null
        visible?: boolean | null
        visibleHorizontal?: boolean | null
        /**
         * When %TRUE, toolitem proxies for this action are represented in the
         * toolbar overflow menu.
         */
        visibleOverflown?: boolean | null
        visibleVertical?: boolean | null
    }

}

export interface Action extends Buildable {

    // Own properties of Gtk-2.0.Gtk.Action

    actionGroup: ActionGroup
    /**
     * If %TRUE, the action's menu item proxies will ignore the #GtkSettings:gtk-menu-images
     * setting and always show their image, if available.
     * 
     * Use this property if the menu item would be useless or hard to use
     * without their image.
     */
    alwaysShowImage: boolean
    /**
     * The #GIcon displayed in the #GtkAction.
     * 
     * Note that the stock icon is preferred, if the #GtkAction:stock-id
     * property holds the id of an existing stock icon.
     * 
     * This is an appearance property and thus only applies if
     * #GtkActivatable:use-action-appearance is %TRUE.
     */
    gicon: Gio.Icon
    hideIfEmpty: boolean
    /**
     * The name of the icon from the icon theme.
     * 
     * Note that the stock icon is preferred, if the #GtkAction:stock-id
     * property holds the id of an existing stock icon, and the #GIcon is
     * preferred if the #GtkAction:gicon property is set.
     * 
     * This is an appearance property and thus only applies if
     * #GtkActivatable:use-action-appearance is %TRUE.
     */
    iconName: string
    isImportant: boolean
    /**
     * The label used for menu items and buttons that activate
     * this action. If the label is %NULL, GTK+ uses the stock
     * label specified via the stock-id property.
     * 
     * This is an appearance property and thus only applies if
     * #GtkActivatable:use-action-appearance is %TRUE.
     */
    label: string
    readonly name: string
    sensitive: boolean
    /**
     * A shorter label that may be used on toolbar buttons.
     * 
     * This is an appearance property and thus only applies if
     * #GtkActivatable:use-action-appearance is %TRUE.
     */
    shortLabel: string
    /**
     * The stock icon displayed in widgets representing this action.
     * 
     * This is an appearance property and thus only applies if
     * #GtkActivatable:use-action-appearance is %TRUE.
     */
    stockId: string
    tooltip: string
    visible: boolean
    visibleHorizontal: boolean
    /**
     * When %TRUE, toolitem proxies for this action are represented in the
     * toolbar overflow menu.
     */
    visibleOverflown: boolean
    visibleVertical: boolean

    // Own fields of Gtk-2.0.Gtk.Action

    object: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.Action

    // Has conflict: activate(): void
    /**
     * Disable activation signals from the action
     * 
     * This is needed when updating the state of your proxy
     * #GtkActivatable widget could result in calling gtk_action_activate(),
     * this is a convenience function to avoid recursing in those
     * cases (updating toggle state for instance).
     */
    blockActivate(): void
    /**
     * Disables calls to the gtk_action_activate()
     * function by signals on the given proxy widget.  This is used to
     * break notification loops for things like check or radio actions.
     * 
     * This function is intended for use by action implementations.
     * @param proxy a proxy widget
     */
    blockActivateFrom(proxy: Widget): void
    /**
     * Installs the accelerator for `action` if `action` has an
     * accel path and group. See gtk_action_set_accel_path() and
     * gtk_action_set_accel_group()
     * 
     * Since multiple proxies may independently trigger the installation
     * of the accelerator, the `action` counts the number of times this
     * function has been called and doesn't remove the accelerator until
     * gtk_action_disconnect_accelerator() has been called as many times.
     */
    connectAccelerator(): void
    // Has conflict: connectProxy(proxy: Widget): void
    /**
     * This function is intended for use by action implementations to
     * create icons displayed in the proxy widgets.
     * @param iconSize the size of the icon that should be created.
     */
    createIcon(iconSize: number): Widget
    // Has conflict: createMenu(): Widget
    // Has conflict: createMenuItem(): Widget
    // Has conflict: createToolItem(): Widget
    /**
     * Undoes the effect of one call to gtk_action_connect_accelerator().
     */
    disconnectAccelerator(): void
    // Has conflict: disconnectProxy(proxy: Widget): void
    /**
     * Returns the accel closure for this action.
     */
    getAccelClosure(): GObject.TClosure
    /**
     * Returns the accel path for this action.
     */
    getAccelPath(): string
    /**
     * Returns whether `action<`!-- -->'s menu item proxies will ignore the
     * #GtkSettings:gtk-menu-images setting and always show their image,
     * if available.
     */
    getAlwaysShowImage(): boolean
    /**
     * Gets the gicon of `action`.
     */
    getGicon(): Gio.Icon
    /**
     * Gets the icon name of `action`.
     */
    getIconName(): string
    /**
     * Checks whether `action` is important or not
     */
    getIsImportant(): boolean
    /**
     * Gets the label text of `action`.
     */
    getLabel(): string
    /**
     * Returns the name of the action.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Returns the proxy widgets for an action.
     * See also gtk_widget_get_action().
     */
    getProxies(): Widget[]
    /**
     * Returns whether the action itself is sensitive. Note that this doesn't
     * necessarily mean effective sensitivity. See gtk_action_is_sensitive()
     * for that.
     */
    getSensitive(): boolean
    /**
     * Gets the short label text of `action`.
     */
    getShortLabel(): string
    /**
     * Gets the stock id of `action`.
     */
    getStockId(): string
    /**
     * Gets the tooltip text of `action`.
     */
    getTooltip(): string
    /**
     * Returns whether the action itself is visible. Note that this doesn't
     * necessarily mean effective visibility. See gtk_action_is_sensitive()
     * for that.
     */
    getVisible(): boolean
    /**
     * Checks whether `action` is visible when horizontal
     */
    getVisibleHorizontal(): boolean
    /**
     * Checks whether `action` is visible when horizontal
     */
    getVisibleVertical(): boolean
    /**
     * Returns whether the action is effectively sensitive.
     */
    isSensitive(): boolean
    /**
     * Returns whether the action is effectively visible.
     */
    isVisible(): boolean
    /**
     * Sets the #GtkAccelGroup in which the accelerator for this action
     * will be installed.
     * @param accelGroup a #GtkAccelGroup or %NULL
     */
    setAccelGroup(accelGroup: AccelGroup | null): void
    /**
     * Sets the accel path for this action.  All proxy widgets associated
     * with the action will have this accel path, so that their
     * accelerators are consistent.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath the accelerator path
     */
    setAccelPath(accelPath: string): void
    /**
     * Sets whether `action<`!-- -->'s menu item proxies will ignore the
     * #GtkSettings:gtk-menu-images setting and always show their image, if available.
     * 
     * Use this if the menu item would be useless or hard to use
     * without their image.
     * @param alwaysShow %TRUE if menuitem proxies should always show their image
     */
    setAlwaysShowImage(alwaysShow: boolean): void
    /**
     * Sets the icon of `action`.
     * @param icon the #GIcon to set
     */
    setGicon(icon: Gio.Icon): void
    /**
     * Sets the icon name on `action`
     * @param iconName the icon name to set
     */
    setIconName(iconName: string): void
    /**
     * Sets whether the action is important, this attribute is used
     * primarily by toolbar items to decide whether to show a label
     * or not.
     * @param isImportant %TRUE to make the action important
     */
    setIsImportant(isImportant: boolean): void
    /**
     * Sets the label of `action`.
     * @param label the label text to set
     */
    setLabel(label: string): void
    /**
     * Sets the ::sensitive property of the action to `sensitive`. Note that
     * this doesn't necessarily mean effective sensitivity. See
     * gtk_action_is_sensitive()
     * for that.
     * @param sensitive %TRUE to make the action sensitive
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets a shorter label text on `action`.
     * @param shortLabel the label text to set
     */
    setShortLabel(shortLabel: string): void
    /**
     * Sets the stock id on `action`
     * @param stockId the stock id
     */
    setStockId(stockId: string): void
    /**
     * Sets the tooltip text on `action`
     * @param tooltip the tooltip text
     */
    setTooltip(tooltip: string): void
    /**
     * Sets the ::visible property of the action to `visible`. Note that
     * this doesn't necessarily mean effective visibility. See
     * gtk_action_is_visible()
     * for that.
     * @param visible %TRUE to make the action visible
     */
    setVisible(visible: boolean): void
    /**
     * Sets whether `action` is visible when horizontal
     * @param visibleHorizontal whether the action is visible horizontally
     */
    setVisibleHorizontal(visibleHorizontal: boolean): void
    /**
     * Sets whether `action` is visible when vertical
     * @param visibleVertical whether the action is visible vertically
     */
    setVisibleVertical(visibleVertical: boolean): void
    /**
     * Reenable activation signals from the action
     */
    unblockActivate(): void
    /**
     * Re-enables calls to the gtk_action_activate()
     * function by signals on the given proxy widget.  This undoes the
     * blocking done by gtk_action_block_activate_from().
     * 
     * This function is intended for use by action implementations.
     * @param proxy a proxy widget
     */
    unblockActivateFrom(proxy: Widget): void

    // Own virtual methods of Gtk-2.0.Gtk.Action

    /**
     * Emits the "activate" signal on the specified action, if it isn't
     * insensitive. This gets called by the proxy widgets when they get
     * activated.
     * 
     * It can also be used to manually activate an action.
     * @virtual 
     */
    activate(): void
    /**
     * Connects a widget to an action object as a proxy.  Synchronises
     * various properties of the action with the widget (such as label
     * text, icon, tooltip, etc), and attaches a callback so that the
     * action gets activated when the proxy widget does.
     * 
     * If the widget is already connected to an action, it is disconnected
     * first.
     * @virtual 
     * @param proxy the proxy widget
     */
    connectProxy(proxy: Widget): void
    /**
     * If `action` provides a #GtkMenu widget as a submenu for the menu
     * item or the toolbar item it creates, this function returns an
     * instance of that menu.
     * @virtual 
     */
    createMenu(): Widget
    /**
     * Creates a menu item widget that proxies for the given action.
     * @virtual 
     */
    createMenuItem(): Widget
    /**
     * Creates a toolbar item widget that proxies for the given action.
     * @virtual 
     */
    createToolItem(): Widget
    /**
     * Disconnects a proxy widget from an action.
     * Does <emphasis>not</emphasis> destroy the widget, however.
     * @virtual 
     * @param proxy the proxy widget
     */
    disconnectProxy(proxy: Widget): void

    // Own signals of Gtk-2.0.Gtk.Action

    connect(sigName: "activate", callback: Action.ActivateSignalCallback): number
    on(sigName: "activate", callback: Action.ActivateSignalCallback): number
    once(sigName: "activate", callback: Action.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Action

    connect(sigName: "notify::action-group", callback: any): number
    on(sigName: "notify::action-group", callback: any): number
    once(sigName: "notify::action-group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action-group", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: any): number
    on(sigName: "notify::always-show-image", callback: any): number
    once(sigName: "notify::always-show-image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::hide-if-empty", callback: any): number
    on(sigName: "notify::hide-if-empty", callback: any): number
    once(sigName: "notify::hide-if-empty", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hide-if-empty", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::name", callback: any): number
    on(sigName: "notify::name", callback: any): number
    once(sigName: "notify::name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::short-label", callback: any): number
    on(sigName: "notify::short-label", callback: any): number
    once(sigName: "notify::short-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::short-label", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::tooltip", callback: any): number
    on(sigName: "notify::tooltip", callback: any): number
    once(sigName: "notify::tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-overflown", callback: any): number
    on(sigName: "notify::visible-overflown", callback: any): number
    once(sigName: "notify::visible-overflown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-overflown", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * Actions represent operations that the user can be perform, along with
 * some information how it should be presented in the interface. Each action
 * provides methods to create icons, menu items and toolbar items
 * representing itself.
 * 
 * As well as the callback that is called when the action gets activated,
 * the following also gets associated with the action:
 * <itemizedlist>
 *   <listitem><para>a name (not translated, for path lookup)</para></listitem>
 *   <listitem><para>a label (translated, for display)</para></listitem>
 *   <listitem><para>an accelerator</para></listitem>
 *   <listitem><para>whether label indicates a stock id</para></listitem>
 *   <listitem><para>a tooltip (optional, translated)</para></listitem>
 *   <listitem><para>a toolbar label (optional, shorter than label)</para></listitem>
 * </itemizedlist>
 * The action will also have some state information:
 * <itemizedlist>
 *   <listitem><para>visible (shown/hidden)</para></listitem>
 *   <listitem><para>sensitive (enabled/disabled)</para></listitem>
 * </itemizedlist>
 * Apart from regular actions, there are <link linkend="GtkToggleAction">toggle
 * actions</link>, which can be toggled between two states and <link
 * linkend="GtkRadioAction">radio actions</link>, of which only one in a group
 * can be in the "active" state. Other actions can be implemented as #GtkAction
 * subclasses.
 * 
 * Each action can have one or more proxy menu item, toolbar button or
 * other proxy widgets.  Proxies mirror the state of the action (text
 * label, tooltip, icon, visible, sensitive, etc), and should change when
 * the action's state changes. When the proxy is activated, it should
 * activate its action.
 * @class 
 */
export class Action extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Action

    static name: string

    // Constructors of Gtk-2.0.Gtk.Action

    constructor(config?: Action.ConstructorProperties) 
    /**
     * Creates a new #GtkAction object. To add the action to a
     * #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * See <xref linkend="XML-UI"/> for information on allowed action
     * names.
     * @constructor 
     * @param name A unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     */
    constructor(name: string, label: string | null, tooltip: string | null, stockId: string) 
    /**
     * Creates a new #GtkAction object. To add the action to a
     * #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * See <xref linkend="XML-UI"/> for information on allowed action
     * names.
     * @constructor 
     * @param name A unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string): Action
    _init(config?: Action.ConstructorProperties): void
}

export module ActionGroup {

    // Signal callback interfaces

    /**
     * Signal callback interface for `connect-proxy`
     */
    export interface ConnectProxySignalCallback {
        (action: Action, proxy: Widget): void
    }

    /**
     * Signal callback interface for `disconnect-proxy`
     */
    export interface DisconnectProxySignalCallback {
        (action: Action, proxy: Widget): void
    }

    /**
     * Signal callback interface for `post-activate`
     */
    export interface PostActivateSignalCallback {
        (action: Action): void
    }

    /**
     * Signal callback interface for `pre-activate`
     */
    export interface PreActivateSignalCallback {
        (action: Action): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ActionGroup

        name?: string | null
        sensitive?: boolean | null
        visible?: boolean | null
    }

}

export interface ActionGroup extends Buildable {

    // Own properties of Gtk-2.0.Gtk.ActionGroup

    readonly name: string
    sensitive: boolean
    visible: boolean

    // Own fields of Gtk-2.0.Gtk.ActionGroup

    parent: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.ActionGroup

    /**
     * Adds an action object to the action group. Note that this function
     * does not set up the accel path of the action, which can lead to problems
     * if a user tries to modify the accelerator of a menuitem associated with
     * the action. Therefore you must either set the accel path yourself with
     * gtk_action_set_accel_path(), or use
     * <literal>gtk_action_group_add_action_with_accel (..., NULL)</literal>.
     * @param action an action
     */
    addAction(action: Action): void
    /**
     * Adds an action object to the action group and sets up the accelerator.
     * 
     * If `accelerator` is %NULL, attempts to use the accelerator associated
     * with the stock_id of the action.
     * 
     * Accel paths are set to
     * <literal>&lt;Actions&gt;/<replaceable>group-name</replaceable>/<replaceable>action-name</replaceable></literal>.
     * @param action the action to add
     * @param accelerator the accelerator for the action, in   the format understood by gtk_accelerator_parse(), or "" for no accelerator, or   %NULL to use the stock accelerator
     */
    addActionWithAccel(action: Action, accelerator: string | null): void
    /**
     * This is a convenience function to create a number of actions and add them
     * to the action group.
     * 
     * The "activate" signals of the actions are connected to the callbacks and
     * their accel paths are set to
     * <literal>&lt;Actions&gt;/<replaceable>group-name</replaceable>/<replaceable>action-name</replaceable></literal>.
     * @param entries an array of action descriptions
     * @param nEntries the number of entries
     * @param userData data to pass to the action callbacks
     */
    addActions(entries: ActionEntry, nEntries: number, userData: object | null): void
    /**
     * This variant of gtk_action_group_add_actions() adds a #GDestroyNotify
     * callback for `user_data`.
     * @param entries an array of action descriptions
     * @param nEntries the number of entries
     * @param userData data to pass to the action callbacks
     * @param destroy destroy notification callback for `user_data`
     */
    addActionsFull(entries: ActionEntry, nEntries: number, userData: object | null, destroy: GLib.DestroyNotify): void
    /**
     * This variant of gtk_action_group_add_radio_actions() adds a
     * #GDestroyNotify callback for `user_data`.
     * @param entries an array of radio action descriptions
     * @param nEntries the number of entries
     * @param value the value of the action to activate initially, or -1 if   no action should be activated
     * @param onChange the callback to connect to the changed signal
     */
    addRadioActionsFull(entries: RadioActionEntry, nEntries: number, value: number, onChange: GObject.Callback): void
    /**
     * This is a convenience function to create a number of toggle actions and add them
     * to the action group.
     * 
     * The "activate" signals of the actions are connected to the callbacks and
     * their accel paths are set to
     * <literal>&lt;Actions&gt;/<replaceable>group-name</replaceable>/<replaceable>action-name</replaceable></literal>.
     * @param entries an array of toggle action descriptions
     * @param nEntries the number of entries
     * @param userData data to pass to the action callbacks
     */
    addToggleActions(entries: ToggleActionEntry, nEntries: number, userData: object | null): void
    /**
     * This variant of gtk_action_group_add_toggle_actions() adds a
     * #GDestroyNotify callback for `user_data`.
     * @param entries an array of toggle action descriptions
     * @param nEntries the number of entries
     * @param userData data to pass to the action callbacks
     * @param destroy destroy notification callback for `user_data`
     */
    addToggleActionsFull(entries: ToggleActionEntry, nEntries: number, userData: object | null, destroy: GLib.DestroyNotify): void
    // Has conflict: getAction(actionName: string): Action
    /**
     * Gets the name of the action group.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Returns %TRUE if the group is sensitive.  The constituent actions
     * can only be logically sensitive (see gtk_action_is_sensitive()) if
     * they are sensitive (see gtk_action_get_sensitive()) and their group
     * is sensitive.
     */
    getSensitive(): boolean
    /**
     * Returns %TRUE if the group is visible.  The constituent actions
     * can only be logically visible (see gtk_action_is_visible()) if
     * they are visible (see gtk_action_get_visible()) and their group
     * is visible.
     */
    getVisible(): boolean
    /**
     * Lists the actions in the action group.
     */
    listActions(): Action[]
    /**
     * Removes an action object from the action group.
     * @param action an action
     */
    removeAction(action: Action): void
    /**
     * Changes the sensitivity of `action_group`
     * @param sensitive new sensitivity
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets a function to be used for translating the `label` and `tooltip` of
     * #GtkActionGroupEntry<!-- -->s added by gtk_action_group_add_actions().
     * 
     * If you're using gettext(), it is enough to set the translation domain
     * with gtk_action_group_set_translation_domain().
     * @param func a #GtkTranslateFunc
     */
    setTranslateFunc(func: TranslateFunc): void
    /**
     * Sets the translation domain and uses g_dgettext() for translating the
     * `label` and `tooltip` of #GtkActionEntry<!-- -->s added by
     * gtk_action_group_add_actions().
     * 
     * If you're not using gettext() for localization, see
     * gtk_action_group_set_translate_func().
     * @param domain the translation domain to use for g_dgettext() calls
     */
    setTranslationDomain(domain: string): void
    /**
     * Changes the visible of `action_group`.
     * @param visible new visiblity
     */
    setVisible(visible: boolean): void
    /**
     * Translates a string using the specified translate_func(). This
     * is mainly intended for language bindings.
     * @param string a string
     */
    translateString(string: string): string

    // Own virtual methods of Gtk-2.0.Gtk.ActionGroup

    /**
     * Looks up an action in the action group by name.
     * @virtual 
     * @param actionName the name of the action
     */
    getAction(actionName: string): Action

    // Own signals of Gtk-2.0.Gtk.ActionGroup

    connect(sigName: "connect-proxy", callback: ActionGroup.ConnectProxySignalCallback): number
    on(sigName: "connect-proxy", callback: ActionGroup.ConnectProxySignalCallback): number
    once(sigName: "connect-proxy", callback: ActionGroup.ConnectProxySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "connect-proxy", proxy: Widget, ...args: any[]): void
    connect(sigName: "disconnect-proxy", callback: ActionGroup.DisconnectProxySignalCallback): number
    on(sigName: "disconnect-proxy", callback: ActionGroup.DisconnectProxySignalCallback): number
    once(sigName: "disconnect-proxy", callback: ActionGroup.DisconnectProxySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "disconnect-proxy", proxy: Widget, ...args: any[]): void
    connect(sigName: "post-activate", callback: ActionGroup.PostActivateSignalCallback): number
    on(sigName: "post-activate", callback: ActionGroup.PostActivateSignalCallback): number
    once(sigName: "post-activate", callback: ActionGroup.PostActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "post-activate", ...args: any[]): void
    connect(sigName: "pre-activate", callback: ActionGroup.PreActivateSignalCallback): number
    on(sigName: "pre-activate", callback: ActionGroup.PreActivateSignalCallback): number
    once(sigName: "pre-activate", callback: ActionGroup.PreActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "pre-activate", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ActionGroup

    connect(sigName: "notify::name", callback: any): number
    on(sigName: "notify::name", callback: any): number
    once(sigName: "notify::name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ActionGroup extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.ActionGroup

    static name: string

    // Constructors of Gtk-2.0.Gtk.ActionGroup

    constructor(config?: ActionGroup.ConstructorProperties) 
    /**
     * Creates a new #GtkActionGroup object. The name of the action group
     * is used when associating <link linkend="Action-Accel">keybindings</link>
     * with the actions.
     * @constructor 
     * @param name the name of the action group.
     */
    constructor(name: string) 
    /**
     * Creates a new #GtkActionGroup object. The name of the action group
     * is used when associating <link linkend="Action-Accel">keybindings</link>
     * with the actions.
     * @constructor 
     * @param name the name of the action group.
     */
    static new(name: string): ActionGroup
    _init(config?: ActionGroup.ConstructorProperties): void
}

export module Adjustment {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `value-changed`
     */
    export interface ValueChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Adjustment

        /**
         * The minimum value of the adjustment.
         */
        lower?: number | null
        /**
         * The page increment of the adjustment.
         */
        pageIncrement?: number | null
        /**
         * The page size of the adjustment.
         * Note that the page-size is irrelevant and should be set to zero
         * if the adjustment is used for a simple scalar value, e.g. in a
         * #GtkSpinButton.
         */
        pageSize?: number | null
        /**
         * The step increment of the adjustment.
         */
        stepIncrement?: number | null
        /**
         * The maximum value of the adjustment.
         * Note that values will be restricted by
         * <literal>upper - page-size</literal> if the page-size
         * property is nonzero.
         */
        upper?: number | null
        /**
         * The value of the adjustment.
         */
        value?: number | null
    }

}

export interface Adjustment {

    // Own fields of Gtk-2.0.Gtk.Adjustment

    parentInstance: any
    lower: number
    upper: number
    value: number
    stepIncrement: number
    pageIncrement: number
    pageSize: number

    // Owm methods of Gtk-2.0.Gtk.Adjustment

    // Has conflict: changed(): void
    clampPage(lower: number, upper: number): void
    /**
     * Sets all properties of the adjustment at once.
     * 
     * Use this function to avoid multiple emissions of the "changed"
     * signal. See gtk_adjustment_set_lower() for an alternative way
     * of compressing multiple emissions of "changed" into one.
     * @param value the new value
     * @param lower the new minimum value
     * @param upper the new maximum value
     * @param stepIncrement the new step increment
     * @param pageIncrement the new page increment
     * @param pageSize the new page size
     */
    configure(value: number, lower: number, upper: number, stepIncrement: number, pageIncrement: number, pageSize: number): void
    /**
     * Retrieves the minimum value of the adjustment.
     */
    getLower(): number
    /**
     * Retrieves the page increment of the adjustment.
     */
    getPageIncrement(): number
    /**
     * Retrieves the page size of the adjustment.
     */
    getPageSize(): number
    /**
     * Retrieves the step increment of the adjustment.
     */
    getStepIncrement(): number
    /**
     * Retrieves the maximum value of the adjustment.
     */
    getUpper(): number
    /**
     * Gets the current value of the adjustment. See
     * gtk_adjustment_set_value ().
     */
    getValue(): number
    /**
     * Sets the minimum value of the adjustment.
     * 
     * When setting multiple adjustment properties via their individual
     * setters, multiple "changed" signals will be emitted. However, since
     * the emission of the "changed" signal is tied to the emission of the
     * "GObject::notify" signals of the changed properties, it's possible
     * to compress the "changed" signals into one by calling
     * g_object_freeze_notify() and g_object_thaw_notify() around the
     * calls to the individual setters.
     * 
     * Alternatively, using a single g_object_set() for all the properties
     * to change, or using gtk_adjustment_configure() has the same effect
     * of compressing "changed" emissions.
     * @param lower the new minimum value
     */
    setLower(lower: number): void
    /**
     * Sets the page increment of the adjustment.
     * 
     * See gtk_adjustment_set_lower() about how to compress multiple
     * emissions of the "changed" signal when setting multiple adjustment
     * properties.
     * @param pageIncrement the new page increment
     */
    setPageIncrement(pageIncrement: number): void
    /**
     * Sets the page size of the adjustment.
     * 
     * See gtk_adjustment_set_lower() about how to compress multiple
     * emissions of the "changed" signal when setting multiple adjustment
     * properties.
     * @param pageSize the new page size
     */
    setPageSize(pageSize: number): void
    /**
     * Sets the step increment of the adjustment.
     * 
     * See gtk_adjustment_set_lower() about how to compress multiple
     * emissions of the "changed" signal when setting multiple adjustment
     * properties.
     * @param stepIncrement the new step increment
     */
    setStepIncrement(stepIncrement: number): void
    /**
     * Sets the maximum value of the adjustment.
     * 
     * Note that values will be restricted by
     * <literal>upper - page-size</literal> if the page-size
     * property is nonzero.
     * 
     * See gtk_adjustment_set_lower() about how to compress multiple
     * emissions of the "changed" signal when setting multiple adjustment
     * properties.
     * @param upper the new maximum value
     */
    setUpper(upper: number): void
    setValue(value: number): void
    // Has conflict: valueChanged(): void

    // Own virtual methods of Gtk-2.0.Gtk.Adjustment

    changed(): void
    valueChanged(): void

    // Own signals of Gtk-2.0.Gtk.Adjustment

    connect(sigName: "changed", callback: Adjustment.ChangedSignalCallback): number
    on(sigName: "changed", callback: Adjustment.ChangedSignalCallback): number
    once(sigName: "changed", callback: Adjustment.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void
    connect(sigName: "value-changed", callback: Adjustment.ValueChangedSignalCallback): number
    on(sigName: "value-changed", callback: Adjustment.ValueChangedSignalCallback): number
    once(sigName: "value-changed", callback: Adjustment.ValueChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "value-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Adjustment

    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Adjustment extends Object {

    // Own properties of Gtk-2.0.Gtk.Adjustment

    static name: string

    // Constructors of Gtk-2.0.Gtk.Adjustment

    constructor(config?: Adjustment.ConstructorProperties) 
    constructor(value: number, lower: number, upper: number, stepIncrement: number, pageIncrement: number, pageSize: number) 
    static new(value: number, lower: number, upper: number, stepIncrement: number, pageIncrement: number, pageSize: number): Adjustment
    _init(config?: Adjustment.ConstructorProperties): void
}

export module Alignment {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Alignment

        /**
         * The padding to insert at the bottom of the widget.
         */
        bottomPadding?: number | null
        /**
         * The padding to insert at the left of the widget.
         */
        leftPadding?: number | null
        /**
         * The padding to insert at the right of the widget.
         */
        rightPadding?: number | null
        /**
         * The padding to insert at the top of the widget.
         */
        topPadding?: number | null
        xalign?: number | null
        xscale?: number | null
        yalign?: number | null
        yscale?: number | null
    }

}

export interface Alignment extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Alignment

    /**
     * The padding to insert at the bottom of the widget.
     */
    bottomPadding: number
    /**
     * The padding to insert at the left of the widget.
     */
    leftPadding: number
    /**
     * The padding to insert at the right of the widget.
     */
    rightPadding: number
    /**
     * The padding to insert at the top of the widget.
     */
    topPadding: number

    // Own fields of Gtk-2.0.Gtk.Alignment

    bin: Bin
    xalign: number
    yalign: number
    xscale: number
    yscale: number

    // Owm methods of Gtk-2.0.Gtk.Alignment

    /**
     * Gets the padding on the different sides of the widget.
     * See gtk_alignment_set_padding ().
     */
    getPadding(): [ /* paddingTop */ number, /* paddingBottom */ number, /* paddingLeft */ number, /* paddingRight */ number ]
    /**
     * Sets the #GtkAlignment values.
     * @param xalign the horizontal alignment of the child widget, from 0 (left) to 1  (right).
     * @param yalign the vertical alignment of the child widget, from 0 (top) to 1  (bottom).
     * @param xscale the amount that the child widget expands horizontally to fill up  unused space, from 0 to 1.  A value of 0 indicates that the child widget should never expand.  A value of 1 indicates that the child widget will expand to fill all of the  space allocated for the #GtkAlignment.
     * @param yscale the amount that the child widget expands vertically to fill up  unused space, from 0 to 1. The values are similar to `xscale`.
     */
    set(xalign: number, yalign: number, xscale: number, yscale: number): void
    /**
     * Sets the padding on the different sides of the widget.
     * The padding adds blank space to the sides of the widget. For instance,
     * this can be used to indent the child widget towards the right by adding
     * padding on the left.
     * @param paddingTop the padding at the top of the widget
     * @param paddingBottom the padding at the bottom of the widget
     * @param paddingLeft the padding at the left of the widget
     * @param paddingRight the padding at the right of the widget.
     */
    setPadding(paddingTop: number, paddingBottom: number, paddingLeft: number, paddingRight: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Alignment

    connect(sigName: "notify::bottom-padding", callback: any): number
    on(sigName: "notify::bottom-padding", callback: any): number
    once(sigName: "notify::bottom-padding", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::bottom-padding", ...args: any[]): void
    connect(sigName: "notify::left-padding", callback: any): number
    on(sigName: "notify::left-padding", callback: any): number
    once(sigName: "notify::left-padding", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::left-padding", ...args: any[]): void
    connect(sigName: "notify::right-padding", callback: any): number
    on(sigName: "notify::right-padding", callback: any): number
    once(sigName: "notify::right-padding", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-padding", ...args: any[]): void
    connect(sigName: "notify::top-padding", callback: any): number
    on(sigName: "notify::top-padding", callback: any): number
    once(sigName: "notify::top-padding", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::top-padding", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkAlignment widget controls the alignment and size of its child widget.
 * It has four settings: xscale, yscale, xalign, and yalign.
 * 
 * The scale settings are used to specify how much the child widget should
 * expand to fill the space allocated to the #GtkAlignment.
 * The values can range from 0 (meaning the child doesn't expand at all) to
 * 1 (meaning the child expands to fill all of the available space).
 * 
 * The align settings are used to place the child widget within the available
 * area. The values range from 0 (top or left) to 1 (bottom or right).
 * Of course, if the scale settings are both set to 1, the alignment settings
 * have no effect.
 * @class 
 */
export class Alignment extends Bin {

    // Own properties of Gtk-2.0.Gtk.Alignment

    static name: string

    // Constructors of Gtk-2.0.Gtk.Alignment

    constructor(config?: Alignment.ConstructorProperties) 
    /**
     * Creates a new #GtkAlignment.
     * @constructor 
     * @param xalign the horizontal alignment of the child widget, from 0 (left) to 1  (right).
     * @param yalign the vertical alignment of the child widget, from 0 (top) to 1  (bottom).
     * @param xscale the amount that the child widget expands horizontally to fill up  unused space, from 0 to 1.  A value of 0 indicates that the child widget should never expand.  A value of 1 indicates that the child widget will expand to fill all of the  space allocated for the #GtkAlignment.
     * @param yscale the amount that the child widget expands vertically to fill up  unused space, from 0 to 1. The values are similar to `xscale`.
     */
    constructor(xalign: number, yalign: number, xscale: number, yscale: number) 
    /**
     * Creates a new #GtkAlignment.
     * @constructor 
     * @param xalign the horizontal alignment of the child widget, from 0 (left) to 1  (right).
     * @param yalign the vertical alignment of the child widget, from 0 (top) to 1  (bottom).
     * @param xscale the amount that the child widget expands horizontally to fill up  unused space, from 0 to 1.  A value of 0 indicates that the child widget should never expand.  A value of 1 indicates that the child widget will expand to fill all of the  space allocated for the #GtkAlignment.
     * @param yscale the amount that the child widget expands vertically to fill up  unused space, from 0 to 1. The values are similar to `xscale`.
     */
    static new(xalign: number, yalign: number, xscale: number, yscale: number): Alignment
    _init(config?: Alignment.ConstructorProperties): void
}

export module Arrow {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Misc.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Arrow

        arrowType?: ArrowType | null
        shadowType?: ShadowType | null
    }

}

export interface Arrow extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Arrow

    misc: Misc
    arrowType: number
    shadowType: number

    // Owm methods of Gtk-2.0.Gtk.Arrow

    /**
     * Sets the direction and style of the #GtkArrow, `arrow`.
     * @param arrowType a valid #GtkArrowType.
     * @param shadowType a valid #GtkShadowType.
     */
    set(arrowType: ArrowType, shadowType: ShadowType): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Arrow

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * GtkArrow should be used to draw simple arrows that need to point in
 * one of the four cardinal directions (up, down, left, or right).  The
 * style of the arrow can be one of shadow in, shadow out, etched in, or
 * etched out.  Note that these directions and style types may be
 * ammended in versions of GTK+ to come.
 * 
 * GtkArrow will fill any space alloted to it, but since it is inherited
 * from #GtkMisc, it can be padded and/or aligned, to fill exactly the
 * space the programmer desires.
 * 
 * Arrows are created with a call to gtk_arrow_new().  The direction or
 * style of an arrow can be changed after creation by using gtk_arrow_set().
 * @class 
 */
export class Arrow extends Misc {

    // Own properties of Gtk-2.0.Gtk.Arrow

    static name: string

    // Constructors of Gtk-2.0.Gtk.Arrow

    constructor(config?: Arrow.ConstructorProperties) 
    /**
     * Creates a new #GtkArrow widget.
     * @constructor 
     * @param arrowType a valid #GtkArrowType.
     * @param shadowType a valid #GtkShadowType.
     */
    constructor(arrowType: ArrowType, shadowType: ShadowType) 
    /**
     * Creates a new #GtkArrow widget.
     * @constructor 
     * @param arrowType a valid #GtkArrowType.
     * @param shadowType a valid #GtkShadowType.
     */
    static new(arrowType: ArrowType, shadowType: ShadowType): Arrow
    _init(config?: Arrow.ConstructorProperties): void
}

export module AspectFrame {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Frame.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.AspectFrame

        obeyChild?: boolean | null
        ratio?: number | null
        xalign?: number | null
        yalign?: number | null
    }

}

export interface AspectFrame extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.AspectFrame

    frame: Frame
    xalign: number
    yalign: number
    ratio: number
    obeyChild: boolean
    centerAllocation: Allocation

    // Owm methods of Gtk-2.0.Gtk.AspectFrame

    /**
     * Set parameters for an existing #GtkAspectFrame.
     * @param xalign Horizontal alignment of the child within the allocation of  the #GtkAspectFrame. This ranges from 0.0 (left aligned)  to 1.0 (right aligned)
     * @param yalign Vertical alignment of the child within the allocation of  the #GtkAspectFrame. This ranges from 0.0 (left aligned)  to 1.0 (right aligned)
     * @param ratio The desired aspect ratio.
     * @param obeyChild If %TRUE, `ratio` is ignored, and the aspect  ratio is taken from the requistion of the child.
     */
    set(xalign: number, yalign: number, ratio: number, obeyChild: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.AspectFrame

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::shadow", callback: any): number
    on(sigName: "notify::shadow", callback: any): number
    once(sigName: "notify::shadow", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::shadow", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkAspectFrame is useful when you want
 * pack a widget so that it can resize but always retains
 * the same aspect ratio. For instance, one might be
 * drawing a small preview of a larger image. #GtkAspectFrame
 * derives from #GtkFrame, so it can draw a label and
 * a frame around the child. The frame will be
 * "shrink-wrapped" to the size of the child.
 * @class 
 */
export class AspectFrame extends Frame {

    // Own properties of Gtk-2.0.Gtk.AspectFrame

    static name: string

    // Constructors of Gtk-2.0.Gtk.AspectFrame

    constructor(config?: AspectFrame.ConstructorProperties) 
    /**
     * Create a new #GtkAspectFrame.
     * @constructor 
     * @param label Label text.
     * @param xalign Horizontal alignment of the child within the allocation of  the #GtkAspectFrame. This ranges from 0.0 (left aligned)  to 1.0 (right aligned)
     * @param yalign Vertical alignment of the child within the allocation of  the #GtkAspectFrame. This ranges from 0.0 (left aligned)  to 1.0 (right aligned)
     * @param ratio The desired aspect ratio.
     * @param obeyChild If %TRUE, `ratio` is ignored, and the aspect  ratio is taken from the requistion of the child.
     */
    constructor(label: string, xalign: number, yalign: number, ratio: number, obeyChild: boolean) 
    /**
     * Create a new #GtkAspectFrame.
     * @constructor 
     * @param label Label text.
     * @param xalign Horizontal alignment of the child within the allocation of  the #GtkAspectFrame. This ranges from 0.0 (left aligned)  to 1.0 (right aligned)
     * @param yalign Vertical alignment of the child within the allocation of  the #GtkAspectFrame. This ranges from 0.0 (left aligned)  to 1.0 (right aligned)
     * @param ratio The desired aspect ratio.
     * @param obeyChild If %TRUE, `ratio` is ignored, and the aspect  ratio is taken from the requistion of the child.
     */
    static new(label: string, xalign: number, yalign: number, ratio: number, obeyChild: boolean): AspectFrame

    // Overloads of new

    /**
     * Creates a new #GtkFrame, with optional label `label`.
     * If `label` is %NULL, the label is omitted.
     * @constructor 
     * @param label the text to use as the label of the frame
     */
    static new(label: string): Frame
    _init(config?: AspectFrame.ConstructorProperties): void
}

export module Assistant {

    // Signal callback interfaces

    /**
     * Signal callback interface for `apply`
     */
    export interface ApplySignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cancel`
     */
    export interface CancelSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `close`
     */
    export interface CloseSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `prepare`
     */
    export interface PrepareSignalCallback {
        (page: Widget): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Window.ConstructorProperties {
    }

}

export interface Assistant extends Atk.ImplementorIface, Buildable {

    // Conflicting properties

    hasFocus: any

    // Own fields of Gtk-2.0.Gtk.Assistant

    parent: Window & Widget
    // Has conflict: cancel: Widget
    forward: Widget
    back: Widget
    // Has conflict: apply: Widget
    // Has conflict: close: Widget
    last: Widget

    // Owm methods of Gtk-2.0.Gtk.Assistant

    /**
     * Adds a widget to the action area of a #GtkAssistant.
     * @param child a #GtkWidget
     */
    addActionWidget(child: Widget): void
    /**
     * Appends a page to the `assistant`.
     * @param page a #GtkWidget
     */
    appendPage(page: Widget): number
    /**
     * Erases the visited page history so the back button is not
     * shown on the current page, and removes the cancel button
     * from subsequent pages.
     * 
     * Use this when the information provided up to the current
     * page is hereafter deemed permanent and cannot be modified
     * or undone.  For example, showing a progress page to track
     * a long-running, unreversible operation after the user has
     * clicked apply on a confirmation page.
     */
    commit(): void
    /**
     * Returns the page number of the current page
     */
    getCurrentPage(): number
    /**
     * Returns the number of pages in the `assistant`
     */
    getNPages(): number
    /**
     * Returns the child widget contained in page number `page_num`.
     * @param pageNum The index of a page in the `assistant,` or -1 to get the last page;
     */
    getNthPage(pageNum: number): Widget
    /**
     * Gets whether `page` is complete.
     * @param page a page of `assistant`
     */
    getPageComplete(page: Widget): boolean
    /**
     * Gets the header image for `page`.
     * @param page a page of `assistant`
     */
    getPageHeaderImage(page: Widget): GdkPixbuf.Pixbuf
    /**
     * Gets the header image for `page`.
     * @param page a page of `assistant`
     */
    getPageSideImage(page: Widget): GdkPixbuf.Pixbuf
    /**
     * Gets the title for `page`.
     * @param page a page of `assistant`
     */
    getPageTitle(page: Widget): string
    /**
     * Gets the page type of `page`.
     * @param page a page of `assistant`
     */
    getPageType(page: Widget): AssistantPageType
    /**
     * Inserts a page in the `assistant` at a given position.
     * @param page a #GtkWidget
     * @param position the index (starting at 0) at which to insert the page,            or -1 to append the page to the `assistant`
     */
    insertPage(page: Widget, position: number): number
    /**
     * Prepends a page to the `assistant`.
     * @param page a #GtkWidget
     */
    prependPage(page: Widget): number
    /**
     * Removes a widget from the action area of a #GtkAssistant.
     * @param child a #GtkWidget
     */
    removeActionWidget(child: Widget): void
    /**
     * Switches the page to `page_num`. Note that this will only be necessary
     * in custom buttons, as the `assistant` flow can be set with
     * gtk_assistant_set_forward_page_func().
     * @param pageNum index of the page to switch to, starting from 0.            If negative, the last page will be used. If greater            than the number of pages in the `assistant,` nothing            will be done.
     */
    setCurrentPage(pageNum: number): void
    /**
     * Sets the page forwarding function to be `page_func,` this function will
     * be used to determine what will be the next page when the user presses
     * the forward button. Setting `page_func` to %NULL will make the assistant
     * to use the default forward function, which just goes to the next visible
     * page.
     * @param pageFunc the #GtkAssistantPageFunc, or %NULL to use the default one
     */
    setForwardPageFunc(pageFunc: AssistantPageFunc | null): void
    /**
     * Sets whether `page` contents are complete. This will make
     * `assistant` update the buttons state to be able to continue the task.
     * @param page a page of `assistant`
     * @param complete the completeness status of the page
     */
    setPageComplete(page: Widget, complete: boolean): void
    /**
     * Sets a header image for `page`. This image is displayed in the header
     * area of the assistant when `page` is the current page.
     * @param page a page of `assistant`
     * @param pixbuf the new header image `page`
     */
    setPageHeaderImage(page: Widget, pixbuf: GdkPixbuf.Pixbuf | null): void
    /**
     * Sets a header image for `page`. This image is displayed in the side
     * area of the assistant when `page` is the current page.
     * @param page a page of `assistant`
     * @param pixbuf the new header image `page`
     */
    setPageSideImage(page: Widget, pixbuf: GdkPixbuf.Pixbuf | null): void
    /**
     * Sets a title for `page`. The title is displayed in the header
     * area of the assistant when `page` is the current page.
     * @param page a page of `assistant`
     * @param title the new title for `page`
     */
    setPageTitle(page: Widget, title: string): void
    /**
     * Sets the page type for `page`. The page type determines the page
     * behavior in the `assistant`.
     * @param page a page of `assistant`
     * @param type the new type for `page`
     */
    setPageType(page: Widget, type: AssistantPageType): void
    /**
     * Forces `assistant` to recompute the buttons state.
     * 
     * GTK+ automatically takes care of this in most situations,
     * e.g. when the user goes to a different page, or when the
     * visibility or completeness of a page changes.
     * 
     * One situation where it can be necessary to call this
     * function is when changing a value on the current page
     * affects the future page flow of the assistant.
     */
    updateButtonsState(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Assistant

    apply(): void
    cancel(): void
    close(): void
    prepare(page: Widget): void

    // Own signals of Gtk-2.0.Gtk.Assistant

    connect(sigName: "apply", callback: Assistant.ApplySignalCallback): number
    on(sigName: "apply", callback: Assistant.ApplySignalCallback): number
    once(sigName: "apply", callback: Assistant.ApplySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "apply", ...args: any[]): void
    connect(sigName: "cancel", callback: Assistant.CancelSignalCallback): number
    on(sigName: "cancel", callback: Assistant.CancelSignalCallback): number
    once(sigName: "cancel", callback: Assistant.CancelSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cancel", ...args: any[]): void
    connect(sigName: "close", callback: Assistant.CloseSignalCallback): number
    on(sigName: "close", callback: Assistant.CloseSignalCallback): number
    once(sigName: "close", callback: Assistant.CloseSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "close", ...args: any[]): void
    connect(sigName: "prepare", callback: Assistant.PrepareSignalCallback): number
    on(sigName: "prepare", callback: Assistant.PrepareSignalCallback): number
    once(sigName: "prepare", callback: Assistant.PrepareSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "prepare", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Assistant

    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A #GtkAssistant is a widget used to represent a generally complex
 * operation splitted in several steps, guiding the user through its pages
 * and controlling the page flow to collect the necessary data.
 * 
 * <refsect2 id="GtkAssistant-BUILDER-UI">
 * <title>GtkAssistant as GtkBuildable</title>
 * <para>
 * The GtkAssistant implementation of the GtkBuildable interface exposes the
 * `action_area` as internal children with the name "action_area".
 * 
 * To add pages to an assistant in GtkBuilder, simply add it as a
 * &lt;child&gt; to the GtkAssistant object, and set its child properties
 * as necessary.
 * </para>
 * </refsect2>
 * @class 
 */
export class Assistant extends Window {

    // Own properties of Gtk-2.0.Gtk.Assistant

    static name: string

    // Constructors of Gtk-2.0.Gtk.Assistant

    constructor(config?: Assistant.ConstructorProperties) 
    /**
     * Creates a new #GtkAssistant.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkAssistant.
     * @constructor 
     */
    static new(): Assistant

    // Overloads of new

    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: Assistant.ConstructorProperties): void
}

export module Bin {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {
    }

}

export interface Bin extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Bin

    container: Container
    child: Widget

    // Owm methods of Gtk-2.0.Gtk.Bin

    /**
     * Gets the child of the #GtkBin, or %NULL if the bin contains
     * no child widget. The returned widget does not have a reference
     * added, so you do not need to unref it.
     */
    getChild(): Widget

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Bin

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkBin widget is a container with just one child.
 * It is not very useful itself, but it is useful for deriving subclasses,
 * since it provides common code needed for handling a single child widget.
 * 
 * Many GTK+ widgets are subclasses of #GtkBin, including #GtkWindow,
 * #GtkButton, #GtkFrame, #GtkHandleBox or #GtkScrolledWindow.
 * @class 
 */
export class Bin extends Container {

    // Own properties of Gtk-2.0.Gtk.Bin

    static name: string

    // Constructors of Gtk-2.0.Gtk.Bin

    constructor(config?: Bin.ConstructorProperties) 
    _init(config?: Bin.ConstructorProperties): void
}

export module Box {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Box

        homogeneous?: boolean | null
        spacing?: number | null
    }

}

export interface Box extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.Box

    container: Container
    children: object[]
    spacing: number
    homogeneous: number

    // Owm methods of Gtk-2.0.Gtk.Box

    /**
     * Returns whether the box is homogeneous (all children are the
     * same size). See gtk_box_set_homogeneous().
     */
    getHomogeneous(): boolean
    /**
     * Gets the value set by gtk_box_set_spacing().
     */
    getSpacing(): number
    /**
     * Adds `child` to `box,` packed with reference to the end of `box`.
     * The `child` is packed after (away from end of) any other child
     * packed with reference to the end of `box`.
     * @param child the #GtkWidget to be added to `box`
     * @param expand %TRUE if the new child is to be given extra space allocated   to `box`. The extra space will be divided evenly between all children   of `box` that use this option
     * @param fill %TRUE if space given to `child` by the `expand` option is   actually allocated to `child,` rather than just padding it.  This   parameter has no effect if `expand` is set to %FALSE.  A child is   always allocated the full height of a #GtkHBox and the full width   of a #GtkVBox.  This option affects the other dimension
     * @param padding extra space in pixels to put between this child and its   neighbors, over and above the global amount specified by   #GtkBox:spacing property.  If `child` is a widget at one of the   reference ends of `box,` then `padding` pixels are also put between   `child` and the reference edge of `box`
     */
    packEnd(child: Widget, expand: boolean, fill: boolean, padding: number): void
    /**
     * Adds `widget` to `box,` packed with reference to the end of `box`.
     * The child is packed after any other child packed with reference
     * to the start of `box`.
     * 
     * Parameters for how to pack the child `widget,` #GtkBox:expand,
     * #GtkBox:fill and #GtkBox:padding, are given their default
     * values, %TRUE, %TRUE, and 0, respectively.
     * @param widget the #GtkWidget to be added to `box`
     */
    packEndDefaults(widget: Widget): void
    /**
     * Adds `child` to `box,` packed with reference to the start of `box`.
     * The `child` is packed after any other child packed with reference
     * to the start of `box`.
     * @param child the #GtkWidget to be added to `box`
     * @param expand %TRUE if the new child is to be given extra space allocated to `box`.  The extra space will be divided evenly between all children of `box` that use this option
     * @param fill %TRUE if space given to `child` by the `expand` option is   actually allocated to `child,` rather than just padding it.  This   parameter has no effect if `expand` is set to %FALSE.  A child is   always allocated the full height of a #GtkHBox and the full width   of a #GtkVBox. This option affects the other dimension
     * @param padding extra space in pixels to put between this child and its   neighbors, over and above the global amount specified by   #GtkBox:spacing property.  If `child` is a widget at one of the   reference ends of `box,` then `padding` pixels are also put between   `child` and the reference edge of `box`
     */
    packStart(child: Widget, expand: boolean, fill: boolean, padding: number): void
    /**
     * Adds `widget` to `box,` packed with reference to the start of `box`.
     * The child is packed after any other child packed with reference
     * to the start of `box`.
     * 
     * Parameters for how to pack the child `widget,` #GtkBox:expand,
     * #GtkBox:fill and #GtkBox:padding, are given their default
     * values, %TRUE, %TRUE, and 0, respectively.
     * @param widget the #GtkWidget to be added to `box`
     */
    packStartDefaults(widget: Widget): void
    /**
     * Obtains information about how `child` is packed into `box`.
     * @param child the #GtkWidget of the child to query
     * @param expand pointer to return location for #GtkBox:expand child property
     * @param fill pointer to return location for #GtkBox:fill child property
     * @param padding pointer to return location for #GtkBox:padding child property
     * @param packType pointer to return location for #GtkBox:pack-type child property
     */
    queryChildPacking(child: Widget, expand: boolean, fill: boolean, padding: number, packType: PackType): void
    /**
     * Moves `child` to a new `position` in the list of `box` children.
     * The list is the <structfield>children</structfield> field of
     * #GtkBox-struct, and contains both widgets packed #GTK_PACK_START
     * as well as widgets packed #GTK_PACK_END, in the order that these
     * widgets were added to `box`.
     * 
     * A widget's position in the `box` children list determines where
     * the widget is packed into `box`.  A child widget at some position
     * in the list will be packed just after all other widgets of the
     * same packing type that appear earlier in the list.
     * @param child the #GtkWidget to move
     * @param position the new position for `child` in the list of children   of `box,` starting from 0. If negative, indicates the end of   the list
     */
    reorderChild(child: Widget, position: number): void
    /**
     * Sets the way `child` is packed into `box`.
     * @param child the #GtkWidget of the child to set
     * @param expand the new value of the #GtkBox:expand child property
     * @param fill the new value of the #GtkBox:fill child property
     * @param padding the new value of the #GtkBox:padding child property
     * @param packType the new value of the #GtkBox:pack-type child property
     */
    setChildPacking(child: Widget, expand: boolean, fill: boolean, padding: number, packType: PackType): void
    /**
     * Sets the #GtkBox:homogeneous property of `box,` controlling
     * whether or not all children of `box` are given equal space
     * in the box.
     * @param homogeneous a boolean value, %TRUE to create equal allotments,   %FALSE for variable allotments
     */
    setHomogeneous(homogeneous: boolean): void
    /**
     * Sets the #GtkBox:spacing property of `box,` which is the
     * number of pixels to place between children of `box`.
     * @param spacing the number of pixels to put between children
     */
    setSpacing(spacing: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Box

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Box extends Container {

    // Own properties of Gtk-2.0.Gtk.Box

    static name: string

    // Constructors of Gtk-2.0.Gtk.Box

    constructor(config?: Box.ConstructorProperties) 
    _init(config?: Box.ConstructorProperties): void
}

export module Builder {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Builder

        /**
         * The translation domain used when translating property values that
         * have been marked as translatable in interface descriptions.
         * If the translation domain is %NULL, #GtkBuilder uses gettext(),
         * otherwise g_dgettext().
         */
        translationDomain?: string | null
    }

}

export interface Builder {

    // Own properties of Gtk-2.0.Gtk.Builder

    /**
     * The translation domain used when translating property values that
     * have been marked as translatable in interface descriptions.
     * If the translation domain is %NULL, #GtkBuilder uses gettext(),
     * otherwise g_dgettext().
     */
    translationDomain: string

    // Own fields of Gtk-2.0.Gtk.Builder

    parentInstance: GObject.Object
    priv: BuilderPrivate

    // Owm methods of Gtk-2.0.Gtk.Builder

    /**
     * Parses a file containing a <link linkend="BUILDER-UI">GtkBuilder
     * UI definition</link> and merges it with the current contents of `builder`.
     * 
     * Upon errors 0 will be returned and `error` will be assigned a
     * #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR
     * domain.
     * @param filename the name of the file to parse
     */
    addFromFile(filename: string): number
    /**
     * Parses a string containing a <link linkend="BUILDER-UI">GtkBuilder
     * UI definition</link> and merges it with the current contents of `builder`.
     * 
     * Upon errors 0 will be returned and `error` will be assigned a
     * #GError from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.
     * @param buffer the string to parse
     * @param length the length of `buffer` (may be -1 if `buffer` is nul-terminated)
     */
    addFromString(buffer: string, length: number): number
    /**
     * Parses a file containing a <link linkend="BUILDER-UI">GtkBuilder
     * UI definition</link> building only the requested objects and merges
     * them with the current contents of `builder`.
     * 
     * Upon errors 0 will be returned and `error` will be assigned a
     * #GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR
     * domain.
     * 
     * <note><para>
     * If you are adding an object that depends on an object that is not
     * its child (for instance a #GtkTreeView that depends on its
     * #GtkTreeModel), you have to explicitely list all of them in `object_ids`.
     * </para></note>
     * @param filename the name of the file to parse
     * @param objectIds nul-terminated array of objects to build
     */
    addObjectsFromFile(filename: string, objectIds: string): number
    /**
     * Parses a string containing a <link linkend="BUILDER-UI">GtkBuilder
     * UI definition</link> building only the requested objects and merges
     * them with the current contents of `builder`.
     * 
     * Upon errors 0 will be returned and `error` will be assigned a
     * #GError from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.
     * 
     * <note><para>
     * If you are adding an object that depends on an object that is not
     * its child (for instance a #GtkTreeView that depends on its
     * #GtkTreeModel), you have to explicitely list all of them in `object_ids`.
     * </para></note>
     * @param buffer the string to parse
     * @param length the length of `buffer` (may be -1 if `buffer` is nul-terminated)
     * @param objectIds nul-terminated array of objects to build
     */
    addObjectsFromString(buffer: string, length: number, objectIds: string): number
    /**
     * This method is a simpler variation of gtk_builder_connect_signals_full().
     * It uses #GModule's introspective features (by opening the module %NULL)
     * to look at the application's symbol table. From here it tries to match
     * the signal handler names given in the interface description with
     * symbols in the application and connects the signals.
     * 
     * Note that this function will not work correctly if #GModule is not
     * supported on the platform.
     * 
     * When compiling applications for Windows, you must declare signal callbacks
     * with #G_MODULE_EXPORT, or they will not be put in the symbol table.
     * On Linux and Unices, this is not necessary; applications should instead
     * be compiled with the -Wl,--export-dynamic CFLAGS, and linked against
     * gmodule-export-2.0.
     * @param userData a pointer to a structure sent in as user data to all signals
     */
    connectSignals(userData: object | null): void
    /**
     * This function can be thought of the interpreted language binding
     * version of gtk_builder_connect_signals(), except that it does not
     * require GModule to function correctly.
     * @param func the function used to connect the signals
     */
    connectSignalsFull(func: BuilderConnectFunc): void
    /**
     * Gets the object named `name`. Note that this function does not
     * increment the reference count of the returned object.
     * @param name name of object to get
     */
    getObject(name: string): GObject.Object
    /**
     * Gets all objects that have been constructed by `builder`. Note that
     * this function does not increment the reference counts of the returned
     * objects.
     */
    getObjects(): GObject.Object[]
    /**
     * Gets the translation domain of `builder`.
     */
    getTranslationDomain(): string
    // Has conflict: getTypeFromName(typeName: string): GObject.GType
    /**
     * Sets the translation domain of `builder`.
     * See #GtkBuilder:translation-domain.
     * @param domain the translation domain or %NULL
     */
    setTranslationDomain(domain: string | null): void
    /**
     * This function demarshals a value from a string. This function
     * calls g_value_init() on the `value` argument, so it need not be
     * initialised beforehand.
     * 
     * This function can handle char, uchar, boolean, int, uint, long,
     * ulong, enum, flags, float, double, string, #GdkColor and
     * #GtkAdjustment type values. Support for #GtkWidget type values is
     * still to come.
     * 
     * Upon errors %FALSE will be returned and `error` will be assigned a
     * #GError from the #GTK_BUILDER_ERROR domain.
     * @param pspec the #GParamSpec for the property
     * @param string the string representation of the value
     */
    valueFromString(pspec: GObject.ParamSpec, string: string): [ /* returnType */ boolean, /* value */ any ]
    /**
     * Like gtk_builder_value_from_string(), this function demarshals
     * a value from a string, but takes a #GType instead of #GParamSpec.
     * This function calls g_value_init() on the `value` argument, so it
     * need not be initialised beforehand.
     * 
     * Upon errors %FALSE will be returned and `error` will be assigned a
     * #GError from the #GTK_BUILDER_ERROR domain.
     * @param type the #GType of the value
     * @param string the string representation of the value
     */
    valueFromStringType(type: GObject.GType, string: string): [ /* returnType */ boolean, /* value */ any ]

    // Own virtual methods of Gtk-2.0.Gtk.Builder

    /**
     * Looks up a type by name, using the virtual function that
     * #GtkBuilder has for that purpose. This is mainly used when
     * implementing the #GtkBuildable interface on a type.
     * @virtual 
     * @param typeName type name to lookup
     */
    getTypeFromName(typeName: string): GObject.GType

    // Class property signals of Gtk-2.0.Gtk.Builder

    connect(sigName: "notify::translation-domain", callback: any): number
    on(sigName: "notify::translation-domain", callback: any): number
    once(sigName: "notify::translation-domain", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::translation-domain", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Builder extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Builder

    static name: string

    // Constructors of Gtk-2.0.Gtk.Builder

    constructor(config?: Builder.ConstructorProperties) 
    /**
     * Creates a new builder object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new builder object.
     * @constructor 
     */
    static new(): Builder
    _init(config?: Builder.ConstructorProperties): void
}

export module Button {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clicked`
     */
    export interface ClickedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `enter`
     */
    export interface EnterSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `leave`
     */
    export interface LeaveSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `pressed`
     */
    export interface PressedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `released`
     */
    export interface ReleasedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Button

        focusOnClick?: boolean | null
        image?: Widget | null
        /**
         * The position of the image relative to the text inside the button.
         */
        imagePosition?: PositionType | null
        label?: string | null
        relief?: ReliefStyle | null
        useStock?: boolean | null
        useUnderline?: boolean | null
        /**
         * If the child of the button is a #GtkMisc or #GtkAlignment, this property
         * can be used to control it's horizontal alignment. 0.0 is left aligned,
         * 1.0 is right aligned.
         */
        xalign?: number | null
        /**
         * If the child of the button is a #GtkMisc or #GtkAlignment, this property
         * can be used to control it's vertical alignment. 0.0 is top aligned,
         * 1.0 is bottom aligned.
         */
        yalign?: number | null
    }

}

export interface Button extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.Button

    image: Widget
    /**
     * The position of the image relative to the text inside the button.
     */
    imagePosition: PositionType
    label: string
    /**
     * If the child of the button is a #GtkMisc or #GtkAlignment, this property
     * can be used to control it's horizontal alignment. 0.0 is left aligned,
     * 1.0 is right aligned.
     */
    xalign: number
    /**
     * If the child of the button is a #GtkMisc or #GtkAlignment, this property
     * can be used to control it's vertical alignment. 0.0 is top aligned,
     * 1.0 is bottom aligned.
     */
    yalign: number

    // Own fields of Gtk-2.0.Gtk.Button

    bin: Bin
    eventWindow: Gdk.Window
    labelText: string
    activateTimeout: number
    // Has conflict: constructed: number
    inButton: number
    buttonDown: number
    relief: number
    useUnderline: number
    useStock: number
    depressed: number
    depressOnActivate: number
    focusOnClick: number

    // Owm methods of Gtk-2.0.Gtk.Button

    // Has conflict: clicked(): void
    // Has conflict: enter(): void
    /**
     * Gets the alignment of the child in the button.
     */
    getAlignment(): [ /* xalign */ number, /* yalign */ number ]
    /**
     * Returns the button's event window if it is realized, %NULL otherwise.
     * This function should be rarely needed.
     */
    getEventWindow(): Gdk.Window
    /**
     * Returns whether the button grabs focus when it is clicked with the mouse.
     * See gtk_button_set_focus_on_click().
     */
    getFocusOnClick(): boolean
    /**
     * Gets the widget that is currenty set as the image of `button`.
     * This may have been explicitly set by gtk_button_set_image()
     * or constructed by gtk_button_new_from_stock().
     */
    getImage(): Widget
    /**
     * Gets the position of the image relative to the text
     * inside the button.
     */
    getImagePosition(): PositionType
    /**
     * Fetches the text from the label of the button, as set by
     * gtk_button_set_label(). If the label text has not
     * been set the return value will be %NULL. This will be the
     * case if you create an empty button with gtk_button_new() to
     * use as a container.
     */
    getLabel(): string
    getRelief(): ReliefStyle
    /**
     * Returns whether the button label is a stock item.
     */
    getUseStock(): boolean
    /**
     * Returns whether an embedded underline in the button label indicates a
     * mnemonic. See gtk_button_set_use_underline ().
     */
    getUseUnderline(): boolean
    // Has conflict: leave(): void
    // Has conflict: pressed(): void
    // Has conflict: released(): void
    /**
     * Sets the alignment of the child. This property has no effect unless
     * the child is a #GtkMisc or a #GtkAligment.
     * @param xalign the horizontal position of the child, 0.0 is left aligned,   1.0 is right aligned
     * @param yalign the vertical position of the child, 0.0 is top aligned,   1.0 is bottom aligned
     */
    setAlignment(xalign: number, yalign: number): void
    /**
     * Sets whether the button will grab focus when it is clicked with the mouse.
     * Making mouse clicks not grab focus is useful in places like toolbars where
     * you don't want the keyboard focus removed from the main area of the
     * application.
     * @param focusOnClick whether the button grabs focus when clicked with the mouse
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Set the image of `button` to the given widget. Note that
     * it depends on the #GtkSettings:gtk-button-images setting whether the
     * image will be displayed or not, you don't have to call
     * gtk_widget_show() on `image` yourself.
     * @param image a widget to set as the image for the button
     */
    setImage(image: Widget): void
    /**
     * Sets the position of the image relative to the text
     * inside the button.
     * @param position the position
     */
    setImagePosition(position: PositionType): void
    /**
     * Sets the text of the label of the button to `str`. This text is
     * also used to select the stock item if gtk_button_set_use_stock()
     * is used.
     * 
     * This will also clear any previously set labels.
     * @param label a string
     */
    setLabel(label: string): void
    setRelief(newstyle: ReliefStyle): void
    /**
     * If %TRUE, the label set on the button is used as a
     * stock id to select the stock item for the button.
     * @param useStock %TRUE if the button should use a stock item
     */
    setUseStock(useStock: boolean): void
    /**
     * If true, an underline in the text of the button label indicates
     * the next character should be used for the mnemonic accelerator key.
     * @param useUnderline %TRUE if underlines in the text indicate mnemonics
     */
    setUseUnderline(useUnderline: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Button

    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    clicked(): void
    enter(): void
    leave(): void
    pressed(): void
    released(): void

    // Own signals of Gtk-2.0.Gtk.Button

    connect(sigName: "activate", callback: Button.ActivateSignalCallback): number
    on(sigName: "activate", callback: Button.ActivateSignalCallback): number
    once(sigName: "activate", callback: Button.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "clicked", callback: Button.ClickedSignalCallback): number
    on(sigName: "clicked", callback: Button.ClickedSignalCallback): number
    once(sigName: "clicked", callback: Button.ClickedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "clicked", ...args: any[]): void
    connect(sigName: "enter", callback: Button.EnterSignalCallback): number
    on(sigName: "enter", callback: Button.EnterSignalCallback): number
    once(sigName: "enter", callback: Button.EnterSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "enter", ...args: any[]): void
    connect(sigName: "leave", callback: Button.LeaveSignalCallback): number
    on(sigName: "leave", callback: Button.LeaveSignalCallback): number
    once(sigName: "leave", callback: Button.LeaveSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "leave", ...args: any[]): void
    connect(sigName: "pressed", callback: Button.PressedSignalCallback): number
    on(sigName: "pressed", callback: Button.PressedSignalCallback): number
    once(sigName: "pressed", callback: Button.PressedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "pressed", ...args: any[]): void
    connect(sigName: "released", callback: Button.ReleasedSignalCallback): number
    on(sigName: "released", callback: Button.ReleasedSignalCallback): number
    once(sigName: "released", callback: Button.ReleasedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "released", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Button

    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Button extends Bin {

    // Own properties of Gtk-2.0.Gtk.Button

    static name: string

    // Constructors of Gtk-2.0.Gtk.Button

    constructor(config?: Button.ConstructorProperties) 
    constructor() 
    static new(): Button
    /**
     * Creates a new #GtkButton containing the image and text from a stock item.
     * Some stock ids have preprocessor macros like #GTK_STOCK_OK and
     * #GTK_STOCK_APPLY.
     * 
     * If `stock_id` is unknown, then it will be treated as a mnemonic
     * label (as for gtk_button_new_with_mnemonic()).
     * @constructor 
     * @param stockId the name of the stock item
     */
    static newFromStock(stockId: string): Button
    static newWithLabel(label: string): Button
    /**
     * Creates a new #GtkButton containing a label.
     * If characters in `label` are preceded by an underscore, they are underlined.
     * If you need a literal underscore character in a label, use '__' (two
     * underscores). The first underlined character represents a keyboard
     * accelerator called a mnemonic.
     * Pressing Alt and that key activates the button.
     * @constructor 
     * @param label The text of the button, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string): Button
    _init(config?: Button.ConstructorProperties): void
}

export module ButtonBox {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Box.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ButtonBox

        layoutStyle?: ButtonBoxStyle | null
    }

}

export interface ButtonBox extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.ButtonBox

    box: Box
    childMinWidth: number
    childMinHeight: number
    childIpadX: number
    childIpadY: number
    layoutStyle: ButtonBoxStyle

    // Owm methods of Gtk-2.0.Gtk.ButtonBox

    getChildIpadding(ipadX: number, ipadY: number): void
    /**
     * Returns whether `child` should appear in a secondary group of children.
     * @param child a child of `widget`
     */
    getChildSecondary(child: Widget): boolean
    getChildSize(minWidth: number, minHeight: number): void
    getLayout(): ButtonBoxStyle
    setChildIpadding(ipadX: number, ipadY: number): void
    /**
     * Sets whether `child` should appear in a secondary group of children.
     * A typical use of a secondary child is the help button in a dialog.
     * 
     * This group appears after the other children if the style
     * is %GTK_BUTTONBOX_START, %GTK_BUTTONBOX_SPREAD or
     * %GTK_BUTTONBOX_EDGE, and before the other children if the style
     * is %GTK_BUTTONBOX_END. For horizontal button boxes, the definition
     * of before/after depends on direction of the widget (see
     * gtk_widget_set_direction()). If the style is %GTK_BUTTONBOX_START
     * or %GTK_BUTTONBOX_END, then the secondary children are aligned at
     * the other end of the button box from the main children. For the
     * other styles, they appear immediately next to the main children.
     * @param child a child of `widget`
     * @param isSecondary if %TRUE, the `child` appears in a secondary group of the                button box.
     */
    setChildSecondary(child: Widget, isSecondary: boolean): void
    setChildSize(minWidth: number, minHeight: number): void
    setLayout(layoutStyle: ButtonBoxStyle): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ButtonBox

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ButtonBox extends Box {

    // Own properties of Gtk-2.0.Gtk.ButtonBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.ButtonBox

    constructor(config?: ButtonBox.ConstructorProperties) 
    _init(config?: ButtonBox.ConstructorProperties): void
}

export module CList {

    // Signal callback interfaces

    /**
     * Signal callback interface for `abort-column-resize`
     */
    export interface AbortColumnResizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `click-column`
     */
    export interface ClickColumnSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `end-selection`
     */
    export interface EndSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `extend-selection`
     */
    export interface ExtendSelectionSignalCallback {
        (object: ScrollType, p0: number, p1: boolean): void
    }

    /**
     * Signal callback interface for `resize-column`
     */
    export interface ResizeColumnSignalCallback {
        (object: number, p0: number): void
    }

    /**
     * Signal callback interface for `row-move`
     */
    export interface RowMoveSignalCallback {
        (object: number, p0: number): void
    }

    /**
     * Signal callback interface for `scroll-horizontal`
     */
    export interface ScrollHorizontalSignalCallback {
        (object: ScrollType, p0: number): void
    }

    /**
     * Signal callback interface for `scroll-vertical`
     */
    export interface ScrollVerticalSignalCallback {
        (object: ScrollType, p0: number): void
    }

    /**
     * Signal callback interface for `select-all`
     */
    export interface SelectAllSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `select-row`
     */
    export interface SelectRowSignalCallback {
        (object: number, p0: number, p1: Gdk.Event): void
    }

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (object: Adjustment, p0: Adjustment): void
    }

    /**
     * Signal callback interface for `start-selection`
     */
    export interface StartSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-add-mode`
     */
    export interface ToggleAddModeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-focus-row`
     */
    export interface ToggleFocusRowSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `undo-selection`
     */
    export interface UndoSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unselect-all`
     */
    export interface UnselectAllSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unselect-row`
     */
    export interface UnselectRowSignalCallback {
        (object: number, p0: number, p1: Gdk.Event): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CList

        nColumns?: number | null
        reorderable?: boolean | null
        rowHeight?: number | null
        selectionMode?: SelectionMode | null
        shadowType?: ShadowType | null
        sortType?: SortType | null
        titlesActive?: boolean | null
        useDragIcons?: boolean | null
    }

}

export interface CList extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.CList

    readonly nColumns: number
    reorderable: boolean
    titlesActive: boolean
    useDragIcons: boolean

    // Own fields of Gtk-2.0.Gtk.CList

    container: Container
    flags: number
    reserved1: object
    reserved2: object
    freezeCount: number
    internalAllocation: Gdk.Rectangle
    rows: number
    rowHeight: number
    rowList: object[]
    rowListEnd: object[]
    columns: number
    columnTitleArea: Gdk.Rectangle
    titleWindow: Gdk.Window
    column: CListColumn
    clistWindow: Gdk.Window
    clistWindowWidth: number
    clistWindowHeight: number
    hoffset: number
    voffset: number
    shadowType: ShadowType
    selectionMode: SelectionMode
    selection: object[]
    selectionEnd: object[]
    // Has conflict: undoSelection: object[]
    undoUnselection: object[]
    undoAnchor: number
    buttonActions: Uint8Array
    dragButton: number
    clickCell: CListCellInfo
    hadjustment: Adjustment
    vadjustment: Adjustment
    xorGc: Gdk.GC
    fgGc: Gdk.GC
    bgGc: Gdk.GC
    cursorDrag: Gdk.Cursor
    xDrag: number
    focusRow: number
    focusHeaderColumn: number
    anchor: number
    anchorState: StateType
    dragPos: number
    htimer: number
    vtimer: number
    sortType: SortType
    compare: CListCompareFunc
    sortColumn: number
    dragHighlightRow: number
    dragHighlightPos: CListDragPos

    // Owm methods of Gtk-2.0.Gtk.CList

    append(text: string): number
    // Has conflict: clear(): void
    columnTitleActive(column: number): void
    columnTitlePassive(column: number): void
    columnTitlesActive(): void
    columnTitlesHide(): void
    columnTitlesPassive(): void
    columnTitlesShow(): void
    columnsAutosize(): number
    findRowFromData(data: object | null): number
    freeze(): void
    getCellType(row: number, column: number): CellType
    getColumnTitle(column: number): string
    getPixmap(row: number, column: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap): number
    getPixtext(row: number, column: number, text: string, spacing: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap): number
    getRowData(row: number): object | null
    getSelectable(row: number): boolean
    getSelectionInfo(x: number, y: number, row: number, column: number): number
    getText(row: number, column: number, text: string): number
    insert(row: number, text: string): number
    moveto(row: number, column: number, rowAlign: number, colAlign: number): void
    optimalColumnWidth(column: number): number
    prepend(text: string): number
    remove(row: number): void

    // Overloads of remove

    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it while it's not inside
     * a container, using g_object_ref(). If you don't want to use `widget`
     * again it's usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Widget): void
    rowIsVisible(row: number): Visibility
    // Has conflict: rowMove(sourceRow: number, destRow: number): void
    // Has conflict: selectAll(): void
    // Has conflict: selectRow(row: number, column: number): void
    setAutoSort(autoSort: boolean): void
    setBackground(row: number, color: Gdk.Color): void
    setButtonActions(button: number, buttonActions: number): void
    setCellStyle(row: number, column: number, style: Style): void
    setColumnAutoResize(column: number, autoResize: boolean): void
    setColumnJustification(column: number, justification: Justification): void
    setColumnMaxWidth(column: number, maxWidth: number): void
    setColumnMinWidth(column: number, minWidth: number): void
    setColumnResizeable(column: number, resizeable: boolean): void
    setColumnTitle(column: number, title: string): void
    setColumnVisibility(column: number, visible: boolean): void
    setColumnWidget(column: number, widget: Widget): void
    setColumnWidth(column: number, width: number): void
    setForeground(row: number, color: Gdk.Color): void
    setHadjustment(adjustment: Adjustment): void
    setPixmap(row: number, column: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null): void
    setPixtext(row: number, column: number, text: string, spacing: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap): void
    setReorderable(reorderable: boolean): void
    setRowData(row: number, data: object | null): void
    setRowDataFull(row: number, data: object | null, destroy: GLib.DestroyNotify): void
    setRowHeight(height: number): void
    setRowStyle(row: number, style: Style): void
    setSelectable(row: number, selectable: boolean): void
    setSelectionMode(mode: SelectionMode): void
    setShadowType(type: ShadowType): void
    setShift(row: number, column: number, vertical: number, horizontal: number): void
    setSortColumn(column: number): void
    setSortType(sortType: SortType): void
    setText(row: number, column: number, text: string): void
    setUseDragIcons(useIcons: boolean): void
    setVadjustment(adjustment: Adjustment): void
    sort(): void
    swapRows(row1: number, row2: number): void
    thaw(): void
    // Has conflict: unselectAll(): void
    // Has conflict: unselectRow(row: number, column: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.CList

    abortColumnResize(): void
    cellSizeRequest(clistRow: CListRow, column: number, requisition: Requisition): void
    clear(): void
    clickColumn(column: number): void
    drawDragHighlight(targetRow: CListRow, targetRowNumber: number, dragPos: CListDragPos): void
    drawRow(area: Gdk.Rectangle, row: number, clistRow: CListRow): void
    endSelection(): void
    extendSelection(scrollType: ScrollType, position: number, autoStartSelection: boolean): void
    fakeUnselectAll(row: number): void
    insertRow(row: number, text: string): number
    refresh(): void
    removeRow(row: number): void
    resizeColumn(column: number, width: number): void
    resyncSelection(event: Gdk.Event): void
    rowMove(sourceRow: number, destRow: number): void
    scrollHorizontal(scrollType: ScrollType, position: number): void
    scrollVertical(scrollType: ScrollType, position: number): void
    selectAll(): void
    selectRow(row: number, column: number, event: Gdk.Event): void
    setCellContents(clistRow: CListRow, column: number, type: CellType, text: string, spacing: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap): void
    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean
    sortList(): void
    startSelection(): void
    toggleAddMode(): void
    toggleFocusRow(): void
    undoSelection(): void
    unselectAll(): void
    unselectRow(row: number, column: number, event: Gdk.Event): void

    // Own signals of Gtk-2.0.Gtk.CList

    connect(sigName: "abort-column-resize", callback: CList.AbortColumnResizeSignalCallback): number
    on(sigName: "abort-column-resize", callback: CList.AbortColumnResizeSignalCallback): number
    once(sigName: "abort-column-resize", callback: CList.AbortColumnResizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "abort-column-resize", ...args: any[]): void
    connect(sigName: "click-column", callback: CList.ClickColumnSignalCallback): number
    on(sigName: "click-column", callback: CList.ClickColumnSignalCallback): number
    once(sigName: "click-column", callback: CList.ClickColumnSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "click-column", ...args: any[]): void
    connect(sigName: "end-selection", callback: CList.EndSelectionSignalCallback): number
    on(sigName: "end-selection", callback: CList.EndSelectionSignalCallback): number
    once(sigName: "end-selection", callback: CList.EndSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "end-selection", ...args: any[]): void
    connect(sigName: "extend-selection", callback: CList.ExtendSelectionSignalCallback): number
    on(sigName: "extend-selection", callback: CList.ExtendSelectionSignalCallback): number
    once(sigName: "extend-selection", callback: CList.ExtendSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "extend-selection", p0: number, p1: boolean, ...args: any[]): void
    connect(sigName: "resize-column", callback: CList.ResizeColumnSignalCallback): number
    on(sigName: "resize-column", callback: CList.ResizeColumnSignalCallback): number
    once(sigName: "resize-column", callback: CList.ResizeColumnSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "resize-column", p0: number, ...args: any[]): void
    connect(sigName: "row-move", callback: CList.RowMoveSignalCallback): number
    on(sigName: "row-move", callback: CList.RowMoveSignalCallback): number
    once(sigName: "row-move", callback: CList.RowMoveSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-move", p0: number, ...args: any[]): void
    connect(sigName: "scroll-horizontal", callback: CList.ScrollHorizontalSignalCallback): number
    on(sigName: "scroll-horizontal", callback: CList.ScrollHorizontalSignalCallback): number
    once(sigName: "scroll-horizontal", callback: CList.ScrollHorizontalSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-horizontal", p0: number, ...args: any[]): void
    connect(sigName: "scroll-vertical", callback: CList.ScrollVerticalSignalCallback): number
    on(sigName: "scroll-vertical", callback: CList.ScrollVerticalSignalCallback): number
    once(sigName: "scroll-vertical", callback: CList.ScrollVerticalSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-vertical", p0: number, ...args: any[]): void
    connect(sigName: "select-all", callback: CList.SelectAllSignalCallback): number
    on(sigName: "select-all", callback: CList.SelectAllSignalCallback): number
    once(sigName: "select-all", callback: CList.SelectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-all", ...args: any[]): void
    connect(sigName: "select-row", callback: CList.SelectRowSignalCallback): number
    on(sigName: "select-row", callback: CList.SelectRowSignalCallback): number
    once(sigName: "select-row", callback: CList.SelectRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-row", p0: number, p1: Gdk.Event, ...args: any[]): void
    connect(sigName: "set-scroll-adjustments", callback: CList.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: CList.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: CList.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", p0: Adjustment, ...args: any[]): void
    connect(sigName: "start-selection", callback: CList.StartSelectionSignalCallback): number
    on(sigName: "start-selection", callback: CList.StartSelectionSignalCallback): number
    once(sigName: "start-selection", callback: CList.StartSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "start-selection", ...args: any[]): void
    connect(sigName: "toggle-add-mode", callback: CList.ToggleAddModeSignalCallback): number
    on(sigName: "toggle-add-mode", callback: CList.ToggleAddModeSignalCallback): number
    once(sigName: "toggle-add-mode", callback: CList.ToggleAddModeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-add-mode", ...args: any[]): void
    connect(sigName: "toggle-focus-row", callback: CList.ToggleFocusRowSignalCallback): number
    on(sigName: "toggle-focus-row", callback: CList.ToggleFocusRowSignalCallback): number
    once(sigName: "toggle-focus-row", callback: CList.ToggleFocusRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-focus-row", ...args: any[]): void
    connect(sigName: "undo-selection", callback: CList.UndoSelectionSignalCallback): number
    on(sigName: "undo-selection", callback: CList.UndoSelectionSignalCallback): number
    once(sigName: "undo-selection", callback: CList.UndoSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "undo-selection", ...args: any[]): void
    connect(sigName: "unselect-all", callback: CList.UnselectAllSignalCallback): number
    on(sigName: "unselect-all", callback: CList.UnselectAllSignalCallback): number
    once(sigName: "unselect-all", callback: CList.UnselectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unselect-all", ...args: any[]): void
    connect(sigName: "unselect-row", callback: CList.UnselectRowSignalCallback): number
    on(sigName: "unselect-row", callback: CList.UnselectRowSignalCallback): number
    once(sigName: "unselect-row", callback: CList.UnselectRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unselect-row", p0: number, p1: Gdk.Event, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CList

    connect(sigName: "notify::n-columns", callback: any): number
    on(sigName: "notify::n-columns", callback: any): number
    once(sigName: "notify::n-columns", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::n-columns", ...args: any[]): void
    connect(sigName: "notify::reorderable", callback: any): number
    on(sigName: "notify::reorderable", callback: any): number
    once(sigName: "notify::reorderable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::reorderable", ...args: any[]): void
    connect(sigName: "notify::titles-active", callback: any): number
    on(sigName: "notify::titles-active", callback: any): number
    once(sigName: "notify::titles-active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::titles-active", ...args: any[]): void
    connect(sigName: "notify::use-drag-icons", callback: any): number
    on(sigName: "notify::use-drag-icons", callback: any): number
    once(sigName: "notify::use-drag-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-drag-icons", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CList extends Container {

    // Own properties of Gtk-2.0.Gtk.CList

    static name: string

    // Constructors of Gtk-2.0.Gtk.CList

    constructor(config?: CList.ConstructorProperties) 
    constructor(columns: number) 
    static new(columns: number): CList
    static newWithTitles(columns: number, titles: string): CList
    _init(config?: CList.ConstructorProperties): void
}

export module CTree {

    // Signal callback interfaces

    /**
     * Signal callback interface for `change-focus-row-expansion`
     */
    export interface ChangeFocusRowExpansionSignalCallback {
        (object: CTreeExpansionType): void
    }







    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CList.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CTree

        expanderStyle?: CTreeExpanderStyle | null
        indent?: number | null
        lineStyle?: CTreeLineStyle | null
        nColumns?: number | null
        showStub?: boolean | null
        spacing?: number | null
        treeColumn?: number | null
    }

}

export interface CTree extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.CTree

    indent: number
    readonly nColumns: number
    spacing: number

    // Own fields of Gtk-2.0.Gtk.CTree

    clist: CList
    linesGc: Gdk.GC
    treeIndent: number
    treeSpacing: number
    treeColumn: number
    lineStyle: number
    expanderStyle: number
    showStub: number
    dragCompare: CTreeCompareDragFunc

    // Owm methods of Gtk-2.0.Gtk.CTree

    collapse(node: CTreeNode): void
    collapseRecursive(node: CTreeNode): void
    collapseToDepth(node: CTreeNode, depth: number): void
    expand(node: CTreeNode): void
    expandRecursive(node: CTreeNode): void
    expandToDepth(node: CTreeNode, depth: number): void
    find(node: CTreeNode, child: CTreeNode): boolean
    getNodeInfo(node: CTreeNode, text: string, spacing: number, pixmapClosed: Gdk.Pixmap, maskClosed: Gdk.Bitmap, pixmapOpened: Gdk.Pixmap, maskOpened: Gdk.Bitmap, isLeaf: boolean, expanded: boolean): boolean
    isAncestor(node: CTreeNode, child: CTreeNode): boolean

    // Overloads of isAncestor

    /**
     * Determines whether `widget` is somewhere inside `ancestor,` possibly with
     * intermediate containers.
     * @param ancestor another #GtkWidget
     */
    isAncestor(ancestor: Widget): boolean
    isHotSpot(x: number, y: number): boolean
    isViewable(node: CTreeNode): boolean
    move(node: CTreeNode, newParent: CTreeNode | null, newSibling: CTreeNode | null): void
    nodeGetCellType(node: CTreeNode, column: number): CellType
    nodeGetPixmap(node: CTreeNode, column: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap): boolean
    nodeGetPixtext(node: CTreeNode, column: number, text: string, spacing: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap): boolean
    nodeGetRowData(node: CTreeNode): object | null
    nodeGetSelectable(node: CTreeNode): boolean
    nodeGetText(node: CTreeNode, column: number, text: string): boolean
    nodeIsVisible(node: CTreeNode): Visibility
    nodeMoveto(node: CTreeNode, column: number, rowAlign: number, colAlign: number): void
    nodeSetBackground(node: CTreeNode, color: Gdk.Color): void
    nodeSetCellStyle(node: CTreeNode, column: number, style: Style): void
    nodeSetForeground(node: CTreeNode, color: Gdk.Color): void
    nodeSetPixmap(node: CTreeNode, column: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null): void
    nodeSetPixtext(node: CTreeNode, column: number, text: string, spacing: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null): void
    nodeSetRowData(node: CTreeNode, data: object | null): void
    nodeSetRowDataFull(node: CTreeNode, data: object | null, destroy: GLib.DestroyNotify): void
    nodeSetRowStyle(node: CTreeNode, style: Style): void
    nodeSetSelectable(node: CTreeNode, selectable: boolean): void
    nodeSetShift(node: CTreeNode, column: number, vertical: number, horizontal: number): void
    nodeSetText(node: CTreeNode, column: number, text: string): void
    realSelectRecursive(node: CTreeNode, state: number): void
    removeNode(node: CTreeNode): void
    select(node: CTreeNode): void
    selectRecursive(node: CTreeNode): void
    setExpanderStyle(expanderStyle: CTreeExpanderStyle): void
    setIndent(indent: number): void
    setLineStyle(lineStyle: CTreeLineStyle): void
    setNodeInfo(node: CTreeNode, text: string, spacing: number, pixmapClosed: Gdk.Pixmap | null, maskClosed: Gdk.Bitmap | null, pixmapOpened: Gdk.Pixmap | null, maskOpened: Gdk.Bitmap | null, isLeaf: boolean, expanded: boolean): void
    setShowStub(showStub: boolean): void
    setSpacing(spacing: number): void
    sortNode(node: CTreeNode): void
    sortRecursive(node: CTreeNode): void
    toggleExpansion(node: CTreeNode): void
    toggleExpansionRecursive(node: CTreeNode): void
    unselect(node: CTreeNode): void
    unselectRecursive(node: CTreeNode): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    remove(row: number): void

    // Overloads of remove

    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it while it's not inside
     * a container, using g_object_ref(). If you don't want to use `widget`
     * again it's usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Widget): void
    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it while it's not inside
     * a container, using g_object_ref(). If you don't want to use `widget`
     * again it's usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Widget): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void
    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean
    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean

    // Own virtual methods of Gtk-2.0.Gtk.CTree

    changeFocusRowExpansion(action: CTreeExpansionType): void
    treeCollapse(node: CTreeNode): void
    treeExpand(node: CTreeNode): void
    treeMove(node: CTreeNode, newParent: CTreeNode, newSibling: CTreeNode): void
    treeSelectRow(row: CTreeNode, column: number): void
    treeUnselectRow(row: CTreeNode, column: number): void

    // Own signals of Gtk-2.0.Gtk.CTree

    connect(sigName: "change-focus-row-expansion", callback: CTree.ChangeFocusRowExpansionSignalCallback): number
    on(sigName: "change-focus-row-expansion", callback: CTree.ChangeFocusRowExpansionSignalCallback): number
    once(sigName: "change-focus-row-expansion", callback: CTree.ChangeFocusRowExpansionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "change-focus-row-expansion", ...args: any[]): void
    connect(sigName: "tree-collapse", callback: (...args: any[]) => void): number
    on(sigName: "tree-collapse", callback: (...args: any[]) => void): number
    once(sigName: "tree-collapse", callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: "tree-collapse", ...args: any[]): void
    connect(sigName: "tree-expand", callback: (...args: any[]) => void): number
    on(sigName: "tree-expand", callback: (...args: any[]) => void): number
    once(sigName: "tree-expand", callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: "tree-expand", ...args: any[]): void
    connect(sigName: "tree-move", callback: (...args: any[]) => void): number
    on(sigName: "tree-move", callback: (...args: any[]) => void): number
    once(sigName: "tree-move", callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: "tree-move", p0: any, p1: any, ...args: any[]): void
    connect(sigName: "tree-select-row", callback: (...args: any[]) => void): number
    on(sigName: "tree-select-row", callback: (...args: any[]) => void): number
    once(sigName: "tree-select-row", callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: "tree-select-row", p0: number, ...args: any[]): void
    connect(sigName: "tree-unselect-row", callback: (...args: any[]) => void): number
    on(sigName: "tree-unselect-row", callback: (...args: any[]) => void): number
    once(sigName: "tree-unselect-row", callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: "tree-unselect-row", p0: number, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CTree

    connect(sigName: "notify::indent", callback: any): number
    on(sigName: "notify::indent", callback: any): number
    once(sigName: "notify::indent", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::n-columns", callback: any): number
    on(sigName: "notify::n-columns", callback: any): number
    once(sigName: "notify::n-columns", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::n-columns", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: any): number
    on(sigName: "notify::spacing", callback: any): number
    once(sigName: "notify::spacing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::reorderable", callback: any): number
    on(sigName: "notify::reorderable", callback: any): number
    once(sigName: "notify::reorderable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::reorderable", ...args: any[]): void
    connect(sigName: "notify::titles-active", callback: any): number
    on(sigName: "notify::titles-active", callback: any): number
    once(sigName: "notify::titles-active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::titles-active", ...args: any[]): void
    connect(sigName: "notify::use-drag-icons", callback: any): number
    on(sigName: "notify::use-drag-icons", callback: any): number
    once(sigName: "notify::use-drag-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-drag-icons", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CTree extends CList {

    // Own properties of Gtk-2.0.Gtk.CTree

    static name: string

    // Constructors of Gtk-2.0.Gtk.CTree

    constructor(config?: CTree.ConstructorProperties) 
    constructor(columns: number, treeColumn: number) 
    static new(columns: number, treeColumn: number): CTree

    // Overloads of new

    static new(columns: number): CList
    static newWithTitles(columns: number, treeColumn: number, titles: string): CTree

    // Overloads of newWithTitles

    static newWithTitles(columns: number, titles: string): CList
    _init(config?: CTree.ConstructorProperties): void
}

export module Calendar {

    // Signal callback interfaces

    /**
     * Signal callback interface for `day-selected`
     */
    export interface DaySelectedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `day-selected-double-click`
     */
    export interface DaySelectedDoubleClickSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `month-changed`
     */
    export interface MonthChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `next-month`
     */
    export interface NextMonthSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `next-year`
     */
    export interface NextYearSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `prev-month`
     */
    export interface PrevMonthSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `prev-year`
     */
    export interface PrevYearSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Calendar

        /**
         * The selected day (as a number between 1 and 31, or 0
         * to unselect the currently selected day).
         * This property gets initially set to the current day.
         */
        day?: number | null
        /**
         * Height of a detail cell, in rows.
         * A value of 0 allows any width. See gtk_calendar_set_detail_func().
         */
        detailHeightRows?: number | null
        /**
         * Width of a detail cell, in characters.
         * A value of 0 allows any width. See gtk_calendar_set_detail_func().
         */
        detailWidthChars?: number | null
        /**
         * The selected month (as a number between 0 and 11).
         * This property gets initially set to the current month.
         */
        month?: number | null
        /**
         * Determines whether the selected month can be changed.
         */
        noMonthChange?: boolean | null
        /**
         * Determines whether day names are displayed.
         */
        showDayNames?: boolean | null
        /**
         * Determines whether details are shown directly in the widget, or if they are
         * available only as tooltip. When this property is set days with details are
         * marked.
         */
        showDetails?: boolean | null
        /**
         * Determines whether a heading is displayed.
         */
        showHeading?: boolean | null
        /**
         * Determines whether week numbers are displayed.
         */
        showWeekNumbers?: boolean | null
        /**
         * The selected year.
         * This property gets initially set to the current year.
         */
        year?: number | null
    }

}

export interface Calendar extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Calendar

    /**
     * Height of a detail cell, in rows.
     * A value of 0 allows any width. See gtk_calendar_set_detail_func().
     */
    detailHeightRows: number
    /**
     * Width of a detail cell, in characters.
     * A value of 0 allows any width. See gtk_calendar_set_detail_func().
     */
    detailWidthChars: number
    /**
     * Determines whether the selected month can be changed.
     */
    noMonthChange: boolean
    /**
     * Determines whether day names are displayed.
     */
    showDayNames: boolean
    /**
     * Determines whether details are shown directly in the widget, or if they are
     * available only as tooltip. When this property is set days with details are
     * marked.
     */
    showDetails: boolean
    /**
     * Determines whether a heading is displayed.
     */
    showHeading: boolean
    /**
     * Determines whether week numbers are displayed.
     */
    showWeekNumbers: boolean

    // Own fields of Gtk-2.0.Gtk.Calendar

    widget: Widget
    headerStyle: Style
    labelStyle: Style
    month: number
    year: number
    selectedDay: number
    dayMonth: number[]
    day: number[]
    numMarkedDates: number
    markedDate: number[]
    displayFlags: CalendarDisplayOptions
    markedDateColor: Gdk.Color[]
    gc: Gdk.GC
    xorGc: Gdk.GC
    focusRow: number
    focusCol: number
    highlightRow: number
    highlightCol: number
    priv: CalendarPrivate
    growSpace: number[]

    // Owm methods of Gtk-2.0.Gtk.Calendar

    /**
     * Remove all visual markers.
     */
    clearMarks(): void
    /**
     * Sets display options (whether to display the heading and the month headings).
     * @param flags the display options to set.
     */
    displayOptions(flags: CalendarDisplayOptions): void
    /**
     * Does nothing. Previously locked the display of the calendar until
     * it was thawed with gtk_calendar_thaw().
     */
    freeze(): void
    /**
     * Obtains the selected date from a #GtkCalendar.
     */
    getDate(): [ /* year */ number, /* month */ number, /* day */ number ]
    /**
     * Queries the height of detail cells, in rows.
     * See #GtkCalendar:detail-width-chars.
     */
    getDetailHeightRows(): number
    /**
     * Queries the width of detail cells, in characters.
     * See #GtkCalendar:detail-width-chars.
     */
    getDetailWidthChars(): number
    /**
     * Returns the current display options of `calendar`.
     */
    getDisplayOptions(): CalendarDisplayOptions
    /**
     * Places a visual marker on a particular day.
     * 
     * Note that this function always returns %TRUE, and you should
     * ignore the return value. In GTK+ 3, this function will not
     * return a value.
     * @param day the day number to mark between 1 and 31.
     */
    markDay(day: number): boolean
    /**
     * Selects a day from the current month.
     * @param day the day number between 1 and 31, or 0 to unselect   the currently selected day.
     */
    selectDay(day: number): void
    /**
     * Shifts the calendar to a different month.
     * 
     * Note that this function always returns %TRUE, and you should
     * ignore the return value. In GTK+ 3, this function will not
     * return a value.
     * @param month a month number between 0 and 11.
     * @param year the year the month is in.
     */
    selectMonth(month: number, year: number): boolean
    /**
     * Installs a function which provides Pango markup with detail information
     * for each day. Examples for such details are holidays or appointments. That
     * information is shown below each day when #GtkCalendar:show-details is set.
     * A tooltip containing with full detail information is provided, if the entire
     * text should not fit into the details area, or if #GtkCalendar:show-details
     * is not set.
     * 
     * The size of the details area can be restricted by setting the
     * #GtkCalendar:detail-width-chars and #GtkCalendar:detail-height-rows
     * properties.
     * @param func a function providing details for each day.
     */
    setDetailFunc(func: CalendarDetailFunc): void
    /**
     * Updates the height of detail cells.
     * See #GtkCalendar:detail-height-rows.
     * @param rows detail height in rows.
     */
    setDetailHeightRows(rows: number): void
    /**
     * Updates the width of detail cells.
     * See #GtkCalendar:detail-width-chars.
     * @param chars detail width in characters.
     */
    setDetailWidthChars(chars: number): void
    /**
     * Sets display options (whether to display the heading and the month
     * headings).
     * @param flags the display options to set
     */
    setDisplayOptions(flags: CalendarDisplayOptions): void
    /**
     * Does nothing. Previously defrosted a calendar; all the changes made
     * since the last gtk_calendar_freeze() were displayed.
     */
    thaw(): void
    /**
     * Removes the visual marker from a particular day.
     * 
     * Note that this function always returns %TRUE, and you should
     * ignore the return value. In GTK+ 3, this function will not
     * return a value.
     * @param day the day number to unmark between 1 and 31.
     */
    unmarkDay(day: number): boolean

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Calendar

    daySelected(): void
    daySelectedDoubleClick(): void
    monthChanged(): void
    nextMonth(): void
    nextYear(): void
    prevMonth(): void
    prevYear(): void

    // Own signals of Gtk-2.0.Gtk.Calendar

    connect(sigName: "day-selected", callback: Calendar.DaySelectedSignalCallback): number
    on(sigName: "day-selected", callback: Calendar.DaySelectedSignalCallback): number
    once(sigName: "day-selected", callback: Calendar.DaySelectedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "day-selected", ...args: any[]): void
    connect(sigName: "day-selected-double-click", callback: Calendar.DaySelectedDoubleClickSignalCallback): number
    on(sigName: "day-selected-double-click", callback: Calendar.DaySelectedDoubleClickSignalCallback): number
    once(sigName: "day-selected-double-click", callback: Calendar.DaySelectedDoubleClickSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "day-selected-double-click", ...args: any[]): void
    connect(sigName: "month-changed", callback: Calendar.MonthChangedSignalCallback): number
    on(sigName: "month-changed", callback: Calendar.MonthChangedSignalCallback): number
    once(sigName: "month-changed", callback: Calendar.MonthChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "month-changed", ...args: any[]): void
    connect(sigName: "next-month", callback: Calendar.NextMonthSignalCallback): number
    on(sigName: "next-month", callback: Calendar.NextMonthSignalCallback): number
    once(sigName: "next-month", callback: Calendar.NextMonthSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "next-month", ...args: any[]): void
    connect(sigName: "next-year", callback: Calendar.NextYearSignalCallback): number
    on(sigName: "next-year", callback: Calendar.NextYearSignalCallback): number
    once(sigName: "next-year", callback: Calendar.NextYearSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "next-year", ...args: any[]): void
    connect(sigName: "prev-month", callback: Calendar.PrevMonthSignalCallback): number
    on(sigName: "prev-month", callback: Calendar.PrevMonthSignalCallback): number
    once(sigName: "prev-month", callback: Calendar.PrevMonthSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "prev-month", ...args: any[]): void
    connect(sigName: "prev-year", callback: Calendar.PrevYearSignalCallback): number
    on(sigName: "prev-year", callback: Calendar.PrevYearSignalCallback): number
    once(sigName: "prev-year", callback: Calendar.PrevYearSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "prev-year", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Calendar

    connect(sigName: "notify::detail-height-rows", callback: any): number
    on(sigName: "notify::detail-height-rows", callback: any): number
    once(sigName: "notify::detail-height-rows", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::detail-height-rows", ...args: any[]): void
    connect(sigName: "notify::detail-width-chars", callback: any): number
    on(sigName: "notify::detail-width-chars", callback: any): number
    once(sigName: "notify::detail-width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::detail-width-chars", ...args: any[]): void
    connect(sigName: "notify::no-month-change", callback: any): number
    on(sigName: "notify::no-month-change", callback: any): number
    once(sigName: "notify::no-month-change", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-month-change", ...args: any[]): void
    connect(sigName: "notify::show-day-names", callback: any): number
    on(sigName: "notify::show-day-names", callback: any): number
    once(sigName: "notify::show-day-names", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-day-names", ...args: any[]): void
    connect(sigName: "notify::show-details", callback: any): number
    on(sigName: "notify::show-details", callback: any): number
    once(sigName: "notify::show-details", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-details", ...args: any[]): void
    connect(sigName: "notify::show-heading", callback: any): number
    on(sigName: "notify::show-heading", callback: any): number
    once(sigName: "notify::show-heading", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-heading", ...args: any[]): void
    connect(sigName: "notify::show-week-numbers", callback: any): number
    on(sigName: "notify::show-week-numbers", callback: any): number
    once(sigName: "notify::show-week-numbers", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-week-numbers", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Calendar extends Widget {

    // Own properties of Gtk-2.0.Gtk.Calendar

    static name: string

    // Constructors of Gtk-2.0.Gtk.Calendar

    constructor(config?: Calendar.ConstructorProperties) 
    /**
     * Creates a new calendar, with the current date being selected.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new calendar, with the current date being selected.
     * @constructor 
     */
    static new(): Calendar
    _init(config?: Calendar.ConstructorProperties): void
}

export module CellRenderer {

    // Signal callback interfaces

    /**
     * Signal callback interface for `editing-canceled`
     */
    export interface EditingCanceledSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `editing-started`
     */
    export interface EditingStartedSignalCallback {
        (editable: CellEditable, path: string): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRenderer

        cellBackground?: string | null
        cellBackgroundGdk?: Gdk.Color | null
        cellBackgroundSet?: boolean | null
        height?: number | null
        isExpanded?: boolean | null
        isExpander?: boolean | null
        mode?: CellRendererMode | null
        sensitive?: boolean | null
        visible?: boolean | null
        width?: number | null
        xalign?: number | null
        xpad?: number | null
        yalign?: number | null
        ypad?: number | null
    }

}

export interface CellRenderer {

    // Own properties of Gtk-2.0.Gtk.CellRenderer

    cellBackground: string
    cellBackgroundGdk: Gdk.Color

    // Own fields of Gtk-2.0.Gtk.CellRenderer

    parent: Object
    xalign: number
    yalign: number
    width: number
    height: number
    xpad: number
    ypad: number
    mode: number
    visible: number
    isExpander: number
    isExpanded: number
    cellBackgroundSet: number
    sensitive: number
    editing: number

    // Owm methods of Gtk-2.0.Gtk.CellRenderer

    // Has conflict: activate(event: Gdk.Event, widget: Widget, path: string, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, flags: CellRendererState): boolean
    // Has conflict: editingCanceled(): void
    /**
     * Fills in `xalign` and `yalign` with the appropriate values of `cell`.
     */
    getAlignment(): [ /* xalign */ number, /* yalign */ number ]
    /**
     * Fills in `width` and `height` with the appropriate size of `cell`.
     */
    getFixedSize(): [ /* width */ number, /* height */ number ]
    /**
     * Fills in `xpad` and `ypad` with the appropriate values of `cell`.
     */
    getPadding(): [ /* xpad */ number, /* ypad */ number ]
    /**
     * Returns the cell renderer's sensitivity.
     */
    getSensitive(): boolean
    // Has conflict: getSize(widget: Widget, cellArea: Gdk.Rectangle | null): [ /* xOffset */ number, /* yOffset */ number, /* width */ number, /* height */ number ]
    /**
     * Returns the cell renderer's visibility.
     */
    getVisible(): boolean
    // Has conflict: render(window: Gdk.Window, widget: Widget, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, exposeArea: Gdk.Rectangle, flags: CellRendererState): void
    /**
     * Sets the renderer's alignment within its available space.
     * @param xalign the x alignment of the cell renderer
     * @param yalign the y alignment of the cell renderer
     */
    setAlignment(xalign: number, yalign: number): void
    /**
     * Sets the renderer size to be explicit, independent of the properties set.
     * @param width the width of the cell renderer, or -1
     * @param height the height of the cell renderer, or -1
     */
    setFixedSize(width: number, height: number): void
    /**
     * Sets the renderer's padding.
     * @param xpad the x padding of the cell renderer
     * @param ypad the y padding of the cell renderer
     */
    setPadding(xpad: number, ypad: number): void
    /**
     * Sets the cell renderer's sensitivity.
     * @param sensitive the sensitivity of the cell
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the cell renderer's visibility.
     * @param visible the visibility of the cell
     */
    setVisible(visible: boolean): void
    // Has conflict: startEditing(event: Gdk.Event, widget: Widget, path: string, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, flags: CellRendererState): CellEditable
    /**
     * Informs the cell renderer that the editing is stopped.
     * If `canceled` is %TRUE, the cell renderer will emit the
     * #GtkCellRenderer::editing-canceled signal.
     * 
     * This function should be called by cell renderer implementations
     * in response to the #GtkCellEditable::editing-done signal of
     * #GtkCellEditable.
     * @param canceled %TRUE if the editing has been canceled
     */
    stopEditing(canceled: boolean): void

    // Own virtual methods of Gtk-2.0.Gtk.CellRenderer

    /**
     * Passes an activate event to the cell renderer for possible processing.
     * Some cell renderers may use events; for example, #GtkCellRendererToggle
     * toggles when it gets a mouse click.
     * @virtual 
     * @param event a #GdkEvent
     * @param widget widget that received the event
     * @param path widget-dependent string representation of the event location;    e.g. for #GtkTreeView, a string representation of #GtkTreePath
     * @param backgroundArea background area as passed to gtk_cell_renderer_render()
     * @param cellArea cell area as passed to gtk_cell_renderer_render()
     * @param flags render flags
     */
    activate(event: Gdk.Event, widget: Widget, path: string, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, flags: CellRendererState): boolean
    /**
     * Causes the cell renderer to emit the #GtkCellRenderer::editing-canceled
     * signal.
     * 
     * This function is for use only by implementations of cell renderers that
     * need to notify the client program that an editing process was canceled
     * and the changes were not committed.
     * @virtual 
     */
    editingCanceled(): void
    editingStarted(editable: CellEditable, path: string): void
    /**
     * Obtains the width and height needed to render the cell. Used by view
     * widgets to determine the appropriate size for the cell_area passed to
     * gtk_cell_renderer_render().  If `cell_area` is not %NULL, fills in the
     * x and y offsets (if set) of the cell relative to this location.
     * 
     * Please note that the values set in `width` and `height,` as well as those
     * in `x_offset` and `y_offset` are inclusive of the xpad and ypad properties.
     * @virtual 
     * @param widget the widget the renderer is rendering to
     * @param cellArea The area a cell will be allocated, or %NULL
     */
    getSize(widget: Widget, cellArea: Gdk.Rectangle | null): [ /* xOffset */ number, /* yOffset */ number, /* width */ number, /* height */ number ]
    /**
     * Invokes the virtual render function of the #GtkCellRenderer. The three
     * passed-in rectangles are areas of `window`. Most renderers will draw within
     * `cell_area;` the xalign, yalign, xpad, and ypad fields of the #GtkCellRenderer
     * should be honored with respect to `cell_area`. `background_area` includes the
     * blank space around the cell, and also the area containing the tree expander;
     * so the `background_area` rectangles for all cells tile to cover the entire
     * `window`.  `expose_area` is a clip rectangle.
     * @virtual 
     * @param window a #GdkDrawable to draw to
     * @param widget the widget owning `window`
     * @param backgroundArea entire cell area (including tree expanders and maybe    padding on the sides)
     * @param cellArea area normally rendered by a cell renderer
     * @param exposeArea area that actually needs updating
     * @param flags flags that affect rendering
     */
    render(window: Gdk.Drawable, widget: Widget, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, exposeArea: Gdk.Rectangle, flags: CellRendererState): void
    /**
     * Passes an activate event to the cell renderer for possible processing.
     * @virtual 
     * @param event a #GdkEvent
     * @param widget widget that received the event
     * @param path widget-dependent string representation of the event location;    e.g. for #GtkTreeView, a string representation of #GtkTreePath
     * @param backgroundArea background area as passed to gtk_cell_renderer_render()
     * @param cellArea cell area as passed to gtk_cell_renderer_render()
     * @param flags render flags
     */
    startEditing(event: Gdk.Event, widget: Widget, path: string, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, flags: CellRendererState): CellEditable

    // Own signals of Gtk-2.0.Gtk.CellRenderer

    connect(sigName: "editing-canceled", callback: CellRenderer.EditingCanceledSignalCallback): number
    on(sigName: "editing-canceled", callback: CellRenderer.EditingCanceledSignalCallback): number
    once(sigName: "editing-canceled", callback: CellRenderer.EditingCanceledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "editing-canceled", ...args: any[]): void
    connect(sigName: "editing-started", callback: CellRenderer.EditingStartedSignalCallback): number
    on(sigName: "editing-started", callback: CellRenderer.EditingStartedSignalCallback): number
    once(sigName: "editing-started", callback: CellRenderer.EditingStartedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "editing-started", path: string, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CellRenderer

    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRenderer extends Object {

    // Own properties of Gtk-2.0.Gtk.CellRenderer

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRenderer

    constructor(config?: CellRenderer.ConstructorProperties) 
    _init(config?: CellRenderer.ConstructorProperties): void
}

export module CellRendererAccel {

    // Signal callback interfaces

    /**
     * Signal callback interface for `accel-cleared`
     */
    export interface AccelClearedSignalCallback {
        (pathString: string): void
    }

    /**
     * Signal callback interface for `accel-edited`
     */
    export interface AccelEditedSignalCallback {
        (pathString: string, accelKey: number, accelMods: Gdk.ModifierType, hardwareKeycode: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends CellRendererText.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererAccel

        /**
         * The keyval of the accelerator.
         */
        accelKey?: number | null
        /**
         * Determines if the edited accelerators are GTK+ accelerators. If
         * they are, consumed modifiers are suppressed, only accelerators
         * accepted by GTK+ are allowed, and the accelerators are rendered
         * in the same way as they are in menus.
         */
        accelMode?: CellRendererAccelMode | null
        /**
         * The modifier mask of the accelerator.
         */
        accelMods?: Gdk.ModifierType | null
        /**
         * The hardware keycode of the accelerator. Note that the hardware keycode is
         * only relevant if the key does not have a keyval. Normally, the keyboard
         * configuration should assign keyvals to all keys.
         */
        keycode?: number | null
    }

}

export interface CellRendererAccel {

    // Own properties of Gtk-2.0.Gtk.CellRendererAccel

    /**
     * The keyval of the accelerator.
     */
    accelKey: number
    /**
     * Determines if the edited accelerators are GTK+ accelerators. If
     * they are, consumed modifiers are suppressed, only accelerators
     * accepted by GTK+ are allowed, and the accelerators are rendered
     * in the same way as they are in menus.
     */
    accelMode: CellRendererAccelMode
    /**
     * The modifier mask of the accelerator.
     */
    accelMods: Gdk.ModifierType
    /**
     * The hardware keycode of the accelerator. Note that the hardware keycode is
     * only relevant if the key does not have a keyval. Normally, the keyboard
     * configuration should assign keyvals to all keys.
     */
    keycode: number

    // Own fields of Gtk-2.0.Gtk.CellRendererAccel

    parent: CellRendererText & CellRenderer & Object & Object

    // Own virtual methods of Gtk-2.0.Gtk.CellRendererAccel

    accelCleared(pathString: string): void
    accelEdited(pathString: string, accelKey: number, accelMods: Gdk.ModifierType, hardwareKeycode: number): void

    // Own signals of Gtk-2.0.Gtk.CellRendererAccel

    connect(sigName: "accel-cleared", callback: CellRendererAccel.AccelClearedSignalCallback): number
    on(sigName: "accel-cleared", callback: CellRendererAccel.AccelClearedSignalCallback): number
    once(sigName: "accel-cleared", callback: CellRendererAccel.AccelClearedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "accel-cleared", ...args: any[]): void
    connect(sigName: "accel-edited", callback: CellRendererAccel.AccelEditedSignalCallback): number
    on(sigName: "accel-edited", callback: CellRendererAccel.AccelEditedSignalCallback): number
    once(sigName: "accel-edited", callback: CellRendererAccel.AccelEditedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "accel-edited", accelKey: number, accelMods: Gdk.ModifierType, hardwareKeycode: number, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CellRendererAccel

    connect(sigName: "notify::accel-key", callback: any): number
    on(sigName: "notify::accel-key", callback: any): number
    once(sigName: "notify::accel-key", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accel-key", ...args: any[]): void
    connect(sigName: "notify::accel-mode", callback: any): number
    on(sigName: "notify::accel-mode", callback: any): number
    once(sigName: "notify::accel-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accel-mode", ...args: any[]): void
    connect(sigName: "notify::accel-mods", callback: any): number
    on(sigName: "notify::accel-mods", callback: any): number
    once(sigName: "notify::accel-mods", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accel-mods", ...args: any[]): void
    connect(sigName: "notify::keycode", callback: any): number
    on(sigName: "notify::keycode", callback: any): number
    once(sigName: "notify::keycode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::keycode", ...args: any[]): void
    connect(sigName: "notify::align-set", callback: any): number
    on(sigName: "notify::align-set", callback: any): number
    once(sigName: "notify::align-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::align-set", ...args: any[]): void
    connect(sigName: "notify::alignment", callback: any): number
    on(sigName: "notify::alignment", callback: any): number
    once(sigName: "notify::alignment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::alignment", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::background", callback: any): number
    on(sigName: "notify::background", callback: any): number
    once(sigName: "notify::background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::background-gdk", callback: any): number
    on(sigName: "notify::background-gdk", callback: any): number
    once(sigName: "notify::background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-gdk", ...args: any[]): void
    connect(sigName: "notify::background-set", callback: any): number
    on(sigName: "notify::background-set", callback: any): number
    once(sigName: "notify::background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-set", ...args: any[]): void
    connect(sigName: "notify::editable", callback: any): number
    on(sigName: "notify::editable", callback: any): number
    once(sigName: "notify::editable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::editable-set", callback: any): number
    on(sigName: "notify::editable-set", callback: any): number
    once(sigName: "notify::editable-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable-set", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::ellipsize-set", callback: any): number
    on(sigName: "notify::ellipsize-set", callback: any): number
    once(sigName: "notify::ellipsize-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize-set", ...args: any[]): void
    connect(sigName: "notify::family", callback: any): number
    on(sigName: "notify::family", callback: any): number
    once(sigName: "notify::family", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family", ...args: any[]): void
    connect(sigName: "notify::family-set", callback: any): number
    on(sigName: "notify::family-set", callback: any): number
    once(sigName: "notify::family-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family-set", ...args: any[]): void
    connect(sigName: "notify::font", callback: any): number
    on(sigName: "notify::font", callback: any): number
    once(sigName: "notify::font", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: any): number
    on(sigName: "notify::font-desc", callback: any): number
    once(sigName: "notify::font-desc", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::foreground", callback: any): number
    on(sigName: "notify::foreground", callback: any): number
    once(sigName: "notify::foreground", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground", ...args: any[]): void
    connect(sigName: "notify::foreground-gdk", callback: any): number
    on(sigName: "notify::foreground-gdk", callback: any): number
    once(sigName: "notify::foreground-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-gdk", ...args: any[]): void
    connect(sigName: "notify::foreground-set", callback: any): number
    on(sigName: "notify::foreground-set", callback: any): number
    once(sigName: "notify::foreground-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-set", ...args: any[]): void
    connect(sigName: "notify::language", callback: any): number
    on(sigName: "notify::language", callback: any): number
    once(sigName: "notify::language", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::language-set", callback: any): number
    on(sigName: "notify::language-set", callback: any): number
    once(sigName: "notify::language-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language-set", ...args: any[]): void
    connect(sigName: "notify::markup", callback: any): number
    on(sigName: "notify::markup", callback: any): number
    once(sigName: "notify::markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::markup", ...args: any[]): void
    connect(sigName: "notify::rise", callback: any): number
    on(sigName: "notify::rise", callback: any): number
    once(sigName: "notify::rise", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise", ...args: any[]): void
    connect(sigName: "notify::rise-set", callback: any): number
    on(sigName: "notify::rise-set", callback: any): number
    once(sigName: "notify::rise-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise-set", ...args: any[]): void
    connect(sigName: "notify::scale", callback: any): number
    on(sigName: "notify::scale", callback: any): number
    once(sigName: "notify::scale", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale", ...args: any[]): void
    connect(sigName: "notify::scale-set", callback: any): number
    on(sigName: "notify::scale-set", callback: any): number
    once(sigName: "notify::scale-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale-set", ...args: any[]): void
    connect(sigName: "notify::single-paragraph-mode", callback: any): number
    on(sigName: "notify::single-paragraph-mode", callback: any): number
    once(sigName: "notify::single-paragraph-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-paragraph-mode", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::size-points", callback: any): number
    on(sigName: "notify::size-points", callback: any): number
    once(sigName: "notify::size-points", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-points", ...args: any[]): void
    connect(sigName: "notify::size-set", callback: any): number
    on(sigName: "notify::size-set", callback: any): number
    once(sigName: "notify::size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-set", ...args: any[]): void
    connect(sigName: "notify::stretch", callback: any): number
    on(sigName: "notify::stretch", callback: any): number
    once(sigName: "notify::stretch", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch", ...args: any[]): void
    connect(sigName: "notify::stretch-set", callback: any): number
    on(sigName: "notify::stretch-set", callback: any): number
    once(sigName: "notify::stretch-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch-set", ...args: any[]): void
    connect(sigName: "notify::strikethrough", callback: any): number
    on(sigName: "notify::strikethrough", callback: any): number
    once(sigName: "notify::strikethrough", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough", ...args: any[]): void
    connect(sigName: "notify::strikethrough-set", callback: any): number
    on(sigName: "notify::strikethrough-set", callback: any): number
    once(sigName: "notify::strikethrough-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough-set", ...args: any[]): void
    connect(sigName: "notify::style", callback: any): number
    on(sigName: "notify::style", callback: any): number
    once(sigName: "notify::style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::style-set", callback: any): number
    on(sigName: "notify::style-set", callback: any): number
    once(sigName: "notify::style-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style-set", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::underline", callback: any): number
    on(sigName: "notify::underline", callback: any): number
    once(sigName: "notify::underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline", ...args: any[]): void
    connect(sigName: "notify::underline-set", callback: any): number
    on(sigName: "notify::underline-set", callback: any): number
    once(sigName: "notify::underline-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline-set", ...args: any[]): void
    connect(sigName: "notify::variant", callback: any): number
    on(sigName: "notify::variant", callback: any): number
    once(sigName: "notify::variant", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant", ...args: any[]): void
    connect(sigName: "notify::variant-set", callback: any): number
    on(sigName: "notify::variant-set", callback: any): number
    once(sigName: "notify::variant-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant-set", ...args: any[]): void
    connect(sigName: "notify::weight", callback: any): number
    on(sigName: "notify::weight", callback: any): number
    once(sigName: "notify::weight", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight", ...args: any[]): void
    connect(sigName: "notify::weight-set", callback: any): number
    on(sigName: "notify::weight-set", callback: any): number
    once(sigName: "notify::weight-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight-set", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererAccel extends CellRendererText {

    // Own properties of Gtk-2.0.Gtk.CellRendererAccel

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererAccel

    constructor(config?: CellRendererAccel.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererAccel.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererAccel.
     * @constructor 
     */
    static new(): CellRendererAccel
    _init(config?: CellRendererAccel.ConstructorProperties): void
}

export module CellRendererCombo {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (pathString: string, newIter: TreeIter): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends CellRendererText.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererCombo

        /**
         * If %TRUE, the cell renderer will include an entry and allow to enter
         * values other than the ones in the popup list.
         */
        hasEntry?: boolean | null
        /**
         * Holds a tree model containing the possible values for the combo box.
         * Use the text_column property to specify the column holding the values.
         */
        model?: TreeModel | null
        /**
         * Specifies the model column which holds the possible values for the
         * combo box.
         * 
         * Note that this refers to the model specified in the model property,
         * <emphasis>not</emphasis> the model backing the tree view to which
         * this cell renderer is attached.
         * 
         * #GtkCellRendererCombo automatically adds a text cell renderer for
         * this column to its combo box.
         */
        textColumn?: number | null
    }

}

export interface CellRendererCombo {

    // Own fields of Gtk-2.0.Gtk.CellRendererCombo

    parent: CellRendererText & CellRenderer & Object & Object
    model: TreeModel
    textColumn: number
    hasEntry: boolean

    // Own signals of Gtk-2.0.Gtk.CellRendererCombo

    connect(sigName: "changed", callback: CellRendererCombo.ChangedSignalCallback): number
    on(sigName: "changed", callback: CellRendererCombo.ChangedSignalCallback): number
    once(sigName: "changed", callback: CellRendererCombo.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", newIter: TreeIter, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CellRendererCombo

    connect(sigName: "notify::align-set", callback: any): number
    on(sigName: "notify::align-set", callback: any): number
    once(sigName: "notify::align-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::align-set", ...args: any[]): void
    connect(sigName: "notify::alignment", callback: any): number
    on(sigName: "notify::alignment", callback: any): number
    once(sigName: "notify::alignment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::alignment", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::background", callback: any): number
    on(sigName: "notify::background", callback: any): number
    once(sigName: "notify::background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::background-gdk", callback: any): number
    on(sigName: "notify::background-gdk", callback: any): number
    once(sigName: "notify::background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-gdk", ...args: any[]): void
    connect(sigName: "notify::background-set", callback: any): number
    on(sigName: "notify::background-set", callback: any): number
    once(sigName: "notify::background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-set", ...args: any[]): void
    connect(sigName: "notify::editable", callback: any): number
    on(sigName: "notify::editable", callback: any): number
    once(sigName: "notify::editable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::editable-set", callback: any): number
    on(sigName: "notify::editable-set", callback: any): number
    once(sigName: "notify::editable-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable-set", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::ellipsize-set", callback: any): number
    on(sigName: "notify::ellipsize-set", callback: any): number
    once(sigName: "notify::ellipsize-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize-set", ...args: any[]): void
    connect(sigName: "notify::family", callback: any): number
    on(sigName: "notify::family", callback: any): number
    once(sigName: "notify::family", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family", ...args: any[]): void
    connect(sigName: "notify::family-set", callback: any): number
    on(sigName: "notify::family-set", callback: any): number
    once(sigName: "notify::family-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family-set", ...args: any[]): void
    connect(sigName: "notify::font", callback: any): number
    on(sigName: "notify::font", callback: any): number
    once(sigName: "notify::font", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: any): number
    on(sigName: "notify::font-desc", callback: any): number
    once(sigName: "notify::font-desc", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::foreground", callback: any): number
    on(sigName: "notify::foreground", callback: any): number
    once(sigName: "notify::foreground", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground", ...args: any[]): void
    connect(sigName: "notify::foreground-gdk", callback: any): number
    on(sigName: "notify::foreground-gdk", callback: any): number
    once(sigName: "notify::foreground-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-gdk", ...args: any[]): void
    connect(sigName: "notify::foreground-set", callback: any): number
    on(sigName: "notify::foreground-set", callback: any): number
    once(sigName: "notify::foreground-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-set", ...args: any[]): void
    connect(sigName: "notify::language", callback: any): number
    on(sigName: "notify::language", callback: any): number
    once(sigName: "notify::language", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::language-set", callback: any): number
    on(sigName: "notify::language-set", callback: any): number
    once(sigName: "notify::language-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language-set", ...args: any[]): void
    connect(sigName: "notify::markup", callback: any): number
    on(sigName: "notify::markup", callback: any): number
    once(sigName: "notify::markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::markup", ...args: any[]): void
    connect(sigName: "notify::rise", callback: any): number
    on(sigName: "notify::rise", callback: any): number
    once(sigName: "notify::rise", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise", ...args: any[]): void
    connect(sigName: "notify::rise-set", callback: any): number
    on(sigName: "notify::rise-set", callback: any): number
    once(sigName: "notify::rise-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise-set", ...args: any[]): void
    connect(sigName: "notify::scale", callback: any): number
    on(sigName: "notify::scale", callback: any): number
    once(sigName: "notify::scale", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale", ...args: any[]): void
    connect(sigName: "notify::scale-set", callback: any): number
    on(sigName: "notify::scale-set", callback: any): number
    once(sigName: "notify::scale-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale-set", ...args: any[]): void
    connect(sigName: "notify::single-paragraph-mode", callback: any): number
    on(sigName: "notify::single-paragraph-mode", callback: any): number
    once(sigName: "notify::single-paragraph-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-paragraph-mode", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::size-points", callback: any): number
    on(sigName: "notify::size-points", callback: any): number
    once(sigName: "notify::size-points", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-points", ...args: any[]): void
    connect(sigName: "notify::size-set", callback: any): number
    on(sigName: "notify::size-set", callback: any): number
    once(sigName: "notify::size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-set", ...args: any[]): void
    connect(sigName: "notify::stretch", callback: any): number
    on(sigName: "notify::stretch", callback: any): number
    once(sigName: "notify::stretch", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch", ...args: any[]): void
    connect(sigName: "notify::stretch-set", callback: any): number
    on(sigName: "notify::stretch-set", callback: any): number
    once(sigName: "notify::stretch-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch-set", ...args: any[]): void
    connect(sigName: "notify::strikethrough", callback: any): number
    on(sigName: "notify::strikethrough", callback: any): number
    once(sigName: "notify::strikethrough", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough", ...args: any[]): void
    connect(sigName: "notify::strikethrough-set", callback: any): number
    on(sigName: "notify::strikethrough-set", callback: any): number
    once(sigName: "notify::strikethrough-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough-set", ...args: any[]): void
    connect(sigName: "notify::style", callback: any): number
    on(sigName: "notify::style", callback: any): number
    once(sigName: "notify::style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::style-set", callback: any): number
    on(sigName: "notify::style-set", callback: any): number
    once(sigName: "notify::style-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style-set", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::underline", callback: any): number
    on(sigName: "notify::underline", callback: any): number
    once(sigName: "notify::underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline", ...args: any[]): void
    connect(sigName: "notify::underline-set", callback: any): number
    on(sigName: "notify::underline-set", callback: any): number
    once(sigName: "notify::underline-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline-set", ...args: any[]): void
    connect(sigName: "notify::variant", callback: any): number
    on(sigName: "notify::variant", callback: any): number
    once(sigName: "notify::variant", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant", ...args: any[]): void
    connect(sigName: "notify::variant-set", callback: any): number
    on(sigName: "notify::variant-set", callback: any): number
    once(sigName: "notify::variant-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant-set", ...args: any[]): void
    connect(sigName: "notify::weight", callback: any): number
    on(sigName: "notify::weight", callback: any): number
    once(sigName: "notify::weight", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight", ...args: any[]): void
    connect(sigName: "notify::weight-set", callback: any): number
    on(sigName: "notify::weight-set", callback: any): number
    once(sigName: "notify::weight-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight-set", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererCombo extends CellRendererText {

    // Own properties of Gtk-2.0.Gtk.CellRendererCombo

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererCombo

    constructor(config?: CellRendererCombo.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererCombo.
     * Adjust how text is drawn using object properties.
     * Object properties can be set globally (with g_object_set()).
     * Also, with #GtkTreeViewColumn, you can bind a property to a value
     * in a #GtkTreeModel. For example, you can bind the "text" property
     * on the cell renderer to a string value in the model, thus rendering
     * a different string in each row of the #GtkTreeView.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererCombo.
     * Adjust how text is drawn using object properties.
     * Object properties can be set globally (with g_object_set()).
     * Also, with #GtkTreeViewColumn, you can bind a property to a value
     * in a #GtkTreeModel. For example, you can bind the "text" property
     * on the cell renderer to a string value in the model, thus rendering
     * a different string in each row of the #GtkTreeView.
     * @constructor 
     */
    static new(): CellRendererCombo
    _init(config?: CellRendererCombo.ConstructorProperties): void
}

export module CellRendererPixbuf {

    // Constructor properties interface

    export interface ConstructorProperties extends CellRenderer.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererPixbuf

        /**
         * Specifies whether the rendered pixbuf should be colorized
         * according to the #GtkCellRendererState.
         */
        followState?: boolean | null
        /**
         * The GIcon representing the icon to display.
         * If the icon theme is changed, the image will be updated
         * automatically.
         */
        gicon?: Gio.Icon | null
        /**
         * The name of the themed icon to display.
         * This property only has an effect if not overridden by "stock_id"
         * or "pixbuf" properties.
         */
        iconName?: string | null
        pixbuf?: GdkPixbuf.Pixbuf | null
        pixbufExpanderClosed?: GdkPixbuf.Pixbuf | null
        pixbufExpanderOpen?: GdkPixbuf.Pixbuf | null
        stockDetail?: string | null
        stockId?: string | null
        stockSize?: number | null
    }

}

export interface CellRendererPixbuf {

    // Own properties of Gtk-2.0.Gtk.CellRendererPixbuf

    /**
     * Specifies whether the rendered pixbuf should be colorized
     * according to the #GtkCellRendererState.
     */
    followState: boolean
    /**
     * The GIcon representing the icon to display.
     * If the icon theme is changed, the image will be updated
     * automatically.
     */
    gicon: Gio.Icon
    /**
     * The name of the themed icon to display.
     * This property only has an effect if not overridden by "stock_id"
     * or "pixbuf" properties.
     */
    iconName: string
    pixbuf: GdkPixbuf.Pixbuf
    pixbufExpanderClosed: GdkPixbuf.Pixbuf
    pixbufExpanderOpen: GdkPixbuf.Pixbuf
    stockDetail: string
    stockId: string
    stockSize: number

    // Own fields of Gtk-2.0.Gtk.CellRendererPixbuf

    parent: CellRenderer & Object

    // Class property signals of Gtk-2.0.Gtk.CellRendererPixbuf

    connect(sigName: "notify::follow-state", callback: any): number
    on(sigName: "notify::follow-state", callback: any): number
    once(sigName: "notify::follow-state", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::follow-state", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::pixbuf", callback: any): number
    on(sigName: "notify::pixbuf", callback: any): number
    once(sigName: "notify::pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf", ...args: any[]): void
    connect(sigName: "notify::pixbuf-expander-closed", callback: any): number
    on(sigName: "notify::pixbuf-expander-closed", callback: any): number
    once(sigName: "notify::pixbuf-expander-closed", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf-expander-closed", ...args: any[]): void
    connect(sigName: "notify::pixbuf-expander-open", callback: any): number
    on(sigName: "notify::pixbuf-expander-open", callback: any): number
    once(sigName: "notify::pixbuf-expander-open", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf-expander-open", ...args: any[]): void
    connect(sigName: "notify::stock-detail", callback: any): number
    on(sigName: "notify::stock-detail", callback: any): number
    once(sigName: "notify::stock-detail", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-detail", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::stock-size", callback: any): number
    on(sigName: "notify::stock-size", callback: any): number
    once(sigName: "notify::stock-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-size", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererPixbuf extends CellRenderer {

    // Own properties of Gtk-2.0.Gtk.CellRendererPixbuf

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererPixbuf

    constructor(config?: CellRendererPixbuf.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererPixbuf. Adjust rendering
     * parameters using object properties. Object properties can be set
     * globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
     * can bind a property to a value in a #GtkTreeModel. For example, you
     * can bind the "pixbuf" property on the cell renderer to a pixbuf value
     * in the model, thus rendering a different image in each row of the
     * #GtkTreeView.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererPixbuf. Adjust rendering
     * parameters using object properties. Object properties can be set
     * globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
     * can bind a property to a value in a #GtkTreeModel. For example, you
     * can bind the "pixbuf" property on the cell renderer to a pixbuf value
     * in the model, thus rendering a different image in each row of the
     * #GtkTreeView.
     * @constructor 
     */
    static new(): CellRendererPixbuf
    _init(config?: CellRendererPixbuf.ConstructorProperties): void
}

export module CellRendererProgress {

    // Constructor properties interface

    export interface ConstructorProperties extends CellRenderer.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererProgress

        /**
         * The "orientation" property controls the direction and growth
         * direction of the progress bar (left-to-right, right-to-left,
         * top-to-bottom or bottom-to-top).
         */
        orientation?: ProgressBarOrientation | null
        /**
         * Setting this to a non-negative value causes the cell renderer to
         * enter "activity mode", where a block bounces back and forth to
         * indicate that some progress is made, without specifying exactly how
         * much.
         * 
         * Each increment of the property causes the block to move by a little
         * bit.
         * 
         * To indicate that the activity has not started yet, set the property
         * to zero. To indicate completion, set the property to %G_MAXINT.
         */
        pulse?: number | null
        /**
         * The "text" property determines the label which will be drawn
         * over the progress bar. Setting this property to %NULL causes the default
         * label to be displayed. Setting this property to an empty string causes
         * no label to be displayed.
         */
        text?: string | null
        /**
         * The "text-xalign" property controls the horizontal alignment of the
         * text in the progress bar.  Valid values range from 0 (left) to 1
         * (right).  Reserved for RTL layouts.
         */
        textXalign?: number | null
        /**
         * The "text-yalign" property controls the vertical alignment of the
         * text in the progress bar.  Valid values range from 0 (top) to 1
         * (bottom).
         */
        textYalign?: number | null
        /**
         * The "value" property determines the percentage to which the
         * progress bar will be "filled in".
         */
        value?: number | null
    }

}

export interface CellRendererProgress {

    // Own properties of Gtk-2.0.Gtk.CellRendererProgress

    /**
     * The "orientation" property controls the direction and growth
     * direction of the progress bar (left-to-right, right-to-left,
     * top-to-bottom or bottom-to-top).
     */
    orientation: ProgressBarOrientation
    /**
     * Setting this to a non-negative value causes the cell renderer to
     * enter "activity mode", where a block bounces back and forth to
     * indicate that some progress is made, without specifying exactly how
     * much.
     * 
     * Each increment of the property causes the block to move by a little
     * bit.
     * 
     * To indicate that the activity has not started yet, set the property
     * to zero. To indicate completion, set the property to %G_MAXINT.
     */
    pulse: number
    /**
     * The "text" property determines the label which will be drawn
     * over the progress bar. Setting this property to %NULL causes the default
     * label to be displayed. Setting this property to an empty string causes
     * no label to be displayed.
     */
    text: string
    /**
     * The "text-xalign" property controls the horizontal alignment of the
     * text in the progress bar.  Valid values range from 0 (left) to 1
     * (right).  Reserved for RTL layouts.
     */
    textXalign: number
    /**
     * The "text-yalign" property controls the vertical alignment of the
     * text in the progress bar.  Valid values range from 0 (top) to 1
     * (bottom).
     */
    textYalign: number
    /**
     * The "value" property determines the percentage to which the
     * progress bar will be "filled in".
     */
    value: number

    // Own fields of Gtk-2.0.Gtk.CellRendererProgress

    parentInstance: any

    // Class property signals of Gtk-2.0.Gtk.CellRendererProgress

    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: "notify::pulse", callback: any): number
    on(sigName: "notify::pulse", callback: any): number
    once(sigName: "notify::pulse", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pulse", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::text-xalign", callback: any): number
    on(sigName: "notify::text-xalign", callback: any): number
    once(sigName: "notify::text-xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-xalign", ...args: any[]): void
    connect(sigName: "notify::text-yalign", callback: any): number
    on(sigName: "notify::text-yalign", callback: any): number
    once(sigName: "notify::text-yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-yalign", ...args: any[]): void
    connect(sigName: "notify::value", callback: any): number
    on(sigName: "notify::value", callback: any): number
    once(sigName: "notify::value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererProgress extends CellRenderer {

    // Own properties of Gtk-2.0.Gtk.CellRendererProgress

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererProgress

    constructor(config?: CellRendererProgress.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererProgress.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererProgress.
     * @constructor 
     */
    static new(): CellRendererProgress
    _init(config?: CellRendererProgress.ConstructorProperties): void
}

export module CellRendererSpin {

    // Constructor properties interface

    export interface ConstructorProperties extends CellRendererText.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererSpin

        /**
         * The adjustment that holds the value of the spinbutton.
         * This must be non-%NULL for the cell renderer to be editable.
         */
        adjustment?: Adjustment | null
        /**
         * The acceleration rate when you hold down a button.
         */
        climbRate?: number | null
        /**
         * The number of decimal places to display.
         */
        digits?: number | null
    }

}

export interface CellRendererSpin {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpin

    /**
     * The adjustment that holds the value of the spinbutton.
     * This must be non-%NULL for the cell renderer to be editable.
     */
    adjustment: Adjustment
    /**
     * The acceleration rate when you hold down a button.
     */
    climbRate: number
    /**
     * The number of decimal places to display.
     */
    digits: number

    // Own fields of Gtk-2.0.Gtk.CellRendererSpin

    parent: CellRendererText & CellRenderer & Object & Object

    // Class property signals of Gtk-2.0.Gtk.CellRendererSpin

    connect(sigName: "notify::adjustment", callback: any): number
    on(sigName: "notify::adjustment", callback: any): number
    once(sigName: "notify::adjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::adjustment", ...args: any[]): void
    connect(sigName: "notify::climb-rate", callback: any): number
    on(sigName: "notify::climb-rate", callback: any): number
    once(sigName: "notify::climb-rate", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::climb-rate", ...args: any[]): void
    connect(sigName: "notify::digits", callback: any): number
    on(sigName: "notify::digits", callback: any): number
    once(sigName: "notify::digits", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::digits", ...args: any[]): void
    connect(sigName: "notify::align-set", callback: any): number
    on(sigName: "notify::align-set", callback: any): number
    once(sigName: "notify::align-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::align-set", ...args: any[]): void
    connect(sigName: "notify::alignment", callback: any): number
    on(sigName: "notify::alignment", callback: any): number
    once(sigName: "notify::alignment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::alignment", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::background", callback: any): number
    on(sigName: "notify::background", callback: any): number
    once(sigName: "notify::background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::background-gdk", callback: any): number
    on(sigName: "notify::background-gdk", callback: any): number
    once(sigName: "notify::background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-gdk", ...args: any[]): void
    connect(sigName: "notify::background-set", callback: any): number
    on(sigName: "notify::background-set", callback: any): number
    once(sigName: "notify::background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-set", ...args: any[]): void
    connect(sigName: "notify::editable", callback: any): number
    on(sigName: "notify::editable", callback: any): number
    once(sigName: "notify::editable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::editable-set", callback: any): number
    on(sigName: "notify::editable-set", callback: any): number
    once(sigName: "notify::editable-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable-set", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::ellipsize-set", callback: any): number
    on(sigName: "notify::ellipsize-set", callback: any): number
    once(sigName: "notify::ellipsize-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize-set", ...args: any[]): void
    connect(sigName: "notify::family", callback: any): number
    on(sigName: "notify::family", callback: any): number
    once(sigName: "notify::family", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family", ...args: any[]): void
    connect(sigName: "notify::family-set", callback: any): number
    on(sigName: "notify::family-set", callback: any): number
    once(sigName: "notify::family-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family-set", ...args: any[]): void
    connect(sigName: "notify::font", callback: any): number
    on(sigName: "notify::font", callback: any): number
    once(sigName: "notify::font", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: any): number
    on(sigName: "notify::font-desc", callback: any): number
    once(sigName: "notify::font-desc", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::foreground", callback: any): number
    on(sigName: "notify::foreground", callback: any): number
    once(sigName: "notify::foreground", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground", ...args: any[]): void
    connect(sigName: "notify::foreground-gdk", callback: any): number
    on(sigName: "notify::foreground-gdk", callback: any): number
    once(sigName: "notify::foreground-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-gdk", ...args: any[]): void
    connect(sigName: "notify::foreground-set", callback: any): number
    on(sigName: "notify::foreground-set", callback: any): number
    once(sigName: "notify::foreground-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-set", ...args: any[]): void
    connect(sigName: "notify::language", callback: any): number
    on(sigName: "notify::language", callback: any): number
    once(sigName: "notify::language", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::language-set", callback: any): number
    on(sigName: "notify::language-set", callback: any): number
    once(sigName: "notify::language-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language-set", ...args: any[]): void
    connect(sigName: "notify::markup", callback: any): number
    on(sigName: "notify::markup", callback: any): number
    once(sigName: "notify::markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::markup", ...args: any[]): void
    connect(sigName: "notify::rise", callback: any): number
    on(sigName: "notify::rise", callback: any): number
    once(sigName: "notify::rise", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise", ...args: any[]): void
    connect(sigName: "notify::rise-set", callback: any): number
    on(sigName: "notify::rise-set", callback: any): number
    once(sigName: "notify::rise-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise-set", ...args: any[]): void
    connect(sigName: "notify::scale", callback: any): number
    on(sigName: "notify::scale", callback: any): number
    once(sigName: "notify::scale", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale", ...args: any[]): void
    connect(sigName: "notify::scale-set", callback: any): number
    on(sigName: "notify::scale-set", callback: any): number
    once(sigName: "notify::scale-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale-set", ...args: any[]): void
    connect(sigName: "notify::single-paragraph-mode", callback: any): number
    on(sigName: "notify::single-paragraph-mode", callback: any): number
    once(sigName: "notify::single-paragraph-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-paragraph-mode", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::size-points", callback: any): number
    on(sigName: "notify::size-points", callback: any): number
    once(sigName: "notify::size-points", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-points", ...args: any[]): void
    connect(sigName: "notify::size-set", callback: any): number
    on(sigName: "notify::size-set", callback: any): number
    once(sigName: "notify::size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-set", ...args: any[]): void
    connect(sigName: "notify::stretch", callback: any): number
    on(sigName: "notify::stretch", callback: any): number
    once(sigName: "notify::stretch", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch", ...args: any[]): void
    connect(sigName: "notify::stretch-set", callback: any): number
    on(sigName: "notify::stretch-set", callback: any): number
    once(sigName: "notify::stretch-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch-set", ...args: any[]): void
    connect(sigName: "notify::strikethrough", callback: any): number
    on(sigName: "notify::strikethrough", callback: any): number
    once(sigName: "notify::strikethrough", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough", ...args: any[]): void
    connect(sigName: "notify::strikethrough-set", callback: any): number
    on(sigName: "notify::strikethrough-set", callback: any): number
    once(sigName: "notify::strikethrough-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough-set", ...args: any[]): void
    connect(sigName: "notify::style", callback: any): number
    on(sigName: "notify::style", callback: any): number
    once(sigName: "notify::style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::style-set", callback: any): number
    on(sigName: "notify::style-set", callback: any): number
    once(sigName: "notify::style-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style-set", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::underline", callback: any): number
    on(sigName: "notify::underline", callback: any): number
    once(sigName: "notify::underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline", ...args: any[]): void
    connect(sigName: "notify::underline-set", callback: any): number
    on(sigName: "notify::underline-set", callback: any): number
    once(sigName: "notify::underline-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline-set", ...args: any[]): void
    connect(sigName: "notify::variant", callback: any): number
    on(sigName: "notify::variant", callback: any): number
    once(sigName: "notify::variant", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant", ...args: any[]): void
    connect(sigName: "notify::variant-set", callback: any): number
    on(sigName: "notify::variant-set", callback: any): number
    once(sigName: "notify::variant-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant-set", ...args: any[]): void
    connect(sigName: "notify::weight", callback: any): number
    on(sigName: "notify::weight", callback: any): number
    once(sigName: "notify::weight", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight", ...args: any[]): void
    connect(sigName: "notify::weight-set", callback: any): number
    on(sigName: "notify::weight-set", callback: any): number
    once(sigName: "notify::weight-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight-set", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererSpin extends CellRendererText {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpin

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererSpin

    constructor(config?: CellRendererSpin.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererSpin.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererSpin.
     * @constructor 
     */
    static new(): CellRendererSpin
    _init(config?: CellRendererSpin.ConstructorProperties): void
}

export module CellRendererSpinner {

    // Constructor properties interface

    export interface ConstructorProperties extends CellRenderer.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererSpinner

        active?: boolean | null
        /**
         * Pulse of the spinner. Increment this value to draw the next frame of the
         * spinner animation. Usually, you would update this value in a timeout.
         * 
         * The #GtkSpinner widget draws one full cycle of the animation per second by default.
         * You can learn about the number of frames used by the theme
         * by looking at the #GtkSpinner:num-steps style property and the duration
         * of the cycle by looking at #GtkSpinner:cycle-duration.
         */
        pulse?: number | null
        /**
         * The #GtkIconSize value that specifies the size of the rendered spinner.
         */
        size?: IconSize | null
    }

}

export interface CellRendererSpinner {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpinner

    active: boolean
    /**
     * Pulse of the spinner. Increment this value to draw the next frame of the
     * spinner animation. Usually, you would update this value in a timeout.
     * 
     * The #GtkSpinner widget draws one full cycle of the animation per second by default.
     * You can learn about the number of frames used by the theme
     * by looking at the #GtkSpinner:num-steps style property and the duration
     * of the cycle by looking at #GtkSpinner:cycle-duration.
     */
    pulse: number
    /**
     * The #GtkIconSize value that specifies the size of the rendered spinner.
     */
    size: IconSize

    // Own fields of Gtk-2.0.Gtk.CellRendererSpinner

    parent: CellRenderer & Object
    priv: CellRendererSpinnerPrivate

    // Class property signals of Gtk-2.0.Gtk.CellRendererSpinner

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::pulse", callback: any): number
    on(sigName: "notify::pulse", callback: any): number
    once(sigName: "notify::pulse", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pulse", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * GtkCellRendererSpinner renders a spinning animation in a cell, very
 * similar to #GtkSpinner. It can often be used as an alternative
 * to a #GtkCellRendererProgress for displaying indefinite activity,
 * instead of actual progress.
 * 
 * To start the animation in a cell, set the #GtkCellRendererSpinner:active
 * property to %TRUE and increment the #GtkCellRendererSpinner:pulse property
 * at regular intervals. The usual way to set the cell renderer properties
 * for each cell is to bind them to columns in your tree model using e.g.
 * gtk_tree_view_column_add_attribute().
 * @class 
 */
export class CellRendererSpinner extends CellRenderer {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpinner

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererSpinner

    constructor(config?: CellRendererSpinner.ConstructorProperties) 
    /**
     * Returns a new cell renderer which will show a spinner to indicate
     * activity.
     * @constructor 
     */
    constructor() 
    /**
     * Returns a new cell renderer which will show a spinner to indicate
     * activity.
     * @constructor 
     */
    static new(): CellRendererSpinner
    _init(config?: CellRendererSpinner.ConstructorProperties): void
}

export module CellRendererText {

    // Signal callback interfaces

    /**
     * Signal callback interface for `edited`
     */
    export interface EditedSignalCallback {
        (path: string, newText: string): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends CellRenderer.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererText

        alignSet?: boolean | null
        /**
         * Specifies how to align the lines of text with respect to each other.
         * 
         * Note that this property describes how to align the lines of text in
         * case there are several of them. The "xalign" property of #GtkCellRenderer,
         * on the other hand, sets the horizontal alignment of the whole text.
         */
        alignment?: Pango.Alignment | null
        attributes?: Pango.AttrList | null
        background?: string | null
        backgroundGdk?: Gdk.Color | null
        backgroundSet?: boolean | null
        editable?: boolean | null
        editableSet?: boolean | null
        /**
         * Specifies the preferred place to ellipsize the string, if the cell renderer
         * does not have enough room to display the entire string. Setting it to
         * %PANGO_ELLIPSIZE_NONE turns off ellipsizing. See the wrap-width property
         * for another way of making the text fit into a given width.
         */
        ellipsize?: Pango.EllipsizeMode | null
        ellipsizeSet?: boolean | null
        family?: string | null
        familySet?: boolean | null
        font?: string | null
        fontDesc?: Pango.FontDescription | null
        foreground?: string | null
        foregroundGdk?: Gdk.Color | null
        foregroundSet?: boolean | null
        language?: string | null
        languageSet?: boolean | null
        markup?: string | null
        rise?: number | null
        riseSet?: boolean | null
        scale?: number | null
        scaleSet?: boolean | null
        singleParagraphMode?: boolean | null
        size?: number | null
        sizePoints?: number | null
        sizeSet?: boolean | null
        stretch?: Pango.Stretch | null
        stretchSet?: boolean | null
        strikethrough?: boolean | null
        strikethroughSet?: boolean | null
        style?: Pango.Style | null
        styleSet?: boolean | null
        text?: string | null
        underline?: Pango.Underline | null
        underlineSet?: boolean | null
        variant?: Pango.Variant | null
        variantSet?: boolean | null
        weight?: number | null
        weightSet?: boolean | null
        /**
         * The desired width of the cell, in characters. If this property is set to
         * -1, the width will be calculated automatically, otherwise the cell will
         * request either 3 characters or the property value, whichever is greater.
         */
        widthChars?: number | null
        /**
         * Specifies how to break the string into multiple lines, if the cell
         * renderer does not have enough room to display the entire string.
         * This property has no effect unless the wrap-width property is set.
         */
        wrapMode?: Pango.WrapMode | null
        /**
         * Specifies the width at which the text is wrapped. The wrap-mode property can
         * be used to influence at what character positions the line breaks can be placed.
         * Setting wrap-width to -1 turns wrapping off.
         */
        wrapWidth?: number | null
    }

}

export interface CellRendererText {

    // Own properties of Gtk-2.0.Gtk.CellRendererText

    alignSet: boolean
    /**
     * Specifies how to align the lines of text with respect to each other.
     * 
     * Note that this property describes how to align the lines of text in
     * case there are several of them. The "xalign" property of #GtkCellRenderer,
     * on the other hand, sets the horizontal alignment of the whole text.
     */
    alignment: Pango.Alignment
    attributes: Pango.AttrList
    background: string
    backgroundGdk: Gdk.Color
    backgroundSet: boolean
    editable: boolean
    editableSet: boolean
    /**
     * Specifies the preferred place to ellipsize the string, if the cell renderer
     * does not have enough room to display the entire string. Setting it to
     * %PANGO_ELLIPSIZE_NONE turns off ellipsizing. See the wrap-width property
     * for another way of making the text fit into a given width.
     */
    ellipsize: Pango.EllipsizeMode
    ellipsizeSet: boolean
    family: string
    familySet: boolean
    font: string
    fontDesc: Pango.FontDescription
    foreground: string
    foregroundGdk: Gdk.Color
    foregroundSet: boolean
    language: string
    languageSet: boolean
    markup: string
    rise: number
    riseSet: boolean
    scale: number
    scaleSet: boolean
    singleParagraphMode: boolean
    size: number
    sizePoints: number
    sizeSet: boolean
    stretch: Pango.Stretch
    stretchSet: boolean
    strikethrough: boolean
    strikethroughSet: boolean
    style: Pango.Style
    styleSet: boolean
    text: string
    underline: Pango.Underline
    underlineSet: boolean
    variant: Pango.Variant
    variantSet: boolean
    weight: number
    weightSet: boolean
    /**
     * The desired width of the cell, in characters. If this property is set to
     * -1, the width will be calculated automatically, otherwise the cell will
     * request either 3 characters or the property value, whichever is greater.
     */
    widthChars: number
    /**
     * Specifies how to break the string into multiple lines, if the cell
     * renderer does not have enough room to display the entire string.
     * This property has no effect unless the wrap-width property is set.
     */
    wrapMode: Pango.WrapMode
    /**
     * Specifies the width at which the text is wrapped. The wrap-mode property can
     * be used to influence at what character positions the line breaks can be placed.
     * Setting wrap-width to -1 turns wrapping off.
     */
    wrapWidth: number

    // Own fields of Gtk-2.0.Gtk.CellRendererText

    parent: CellRenderer & Object

    // Owm methods of Gtk-2.0.Gtk.CellRendererText

    /**
     * Sets the height of a renderer to explicitly be determined by the "font" and
     * "y_pad" property set on it.  Further changes in these properties do not
     * affect the height, so they must be accompanied by a subsequent call to this
     * function.  Using this function is unflexible, and should really only be used
     * if calculating the size of a cell is too slow (ie, a massive number of cells
     * displayed).  If `number_of_rows` is -1, then the fixed height is unset, and
     * the height is determined by the properties again.
     * @param numberOfRows Number of rows of text each cell renderer is allocated, or -1
     */
    setFixedHeightFromFont(numberOfRows: number): void

    // Own virtual methods of Gtk-2.0.Gtk.CellRendererText

    edited(path: string, newText: string): void

    // Own signals of Gtk-2.0.Gtk.CellRendererText

    connect(sigName: "edited", callback: CellRendererText.EditedSignalCallback): number
    on(sigName: "edited", callback: CellRendererText.EditedSignalCallback): number
    once(sigName: "edited", callback: CellRendererText.EditedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "edited", newText: string, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CellRendererText

    connect(sigName: "notify::align-set", callback: any): number
    on(sigName: "notify::align-set", callback: any): number
    once(sigName: "notify::align-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::align-set", ...args: any[]): void
    connect(sigName: "notify::alignment", callback: any): number
    on(sigName: "notify::alignment", callback: any): number
    once(sigName: "notify::alignment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::alignment", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::background", callback: any): number
    on(sigName: "notify::background", callback: any): number
    once(sigName: "notify::background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::background-gdk", callback: any): number
    on(sigName: "notify::background-gdk", callback: any): number
    once(sigName: "notify::background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-gdk", ...args: any[]): void
    connect(sigName: "notify::background-set", callback: any): number
    on(sigName: "notify::background-set", callback: any): number
    once(sigName: "notify::background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-set", ...args: any[]): void
    connect(sigName: "notify::editable", callback: any): number
    on(sigName: "notify::editable", callback: any): number
    once(sigName: "notify::editable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::editable-set", callback: any): number
    on(sigName: "notify::editable-set", callback: any): number
    once(sigName: "notify::editable-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable-set", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::ellipsize-set", callback: any): number
    on(sigName: "notify::ellipsize-set", callback: any): number
    once(sigName: "notify::ellipsize-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize-set", ...args: any[]): void
    connect(sigName: "notify::family", callback: any): number
    on(sigName: "notify::family", callback: any): number
    once(sigName: "notify::family", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family", ...args: any[]): void
    connect(sigName: "notify::family-set", callback: any): number
    on(sigName: "notify::family-set", callback: any): number
    once(sigName: "notify::family-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family-set", ...args: any[]): void
    connect(sigName: "notify::font", callback: any): number
    on(sigName: "notify::font", callback: any): number
    once(sigName: "notify::font", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: any): number
    on(sigName: "notify::font-desc", callback: any): number
    once(sigName: "notify::font-desc", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::foreground", callback: any): number
    on(sigName: "notify::foreground", callback: any): number
    once(sigName: "notify::foreground", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground", ...args: any[]): void
    connect(sigName: "notify::foreground-gdk", callback: any): number
    on(sigName: "notify::foreground-gdk", callback: any): number
    once(sigName: "notify::foreground-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-gdk", ...args: any[]): void
    connect(sigName: "notify::foreground-set", callback: any): number
    on(sigName: "notify::foreground-set", callback: any): number
    once(sigName: "notify::foreground-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-set", ...args: any[]): void
    connect(sigName: "notify::language", callback: any): number
    on(sigName: "notify::language", callback: any): number
    once(sigName: "notify::language", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::language-set", callback: any): number
    on(sigName: "notify::language-set", callback: any): number
    once(sigName: "notify::language-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language-set", ...args: any[]): void
    connect(sigName: "notify::markup", callback: any): number
    on(sigName: "notify::markup", callback: any): number
    once(sigName: "notify::markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::markup", ...args: any[]): void
    connect(sigName: "notify::rise", callback: any): number
    on(sigName: "notify::rise", callback: any): number
    once(sigName: "notify::rise", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise", ...args: any[]): void
    connect(sigName: "notify::rise-set", callback: any): number
    on(sigName: "notify::rise-set", callback: any): number
    once(sigName: "notify::rise-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise-set", ...args: any[]): void
    connect(sigName: "notify::scale", callback: any): number
    on(sigName: "notify::scale", callback: any): number
    once(sigName: "notify::scale", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale", ...args: any[]): void
    connect(sigName: "notify::scale-set", callback: any): number
    on(sigName: "notify::scale-set", callback: any): number
    once(sigName: "notify::scale-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale-set", ...args: any[]): void
    connect(sigName: "notify::single-paragraph-mode", callback: any): number
    on(sigName: "notify::single-paragraph-mode", callback: any): number
    once(sigName: "notify::single-paragraph-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-paragraph-mode", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::size-points", callback: any): number
    on(sigName: "notify::size-points", callback: any): number
    once(sigName: "notify::size-points", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-points", ...args: any[]): void
    connect(sigName: "notify::size-set", callback: any): number
    on(sigName: "notify::size-set", callback: any): number
    once(sigName: "notify::size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-set", ...args: any[]): void
    connect(sigName: "notify::stretch", callback: any): number
    on(sigName: "notify::stretch", callback: any): number
    once(sigName: "notify::stretch", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch", ...args: any[]): void
    connect(sigName: "notify::stretch-set", callback: any): number
    on(sigName: "notify::stretch-set", callback: any): number
    once(sigName: "notify::stretch-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch-set", ...args: any[]): void
    connect(sigName: "notify::strikethrough", callback: any): number
    on(sigName: "notify::strikethrough", callback: any): number
    once(sigName: "notify::strikethrough", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough", ...args: any[]): void
    connect(sigName: "notify::strikethrough-set", callback: any): number
    on(sigName: "notify::strikethrough-set", callback: any): number
    once(sigName: "notify::strikethrough-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough-set", ...args: any[]): void
    connect(sigName: "notify::style", callback: any): number
    on(sigName: "notify::style", callback: any): number
    once(sigName: "notify::style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::style-set", callback: any): number
    on(sigName: "notify::style-set", callback: any): number
    once(sigName: "notify::style-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style-set", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::underline", callback: any): number
    on(sigName: "notify::underline", callback: any): number
    once(sigName: "notify::underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline", ...args: any[]): void
    connect(sigName: "notify::underline-set", callback: any): number
    on(sigName: "notify::underline-set", callback: any): number
    once(sigName: "notify::underline-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline-set", ...args: any[]): void
    connect(sigName: "notify::variant", callback: any): number
    on(sigName: "notify::variant", callback: any): number
    once(sigName: "notify::variant", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant", ...args: any[]): void
    connect(sigName: "notify::variant-set", callback: any): number
    on(sigName: "notify::variant-set", callback: any): number
    once(sigName: "notify::variant-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant-set", ...args: any[]): void
    connect(sigName: "notify::weight", callback: any): number
    on(sigName: "notify::weight", callback: any): number
    once(sigName: "notify::weight", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight", ...args: any[]): void
    connect(sigName: "notify::weight-set", callback: any): number
    on(sigName: "notify::weight-set", callback: any): number
    once(sigName: "notify::weight-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight-set", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererText extends CellRenderer {

    // Own properties of Gtk-2.0.Gtk.CellRendererText

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererText

    constructor(config?: CellRendererText.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererText. Adjust how text is drawn using
     * object properties. Object properties can be
     * set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
     * you can bind a property to a value in a #GtkTreeModel. For example,
     * you can bind the "text" property on the cell renderer to a string
     * value in the model, thus rendering a different string in each row
     * of the #GtkTreeView
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererText. Adjust how text is drawn using
     * object properties. Object properties can be
     * set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
     * you can bind a property to a value in a #GtkTreeModel. For example,
     * you can bind the "text" property on the cell renderer to a string
     * value in the model, thus rendering a different string in each row
     * of the #GtkTreeView
     * @constructor 
     */
    static new(): CellRendererText
    _init(config?: CellRendererText.ConstructorProperties): void
}

export module CellRendererToggle {

    // Signal callback interfaces

    /**
     * Signal callback interface for `toggled`
     */
    export interface ToggledSignalCallback {
        (path: string): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends CellRenderer.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellRendererToggle

        activatable?: boolean | null
        active?: boolean | null
        inconsistent?: boolean | null
        indicatorSize?: number | null
        radio?: boolean | null
    }

}

export interface CellRendererToggle {

    // Own properties of Gtk-2.0.Gtk.CellRendererToggle

    activatable: boolean
    active: boolean
    inconsistent: boolean
    indicatorSize: number
    radio: boolean

    // Own fields of Gtk-2.0.Gtk.CellRendererToggle

    parent: CellRenderer & Object

    // Owm methods of Gtk-2.0.Gtk.CellRendererToggle

    /**
     * Returns whether the cell renderer is activatable. See
     * gtk_cell_renderer_toggle_set_activatable().
     */
    getActivatable(): boolean
    /**
     * Returns whether the cell renderer is active. See
     * gtk_cell_renderer_toggle_set_active().
     */
    getActive(): boolean
    /**
     * Returns whether we're rendering radio toggles rather than checkboxes.
     */
    getRadio(): boolean
    /**
     * Makes the cell renderer activatable.
     * @param setting the value to set.
     */
    setActivatable(setting: boolean): void
    /**
     * Activates or deactivates a cell renderer.
     * @param setting the value to set.
     */
    setActive(setting: boolean): void
    /**
     * If `radio` is %TRUE, the cell renderer renders a radio toggle
     * (i.e. a toggle in a group of mutually-exclusive toggles).
     * If %FALSE, it renders a check toggle (a standalone boolean option).
     * This can be set globally for the cell renderer, or changed just
     * before rendering each cell in the model (for #GtkTreeView, you set
     * up a per-row setting using #GtkTreeViewColumn to associate model
     * columns with cell renderer properties).
     * @param radio %TRUE to make the toggle look like a radio button
     */
    setRadio(radio: boolean): void

    // Own virtual methods of Gtk-2.0.Gtk.CellRendererToggle

    toggled(path: string): void

    // Own signals of Gtk-2.0.Gtk.CellRendererToggle

    connect(sigName: "toggled", callback: CellRendererToggle.ToggledSignalCallback): number
    on(sigName: "toggled", callback: CellRendererToggle.ToggledSignalCallback): number
    once(sigName: "toggled", callback: CellRendererToggle.ToggledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggled", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CellRendererToggle

    connect(sigName: "notify::activatable", callback: any): number
    on(sigName: "notify::activatable", callback: any): number
    once(sigName: "notify::activatable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::activatable", ...args: any[]): void
    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::inconsistent", callback: any): number
    on(sigName: "notify::inconsistent", callback: any): number
    once(sigName: "notify::inconsistent", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::inconsistent", ...args: any[]): void
    connect(sigName: "notify::indicator-size", callback: any): number
    on(sigName: "notify::indicator-size", callback: any): number
    once(sigName: "notify::indicator-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::indicator-size", ...args: any[]): void
    connect(sigName: "notify::radio", callback: any): number
    on(sigName: "notify::radio", callback: any): number
    once(sigName: "notify::radio", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::radio", ...args: any[]): void
    connect(sigName: "notify::cell-background", callback: any): number
    on(sigName: "notify::cell-background", callback: any): number
    once(sigName: "notify::cell-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background", ...args: any[]): void
    connect(sigName: "notify::cell-background-gdk", callback: any): number
    on(sigName: "notify::cell-background-gdk", callback: any): number
    once(sigName: "notify::cell-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cell-background-gdk", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellRendererToggle extends CellRenderer {

    // Own properties of Gtk-2.0.Gtk.CellRendererToggle

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellRendererToggle

    constructor(config?: CellRendererToggle.ConstructorProperties) 
    /**
     * Creates a new #GtkCellRendererToggle. Adjust rendering
     * parameters using object properties. Object properties can be set
     * globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
     * can bind a property to a value in a #GtkTreeModel. For example, you
     * can bind the "active" property on the cell renderer to a boolean value
     * in the model, thus causing the check button to reflect the state of
     * the model.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellRendererToggle. Adjust rendering
     * parameters using object properties. Object properties can be set
     * globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
     * can bind a property to a value in a #GtkTreeModel. For example, you
     * can bind the "active" property on the cell renderer to a boolean value
     * in the model, thus causing the check button to reflect the state of
     * the model.
     * @constructor 
     */
    static new(): CellRendererToggle
    _init(config?: CellRendererToggle.ConstructorProperties): void
}

export module CellView {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellLayout.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CellView

        background?: string | null
        backgroundGdk?: Gdk.Color | null
        backgroundSet?: boolean | null
        /**
         * The model for cell view
         * 
         * since 2.10
         */
        model?: TreeModel | null
    }

}

export interface CellView extends Atk.ImplementorIface, Buildable, CellLayout {

    // Own properties of Gtk-2.0.Gtk.CellView

    background: string
    backgroundGdk: Gdk.Color
    backgroundSet: boolean
    /**
     * The model for cell view
     * 
     * since 2.10
     */
    model: TreeModel

    // Own fields of Gtk-2.0.Gtk.CellView

    parentInstance: any

    // Owm methods of Gtk-2.0.Gtk.CellView

    /**
     * Returns a #GtkTreePath referring to the currently
     * displayed row. If no row is currently displayed,
     * %NULL is returned.
     */
    getDisplayedRow(): TreePath
    /**
     * Returns the model for `cell_view`. If no model is used %NULL is
     * returned.
     */
    getModel(): TreeModel
    /**
     * Sets `requisition` to the size needed by `cell_view` to display
     * the model row pointed to by `path`.
     * @param path a #GtkTreePath
     */
    getSizeOfRow(path: TreePath): [ /* returnType */ boolean, /* requisition */ Requisition ]
    /**
     * Sets the background color of `view`.
     * @param color the new background color
     */
    setBackgroundColor(color: Gdk.Color): void
    /**
     * Sets the row of the model that is currently displayed
     * by the #GtkCellView. If the path is unset, then the
     * contents of the cellview "stick" at their last value;
     * this is not normally a desired result, but may be
     * a needed intermediate state if say, the model for
     * the #GtkCellView becomes temporarily empty.
     * @param path a #GtkTreePath or %NULL to unset.
     */
    setDisplayedRow(path: TreePath | null): void
    /**
     * Sets the model for `cell_view`.  If `cell_view` already has a model
     * set, it will remove it before setting the new model.  If `model` is
     * %NULL, then it will unset the old model.
     * @param model a #GtkTreeModel
     */
    setModel(model: TreeModel | null): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.CellView

    connect(sigName: "notify::background", callback: any): number
    on(sigName: "notify::background", callback: any): number
    once(sigName: "notify::background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::background-gdk", callback: any): number
    on(sigName: "notify::background-gdk", callback: any): number
    once(sigName: "notify::background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-gdk", ...args: any[]): void
    connect(sigName: "notify::background-set", callback: any): number
    on(sigName: "notify::background-set", callback: any): number
    once(sigName: "notify::background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-set", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CellView extends Widget {

    // Own properties of Gtk-2.0.Gtk.CellView

    static name: string

    // Constructors of Gtk-2.0.Gtk.CellView

    constructor(config?: CellView.ConstructorProperties) 
    /**
     * Creates a new #GtkCellView widget.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkCellView widget.
     * @constructor 
     */
    static new(): CellView
    /**
     * Creates a new #GtkCellView widget, adds a #GtkCellRendererText
     * to it, and makes it show `markup`. The text can be
     * marked up with the <link linkend="PangoMarkupFormat">Pango text
     * markup language</link>.
     * @constructor 
     * @param markup the text to display in the cell view
     */
    static newWithMarkup(markup: string): CellView
    /**
     * Creates a new #GtkCellView widget, adds a #GtkCellRendererPixbuf
     * to it, and makes its show `pixbuf`.
     * @constructor 
     * @param pixbuf the image to display in the cell view
     */
    static newWithPixbuf(pixbuf: GdkPixbuf.Pixbuf): CellView
    /**
     * Creates a new #GtkCellView widget, adds a #GtkCellRendererText
     * to it, and makes its show `text`.
     * @constructor 
     * @param text the text to display in the cell view
     */
    static newWithText(text: string): CellView
    _init(config?: CellView.ConstructorProperties): void
}

export module CheckButton {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, ToggleButton.ConstructorProperties {
    }

}

export interface CheckButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.CheckButton

    toggleButton: ToggleButton

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.CheckButton

    drawIndicator(area: Gdk.Rectangle): void

    // Class property signals of Gtk-2.0.Gtk.CheckButton

    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CheckButton extends ToggleButton {

    // Own properties of Gtk-2.0.Gtk.CheckButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.CheckButton

    constructor(config?: CheckButton.ConstructorProperties) 
    constructor() 
    static new(): CheckButton
    static newWithLabel(label: string): CheckButton
    /**
     * Creates a new #GtkCheckButton containing a label. The label
     * will be created using gtk_label_new_with_mnemonic(), so underscores
     * in `label` indicate the mnemonic for the check button.
     * @constructor 
     * @param label The text of the button, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string): CheckButton
    _init(config?: CheckButton.ConstructorProperties): void
}

export module CheckMenuItem {

    // Signal callback interfaces

    /**
     * Signal callback interface for `toggled`
     */
    export interface ToggledSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, MenuItem.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.CheckMenuItem

        active?: boolean | null
        drawAsRadio?: boolean | null
        inconsistent?: boolean | null
    }

}

export interface CheckMenuItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.CheckMenuItem

    menuItem: MenuItem
    active: number
    alwaysShowToggle: number
    inconsistent: number
    drawAsRadio: number

    // Owm methods of Gtk-2.0.Gtk.CheckMenuItem

    /**
     * Returns whether the check menu item is active. See
     * gtk_check_menu_item_set_active ().
     */
    getActive(): boolean
    /**
     * Returns whether `check_menu_item` looks like a #GtkRadioMenuItem
     */
    getDrawAsRadio(): boolean
    /**
     * Retrieves the value set by gtk_check_menu_item_set_inconsistent().
     */
    getInconsistent(): boolean
    setActive(isActive: boolean): void
    /**
     * Sets whether `check_menu_item` is drawn like a #GtkRadioMenuItem
     * @param drawAsRadio whether `check_menu_item` is drawn like a #GtkRadioMenuItem
     */
    setDrawAsRadio(drawAsRadio: boolean): void
    /**
     * If the user has selected a range of elements (such as some text or
     * spreadsheet cells) that are affected by a boolean setting, and the
     * current values in that range are inconsistent, you may want to
     * display the check in an "in between" state. This function turns on
     * "in between" display.  Normally you would turn off the inconsistent
     * state again if the user explicitly selects a setting. This has to be
     * done manually, gtk_check_menu_item_set_inconsistent() only affects
     * visual appearance, it doesn't affect the semantics of the widget.
     * @param setting %TRUE to display an "inconsistent" third state check
     */
    setInconsistent(setting: boolean): void
    setShowToggle(always: boolean): void
    // Has conflict: toggled(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    deselect(): void

    // Overloads of deselect

    deselect(): void
    deselect(): void
    select(): void

    // Overloads of select

    select(): void
    select(): void
    /**
     * Set the accelerator path on `menu_item,` through which runtime changes of the
     * menu item's accelerator caused by the user can be identified and saved to
     * persistant storage (see gtk_accel_map_save() on this).
     * To setup a default accelerator for this menu item, call
     * gtk_accel_map_add_entry() with the same `accel_path`.
     * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
     * and gtk_menu_set_accel_path() for a more convenient variant of this function.
     * 
     * This function is basically a convenience wrapper that handles calling
     * gtk_widget_set_accel_path() with the appropriate accelerator group for
     * the menu item.
     * 
     * Note that you do need to set an accelerator on the parent menu with
     * gtk_menu_set_accel_group() for this to work.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath accelerator path, corresponding to this menu item's              functionality, or %NULL to unset the current path.
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.CheckMenuItem

    drawIndicator(area: Gdk.Rectangle): void
    toggled(): void

    // Own signals of Gtk-2.0.Gtk.CheckMenuItem

    connect(sigName: "toggled", callback: CheckMenuItem.ToggledSignalCallback): number
    on(sigName: "toggled", callback: CheckMenuItem.ToggledSignalCallback): number
    once(sigName: "toggled", callback: CheckMenuItem.ToggledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggled", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.CheckMenuItem

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::right-justified", callback: any): number
    on(sigName: "notify::right-justified", callback: any): number
    once(sigName: "notify::right-justified", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-justified", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class CheckMenuItem extends MenuItem {

    // Own properties of Gtk-2.0.Gtk.CheckMenuItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.CheckMenuItem

    constructor(config?: CheckMenuItem.ConstructorProperties) 
    constructor() 
    static new(): CheckMenuItem
    static newWithLabel(label: string): CheckMenuItem
    /**
     * Creates a new #GtkCheckMenuItem containing a label. The label
     * will be created using gtk_label_new_with_mnemonic(), so underscores
     * in `label` indicate the mnemonic for the menu item.
     * @constructor 
     * @param label The text of the button, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string): CheckMenuItem
    _init(config?: CheckMenuItem.ConstructorProperties): void
}

export module Clipboard {

    // Signal callback interfaces

    /**
     * Signal callback interface for `owner-change`
     */
    export interface OwnerChangeSignalCallback {
        (event: Gdk.Event): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface Clipboard {

    // Owm methods of Gtk-2.0.Gtk.Clipboard

    /**
     * Clears the contents of the clipboard. Generally this should only
     * be called between the time you call gtk_clipboard_set_with_owner()
     * or gtk_clipboard_set_with_data(),
     * and when the `clear_func` you supplied is called. Otherwise, the
     * clipboard may be owned by someone else.
     */
    clear(): void
    /**
     * Gets the #GdkDisplay associated with `clipboard`
     */
    getDisplay(): Gdk.Display
    /**
     * If the clipboard contents callbacks were set with
     * gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or
     * gtk_clipboard_clear() has not subsequently called, returns the owner set
     * by gtk_clipboard_set_with_owner().
     */
    getOwner(): GObject.Object
    /**
     * Hints that the clipboard data should be stored somewhere when the
     * application exits or when gtk_clipboard_store () is called.
     * 
     * This value is reset when the clipboard owner changes.
     * Where the clipboard data is stored is platform dependent,
     * see gdk_display_store_clipboard () for more information.
     * @param targets array containing           information about which forms should be stored or %NULL           to indicate that all forms should be stored.
     */
    setCanStore(targets: TargetEntry[] | null): void
    /**
     * Sets the contents of the clipboard to the given #GdkPixbuf.
     * GTK+ will take responsibility for responding for requests
     * for the image, and for converting the image into the
     * requested format.
     * @param pixbuf a #GdkPixbuf
     */
    setImage(pixbuf: GdkPixbuf.Pixbuf): void
    /**
     * Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
     * make a copy of the text and take responsibility for responding
     * for requests for the text, and for converting the text into
     * the requested format.
     * @param text a UTF-8 string.
     * @param len length of `text,` in bytes, or -1, in which case             the length will be determined with <function>strlen()</function>.
     */
    setText(text: string, len: number): void
    /**
     * Stores the current clipboard data somewhere so that it will stay
     * around after the application has quit.
     */
    store(): void
    /**
     * Requests the contents of the clipboard using the given target.
     * This function waits for the data to be received using the main
     * loop, so events, timeouts, etc, may be dispatched during the wait.
     * @param target an atom representing the form into which the clipboard          owner should convert the selection.
     */
    waitForContents(target: Gdk.Atom): SelectionData
    /**
     * Requests the contents of the clipboard as image and converts
     * the result to a #GdkPixbuf. This function waits for
     * the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     */
    waitForImage(): GdkPixbuf.Pixbuf
    /**
     * Requests the contents of the clipboard as rich text.  This function
     * waits for the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     * @param buffer a #GtkTextBuffer
     * @param format return location for the format of the returned data
     */
    waitForRichText(buffer: TextBuffer, format: Gdk.Atom): Uint8Array
    /**
     * Returns a list of targets that are present on the clipboard, or %NULL
     * if there aren't any targets available. The returned list must be
     * freed with g_free().
     * This function waits for the data to be received using the main
     * loop, so events, timeouts, etc, may be dispatched during the wait.
     */
    waitForTargets(): [ /* returnType */ boolean, /* targets */ Gdk.Atom[] ]
    /**
     * Requests the contents of the clipboard as text and converts
     * the result to UTF-8 if necessary. This function waits for
     * the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     */
    waitForText(): string
    /**
     * Requests the contents of the clipboard as URIs. This function waits
     * for the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     */
    waitForUris(): string[]
    /**
     * Test to see if there is an image available to be pasted
     * This is done by requesting the TARGETS atom and checking
     * if it contains any of the supported image targets. This function
     * waits for the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     * 
     * This function is a little faster than calling
     * gtk_clipboard_wait_for_image() since it doesn't need to retrieve
     * the actual image data.
     */
    waitIsImageAvailable(): boolean
    /**
     * Test to see if there is rich text available to be pasted
     * This is done by requesting the TARGETS atom and checking
     * if it contains any of the supported rich text targets. This function
     * waits for the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     * 
     * This function is a little faster than calling
     * gtk_clipboard_wait_for_rich_text() since it doesn't need to retrieve
     * the actual text.
     * @param buffer a #GtkTextBuffer
     */
    waitIsRichTextAvailable(buffer: TextBuffer): boolean
    /**
     * Checks if a clipboard supports pasting data of a given type. This
     * function can be used to determine if a "Paste" menu item should be
     * insensitive or not.
     * 
     * If you want to see if there's text available on the clipboard, use
     * gtk_clipboard_wait_is_text_available () instead.
     * @param target A #GdkAtom indicating which target to look for.
     */
    waitIsTargetAvailable(target: Gdk.Atom): boolean
    /**
     * Test to see if there is text available to be pasted
     * This is done by requesting the TARGETS atom and checking
     * if it contains any of the supported text targets. This function
     * waits for the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     * 
     * This function is a little faster than calling
     * gtk_clipboard_wait_for_text() since it doesn't need to retrieve
     * the actual text.
     */
    waitIsTextAvailable(): boolean
    /**
     * Test to see if there is a list of URIs available to be pasted
     * This is done by requesting the TARGETS atom and checking
     * if it contains the URI targets. This function
     * waits for the data to be received using the main loop, so events,
     * timeouts, etc, may be dispatched during the wait.
     * 
     * This function is a little faster than calling
     * gtk_clipboard_wait_for_uris() since it doesn't need to retrieve
     * the actual URI data.
     */
    waitIsUrisAvailable(): boolean

    // Own signals of Gtk-2.0.Gtk.Clipboard

    connect(sigName: "owner-change", callback: Clipboard.OwnerChangeSignalCallback): number
    on(sigName: "owner-change", callback: Clipboard.OwnerChangeSignalCallback): number
    once(sigName: "owner-change", callback: Clipboard.OwnerChangeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "owner-change", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Clipboard

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Clipboard extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Clipboard

    static name: string

    // Constructors of Gtk-2.0.Gtk.Clipboard

    constructor(config?: Clipboard.ConstructorProperties) 
    _init(config?: Clipboard.ConstructorProperties): void
    /**
     * Returns the clipboard object for the given selection.
     * See gtk_clipboard_get_for_display() for complete details.
     * @param selection a #GdkAtom which identifies the clipboard to use
     */
    static get(selection: Gdk.Atom): Clipboard
    /**
     * Returns the clipboard object for the given selection.
     * Cut/copy/paste menu items and keyboard shortcuts should use
     * the default clipboard, returned by passing %GDK_SELECTION_CLIPBOARD for `selection`.
     * (%GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD
     * for backwards compatibility reasons.)
     * The currently-selected object or text should be provided on the clipboard
     * identified by #GDK_SELECTION_PRIMARY. Cut/copy/paste menu items
     * conceptually copy the contents of the #GDK_SELECTION_PRIMARY clipboard
     * to the default clipboard, i.e. they copy the selection to what the
     * user sees as the clipboard.
     * 
     * (Passing #GDK_NONE is the same as using <literal>gdk_atom_intern
     * ("CLIPBOARD", FALSE)</literal>. See <ulink
     * url="http://www.freedesktop.org/Standards/clipboards-spec">
     * http://www.freedesktop.org/Standards/clipboards-spec</ulink>
     * for a detailed discussion of the "CLIPBOARD" vs. "PRIMARY"
     * selections under the X window system. On Win32 the
     * #GDK_SELECTION_PRIMARY clipboard is essentially ignored.)
     * 
     * It's possible to have arbitrary named clipboards; if you do invent
     * new clipboards, you should prefix the selection name with an
     * underscore (because the ICCCM requires that nonstandard atoms are
     * underscore-prefixed), and namespace it as well. For example,
     * if your application called "Foo" has a special-purpose
     * clipboard, you might call it "_FOO_SPECIAL_CLIPBOARD".
     * @param display the display for which the clipboard is to be retrieved or created
     * @param selection a #GdkAtom which identifies the clipboard             to use.
     */
    static getForDisplay(display: Gdk.Display, selection: Gdk.Atom): Clipboard
}

export module ColorButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `color-set`
     */
    export interface ColorSetSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Button.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ColorButton

        /**
         * The selected opacity value (0 fully transparent, 65535 fully opaque).
         */
        alpha?: number | null
        /**
         * The selected color.
         */
        color?: Gdk.Color | null
        /**
         * The title of the color selection dialog
         */
        title?: string | null
        /**
         * If this property is set to %TRUE, the color swatch on the button is rendered against a
         * checkerboard background to show its opacity and the opacity slider is displayed in the
         * color selection dialog.
         */
        useAlpha?: boolean | null
    }

}

export interface ColorButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.ColorButton

    /**
     * The selected opacity value (0 fully transparent, 65535 fully opaque).
     */
    alpha: number
    /**
     * The selected color.
     */
    color: Gdk.Color
    /**
     * The title of the color selection dialog
     */
    title: string
    /**
     * If this property is set to %TRUE, the color swatch on the button is rendered against a
     * checkerboard background to show its opacity and the opacity slider is displayed in the
     * color selection dialog.
     */
    useAlpha: boolean

    // Own fields of Gtk-2.0.Gtk.ColorButton

    button: Button

    // Owm methods of Gtk-2.0.Gtk.ColorButton

    /**
     * Returns the current alpha value.
     */
    getAlpha(): number
    /**
     * Sets `color` to be the current color in the #GtkColorButton widget.
     */
    getColor(): /* color */ Gdk.Color
    /**
     * Gets the title of the color selection dialog.
     */
    getTitle(): string
    /**
     * Does the color selection dialog use the alpha channel?
     */
    getUseAlpha(): boolean
    /**
     * Sets the current opacity to be `alpha`.
     * @param alpha an integer between 0 and 65535.
     */
    setAlpha(alpha: number): void
    /**
     * Sets the current color to be `color`.
     * @param color A #GdkColor to set the current color with.
     */
    setColor(color: Gdk.Color): void
    /**
     * Sets the title for the color selection dialog.
     * @param title String containing new window title.
     */
    setTitle(title: string): void
    /**
     * Sets whether or not the color button should use the alpha channel.
     * @param useAlpha %TRUE if color button should use alpha channel, %FALSE if not.
     */
    setUseAlpha(useAlpha: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ColorButton

    colorSet(): void

    // Own signals of Gtk-2.0.Gtk.ColorButton

    connect(sigName: "color-set", callback: ColorButton.ColorSetSignalCallback): number
    on(sigName: "color-set", callback: ColorButton.ColorSetSignalCallback): number
    once(sigName: "color-set", callback: ColorButton.ColorSetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "color-set", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ColorButton

    connect(sigName: "notify::alpha", callback: any): number
    on(sigName: "notify::alpha", callback: any): number
    once(sigName: "notify::alpha", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::alpha", ...args: any[]): void
    connect(sigName: "notify::color", callback: any): number
    on(sigName: "notify::color", callback: any): number
    once(sigName: "notify::color", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::color", ...args: any[]): void
    connect(sigName: "notify::title", callback: any): number
    on(sigName: "notify::title", callback: any): number
    once(sigName: "notify::title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::use-alpha", callback: any): number
    on(sigName: "notify::use-alpha", callback: any): number
    once(sigName: "notify::use-alpha", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-alpha", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ColorButton extends Button {

    // Own properties of Gtk-2.0.Gtk.ColorButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.ColorButton

    constructor(config?: ColorButton.ConstructorProperties) 
    /**
     * Creates a new color button. This returns a widget in the form of
     * a small button containing a swatch representing the current selected
     * color. When the button is clicked, a color-selection dialog will open,
     * allowing the user to select a color. The swatch will be updated to reflect
     * the new color when the user finishes.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new color button. This returns a widget in the form of
     * a small button containing a swatch representing the current selected
     * color. When the button is clicked, a color-selection dialog will open,
     * allowing the user to select a color. The swatch will be updated to reflect
     * the new color when the user finishes.
     * @constructor 
     */
    static new(): ColorButton
    /**
     * Creates a new color button.
     * @constructor 
     * @param color A #GdkColor to set the current color with.
     */
    static newWithColor(color: Gdk.Color): ColorButton
    _init(config?: ColorButton.ConstructorProperties): void
}

export module ColorSelection {

    // Signal callback interfaces

    /**
     * Signal callback interface for `color-changed`
     */
    export interface ColorChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, VBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ColorSelection

        currentAlpha?: number | null
        currentColor?: Gdk.Color | null
        hasOpacityControl?: boolean | null
        hasPalette?: boolean | null
    }

}

export interface ColorSelection extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.ColorSelection

    currentAlpha: number
    currentColor: Gdk.Color
    hasOpacityControl: boolean
    hasPalette: boolean

    // Own fields of Gtk-2.0.Gtk.ColorSelection

    parentInstance: any
    privateData: object

    // Owm methods of Gtk-2.0.Gtk.ColorSelection

    /**
     * Sets `color` to be the current color in the GtkColorSelection widget.
     * @param color an array of 4 #gdouble to fill in with the current color.
     */
    getColor(color: number): void
    /**
     * Returns the current alpha value.
     */
    getCurrentAlpha(): number
    /**
     * Sets `color` to be the current color in the GtkColorSelection widget.
     */
    getCurrentColor(): /* color */ Gdk.Color
    /**
     * Determines whether the colorsel has an opacity control.
     */
    getHasOpacityControl(): boolean
    /**
     * Determines whether the color selector has a color palette.
     */
    getHasPalette(): boolean
    /**
     * Returns the previous alpha value.
     */
    getPreviousAlpha(): number
    /**
     * Fills `color` in with the original color value.
     */
    getPreviousColor(): /* color */ Gdk.Color
    /**
     * Gets the current state of the `colorsel`.
     */
    isAdjusting(): boolean
    /**
     * Sets the current color to be `color`.  The first time this is called, it will
     * also set the original color to be `color` too.
     * @param color an array of 4 doubles specifying the red, green, blue and opacity   to set the current color to.
     */
    setColor(color: number): void
    /**
     * Sets the current opacity to be `alpha`.  The first time this is called, it will
     * also set the original opacity to be `alpha` too.
     * @param alpha an integer between 0 and 65535.
     */
    setCurrentAlpha(alpha: number): void
    /**
     * Sets the current color to be `color`.  The first time this is called, it will
     * also set the original color to be `color` too.
     * @param color A #GdkColor to set the current color with.
     */
    setCurrentColor(color: Gdk.Color): void
    /**
     * Sets the `colorsel` to use or not use opacity.
     * @param hasOpacity %TRUE if `colorsel` can set the opacity, %FALSE otherwise.
     */
    setHasOpacityControl(hasOpacity: boolean): void
    /**
     * Shows and hides the palette based upon the value of `has_palette`.
     * @param hasPalette %TRUE if palette is to be visible, %FALSE otherwise.
     */
    setHasPalette(hasPalette: boolean): void
    /**
     * Sets the 'previous' alpha to be `alpha`.  This function should be called with
     * some hesitations, as it might seem confusing to have that alpha change.
     * @param alpha an integer between 0 and 65535.
     */
    setPreviousAlpha(alpha: number): void
    /**
     * Sets the 'previous' color to be `color`.  This function should be called with
     * some hesitations, as it might seem confusing to have that color change.
     * Calling gtk_color_selection_set_current_color() will also set this color the first
     * time it is called.
     * @param color a #GdkColor to set the previous color with.
     */
    setPreviousColor(color: Gdk.Color): void
    setUpdatePolicy(policy: UpdateType): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ColorSelection

    colorChanged(): void

    // Own signals of Gtk-2.0.Gtk.ColorSelection

    connect(sigName: "color-changed", callback: ColorSelection.ColorChangedSignalCallback): number
    on(sigName: "color-changed", callback: ColorSelection.ColorChangedSignalCallback): number
    once(sigName: "color-changed", callback: ColorSelection.ColorChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "color-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ColorSelection

    connect(sigName: "notify::current-alpha", callback: any): number
    on(sigName: "notify::current-alpha", callback: any): number
    once(sigName: "notify::current-alpha", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::current-alpha", ...args: any[]): void
    connect(sigName: "notify::current-color", callback: any): number
    on(sigName: "notify::current-color", callback: any): number
    once(sigName: "notify::current-color", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::current-color", ...args: any[]): void
    connect(sigName: "notify::has-opacity-control", callback: any): number
    on(sigName: "notify::has-opacity-control", callback: any): number
    once(sigName: "notify::has-opacity-control", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-opacity-control", ...args: any[]): void
    connect(sigName: "notify::has-palette", callback: any): number
    on(sigName: "notify::has-palette", callback: any): number
    once(sigName: "notify::has-palette", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-palette", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ColorSelection extends VBox {

    // Own properties of Gtk-2.0.Gtk.ColorSelection

    static name: string

    // Constructors of Gtk-2.0.Gtk.ColorSelection

    constructor(config?: ColorSelection.ConstructorProperties) 
    /**
     * Creates a new GtkColorSelection.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new GtkColorSelection.
     * @constructor 
     */
    static new(): ColorSelection

    // Overloads of new

    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): VBox
    _init(config?: ColorSelection.ConstructorProperties): void
    /**
     * Parses a color palette string; the string is a colon-separated
     * list of color names readable by gdk_color_parse().
     * @param str a string encoding a color palette.
     */
    static paletteFromString(str: string): [ /* returnType */ boolean, /* colors */ Gdk.Color[] ]
    /**
     * Encodes a palette as a string, useful for persistent storage.
     * @param colors an array of colors.
     */
    static paletteToString(colors: Gdk.Color[]): string
}

export module ColorSelectionDialog {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Dialog.ConstructorProperties {
    }

}

export interface ColorSelectionDialog extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.ColorSelectionDialog

    readonly colorSelection: Widget

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Own fields of Gtk-2.0.Gtk.ColorSelectionDialog

    parentInstance: any
    colorsel: Widget
    okButton: Widget
    cancelButton: Widget
    helpButton: Widget

    // Owm methods of Gtk-2.0.Gtk.ColorSelectionDialog

    /**
     * Retrieves the #GtkColorSelection widget embedded in the dialog.
     */
    getColorSelection(): Widget

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ColorSelectionDialog

    connect(sigName: "notify::color-selection", callback: any): number
    on(sigName: "notify::color-selection", callback: any): number
    once(sigName: "notify::color-selection", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::color-selection", ...args: any[]): void
    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ColorSelectionDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.ColorSelectionDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.ColorSelectionDialog

    constructor(config?: ColorSelectionDialog.ConstructorProperties) 
    constructor(title: string) 
    static new(title: string): ColorSelectionDialog

    // Overloads of new

    static new(): Dialog
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: ColorSelectionDialog.ConstructorProperties): void
}

export module Combo {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, HBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Combo

        allowEmpty?: boolean | null
        caseSensitive?: boolean | null
        enableArrowKeys?: boolean | null
        enableArrowsAlways?: boolean | null
        valueInList?: boolean | null
    }

}

export interface Combo extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.Combo

    allowEmpty: boolean
    caseSensitive: boolean
    enableArrowKeys: boolean
    enableArrowsAlways: boolean
    valueInList: boolean

    // Own fields of Gtk-2.0.Gtk.Combo

    hbox: HBox
    entry: Widget
    list: Widget

    // Owm methods of Gtk-2.0.Gtk.Combo

    disableActivate(): void
    setCaseSensitive(val: boolean): void
    setItemString(item: Item, itemValue: string): void
    setUseArrows(val: boolean): void
    setUseArrowsAlways(val: boolean): void
    setValueInList(val: boolean, okIfEmpty: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Combo

    connect(sigName: "notify::allow-empty", callback: any): number
    on(sigName: "notify::allow-empty", callback: any): number
    once(sigName: "notify::allow-empty", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::allow-empty", ...args: any[]): void
    connect(sigName: "notify::case-sensitive", callback: any): number
    on(sigName: "notify::case-sensitive", callback: any): number
    once(sigName: "notify::case-sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::case-sensitive", ...args: any[]): void
    connect(sigName: "notify::enable-arrow-keys", callback: any): number
    on(sigName: "notify::enable-arrow-keys", callback: any): number
    once(sigName: "notify::enable-arrow-keys", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::enable-arrow-keys", ...args: any[]): void
    connect(sigName: "notify::enable-arrows-always", callback: any): number
    on(sigName: "notify::enable-arrows-always", callback: any): number
    once(sigName: "notify::enable-arrows-always", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::enable-arrows-always", ...args: any[]): void
    connect(sigName: "notify::value-in-list", callback: any): number
    on(sigName: "notify::value-in-list", callback: any): number
    once(sigName: "notify::value-in-list", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::value-in-list", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Combo extends HBox {

    // Own properties of Gtk-2.0.Gtk.Combo

    static name: string

    // Constructors of Gtk-2.0.Gtk.Combo

    constructor(config?: Combo.ConstructorProperties) 
    constructor() 
    static new(): Combo

    // Overloads of new

    /**
     * Creates a new #GtkHBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): HBox
    _init(config?: Combo.ConstructorProperties): void
}

export module ComboBox {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `move-active`
     */
    export interface MoveActiveSignalCallback {
        (scrollType: ScrollType): void
    }

    /**
     * Signal callback interface for `popdown`
     */
    export interface PopdownSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `popup`
     */
    export interface PopupSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellEditable.ConstructorProperties, CellLayout.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ComboBox

        /**
         * The item which is currently active. If the model is a non-flat treemodel,
         * and the active item is not an immediate child of the root of the tree,
         * this property has the value
         * <literal>gtk_tree_path_get_indices (path)[0]</literal>,
         * where <literal>path</literal> is the #GtkTreePath of the active item.
         */
        active?: number | null
        /**
         * The add-tearoffs property controls whether generated menus
         * have tearoff menu items.
         * 
         * Note that this only affects menu style combo boxes.
         */
        addTearoffs?: boolean | null
        /**
         * Whether the dropdown button is sensitive when
         * the model is empty.
         */
        buttonSensitivity?: SensitivityType | null
        /**
         * If this is set to a non-negative value, it must be the index of a column
         * of type %G_TYPE_INT in the model. The value in that column for each item
         * will determine how many columns that item will span in the popup.
         * Therefore, values in this column must be greater than zero, and the sum of
         * an item’s column position + span should not exceed #GtkComboBox:wrap-width.
         */
        columnSpanColumn?: number | null
        /**
         * The column in the combo box's model to associate with strings from the entry
         * if the combo was created with #GtkComboBox:has-entry = %TRUE.
         */
        entryTextColumn?: number | null
        focusOnClick?: boolean | null
        /**
         * Whether the combo box has an entry.
         */
        hasEntry?: boolean | null
        /**
         * The has-frame property controls whether a frame
         * is drawn around the entry.
         */
        hasFrame?: boolean | null
        /**
         * The model from which the combo box takes the values shown
         * in the list.
         */
        model?: TreeModel | null
        /**
         * If this is set to a non-negative value, it must be the index of a column
         * of type %G_TYPE_INT in the model. The value in that column for each item
         * will determine how many rows that item will span in the popup. Therefore,
         * values in this column must be greater than zero.
         */
        rowSpanColumn?: number | null
        /**
         * A title that may be displayed by the window manager
         * when the popup is torn-off.
         */
        tearoffTitle?: string | null
        /**
         * If wrap-width is set to a positive value, items in the popup will be laid
         * out along multiple columns, starting a new row on reaching the wrap width.
         */
        wrapWidth?: number | null
    }

}

export interface ComboBox extends Atk.ImplementorIface, Buildable, CellEditable, CellLayout {

    // Own properties of Gtk-2.0.Gtk.ComboBox

    /**
     * The item which is currently active. If the model is a non-flat treemodel,
     * and the active item is not an immediate child of the root of the tree,
     * this property has the value
     * <literal>gtk_tree_path_get_indices (path)[0]</literal>,
     * where <literal>path</literal> is the #GtkTreePath of the active item.
     */
    active: number
    /**
     * The add-tearoffs property controls whether generated menus
     * have tearoff menu items.
     * 
     * Note that this only affects menu style combo boxes.
     */
    addTearoffs: boolean
    /**
     * Whether the dropdown button is sensitive when
     * the model is empty.
     */
    buttonSensitivity: SensitivityType
    /**
     * If this is set to a non-negative value, it must be the index of a column
     * of type %G_TYPE_INT in the model. The value in that column for each item
     * will determine how many columns that item will span in the popup.
     * Therefore, values in this column must be greater than zero, and the sum of
     * an item’s column position + span should not exceed #GtkComboBox:wrap-width.
     */
    columnSpanColumn: number
    /**
     * The column in the combo box's model to associate with strings from the entry
     * if the combo was created with #GtkComboBox:has-entry = %TRUE.
     */
    entryTextColumn: number
    focusOnClick: boolean
    /**
     * Whether the combo box has an entry.
     */
    readonly hasEntry: boolean
    /**
     * The has-frame property controls whether a frame
     * is drawn around the entry.
     */
    hasFrame: boolean
    /**
     * The model from which the combo box takes the values shown
     * in the list.
     */
    model: TreeModel
    /**
     * Whether the combo boxes dropdown is popped up.
     * Note that this property is mainly useful, because
     * it allows you to connect to notify::popup-shown.
     */
    readonly popupShown: boolean
    /**
     * If this is set to a non-negative value, it must be the index of a column
     * of type %G_TYPE_INT in the model. The value in that column for each item
     * will determine how many rows that item will span in the popup. Therefore,
     * values in this column must be greater than zero.
     */
    rowSpanColumn: number
    /**
     * A title that may be displayed by the window manager
     * when the popup is torn-off.
     */
    tearoffTitle: string
    /**
     * If wrap-width is set to a positive value, items in the popup will be laid
     * out along multiple columns, starting a new row on reaching the wrap width.
     */
    wrapWidth: number

    // Own fields of Gtk-2.0.Gtk.ComboBox

    parentInstance: any

    // Owm methods of Gtk-2.0.Gtk.ComboBox

    /**
     * Appends `string` to the list of strings stored in `combo_box`. Note that
     * you can only use this function with combo boxes constructed with
     * gtk_combo_box_new_text().
     * @param text A string
     */
    appendText(text: string): void
    /**
     * Returns the index of the currently active item, or -1 if there's no
     * active item. If the model is a non-flat treemodel, and the active item
     * is not an immediate child of the root of the tree, this function returns
     * <literal>gtk_tree_path_get_indices (path)[0]</literal>, where
     * <literal>path</literal> is the #GtkTreePath of the active item.
     */
    getActive(): number
    /**
     * Sets `iter` to point to the currently active item, if any item is active.
     * Otherwise, `iter` is left unchanged.
     */
    getActiveIter(): [ /* returnType */ boolean, /* iter */ TreeIter ]
    // Has conflict: getActiveText(): string
    /**
     * Gets the current value of the :add-tearoffs property.
     */
    getAddTearoffs(): boolean
    /**
     * Returns whether the combo box sets the dropdown button
     * sensitive or not when there are no items in the model.
     */
    getButtonSensitivity(): SensitivityType
    /**
     * Returns the column with column span information for `combo_box`.
     */
    getColumnSpanColumn(): number
    /**
     * Returns the column which `combo_box` is using to get the strings
     * from to display in the internal entry.
     */
    getEntryTextColumn(): number
    /**
     * Returns whether the combo box grabs focus when it is clicked
     * with the mouse. See gtk_combo_box_set_focus_on_click().
     */
    getFocusOnClick(): boolean
    /**
     * Returns whether the combo box has an entry.
     */
    getHasEntry(): boolean
    /**
     * Returns the #GtkTreeModel which is acting as data source for `combo_box`.
     */
    getModel(): TreeModel
    /**
     * Gets the accessible object corresponding to the combo box's popup.
     * 
     * This function is mostly intended for use by accessibility technologies;
     * applications should have little use for it.
     */
    getPopupAccessible(): Atk.Object
    /**
     * Returns the column with row span information for `combo_box`.
     */
    getRowSpanColumn(): number
    /**
     * Gets the current title of the menu in tearoff mode. See
     * gtk_combo_box_set_add_tearoffs().
     */
    getTitle(): string
    /**
     * Returns the wrap width which is used to determine the number of columns
     * for the popup menu. If the wrap width is larger than 1, the combo box
     * is in table mode.
     */
    getWrapWidth(): number
    /**
     * Inserts `string` at `position` in the list of strings stored in `combo_box`.
     * Note that you can only use this function with combo boxes constructed
     * with gtk_combo_box_new_text().
     * @param position An index to insert `text`
     * @param text A string
     */
    insertText(position: number, text: string): void
    /**
     * Hides the menu or dropdown list of `combo_box`.
     * 
     * This function is mostly intended for use by accessibility technologies;
     * applications should have little use for it.
     */
    popdown(): void
    /**
     * Pops up the menu or dropdown list of `combo_box`.
     * 
     * This function is mostly intended for use by accessibility technologies;
     * applications should have little use for it.
     */
    popup(): void
    /**
     * Prepends `string` to the list of strings stored in `combo_box`. Note that
     * you can only use this function with combo boxes constructed with
     * gtk_combo_box_new_text().
     * @param text A string
     */
    prependText(text: string): void
    /**
     * Removes the string at `position` from `combo_box`. Note that you can only use
     * this function with combo boxes constructed with gtk_combo_box_new_text().
     * @param position Index of the item to remove
     */
    removeText(position: number): void
    /**
     * Sets the active item of `combo_box` to be the item at `index`.
     * @param index An index in the model passed during construction, or -1 to have no active item
     */
    setActive(index: number): void
    /**
     * Sets the current active item to be the one referenced by `iter,` or
     * unsets the active item if `iter` is %NULL.
     * @param iter The #GtkTreeIter, or %NULL
     */
    setActiveIter(iter: TreeIter | null): void
    /**
     * Sets whether the popup menu should have a tearoff
     * menu item.
     * @param addTearoffs %TRUE to add tearoff menu items
     */
    setAddTearoffs(addTearoffs: boolean): void
    /**
     * Sets whether the dropdown button of the combo box should be
     * always sensitive (%GTK_SENSITIVITY_ON), never sensitive (%GTK_SENSITIVITY_OFF)
     * or only if there is at least one item to display (%GTK_SENSITIVITY_AUTO).
     * @param sensitivity specify the sensitivity of the dropdown button
     */
    setButtonSensitivity(sensitivity: SensitivityType): void
    /**
     * Sets the column with column span information for `combo_box` to be
     * `column_span`. The column span column contains integers which indicate
     * how many columns an item should span.
     * @param columnSpan A column in the model passed during construction
     */
    setColumnSpanColumn(columnSpan: number): void
    /**
     * Sets the model column which `combo_box` should use to get strings from
     * to be `text_column`. The column `text_column` in the model of `combo_box`
     * must be of type %G_TYPE_STRING.
     * 
     * This is only relevant if `combo_box` has been created with
     * #GtkComboBox:has-entry as %TRUE.
     * @param textColumn A column in `model` to get the strings from for   the internal entry
     */
    setEntryTextColumn(textColumn: number): void
    /**
     * Sets whether the combo box will grab focus when it is clicked with
     * the mouse. Making mouse clicks not grab focus is useful in places
     * like toolbars where you don't want the keyboard focus removed from
     * the main area of the application.
     * @param focusOnClick whether the combo box grabs focus when clicked    with the mouse
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Sets the model used by `combo_box` to be `model`. Will unset a previously set
     * model (if applicable). If model is %NULL, then it will unset the model.
     * 
     * Note that this function does not clear the cell renderers, you have to
     * call gtk_cell_layout_clear() yourself if you need to set up different
     * cell renderers for the new model.
     * @param model A #GtkTreeModel
     */
    setModel(model: TreeModel | null): void
    /**
     * Sets the row separator function, which is used to determine
     * whether a row should be drawn as a separator. If the row separator
     * function is %NULL, no separators are drawn. This is the default value.
     * @param func a #GtkTreeViewRowSeparatorFunc
     */
    setRowSeparatorFunc(func: TreeViewRowSeparatorFunc): void
    /**
     * Sets the column with row span information for `combo_box` to be `row_span`.
     * The row span column contains integers which indicate how many rows
     * an item should span.
     * @param rowSpan A column in the model passed during construction.
     */
    setRowSpanColumn(rowSpan: number): void
    /**
     * Sets the menu's title in tearoff mode.
     * @param title a title for the menu in tearoff mode
     */
    setTitle(title: string): void
    /**
     * Sets the wrap width of `combo_box` to be `width`. The wrap width is basically
     * the preferred number of columns when you want the popup to be layed out
     * in a table.
     * @param width Preferred number of columns
     */
    setWrapWidth(width: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ComboBox

    changed(): void
    /**
     * Returns the currently active string in `combo_box` or %NULL if none
     * is selected. Note that you can only use this function with combo
     * boxes constructed with gtk_combo_box_new_text() and with
     * #GtkComboBoxEntry<!-- -->s.
     * @virtual 
     */
    getActiveText(): string

    // Own signals of Gtk-2.0.Gtk.ComboBox

    connect(sigName: "changed", callback: ComboBox.ChangedSignalCallback): number
    on(sigName: "changed", callback: ComboBox.ChangedSignalCallback): number
    once(sigName: "changed", callback: ComboBox.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void
    connect(sigName: "move-active", callback: ComboBox.MoveActiveSignalCallback): number
    on(sigName: "move-active", callback: ComboBox.MoveActiveSignalCallback): number
    once(sigName: "move-active", callback: ComboBox.MoveActiveSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-active", ...args: any[]): void
    connect(sigName: "popdown", callback: ComboBox.PopdownSignalCallback): number
    on(sigName: "popdown", callback: ComboBox.PopdownSignalCallback): number
    once(sigName: "popdown", callback: ComboBox.PopdownSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popdown", ...args: any[]): void
    connect(sigName: "popup", callback: ComboBox.PopupSignalCallback): number
    on(sigName: "popup", callback: ComboBox.PopupSignalCallback): number
    once(sigName: "popup", callback: ComboBox.PopupSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popup", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ComboBox

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::add-tearoffs", callback: any): number
    on(sigName: "notify::add-tearoffs", callback: any): number
    once(sigName: "notify::add-tearoffs", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::add-tearoffs", ...args: any[]): void
    connect(sigName: "notify::button-sensitivity", callback: any): number
    on(sigName: "notify::button-sensitivity", callback: any): number
    once(sigName: "notify::button-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::button-sensitivity", ...args: any[]): void
    connect(sigName: "notify::column-span-column", callback: any): number
    on(sigName: "notify::column-span-column", callback: any): number
    once(sigName: "notify::column-span-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::column-span-column", ...args: any[]): void
    connect(sigName: "notify::entry-text-column", callback: any): number
    on(sigName: "notify::entry-text-column", callback: any): number
    once(sigName: "notify::entry-text-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::entry-text-column", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: any): number
    on(sigName: "notify::focus-on-click", callback: any): number
    once(sigName: "notify::focus-on-click", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::has-entry", callback: any): number
    on(sigName: "notify::has-entry", callback: any): number
    once(sigName: "notify::has-entry", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-entry", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: any): number
    on(sigName: "notify::has-frame", callback: any): number
    once(sigName: "notify::has-frame", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::popup-shown", callback: any): number
    on(sigName: "notify::popup-shown", callback: any): number
    once(sigName: "notify::popup-shown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::popup-shown", ...args: any[]): void
    connect(sigName: "notify::row-span-column", callback: any): number
    on(sigName: "notify::row-span-column", callback: any): number
    once(sigName: "notify::row-span-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::row-span-column", ...args: any[]): void
    connect(sigName: "notify::tearoff-title", callback: any): number
    on(sigName: "notify::tearoff-title", callback: any): number
    once(sigName: "notify::tearoff-title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-title", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: any): number
    on(sigName: "notify::editing-canceled", callback: any): number
    once(sigName: "notify::editing-canceled", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A GtkComboBox is a widget that allows the user to choose from a list of
 * valid choices. The GtkComboBox displays the selected choice. When
 * activated, the GtkComboBox displays a popup which allows the user to
 * make a new choice. The style in which the selected value is displayed,
 * and the style of the popup is determined by the current theme. It may
 * be similar to a Windows-style combo box.
 * 
 * The GtkComboBox uses the model-view pattern; the list of valid choices
 * is specified in the form of a tree model, and the display of the choices
 * can be adapted to the data in the model by using cell renderers, as you
 * would in a tree view. This is possible since GtkComboBox implements the
 * #GtkCellLayout interface. The tree model holding the valid choices is
 * not restricted to a flat list, it can be a real tree, and the popup will
 * reflect the tree structure.
 * 
 * To allow the user to enter values not in the model, the 'has-entry'
 * property allows the GtkComboBox to contain a #GtkEntry. This entry
 * can be accessed by calling gtk_bin_get_child() on the combo box.
 * 
 * For a simple list of textual choices, the model-view API of GtkComboBox
 * can be a bit overwhelming. In this case, #GtkComboBoxText offers a
 * simple alternative. Both GtkComboBox and #GtkComboBoxText can contain
 * an entry.
 * @class 
 */
export class ComboBox extends Bin {

    // Own properties of Gtk-2.0.Gtk.ComboBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.ComboBox

    constructor(config?: ComboBox.ConstructorProperties) 
    /**
     * Creates a new empty #GtkComboBox.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new empty #GtkComboBox.
     * @constructor 
     */
    static new(): ComboBox
    /**
     * Convenience function which constructs a new text combo box, which is a
     * #GtkComboBox just displaying strings. If you use this function to create
     * a text combo box, you should only manipulate its data source with the
     * following convenience functions: gtk_combo_box_append_text(),
     * gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and
     * gtk_combo_box_remove_text().
     * @constructor 
     */
    static newText(): ComboBox
    /**
     * Creates a new empty #GtkComboBox with an entry.
     * @constructor 
     */
    static newWithEntry(): ComboBox
    /**
     * Creates a new #GtkComboBox with the model initialized to `model`.
     * @constructor 
     * @param model A #GtkTreeModel.
     */
    static newWithModel(model: TreeModel): ComboBox
    /**
     * Creates a new empty #GtkComboBox with an entry
     * and with the model initialized to `model`.
     * @constructor 
     * @param model 
     */
    static newWithModelAndEntry(model: TreeModel): ComboBox
    _init(config?: ComboBox.ConstructorProperties): void
}

export module ComboBoxEntry {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellEditable.ConstructorProperties, CellLayout.ConstructorProperties, ComboBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ComboBoxEntry

        textColumn?: number | null
    }

}

export interface ComboBoxEntry extends Atk.ImplementorIface, Buildable, CellEditable, CellLayout {

    // Own properties of Gtk-2.0.Gtk.ComboBoxEntry

    textColumn: number

    // Own fields of Gtk-2.0.Gtk.ComboBoxEntry

    parentInstance: any

    // Owm methods of Gtk-2.0.Gtk.ComboBoxEntry

    /**
     * Returns the column which `entry_box` is using to get the strings from.
     */
    getTextColumn(): number
    /**
     * Sets the model column which `entry_box` should use to get strings from
     * to be `text_column`.
     * @param textColumn A column in `model` to get the strings from.
     */
    setTextColumn(textColumn: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ComboBoxEntry

    connect(sigName: "notify::text-column", callback: any): number
    on(sigName: "notify::text-column", callback: any): number
    once(sigName: "notify::text-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-column", ...args: any[]): void
    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::add-tearoffs", callback: any): number
    on(sigName: "notify::add-tearoffs", callback: any): number
    once(sigName: "notify::add-tearoffs", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::add-tearoffs", ...args: any[]): void
    connect(sigName: "notify::button-sensitivity", callback: any): number
    on(sigName: "notify::button-sensitivity", callback: any): number
    once(sigName: "notify::button-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::button-sensitivity", ...args: any[]): void
    connect(sigName: "notify::column-span-column", callback: any): number
    on(sigName: "notify::column-span-column", callback: any): number
    once(sigName: "notify::column-span-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::column-span-column", ...args: any[]): void
    connect(sigName: "notify::entry-text-column", callback: any): number
    on(sigName: "notify::entry-text-column", callback: any): number
    once(sigName: "notify::entry-text-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::entry-text-column", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: any): number
    on(sigName: "notify::focus-on-click", callback: any): number
    once(sigName: "notify::focus-on-click", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::has-entry", callback: any): number
    on(sigName: "notify::has-entry", callback: any): number
    once(sigName: "notify::has-entry", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-entry", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: any): number
    on(sigName: "notify::has-frame", callback: any): number
    once(sigName: "notify::has-frame", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::popup-shown", callback: any): number
    on(sigName: "notify::popup-shown", callback: any): number
    once(sigName: "notify::popup-shown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::popup-shown", ...args: any[]): void
    connect(sigName: "notify::row-span-column", callback: any): number
    on(sigName: "notify::row-span-column", callback: any): number
    once(sigName: "notify::row-span-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::row-span-column", ...args: any[]): void
    connect(sigName: "notify::tearoff-title", callback: any): number
    on(sigName: "notify::tearoff-title", callback: any): number
    once(sigName: "notify::tearoff-title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-title", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: any): number
    on(sigName: "notify::editing-canceled", callback: any): number
    once(sigName: "notify::editing-canceled", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ComboBoxEntry extends ComboBox {

    // Own properties of Gtk-2.0.Gtk.ComboBoxEntry

    static name: string

    // Constructors of Gtk-2.0.Gtk.ComboBoxEntry

    constructor(config?: ComboBoxEntry.ConstructorProperties) 
    /**
     * Creates a new #GtkComboBoxEntry which has a #GtkEntry as child. After
     * construction, you should set a model using gtk_combo_box_set_model() and a
     * text column using gtk_combo_box_entry_set_text_column().
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkComboBoxEntry which has a #GtkEntry as child. After
     * construction, you should set a model using gtk_combo_box_set_model() and a
     * text column using gtk_combo_box_entry_set_text_column().
     * @constructor 
     */
    static new(): ComboBoxEntry
    /**
     * Convenience function which constructs a new editable text combo box, which
     * is a #GtkComboBoxEntry just displaying strings. If you use this function to
     * create a text combo box, you should only manipulate its data source with
     * the following convenience functions: gtk_combo_box_append_text(),
     * gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and
     * gtk_combo_box_remove_text().
     * @constructor 
     */
    static newText(): ComboBoxEntry
    /**
     * Creates a new #GtkComboBoxEntry which has a #GtkEntry as child and a list
     * of strings as popup. You can get the #GtkEntry from a #GtkComboBoxEntry
     * using GTK_ENTRY (GTK_BIN (combo_box_entry)->child). To add and remove
     * strings from the list, just modify `model` using its data manipulation
     * API.
     * @constructor 
     * @param model A #GtkTreeModel.
     * @param textColumn A column in `model` to get the strings from.
     */
    static newWithModel(model: TreeModel, textColumn: number): ComboBoxEntry

    // Overloads of newWithModel

    /**
     * Creates a new #GtkComboBox with the model initialized to `model`.
     * @constructor 
     * @param model A #GtkTreeModel.
     */
    static newWithModel(model: TreeModel): ComboBox
    _init(config?: ComboBoxEntry.ConstructorProperties): void
}

export module ComboBoxText {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellEditable.ConstructorProperties, CellLayout.ConstructorProperties, ComboBox.ConstructorProperties {
    }

}

export interface ComboBoxText extends Atk.ImplementorIface, Buildable, CellEditable, CellLayout {

    // Conflicting properties

    parentInstance: any

    // Owm methods of Gtk-2.0.Gtk.ComboBoxText

    /**
     * Appends `string` to the list of strings stored in `combo_box`.
     * @param text A string
     */
    appendText(text: string): void
    /**
     * Returns the currently active string in `combo_box,` or %NULL
     * if none is selected. If `combo_box` contains an entry, this
     * function will return its contents (which will not necessarily
     * be an item from the list).
     */
    getActiveText(): string

    // Overloads of getActiveText

    /**
     * Returns the currently active string in `combo_box` or %NULL if none
     * is selected. Note that you can only use this function with combo
     * boxes constructed with gtk_combo_box_new_text() and with
     * #GtkComboBoxEntry<!-- -->s.
     * @virtual 
     */
    getActiveText(): string
    /**
     * Inserts `string` at `position` in the list of strings stored in `combo_box`.
     * @param position An index to insert `text`
     * @param text A string
     */
    insertText(position: number, text: string): void
    /**
     * Prepends `string` to the list of strings stored in `combo_box`.
     * @param text A string
     */
    prependText(text: string): void
    /**
     * Removes the string at `position` from `combo_box`.
     * @param position Index of the item to remove
     */
    remove(position: number): void

    // Overloads of remove

    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it while it's not inside
     * a container, using g_object_ref(). If you don't want to use `widget`
     * again it's usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Widget): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ComboBoxText

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::add-tearoffs", callback: any): number
    on(sigName: "notify::add-tearoffs", callback: any): number
    once(sigName: "notify::add-tearoffs", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::add-tearoffs", ...args: any[]): void
    connect(sigName: "notify::button-sensitivity", callback: any): number
    on(sigName: "notify::button-sensitivity", callback: any): number
    once(sigName: "notify::button-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::button-sensitivity", ...args: any[]): void
    connect(sigName: "notify::column-span-column", callback: any): number
    on(sigName: "notify::column-span-column", callback: any): number
    once(sigName: "notify::column-span-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::column-span-column", ...args: any[]): void
    connect(sigName: "notify::entry-text-column", callback: any): number
    on(sigName: "notify::entry-text-column", callback: any): number
    once(sigName: "notify::entry-text-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::entry-text-column", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: any): number
    on(sigName: "notify::focus-on-click", callback: any): number
    once(sigName: "notify::focus-on-click", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::has-entry", callback: any): number
    on(sigName: "notify::has-entry", callback: any): number
    once(sigName: "notify::has-entry", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-entry", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: any): number
    on(sigName: "notify::has-frame", callback: any): number
    once(sigName: "notify::has-frame", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::popup-shown", callback: any): number
    on(sigName: "notify::popup-shown", callback: any): number
    once(sigName: "notify::popup-shown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::popup-shown", ...args: any[]): void
    connect(sigName: "notify::row-span-column", callback: any): number
    on(sigName: "notify::row-span-column", callback: any): number
    once(sigName: "notify::row-span-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::row-span-column", ...args: any[]): void
    connect(sigName: "notify::tearoff-title", callback: any): number
    on(sigName: "notify::tearoff-title", callback: any): number
    once(sigName: "notify::tearoff-title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-title", ...args: any[]): void
    connect(sigName: "notify::wrap-width", callback: any): number
    on(sigName: "notify::wrap-width", callback: any): number
    once(sigName: "notify::wrap-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: any): number
    on(sigName: "notify::editing-canceled", callback: any): number
    once(sigName: "notify::editing-canceled", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A GtkComboBoxText is a simple variant of #GtkComboBox that hides
 * the model-view complexity for simple text-only use cases.
 * 
 * To create a GtkComboBoxText, use gtk_combo_box_text_new() or
 * gtk_combo_box_text_new_with_entry().
 * 
 * You can add items to a GtkComboBoxText with
 * gtk_combo_box_text_append_text(), gtk_combo_box_text_insert_text()
 * or gtk_combo_box_text_prepend_text() and remove options with
 * gtk_combo_box_text_remove().
 * 
 * If the GtkComboBoxText contains an entry (via the 'has-entry' property),
 * its contents can be retrieved using gtk_combo_box_text_get_active_text().
 * The entry itself can be accessed by calling gtk_bin_get_child() on the
 * combo box.
 * 
 * <refsect2 id="GtkComboBoxText-BUILDER-UI">
 * <title>GtkComboBoxText as GtkBuildable</title>
 * <para>
 * The GtkComboBoxText implementation of the GtkBuildable interface
 * supports adding items directly using the &lt;items&gt element
 * and specifying &lt;item&gt; elements for each item. Each &lt;item&gt;
 * element supports the regular translation attributes "translatable",
 * "context" and "comments".
 * </para>
 * <example>
 * <title>A UI definition fragment specifying GtkComboBoxText items</title>
 * <programlisting><![CDATA[
 * <object class="GtkComboBoxText">
 *   <items>
 *     <item translatable="yes">Factory</item>
 *     <item translatable="yes">Home</item>
 *     <item translatable="yes">Subway</item>
 *   </items>
 * </object>
 * ]]></programlisting>
 * </example>
 * </refsect2>
 * @class 
 */
export class ComboBoxText extends ComboBox {

    // Own properties of Gtk-2.0.Gtk.ComboBoxText

    static name: string

    // Constructors of Gtk-2.0.Gtk.ComboBoxText

    constructor(config?: ComboBoxText.ConstructorProperties) 
    /**
     * Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
     * strings. See gtk_combo_box_entry_new_with_text().
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
     * strings. See gtk_combo_box_entry_new_with_text().
     * @constructor 
     */
    static new(): ComboBoxText
    /**
     * Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
     * strings. The combo box created by this function has an entry.
     * @constructor 
     */
    static newWithEntry(): ComboBoxText
    _init(config?: ComboBoxText.ConstructorProperties): void
}

export module Container {

    // Signal callback interfaces

    /**
     * Signal callback interface for `add`
     */
    export interface AddSignalCallback {
        (object: Widget): void
    }

    /**
     * Signal callback interface for `check-resize`
     */
    export interface CheckResizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `remove`
     */
    export interface RemoveSignalCallback {
        (object: Widget): void
    }

    /**
     * Signal callback interface for `set-focus-child`
     */
    export interface SetFocusChildSignalCallback {
        (object: Widget): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Container

        borderWidth?: number | null
        child?: Widget | null
        resizeMode?: ResizeMode | null
    }

}

export interface Container extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Container

    child: Widget
    resizeMode: ResizeMode

    // Own fields of Gtk-2.0.Gtk.Container

    widget: Widget
    focusChild: Widget
    borderWidth: number

    // Owm methods of Gtk-2.0.Gtk.Container

    // Has conflict: add(widget: Widget): void
    // Has conflict: checkResize(): void
    /**
     * Gets the value of a child property for `child` and `container`.
     * @param child a widget which is a child of `container`
     * @param propertyName the name of the property to get
     * @param value a location to return the value
     */
    childGetProperty(child: Widget, propertyName: string, value: any): void
    /**
     * Sets a child property for `child` and `container`.
     * @param child a widget which is a child of `container`
     * @param propertyName the name of the property to set
     * @param value the value to set the property to
     */
    childSetProperty(child: Widget, propertyName: string, value: any): void
    // Has conflict: childType(): GObject.GType
    /**
     * Invokes `callback` on each non-internal child of `container`. See
     * gtk_container_forall() for details on what constitutes an
     * "internal" child.  Most applications should use
     * gtk_container_foreach(), rather than gtk_container_forall().
     * @param callback a callback
     */
    foreach(callback: Callback): void
    /**
     * Retrieves the border width of the container. See
     * gtk_container_set_border_width().
     */
    getBorderWidth(): number
    /**
     * Returns the container's non-internal children. See
     * gtk_container_forall() for details on what constitutes an "internal" child.
     */
    getChildren(): Widget[]
    /**
     * Retrieves the focus chain of the container, if one has been
     * set explicitly. If no focus chain has been explicitly
     * set, GTK+ computes the focus chain based on the positions
     * of the children. In that case, GTK+ stores %NULL in
     * `focusable_widgets` and returns %FALSE.
     */
    getFocusChain(): [ /* returnType */ boolean, /* focusableWidgets */ Widget[] ]
    /**
     * Returns the current focus child widget inside `container`. This is not the
     * currently focused widget. That can be obtained by calling
     * gtk_window_get_focus().
     */
    getFocusChild(): Widget
    /**
     * Retrieves the horizontal focus adjustment for the container. See
     * gtk_container_set_focus_hadjustment ().
     */
    getFocusHadjustment(): Adjustment
    /**
     * Retrieves the vertical focus adjustment for the container. See
     * gtk_container_set_focus_vadjustment().
     */
    getFocusVadjustment(): Adjustment
    /**
     * Returns the resize mode for the container. See
     * gtk_container_set_resize_mode ().
     */
    getResizeMode(): ResizeMode
    /**
     * When a container receives an expose event, it must send synthetic
     * expose events to all children that don't have their own #GdkWindows.
     * This function provides a convenient way of doing this. A container,
     * when it receives an expose event, calls gtk_container_propagate_expose()
     * once for each child, passing in the event the container received.
     * 
     * gtk_container_propagate_expose() takes care of deciding whether
     * an expose event needs to be sent to the child, intersecting
     * the event's area with the child area, and sending the event.
     * 
     * In most cases, a container can simply either simply inherit the
     * #GtkWidget::expose implementation from #GtkContainer, or, do some drawing
     * and then chain to the ::expose implementation from #GtkContainer.
     * 
     * Note that the ::expose-event signal has been replaced by a ::draw
     * signal in GTK+ 3, and consequently, gtk_container_propagate_expose()
     * has been replaced by gtk_container_propagate_draw().
     * The <link linkend="http://library.gnome.org/devel/gtk3/3.0/gtk-migrating-2-to-3.html">GTK+ 3 migration guide</link>
     * for hints on how to port from ::expose-event to ::draw.
     * @param child a child of `container`
     * @param event a expose event sent to container
     */
    propagateExpose(child: Widget, event: Gdk.EventExpose): void
    // Has conflict: remove(widget: Widget): void
    resizeChildren(): void
    /**
     * Sets the border width of the container.
     * 
     * The border width of a container is the amount of space to leave
     * around the outside of the container. The only exception to this is
     * #GtkWindow; because toplevel windows can't leave space outside,
     * they leave the space inside. The border is added on all sides of
     * the container. To add space to only one side, one approach is to
     * create a #GtkAlignment widget, call gtk_widget_set_size_request()
     * to give it a size, and place it on the side of the container as
     * a spacer.
     * @param borderWidth amount of blank space to leave <emphasis>outside</emphasis>   the container. Valid values are in the range 0-65535 pixels.
     */
    setBorderWidth(borderWidth: number): void
    /**
     * Sets a focus chain, overriding the one computed automatically by GTK+.
     * 
     * In principle each widget in the chain should be a descendant of the
     * container, but this is not enforced by this method, since it's allowed
     * to set the focus chain before you pack the widgets, or have a widget
     * in the chain that isn't always packed. The necessary checks are done
     * when the focus chain is actually traversed.
     * @param focusableWidgets      the new focus chain
     */
    setFocusChain(focusableWidgets: Widget[]): void
    // Has conflict: setFocusChild(child: Widget | null): void
    /**
     * Hooks up an adjustment to focus handling in a container, so when a child
     * of the container is focused, the adjustment is scrolled to show that
     * widget. This function sets the horizontal alignment.
     * See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
     * the adjustment and gtk_container_set_focus_vadjustment() for setting
     * the vertical adjustment.
     * 
     * The adjustments have to be in pixel units and in the same coordinate
     * system as the allocation for immediate children of the container.
     * @param adjustment an adjustment which should be adjusted when the focus is   moved among the descendents of `container`
     */
    setFocusHadjustment(adjustment: Adjustment): void
    /**
     * Hooks up an adjustment to focus handling in a container, so when a
     * child of the container is focused, the adjustment is scrolled to
     * show that widget. This function sets the vertical alignment. See
     * gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
     * the adjustment and gtk_container_set_focus_hadjustment() for setting
     * the horizontal adjustment.
     * 
     * The adjustments have to be in pixel units and in the same coordinate
     * system as the allocation for immediate children of the container.
     * @param adjustment an adjustment which should be adjusted when the focus   is moved among the descendents of `container`
     */
    setFocusVadjustment(adjustment: Adjustment): void
    /**
     * Sets the `reallocate_redraws` flag of the container to the given value.
     * 
     * Containers requesting reallocation redraws get automatically
     * redrawn if any of their children changed allocation.
     * @param needsRedraws the new value for the container's `reallocate_redraws` flag
     */
    setReallocateRedraws(needsRedraws: boolean): void
    /**
     * Sets the resize mode for the container.
     * 
     * The resize mode of a container determines whether a resize request
     * will be passed to the container's parent, queued for later execution
     * or executed immediately.
     * @param resizeMode the new resize mode
     */
    setResizeMode(resizeMode: ResizeMode): void
    /**
     * Removes a focus chain explicitly set with gtk_container_set_focus_chain().
     */
    unsetFocusChain(): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Container

    /**
     * Adds `widget` to `container`. Typically used for simple containers
     * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
     * layout containers such as #GtkBox or #GtkTable, this function will
     * pick default packing parameters that may not be correct.  So
     * consider functions such as gtk_box_pack_start() and
     * gtk_table_attach() as an alternative to gtk_container_add() in
     * those cases. A widget may be added to only one container at a time;
     * you can't place the same widget inside two different containers.
     * @virtual 
     * @param widget a widget to be placed inside `container`
     */
    add(widget: Widget): void
    checkResize(): void
    /**
     * Returns the type of the children supported by the container.
     * 
     * Note that this may return %G_TYPE_NONE to indicate that no more
     * children can be added, e.g. for a #GtkPaned which already has two
     * children.
     * @virtual 
     */
    childType(): GObject.GType
    compositeName(child: Widget): string
    getChildProperty(child: Widget, propertyId: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it while it's not inside
     * a container, using g_object_ref(). If you don't want to use `widget`
     * again it's usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Widget): void
    setChildProperty(child: Widget, propertyId: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Sets, or unsets if `child` is %NULL, the focused child of `container`.
     * 
     * This function emits the GtkContainer::set_focus_child signal of
     * `container`. Implementations of #GtkContainer can override the
     * default behaviour by overriding the class closure of this signal.
     * 
     * This is function is mostly meant to be used by widgets. Applications can use
     * gtk_widget_grab_focus() to manualy set the focus to a specific widget.
     * @virtual 
     * @param widget 
     */
    setFocusChild(widget: Widget): void

    // Own signals of Gtk-2.0.Gtk.Container

    connect(sigName: "add", callback: Container.AddSignalCallback): number
    on(sigName: "add", callback: Container.AddSignalCallback): number
    once(sigName: "add", callback: Container.AddSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "add", ...args: any[]): void
    connect(sigName: "check-resize", callback: Container.CheckResizeSignalCallback): number
    on(sigName: "check-resize", callback: Container.CheckResizeSignalCallback): number
    once(sigName: "check-resize", callback: Container.CheckResizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "check-resize", ...args: any[]): void
    connect(sigName: "remove", callback: Container.RemoveSignalCallback): number
    on(sigName: "remove", callback: Container.RemoveSignalCallback): number
    once(sigName: "remove", callback: Container.RemoveSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "remove", ...args: any[]): void
    connect(sigName: "set-focus-child", callback: Container.SetFocusChildSignalCallback): number
    on(sigName: "set-focus-child", callback: Container.SetFocusChildSignalCallback): number
    once(sigName: "set-focus-child", callback: Container.SetFocusChildSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-focus-child", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Container

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Container extends Widget {

    // Own properties of Gtk-2.0.Gtk.Container

    static name: string

    // Constructors of Gtk-2.0.Gtk.Container

    constructor(config?: Container.ConstructorProperties) 
    _init(config?: Container.ConstructorProperties): void
}

export module Curve {

    // Signal callback interfaces

    /**
     * Signal callback interface for `curve-type-changed`
     */
    export interface CurveTypeChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, DrawingArea.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Curve

        curveType?: CurveType | null
        maxX?: number | null
        maxY?: number | null
        minX?: number | null
        minY?: number | null
    }

}

export interface Curve extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Curve

    graph: DrawingArea
    cursorType: number
    minX: number
    maxX: number
    minY: number
    maxY: number
    pixmap: Gdk.Pixmap
    curveType: CurveType
    height: number
    grabPoint: number
    last: number
    numPoints: number
    point: Gdk.Point
    numCtlpoints: number
    ctlpoint: number

    // Owm methods of Gtk-2.0.Gtk.Curve

    getVector(veclen: number, vector: number): void
    reset(): void
    setCurveType(type: CurveType): void
    setGamma(gamma: number): void
    setRange(minX: number, maxX: number, minY: number, maxY: number): void
    setVector(veclen: number, vector: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Curve

    curveTypeChanged(): void

    // Own signals of Gtk-2.0.Gtk.Curve

    connect(sigName: "curve-type-changed", callback: Curve.CurveTypeChangedSignalCallback): number
    on(sigName: "curve-type-changed", callback: Curve.CurveTypeChangedSignalCallback): number
    once(sigName: "curve-type-changed", callback: Curve.CurveTypeChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "curve-type-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Curve

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Curve extends DrawingArea {

    // Own properties of Gtk-2.0.Gtk.Curve

    static name: string

    // Constructors of Gtk-2.0.Gtk.Curve

    constructor(config?: Curve.ConstructorProperties) 
    constructor() 
    static new(): Curve
    _init(config?: Curve.ConstructorProperties): void
}

export module Dialog {

    // Signal callback interfaces

    /**
     * Signal callback interface for `close`
     */
    export interface CloseSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `response`
     */
    export interface ResponseSignalCallback {
        (responseId: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Window.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Dialog

        /**
         * When %TRUE, the dialog has a separator bar above its buttons.
         */
        hasSeparator?: boolean | null
    }

}

export interface Dialog extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Dialog

    /**
     * When %TRUE, the dialog has a separator bar above its buttons.
     */
    hasSeparator: boolean

    // Conflicting properties

    hasFocus: any

    // Own fields of Gtk-2.0.Gtk.Dialog

    window: Window & Gdk.Window
    vbox: Widget
    actionArea: Widget

    // Owm methods of Gtk-2.0.Gtk.Dialog

    /**
     * Adds an activatable widget to the action area of a #GtkDialog,
     * connecting a signal handler that will emit the #GtkDialog::response
     * signal on the dialog when the widget is activated. The widget is
     * appended to the end of the dialog's action area. If you want to add a
     * non-activatable widget, simply pack it into the `action_area` field
     * of the #GtkDialog struct.
     * @param child an activatable widget
     * @param responseId response ID for `child`
     */
    addActionWidget(child: Widget, responseId: number): void
    /**
     * Adds a button with the given text (or a stock button, if `button_text` is a
     * stock ID) and sets things up so that clicking the button will emit the
     * #GtkDialog::response signal with the given `response_id`. The button is
     * appended to the end of the dialog's action area. The button widget is
     * returned, but usually you don't need it.
     * @param buttonText text of button, or stock ID
     * @param responseId response ID for the button
     */
    addButton(buttonText: string, responseId: number): Widget
    /**
     * Returns the action area of `dialog`.
     */
    getActionArea(): Widget
    /**
     * Returns the content area of `dialog`.
     */
    getContentArea(): Widget
    /**
     * Accessor for whether the dialog has a separator.
     */
    getHasSeparator(): boolean
    /**
     * Gets the response id of a widget in the action area
     * of a dialog.
     * @param widget a widget in the action area of `dialog`
     */
    getResponseForWidget(widget: Widget): number
    /**
     * Gets the widget button that uses the given response ID in the action area
     * of a dialog.
     * @param responseId the response ID used by the `dialog` widget
     */
    getWidgetForResponse(responseId: number): Widget
    // Has conflict: response(responseId: number): void
    /**
     * Blocks in a recursive main loop until the `dialog` either emits the
     * #GtkDialog::response signal, or is destroyed. If the dialog is
     * destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns
     * #GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the
     * ::response signal emission.
     * 
     * Before entering the recursive main loop, gtk_dialog_run() calls
     * gtk_widget_show() on the dialog for you. Note that you still
     * need to show any children of the dialog yourself.
     * 
     * During gtk_dialog_run(), the default behavior of #GtkWidget::delete-event
     * is disabled; if the dialog receives ::delete_event, it will not be
     * destroyed as windows usually are, and gtk_dialog_run() will return
     * #GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog
     * will be modal. You can force gtk_dialog_run() to return at any time by
     * calling gtk_dialog_response() to emit the ::response signal. Destroying
     * the dialog during gtk_dialog_run() is a very bad idea, because your
     * post-run code won't know whether the dialog was destroyed or not.
     * 
     * After gtk_dialog_run() returns, you are responsible for hiding or
     * destroying the dialog if you wish to do so.
     * 
     * Typical usage of this function might be:
     * |[
     *   gint result = gtk_dialog_run (GTK_DIALOG (dialog));
     *   switch (result)
     *     {
     *       case GTK_RESPONSE_ACCEPT:
     *          do_application_specific_something ();
     *          break;
     *       default:
     *          do_nothing_since_dialog_was_cancelled ();
     *          break;
     *     }
     *   gtk_widget_destroy (dialog);
     * ```
     * 
     * 
     * Note that even though the recursive main loop gives the effect of a
     * modal dialog (it prevents the user from interacting with other
     * windows in the same window group while the dialog is run), callbacks
     * such as timeouts, IO channel watches, DND drops, etc, <emphasis>will</emphasis>
     * be triggered during a gtk_dialog_run() call.
     */
    run(): number
    /**
     * Sets an alternative button order. If the
     * #GtkSettings:gtk-alternative-button-order setting is set to %TRUE,
     * the dialog buttons are reordered according to the order of the
     * response ids in `new_order`.
     * 
     * See gtk_dialog_set_alternative_button_order() for more information.
     * 
     * This function is for use by language bindings.
     * @param newOrder an array of response ids of     `dialog'`s buttons
     */
    setAlternativeButtonOrderFromArray(newOrder: number[]): void
    /**
     * Sets the last widget in the dialog's action area with the given `response_id`
     * as the default widget for the dialog. Pressing "Enter" normally activates
     * the default widget.
     * @param responseId a response ID
     */
    setDefaultResponse(responseId: number): void
    /**
     * Sets whether the dialog has a separator above the buttons.
     * @param setting %TRUE to have a separator
     */
    setHasSeparator(setting: boolean): void
    /**
     * Calls <literal>gtk_widget_set_sensitive (widget, `setting)`</literal>
     * for each widget in the dialog's action area with the given `response_id`.
     * A convenient way to sensitize/desensitize dialog buttons.
     * @param responseId a response ID
     * @param setting %TRUE for sensitive
     */
    setResponseSensitive(responseId: number, setting: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Dialog

    close(): void
    /**
     * Emits the #GtkDialog::response signal with the given response ID.
     * Used to indicate that the user has responded to the dialog in some way;
     * typically either you or gtk_dialog_run() will be monitoring the
     * ::response signal and take appropriate action.
     * @virtual 
     * @param responseId response ID
     */
    response(responseId: number): void

    // Own signals of Gtk-2.0.Gtk.Dialog

    connect(sigName: "close", callback: Dialog.CloseSignalCallback): number
    on(sigName: "close", callback: Dialog.CloseSignalCallback): number
    once(sigName: "close", callback: Dialog.CloseSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "close", ...args: any[]): void
    connect(sigName: "response", callback: Dialog.ResponseSignalCallback): number
    on(sigName: "response", callback: Dialog.ResponseSignalCallback): number
    once(sigName: "response", callback: Dialog.ResponseSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "response", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Dialog

    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Dialog extends Window {

    // Own properties of Gtk-2.0.Gtk.Dialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.Dialog

    constructor(config?: Dialog.ConstructorProperties) 
    constructor() 
    static new(): Dialog

    // Overloads of new

    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: Dialog.ConstructorProperties): void
}

export module DrawingArea {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {
    }

}

export interface DrawingArea extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.DrawingArea

    widget: Widget
    drawData: object

    // Owm methods of Gtk-2.0.Gtk.DrawingArea

    size(width: number, height: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.DrawingArea

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class DrawingArea extends Widget {

    // Own properties of Gtk-2.0.Gtk.DrawingArea

    static name: string

    // Constructors of Gtk-2.0.Gtk.DrawingArea

    constructor(config?: DrawingArea.ConstructorProperties) 
    constructor() 
    static new(): DrawingArea
    _init(config?: DrawingArea.ConstructorProperties): void
}

export module Entry {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `backspace`
     */
    export interface BackspaceSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `copy-clipboard`
     */
    export interface CopyClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cut-clipboard`
     */
    export interface CutClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `delete-from-cursor`
     */
    export interface DeleteFromCursorSignalCallback {
        (type: DeleteType, count: number): void
    }

    /**
     * Signal callback interface for `icon-press`
     */
    export interface IconPressSignalCallback {
        (iconPos: EntryIconPosition, event: Gdk.Event): void
    }

    /**
     * Signal callback interface for `icon-release`
     */
    export interface IconReleaseSignalCallback {
        (iconPos: EntryIconPosition, event: Gdk.Event): void
    }

    /**
     * Signal callback interface for `insert-at-cursor`
     */
    export interface InsertAtCursorSignalCallback {
        (string: string): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    export interface MoveCursorSignalCallback {
        (step: MovementStep, count: number, extendSelection: boolean): void
    }

    /**
     * Signal callback interface for `paste-clipboard`
     */
    export interface PasteClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `populate-popup`
     */
    export interface PopulatePopupSignalCallback {
        (menu: Menu): void
    }

    /**
     * Signal callback interface for `preedit-changed`
     */
    export interface PreeditChangedSignalCallback {
        (preedit: string): void
    }

    /**
     * Signal callback interface for `toggle-overwrite`
     */
    export interface ToggleOverwriteSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellEditable.ConstructorProperties, Editable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Entry

        activatesDefault?: boolean | null
        buffer?: EntryBuffer | null
        /**
         * Whether password entries will show a warning when Caps Lock is on.
         * 
         * Note that the warning is shown using a secondary icon, and thus
         * does not work if you are using the secondary icon position for some
         * other purpose.
         */
        capsLockWarning?: boolean | null
        editable?: boolean | null
        hasFrame?: boolean | null
        /**
         * Which IM (input method) module should be used for this entry.
         * See #GtkIMContext.
         * 
         * Setting this to a non-%NULL value overrides the
         * system-wide IM module setting. See the GtkSettings
         * #GtkSettings:gtk-im-module property.
         */
        imModule?: string | null
        /**
         * Sets the text area's border between the text and the frame.
         */
        innerBorder?: Border | null
        /**
         * The invisible character is used when masking entry contents (in
         * \"password mode\")"). When it is not explicitly set with the
         * #GtkEntry::invisible-char property, GTK+ determines the character
         * to use from a list of possible candidates, depending on availability
         * in the current font.
         * 
         * This style property allows the theme to prepend a character
         * to the list of candidates.
         */
        invisibleChar?: number | null
        /**
         * Whether the invisible char has been set for the #GtkEntry.
         */
        invisibleCharSet?: boolean | null
        maxLength?: number | null
        /**
         * If text is overwritten when typing in the #GtkEntry.
         */
        overwriteMode?: boolean | null
        /**
         * Whether the primary icon is activatable.
         * 
         * GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release
         * signals only on sensitive, activatable icons.
         * 
         * Sensitive, but non-activatable icons can be used for purely
         * informational purposes.
         */
        primaryIconActivatable?: boolean | null
        /**
         * The #GIcon to use for the primary icon for the entry.
         */
        primaryIconGicon?: Gio.Icon | null
        /**
         * The icon name to use for the primary icon for the entry.
         */
        primaryIconName?: string | null
        /**
         * A pixbuf to use as the primary icon for the entry.
         */
        primaryIconPixbuf?: GdkPixbuf.Pixbuf | null
        /**
         * Whether the primary icon is sensitive.
         * 
         * An insensitive icon appears grayed out. GTK+ does not emit the
         * #GtkEntry::icon-press and #GtkEntry::icon-release signals and
         * does not allow DND from insensitive icons.
         * 
         * An icon should be set insensitive if the action that would trigger
         * when clicked is currently not available.
         */
        primaryIconSensitive?: boolean | null
        /**
         * The stock id to use for the primary icon for the entry.
         */
        primaryIconStock?: string | null
        /**
         * The contents of the tooltip on the primary icon, which is marked up
         * with the <link linkend="PangoMarkupFormat">Pango text markup
         * language</link>.
         * 
         * Also see gtk_entry_set_icon_tooltip_markup().
         */
        primaryIconTooltipMarkup?: string | null
        /**
         * The contents of the tooltip on the primary icon.
         * 
         * Also see gtk_entry_set_icon_tooltip_text().
         */
        primaryIconTooltipText?: string | null
        /**
         * The current fraction of the task that's been completed.
         */
        progressFraction?: number | null
        /**
         * The fraction of total entry width to move the progress
         * bouncing block for each call to gtk_entry_progress_pulse().
         */
        progressPulseStep?: number | null
        /**
         * Whether the secondary icon is activatable.
         * 
         * GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release
         * signals only on sensitive, activatable icons.
         * 
         * Sensitive, but non-activatable icons can be used for purely
         * informational purposes.
         */
        secondaryIconActivatable?: boolean | null
        /**
         * The #GIcon to use for the secondary icon for the entry.
         */
        secondaryIconGicon?: Gio.Icon | null
        /**
         * The icon name to use for the secondary icon for the entry.
         */
        secondaryIconName?: string | null
        /**
         * An pixbuf to use as the secondary icon for the entry.
         */
        secondaryIconPixbuf?: GdkPixbuf.Pixbuf | null
        /**
         * Whether the secondary icon is sensitive.
         * 
         * An insensitive icon appears grayed out. GTK+ does not emit the
         * #GtkEntry::icon-press and #GtkEntry::icon-release signals and
         * does not allow DND from insensitive icons.
         * 
         * An icon should be set insensitive if the action that would trigger
         * when clicked is currently not available.
         */
        secondaryIconSensitive?: boolean | null
        /**
         * The stock id to use for the secondary icon for the entry.
         */
        secondaryIconStock?: string | null
        /**
         * The contents of the tooltip on the secondary icon, which is marked up
         * with the <link linkend="PangoMarkupFormat">Pango text markup
         * language</link>.
         * 
         * Also see gtk_entry_set_icon_tooltip_markup().
         */
        secondaryIconTooltipMarkup?: string | null
        /**
         * The contents of the tooltip on the secondary icon.
         * 
         * Also see gtk_entry_set_icon_tooltip_text().
         */
        secondaryIconTooltipText?: string | null
        /**
         * Which kind of shadow to draw around the entry when
         * #GtkEntry:has-frame is set to %TRUE.
         */
        shadowType?: ShadowType | null
        text?: string | null
        /**
         * When %TRUE, pasted multi-line text is truncated to the first line.
         */
        truncateMultiline?: boolean | null
        visibility?: boolean | null
        widthChars?: number | null
        /**
         * The horizontal alignment, from 0 (left) to 1 (right).
         * Reversed for RTL layouts.
         */
        xalign?: number | null
    }

}

export interface Entry extends Atk.ImplementorIface, Buildable, CellEditable, Editable {

    // Own properties of Gtk-2.0.Gtk.Entry

    activatesDefault: boolean
    buffer: EntryBuffer
    /**
     * Whether password entries will show a warning when Caps Lock is on.
     * 
     * Note that the warning is shown using a secondary icon, and thus
     * does not work if you are using the secondary icon position for some
     * other purpose.
     */
    capsLockWarning: boolean
    readonly cursorPosition: number
    hasFrame: boolean
    /**
     * Which IM (input method) module should be used for this entry.
     * See #GtkIMContext.
     * 
     * Setting this to a non-%NULL value overrides the
     * system-wide IM module setting. See the GtkSettings
     * #GtkSettings:gtk-im-module property.
     */
    imModule: string
    /**
     * Sets the text area's border between the text and the frame.
     */
    innerBorder: Border
    /**
     * The invisible character is used when masking entry contents (in
     * \"password mode\")"). When it is not explicitly set with the
     * #GtkEntry::invisible-char property, GTK+ determines the character
     * to use from a list of possible candidates, depending on availability
     * in the current font.
     * 
     * This style property allows the theme to prepend a character
     * to the list of candidates.
     */
    invisibleChar: number
    /**
     * Whether the invisible char has been set for the #GtkEntry.
     */
    invisibleCharSet: boolean
    maxLength: number
    /**
     * Whether the primary icon is activatable.
     * 
     * GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release
     * signals only on sensitive, activatable icons.
     * 
     * Sensitive, but non-activatable icons can be used for purely
     * informational purposes.
     */
    primaryIconActivatable: boolean
    /**
     * The #GIcon to use for the primary icon for the entry.
     */
    primaryIconGicon: Gio.Icon
    /**
     * The icon name to use for the primary icon for the entry.
     */
    primaryIconName: string
    /**
     * A pixbuf to use as the primary icon for the entry.
     */
    primaryIconPixbuf: GdkPixbuf.Pixbuf
    /**
     * Whether the primary icon is sensitive.
     * 
     * An insensitive icon appears grayed out. GTK+ does not emit the
     * #GtkEntry::icon-press and #GtkEntry::icon-release signals and
     * does not allow DND from insensitive icons.
     * 
     * An icon should be set insensitive if the action that would trigger
     * when clicked is currently not available.
     */
    primaryIconSensitive: boolean
    /**
     * The stock id to use for the primary icon for the entry.
     */
    primaryIconStock: string
    /**
     * The representation which is used for the primary icon of the entry.
     */
    readonly primaryIconStorageType: ImageType
    /**
     * The contents of the tooltip on the primary icon, which is marked up
     * with the <link linkend="PangoMarkupFormat">Pango text markup
     * language</link>.
     * 
     * Also see gtk_entry_set_icon_tooltip_markup().
     */
    primaryIconTooltipMarkup: string
    /**
     * The contents of the tooltip on the primary icon.
     * 
     * Also see gtk_entry_set_icon_tooltip_text().
     */
    primaryIconTooltipText: string
    /**
     * The current fraction of the task that's been completed.
     */
    progressFraction: number
    /**
     * The fraction of total entry width to move the progress
     * bouncing block for each call to gtk_entry_progress_pulse().
     */
    progressPulseStep: number
    readonly scrollOffset: number
    /**
     * Whether the secondary icon is activatable.
     * 
     * GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release
     * signals only on sensitive, activatable icons.
     * 
     * Sensitive, but non-activatable icons can be used for purely
     * informational purposes.
     */
    secondaryIconActivatable: boolean
    /**
     * The #GIcon to use for the secondary icon for the entry.
     */
    secondaryIconGicon: Gio.Icon
    /**
     * The icon name to use for the secondary icon for the entry.
     */
    secondaryIconName: string
    /**
     * An pixbuf to use as the secondary icon for the entry.
     */
    secondaryIconPixbuf: GdkPixbuf.Pixbuf
    /**
     * Whether the secondary icon is sensitive.
     * 
     * An insensitive icon appears grayed out. GTK+ does not emit the
     * #GtkEntry::icon-press and #GtkEntry::icon-release signals and
     * does not allow DND from insensitive icons.
     * 
     * An icon should be set insensitive if the action that would trigger
     * when clicked is currently not available.
     */
    secondaryIconSensitive: boolean
    /**
     * The stock id to use for the secondary icon for the entry.
     */
    secondaryIconStock: string
    /**
     * The representation which is used for the secondary icon of the entry.
     */
    readonly secondaryIconStorageType: ImageType
    /**
     * The contents of the tooltip on the secondary icon, which is marked up
     * with the <link linkend="PangoMarkupFormat">Pango text markup
     * language</link>.
     * 
     * Also see gtk_entry_set_icon_tooltip_markup().
     */
    secondaryIconTooltipMarkup: string
    /**
     * The contents of the tooltip on the secondary icon.
     * 
     * Also see gtk_entry_set_icon_tooltip_text().
     */
    secondaryIconTooltipText: string
    readonly selectionBound: number
    /**
     * Which kind of shadow to draw around the entry when
     * #GtkEntry:has-frame is set to %TRUE.
     */
    shadowType: ShadowType
    /**
     * When %TRUE, pasted multi-line text is truncated to the first line.
     */
    truncateMultiline: boolean
    visibility: boolean
    widthChars: number
    /**
     * The horizontal alignment, from 0 (left) to 1 (right).
     * Reversed for RTL layouts.
     */
    xalign: number

    // Own fields of Gtk-2.0.Gtk.Entry

    widget: Widget
    text: string
    editable: number
    visible: any
    overwriteMode: number
    inDrag: number
    textLength: number
    textMaxLength: number

    // Owm methods of Gtk-2.0.Gtk.Entry

    /**
     * Appends the given text to the contents of the widget.
     * @param text the text to append
     */
    appendText(text: string): void
    /**
     * Retrieves the value set by gtk_entry_set_activates_default().
     */
    getActivatesDefault(): boolean
    /**
     * Gets the value set by gtk_entry_set_alignment().
     */
    getAlignment(): number
    /**
     * Get the #GtkEntryBuffer object which holds the text for
     * this widget.
     */
    getBuffer(): EntryBuffer
    /**
     * Returns the auxiliary completion object currently in use by `entry`.
     */
    getCompletion(): EntryCompletion
    /**
     * Returns the index of the icon which is the source of the current
     * DND operation, or -1.
     * 
     * This function is meant to be used in a #GtkWidget::drag-data-get
     * callback.
     */
    getCurrentIconDragSource(): number
    /**
     * Retrieves the horizontal cursor adjustment for the entry.
     * See gtk_entry_set_cursor_hadjustment().
     */
    getCursorHadjustment(): Adjustment
    /**
     * Gets the value set by gtk_entry_set_has_frame().
     */
    getHasFrame(): boolean
    /**
     * Returns whether the icon is activatable.
     * @param iconPos Icon position
     */
    getIconActivatable(iconPos: EntryIconPosition): boolean
    /**
     * Finds the icon at the given position and return its index.
     * If `x,` `y` doesn't lie inside an icon, -1 is returned.
     * This function is intended for use in a #GtkWidget::query-tooltip
     * signal handler.
     * @param x the x coordinate of the position to find
     * @param y the y coordinate of the position to find
     */
    getIconAtPos(x: number, y: number): number
    /**
     * Retrieves the #GIcon used for the icon, or %NULL if there is
     * no icon or if the icon was set by some other method (e.g., by
     * stock, pixbuf, or icon name).
     * @param iconPos Icon position
     */
    getIconGicon(iconPos: EntryIconPosition): Gio.Icon
    /**
     * Retrieves the icon name used for the icon, or %NULL if there is
     * no icon or if the icon was set by some other method (e.g., by
     * pixbuf, stock or gicon).
     * @param iconPos Icon position
     */
    getIconName(iconPos: EntryIconPosition): string
    /**
     * Retrieves the image used for the icon.
     * 
     * Unlike the other methods of setting and getting icon data, this
     * method will work regardless of whether the icon was set using a
     * #GdkPixbuf, a #GIcon, a stock item, or an icon name.
     * @param iconPos Icon position
     */
    getIconPixbuf(iconPos: EntryIconPosition): GdkPixbuf.Pixbuf
    /**
     * Returns whether the icon appears sensitive or insensitive.
     * @param iconPos Icon position
     */
    getIconSensitive(iconPos: EntryIconPosition): boolean
    /**
     * Retrieves the stock id used for the icon, or %NULL if there is
     * no icon or if the icon was set by some other method (e.g., by
     * pixbuf, icon name or gicon).
     * @param iconPos Icon position
     */
    getIconStock(iconPos: EntryIconPosition): string
    /**
     * Gets the type of representation being used by the icon
     * to store image data. If the icon has no image data,
     * the return value will be %GTK_IMAGE_EMPTY.
     * @param iconPos Icon position
     */
    getIconStorageType(iconPos: EntryIconPosition): ImageType
    /**
     * Gets the contents of the tooltip on the icon at the specified
     * position in `entry`.
     * @param iconPos the icon position
     */
    getIconTooltipMarkup(iconPos: EntryIconPosition): string
    /**
     * Gets the contents of the tooltip on the icon at the specified
     * position in `entry`.
     * @param iconPos the icon position
     */
    getIconTooltipText(iconPos: EntryIconPosition): string
    /**
     * Returns the #GdkWindow which contains the entry's icon at
     * `icon_pos`. This function is useful when drawing something to the
     * entry in an expose-event callback because it enables the callback
     * to distinguish between the text window and entry's icon windows.
     * 
     * See also gtk_entry_get_text_window().
     * 
     * Note that GTK+ 3 does not have this function anymore; it has
     * been replaced by gtk_entry_get_icon_area().
     * @param iconPos Icon position
     */
    getIconWindow(iconPos: EntryIconPosition): Gdk.Window
    /**
     * This function returns the entry's #GtkEntry:inner-border property. See
     * gtk_entry_set_inner_border() for more information.
     */
    getInnerBorder(): Border
    /**
     * Retrieves the character displayed in place of the real characters
     * for entries with visibility set to false. See gtk_entry_set_invisible_char().
     */
    getInvisibleChar(): string
    /**
     * Gets the #PangoLayout used to display the entry.
     * The layout is useful to e.g. convert text positions to
     * pixel positions, in combination with gtk_entry_get_layout_offsets().
     * The returned layout is owned by the entry and must not be
     * modified or freed by the caller.
     * 
     * Keep in mind that the layout text may contain a preedit string, so
     * gtk_entry_layout_index_to_text_index() and
     * gtk_entry_text_index_to_layout_index() are needed to convert byte
     * indices in the layout to byte indices in the entry contents.
     */
    getLayout(): Pango.Layout
    /**
     * Obtains the position of the #PangoLayout used to render text
     * in the entry, in widget coordinates. Useful if you want to line
     * up the text in an entry with some other text, e.g. when using the
     * entry to implement editable cells in a sheet widget.
     * 
     * Also useful to convert mouse events into coordinates inside the
     * #PangoLayout, e.g. to take some action if some part of the entry text
     * is clicked.
     * 
     * Note that as the user scrolls around in the entry the offsets will
     * change; you'll need to connect to the "notify::scroll-offset"
     * signal to track this. Remember when using the #PangoLayout
     * functions you need to convert to and from pixels using
     * PANGO_PIXELS() or #PANGO_SCALE.
     * 
     * Keep in mind that the layout text may contain a preedit string, so
     * gtk_entry_layout_index_to_text_index() and
     * gtk_entry_text_index_to_layout_index() are needed to convert byte
     * indices in the layout to byte indices in the entry contents.
     */
    getLayoutOffsets(): [ /* x */ number, /* y */ number ]
    /**
     * Retrieves the maximum allowed length of the text in
     * `entry`. See gtk_entry_set_max_length().
     * 
     * This is equivalent to:
     * 
     * <informalexample><programlisting>
     * gtk_entry_buffer_get_max_length (gtk_entry_get_buffer (entry));
     * </programlisting></informalexample>
     */
    getMaxLength(): number
    /**
     * Gets the value set by gtk_entry_set_overwrite_mode().
     */
    getOverwriteMode(): boolean
    /**
     * Returns the current fraction of the task that's been completed.
     * See gtk_entry_set_progress_fraction().
     */
    getProgressFraction(): number
    /**
     * Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().
     */
    getProgressPulseStep(): number
    /**
     * Retrieves the contents of the entry widget.
     * See also gtk_editable_get_chars().
     * 
     * This is equivalent to:
     * 
     * <informalexample><programlisting>
     * gtk_entry_buffer_get_text (gtk_entry_get_buffer (entry));
     * </programlisting></informalexample>
     */
    getText(): string
    /**
     * Retrieves the current length of the text in
     * `entry`.
     * 
     * This is equivalent to:
     * 
     * <informalexample><programlisting>
     * gtk_entry_buffer_get_length (gtk_entry_get_buffer (entry));
     * </programlisting></informalexample>
     */
    getTextLength(): number
    /**
     * Returns the #GdkWindow which contains the text. This function is
     * useful when drawing something to the entry in an expose-event
     * callback because it enables the callback to distinguish between
     * the text window and entry's icon windows.
     * 
     * See also gtk_entry_get_icon_window().
     * 
     * Note that GTK+ 3 does not have this function anymore; it has
     * been replaced by gtk_entry_get_text_area().
     */
    getTextWindow(): Gdk.Window
    /**
     * Retrieves whether the text in `entry` is visible. See
     * gtk_entry_set_visibility().
     */
    getVisibility(): boolean
    /**
     * Gets the value set by gtk_entry_set_width_chars().
     */
    getWidthChars(): number
    /**
     * Allow the #GtkEntry input method to internally handle key press
     * and release events. If this function returns %TRUE, then no further
     * processing should be done for this key event. See
     * gtk_im_context_filter_keypress().
     * 
     * Note that you are expected to call this function from your handler
     * when overriding key event handling. This is needed in the case when
     * you need to insert your own key handling between the input method
     * and the default key event handling of the #GtkEntry.
     * See gtk_text_view_reset_im_context() for an example of use.
     * @param event the key event
     */
    imContextFilterKeypress(event: Gdk.EventKey): boolean
    /**
     * Converts from a position in the entry contents (returned
     * by gtk_entry_get_text()) to a position in the
     * entry's #PangoLayout (returned by gtk_entry_get_layout(),
     * with text retrieved via pango_layout_get_text()).
     * @param layoutIndex byte index into the entry layout text
     */
    layoutIndexToTextIndex(layoutIndex: number): number
    /**
     * Prepends the given text to the contents of the widget.
     * @param text the text to prepend
     */
    prependText(text: string): void
    /**
     * Indicates that some progress is made, but you don't know how much.
     * Causes the entry's progress indicator to enter "activity mode,"
     * where a block bounces back and forth. Each call to
     * gtk_entry_progress_pulse() causes the block to move by a little bit
     * (the amount of movement per pulse is determined by
     * gtk_entry_set_progress_pulse_step()).
     */
    progressPulse(): void
    /**
     * Reset the input method context of the entry if needed.
     * 
     * This can be necessary in the case where modifying the buffer
     * would confuse on-going input method behavior.
     */
    resetImContext(): void
    /**
     * Selects a region of text. The characters that are selected are
     * those characters at positions from `start_pos` up to, but not
     * including `end_pos`. If `end_pos` is negative, then the the characters
     * selected will be those characters from `start_pos` to the end of
     * the text.
     * @param start the starting position
     * @param end the end position
     */
    selectRegion(start: number, end: number): void
    /**
     * If `setting` is %TRUE, pressing Enter in the `entry` will activate the default
     * widget for the window containing the entry. This usually means that
     * the dialog box containing the entry will be closed, since the default
     * widget is usually one of the dialog buttons.
     * 
     * (For experts: if `setting` is %TRUE, the entry calls
     * gtk_window_activate_default() on the window containing the entry, in
     * the default handler for the #GtkWidget::activate signal.)
     * @param setting %TRUE to activate window's default widget on Enter keypress
     */
    setActivatesDefault(setting: boolean): void
    /**
     * Sets the alignment for the contents of the entry. This controls
     * the horizontal positioning of the contents when the displayed
     * text is shorter than the width of the entry.
     * @param xalign The horizontal alignment, from 0 (left) to 1 (right).          Reversed for RTL layouts
     */
    setAlignment(xalign: number): void
    /**
     * Set the #GtkEntryBuffer object which holds the text for
     * this widget.
     * @param buffer a #GtkEntryBuffer
     */
    setBuffer(buffer: EntryBuffer): void
    /**
     * Sets `completion` to be the auxiliary completion object to use with `entry`.
     * All further configuration of the completion mechanism is done on
     * `completion` using the #GtkEntryCompletion API. Completion is disabled if
     * `completion` is set to %NULL.
     * @param completion The #GtkEntryCompletion or %NULL
     */
    setCompletion(completion: EntryCompletion | null): void
    /**
     * Hooks up an adjustment to the cursor position in an entry, so that when
     * the cursor is moved, the adjustment is scrolled to show that position.
     * See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
     * the adjustment.
     * 
     * The adjustment has to be in pixel units and in the same coordinate system
     * as the entry.
     * @param adjustment an adjustment which should be adjusted when the cursor              is moved, or %NULL
     */
    setCursorHadjustment(adjustment: Adjustment): void
    /**
     * Determines if the user can edit the text in the editable
     * widget or not.
     * @param editable %TRUE if the user is allowed to edit the text   in the widget
     */
    setEditable(editable: boolean): void
    /**
     * Sets whether the entry has a beveled frame around it.
     * @param setting new value
     */
    setHasFrame(setting: boolean): void
    /**
     * Sets whether the icon is activatable.
     * @param iconPos Icon position
     * @param activatable %TRUE if the icon should be activatable
     */
    setIconActivatable(iconPos: EntryIconPosition, activatable: boolean): void
    /**
     * Sets up the icon at the given position so that GTK+ will start a drag
     * operation when the user clicks and drags the icon.
     * 
     * To handle the drag operation, you need to connect to the usual
     * #GtkWidget::drag-data-get (or possibly #GtkWidget::drag-data-delete)
     * signal, and use gtk_entry_get_current_icon_drag_source() in
     * your signal handler to find out if the drag was started from
     * an icon.
     * 
     * By default, GTK+ uses the icon as the drag icon. You can use the
     * #GtkWidget::drag-begin signal to set a different icon. Note that you
     * have to use g_signal_connect_after() to ensure that your signal handler
     * gets executed after the default handler.
     * @param iconPos icon position
     * @param targetList the targets (data formats) in which the data can be provided
     * @param actions a bitmask of the allowed drag actions
     */
    setIconDragSource(iconPos: EntryIconPosition, targetList: TargetList, actions: Gdk.DragAction): void
    /**
     * Sets the icon shown in the entry at the specified position
     * from the current icon theme.
     * If the icon isn't known, a "broken image" icon will be displayed
     * instead.
     * 
     * If `icon` is %NULL, no icon will be shown in the specified position.
     * @param iconPos The position at which to set the icon
     * @param icon The icon to set, or %NULL
     */
    setIconFromGicon(iconPos: EntryIconPosition, icon: Gio.Icon | null): void
    /**
     * Sets the icon shown in the entry at the specified position
     * from the current icon theme.
     * 
     * If the icon name isn't known, a "broken image" icon will be displayed
     * instead.
     * 
     * If `icon_name` is %NULL, no icon will be shown in the specified position.
     * @param iconPos The position at which to set the icon
     * @param iconName An icon name, or %NULL
     */
    setIconFromIconName(iconPos: EntryIconPosition, iconName: string | null): void
    /**
     * Sets the icon shown in the specified position using a pixbuf.
     * 
     * If `pixbuf` is %NULL, no icon will be shown in the specified position.
     * @param iconPos Icon position
     * @param pixbuf A #GdkPixbuf, or %NULL
     */
    setIconFromPixbuf(iconPos: EntryIconPosition, pixbuf: GdkPixbuf.Pixbuf | null): void
    /**
     * Sets the icon shown in the entry at the specified position from
     * a stock image.
     * 
     * If `stock_id` is %NULL, no icon will be shown in the specified position.
     * @param iconPos Icon position
     * @param stockId The name of the stock item, or %NULL
     */
    setIconFromStock(iconPos: EntryIconPosition, stockId: string | null): void
    /**
     * Sets the sensitivity for the specified icon.
     * @param iconPos Icon position
     * @param sensitive Specifies whether the icon should appear             sensitive or insensitive
     */
    setIconSensitive(iconPos: EntryIconPosition, sensitive: boolean): void
    /**
     * Sets `tooltip` as the contents of the tooltip for the icon at
     * the specified position. `tooltip` is assumed to be marked up with
     * the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * Use %NULL for `tooltip` to remove an existing tooltip.
     * 
     * See also gtk_widget_set_tooltip_markup() and
     * gtk_entry_set_icon_tooltip_text().
     * @param iconPos the icon position
     * @param tooltip the contents of the tooltip for the icon, or %NULL
     */
    setIconTooltipMarkup(iconPos: EntryIconPosition, tooltip: string | null): void
    /**
     * Sets `tooltip` as the contents of the tooltip for the icon
     * at the specified position.
     * 
     * Use %NULL for `tooltip` to remove an existing tooltip.
     * 
     * See also gtk_widget_set_tooltip_text() and
     * gtk_entry_set_icon_tooltip_markup().
     * 
     * If you unset the widget tooltip via gtk_widget_set_tooltip_text() or
     * gtk_widget_set_tooltip_markup(), this sets GtkWidget:has-tooltip to %FALSE,
     * which suppresses icon tooltips too. You can resolve this by then calling
     * gtk_widget_set_has_tooltip() to set GtkWidget:has-tooltip back to %TRUE, or
     * setting at least one non-empty tooltip on any icon achieves the same result.
     * @param iconPos the icon position
     * @param tooltip the contents of the tooltip for the icon, or %NULL
     */
    setIconTooltipText(iconPos: EntryIconPosition, tooltip: string | null): void
    /**
     * Sets %entry's inner-border property to %border, or clears it if %NULL
     * is passed. The inner-border is the area around the entry's text, but
     * inside its frame.
     * 
     * If set, this property overrides the inner-border style property.
     * Overriding the style-provided border is useful when you want to do
     * in-place editing of some text in a canvas or list widget, where
     * pixel-exact positioning of the entry is important.
     * @param border a #GtkBorder, or %NULL
     */
    setInnerBorder(border: Border | null): void
    /**
     * Sets the character to use in place of the actual text when
     * gtk_entry_set_visibility() has been called to set text visibility
     * to %FALSE. i.e. this is the character used in "password mode" to
     * show the user how many characters have been typed. By default, GTK+
     * picks the best invisible char available in the current font. If you
     * set the invisible char to 0, then the user will get no feedback
     * at all; there will be no text on the screen as they type.
     * @param ch a Unicode character
     */
    setInvisibleChar(ch: string): void
    /**
     * Sets the maximum allowed length of the contents of the widget. If
     * the current contents are longer than the given length, then they
     * will be truncated to fit.
     * 
     * This is equivalent to:
     * 
     * <informalexample><programlisting>
     * gtk_entry_buffer_set_max_length (gtk_entry_get_buffer (entry), max);
     * </programlisting></informalexample>
     * @param max the maximum length of the entry, or 0 for no maximum.   (other than the maximum length of entries.) The value passed in will   be clamped to the range 0-65536.
     */
    setMaxLength(max: number): void
    /**
     * Sets whether the text is overwritten when typing in the #GtkEntry.
     * @param overwrite new value
     */
    setOverwriteMode(overwrite: boolean): void
    /**
     * Sets the cursor position in an entry to the given value.
     * @param position the position of the cursor. The cursor is displayed    before the character with the given (base 0) index in the widget.    The value must be less than or equal to the number of characters    in the widget. A value of -1 indicates that the position should    be set after the last character in the entry. Note that this    position is in characters, not in bytes.
     */
    setPosition(position: number): void
    /**
     * Causes the entry's progress indicator to "fill in" the given
     * fraction of the bar. The fraction should be between 0.0 and 1.0,
     * inclusive.
     * @param fraction fraction of the task that's been completed
     */
    setProgressFraction(fraction: number): void
    /**
     * Sets the fraction of total entry width to move the progress
     * bouncing block for each call to gtk_entry_progress_pulse().
     * @param fraction fraction between 0.0 and 1.0
     */
    setProgressPulseStep(fraction: number): void
    /**
     * Sets the text in the widget to the given
     * value, replacing the current contents.
     * 
     * See gtk_entry_buffer_set_text().
     * @param text the new text
     */
    setText(text: string): void
    /**
     * Sets whether the contents of the entry are visible or not.
     * When visibility is set to %FALSE, characters are displayed
     * as the invisible char, and will also appear that way when
     * the text in the entry widget is copied elsewhere.
     * 
     * By default, GTK+ picks the best invisible character available
     * in the current font, but it can be changed with
     * gtk_entry_set_invisible_char().
     * @param visible %TRUE if the contents of the entry are displayed           as plaintext
     */
    setVisibility(visible: boolean): void
    /**
     * Changes the size request of the entry to be about the right size
     * for `n_chars` characters. Note that it changes the size
     * <emphasis>request</emphasis>, the size can still be affected by
     * how you pack the widget into containers. If `n_chars` is -1, the
     * size reverts to the default entry size.
     * @param nChars width in chars
     */
    setWidthChars(nChars: number): void
    /**
     * Converts from a position in the entry's #PangoLayout (returned by
     * gtk_entry_get_layout()) to a position in the entry contents
     * (returned by gtk_entry_get_text()).
     * @param textIndex byte index into the entry contents
     */
    textIndexToLayoutIndex(textIndex: number): number
    /**
     * Unsets the invisible char previously set with
     * gtk_entry_set_invisible_char(). So that the
     * default invisible char is used again.
     */
    unsetInvisibleChar(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Entry

    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    backspace(): void
    copyClipboard(): void

    // Overloads of copyClipboard

    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    cutClipboard(): void

    // Overloads of cutClipboard

    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    deleteFromCursor(type: DeleteType, count: number): void
    getTextAreaSize(x: number, y: number, width: number, height: number): void
    insertAtCursor(str: string): void
    moveCursor(step: MovementStep, count: number, extendSelection: boolean): void
    pasteClipboard(): void

    // Overloads of pasteClipboard

    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void
    populatePopup(menu: Menu): void
    toggleOverwrite(): void

    // Own signals of Gtk-2.0.Gtk.Entry

    connect(sigName: "activate", callback: Entry.ActivateSignalCallback): number
    on(sigName: "activate", callback: Entry.ActivateSignalCallback): number
    once(sigName: "activate", callback: Entry.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "backspace", callback: Entry.BackspaceSignalCallback): number
    on(sigName: "backspace", callback: Entry.BackspaceSignalCallback): number
    once(sigName: "backspace", callback: Entry.BackspaceSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "backspace", ...args: any[]): void
    connect(sigName: "copy-clipboard", callback: Entry.CopyClipboardSignalCallback): number
    on(sigName: "copy-clipboard", callback: Entry.CopyClipboardSignalCallback): number
    once(sigName: "copy-clipboard", callback: Entry.CopyClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "copy-clipboard", ...args: any[]): void
    connect(sigName: "cut-clipboard", callback: Entry.CutClipboardSignalCallback): number
    on(sigName: "cut-clipboard", callback: Entry.CutClipboardSignalCallback): number
    once(sigName: "cut-clipboard", callback: Entry.CutClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cut-clipboard", ...args: any[]): void
    connect(sigName: "delete-from-cursor", callback: Entry.DeleteFromCursorSignalCallback): number
    on(sigName: "delete-from-cursor", callback: Entry.DeleteFromCursorSignalCallback): number
    once(sigName: "delete-from-cursor", callback: Entry.DeleteFromCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "delete-from-cursor", count: number, ...args: any[]): void
    connect(sigName: "icon-press", callback: Entry.IconPressSignalCallback): number
    on(sigName: "icon-press", callback: Entry.IconPressSignalCallback): number
    once(sigName: "icon-press", callback: Entry.IconPressSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "icon-press", event: Gdk.Event, ...args: any[]): void
    connect(sigName: "icon-release", callback: Entry.IconReleaseSignalCallback): number
    on(sigName: "icon-release", callback: Entry.IconReleaseSignalCallback): number
    once(sigName: "icon-release", callback: Entry.IconReleaseSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "icon-release", event: Gdk.Event, ...args: any[]): void
    connect(sigName: "insert-at-cursor", callback: Entry.InsertAtCursorSignalCallback): number
    on(sigName: "insert-at-cursor", callback: Entry.InsertAtCursorSignalCallback): number
    once(sigName: "insert-at-cursor", callback: Entry.InsertAtCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-at-cursor", ...args: any[]): void
    connect(sigName: "move-cursor", callback: Entry.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: Entry.MoveCursorSignalCallback): number
    once(sigName: "move-cursor", callback: Entry.MoveCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-cursor", count: number, extendSelection: boolean, ...args: any[]): void
    connect(sigName: "paste-clipboard", callback: Entry.PasteClipboardSignalCallback): number
    on(sigName: "paste-clipboard", callback: Entry.PasteClipboardSignalCallback): number
    once(sigName: "paste-clipboard", callback: Entry.PasteClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "paste-clipboard", ...args: any[]): void
    connect(sigName: "populate-popup", callback: Entry.PopulatePopupSignalCallback): number
    on(sigName: "populate-popup", callback: Entry.PopulatePopupSignalCallback): number
    once(sigName: "populate-popup", callback: Entry.PopulatePopupSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "populate-popup", ...args: any[]): void
    connect(sigName: "preedit-changed", callback: Entry.PreeditChangedSignalCallback): number
    on(sigName: "preedit-changed", callback: Entry.PreeditChangedSignalCallback): number
    once(sigName: "preedit-changed", callback: Entry.PreeditChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "preedit-changed", ...args: any[]): void
    connect(sigName: "toggle-overwrite", callback: Entry.ToggleOverwriteSignalCallback): number
    on(sigName: "toggle-overwrite", callback: Entry.ToggleOverwriteSignalCallback): number
    once(sigName: "toggle-overwrite", callback: Entry.ToggleOverwriteSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-overwrite", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Entry

    connect(sigName: "notify::activates-default", callback: any): number
    on(sigName: "notify::activates-default", callback: any): number
    once(sigName: "notify::activates-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::activates-default", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: any): number
    on(sigName: "notify::buffer", callback: any): number
    once(sigName: "notify::buffer", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::caps-lock-warning", callback: any): number
    on(sigName: "notify::caps-lock-warning", callback: any): number
    once(sigName: "notify::caps-lock-warning", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::caps-lock-warning", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: any): number
    on(sigName: "notify::cursor-position", callback: any): number
    once(sigName: "notify::cursor-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: any): number
    on(sigName: "notify::has-frame", callback: any): number
    once(sigName: "notify::has-frame", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: any): number
    on(sigName: "notify::im-module", callback: any): number
    once(sigName: "notify::im-module", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::inner-border", callback: any): number
    on(sigName: "notify::inner-border", callback: any): number
    once(sigName: "notify::inner-border", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::inner-border", ...args: any[]): void
    connect(sigName: "notify::invisible-char", callback: any): number
    on(sigName: "notify::invisible-char", callback: any): number
    once(sigName: "notify::invisible-char", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::invisible-char", ...args: any[]): void
    connect(sigName: "notify::invisible-char-set", callback: any): number
    on(sigName: "notify::invisible-char-set", callback: any): number
    once(sigName: "notify::invisible-char-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::invisible-char-set", ...args: any[]): void
    connect(sigName: "notify::max-length", callback: any): number
    on(sigName: "notify::max-length", callback: any): number
    once(sigName: "notify::max-length", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-length", ...args: any[]): void
    connect(sigName: "notify::primary-icon-activatable", callback: any): number
    on(sigName: "notify::primary-icon-activatable", callback: any): number
    once(sigName: "notify::primary-icon-activatable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::primary-icon-gicon", callback: any): number
    on(sigName: "notify::primary-icon-gicon", callback: any): number
    once(sigName: "notify::primary-icon-gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::primary-icon-name", callback: any): number
    on(sigName: "notify::primary-icon-name", callback: any): number
    once(sigName: "notify::primary-icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-name", ...args: any[]): void
    connect(sigName: "notify::primary-icon-pixbuf", callback: any): number
    on(sigName: "notify::primary-icon-pixbuf", callback: any): number
    once(sigName: "notify::primary-icon-pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::primary-icon-sensitive", callback: any): number
    on(sigName: "notify::primary-icon-sensitive", callback: any): number
    once(sigName: "notify::primary-icon-sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::primary-icon-stock", callback: any): number
    on(sigName: "notify::primary-icon-stock", callback: any): number
    once(sigName: "notify::primary-icon-stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::primary-icon-storage-type", callback: any): number
    on(sigName: "notify::primary-icon-storage-type", callback: any): number
    once(sigName: "notify::primary-icon-storage-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-markup", callback: any): number
    on(sigName: "notify::primary-icon-tooltip-markup", callback: any): number
    once(sigName: "notify::primary-icon-tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-text", callback: any): number
    on(sigName: "notify::primary-icon-tooltip-text", callback: any): number
    once(sigName: "notify::primary-icon-tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::progress-fraction", callback: any): number
    on(sigName: "notify::progress-fraction", callback: any): number
    once(sigName: "notify::progress-fraction", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::progress-fraction", ...args: any[]): void
    connect(sigName: "notify::progress-pulse-step", callback: any): number
    on(sigName: "notify::progress-pulse-step", callback: any): number
    once(sigName: "notify::progress-pulse-step", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::progress-pulse-step", ...args: any[]): void
    connect(sigName: "notify::scroll-offset", callback: any): number
    on(sigName: "notify::scroll-offset", callback: any): number
    once(sigName: "notify::scroll-offset", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scroll-offset", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-activatable", callback: any): number
    on(sigName: "notify::secondary-icon-activatable", callback: any): number
    once(sigName: "notify::secondary-icon-activatable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-gicon", callback: any): number
    on(sigName: "notify::secondary-icon-gicon", callback: any): number
    once(sigName: "notify::secondary-icon-gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-name", callback: any): number
    on(sigName: "notify::secondary-icon-name", callback: any): number
    once(sigName: "notify::secondary-icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-name", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-pixbuf", callback: any): number
    on(sigName: "notify::secondary-icon-pixbuf", callback: any): number
    once(sigName: "notify::secondary-icon-pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-sensitive", callback: any): number
    on(sigName: "notify::secondary-icon-sensitive", callback: any): number
    once(sigName: "notify::secondary-icon-sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-stock", callback: any): number
    on(sigName: "notify::secondary-icon-stock", callback: any): number
    once(sigName: "notify::secondary-icon-stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-storage-type", callback: any): number
    on(sigName: "notify::secondary-icon-storage-type", callback: any): number
    once(sigName: "notify::secondary-icon-storage-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-markup", callback: any): number
    on(sigName: "notify::secondary-icon-tooltip-markup", callback: any): number
    once(sigName: "notify::secondary-icon-tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-text", callback: any): number
    on(sigName: "notify::secondary-icon-tooltip-text", callback: any): number
    once(sigName: "notify::secondary-icon-tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: any): number
    on(sigName: "notify::selection-bound", callback: any): number
    once(sigName: "notify::selection-bound", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::shadow-type", callback: any): number
    on(sigName: "notify::shadow-type", callback: any): number
    once(sigName: "notify::shadow-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::shadow-type", ...args: any[]): void
    connect(sigName: "notify::truncate-multiline", callback: any): number
    on(sigName: "notify::truncate-multiline", callback: any): number
    once(sigName: "notify::truncate-multiline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::truncate-multiline", ...args: any[]): void
    connect(sigName: "notify::visibility", callback: any): number
    on(sigName: "notify::visibility", callback: any): number
    once(sigName: "notify::visibility", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visibility", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: any): number
    on(sigName: "notify::editing-canceled", callback: any): number
    once(sigName: "notify::editing-canceled", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Entry extends Widget {

    // Own properties of Gtk-2.0.Gtk.Entry

    static name: string

    // Constructors of Gtk-2.0.Gtk.Entry

    constructor(config?: Entry.ConstructorProperties) 
    /**
     * Creates a new entry.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new entry.
     * @constructor 
     */
    static new(): Entry
    /**
     * Creates a new entry with the specified text buffer.
     * @constructor 
     * @param buffer The buffer to use for the new #GtkEntry.
     */
    static newWithBuffer(buffer: EntryBuffer): Entry
    /**
     * Creates a new #GtkEntry widget with the given maximum length.
     * @constructor 
     * @param max the maximum length of the entry, or 0 for no maximum.   (other than the maximum length of entries.) The value passed in will   be clamped to the range 0-65536.
     */
    static newWithMaxLength(max: number): Entry
    _init(config?: Entry.ConstructorProperties): void
}

export module EntryBuffer {

    // Signal callback interfaces

    /**
     * Signal callback interface for `deleted-text`
     */
    export interface DeletedTextSignalCallback {
        (position: number, nChars: number): void
    }

    /**
     * Signal callback interface for `inserted-text`
     */
    export interface InsertedTextSignalCallback {
        (position: number, chars: string, nChars: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.EntryBuffer

        /**
         * The maximum length (in characters) of the text in the buffer.
         */
        maxLength?: number | null
        /**
         * The contents of the buffer.
         */
        text?: string | null
    }

}

export interface EntryBuffer {

    // Own properties of Gtk-2.0.Gtk.EntryBuffer

    /**
     * The length (in characters) of the text in buffer.
     */
    readonly length: number
    /**
     * The maximum length (in characters) of the text in the buffer.
     */
    maxLength: number
    /**
     * The contents of the buffer.
     */
    text: string

    // Own fields of Gtk-2.0.Gtk.EntryBuffer

    parentInstance: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.EntryBuffer

    // Has conflict: deleteText(position: number, nChars: number): number
    /**
     * Used when subclassing #GtkEntryBuffer
     * @param position position at which text was deleted
     * @param nChars number of characters deleted
     */
    emitDeletedText(position: number, nChars: number): void
    /**
     * Used when subclassing #GtkEntryBuffer
     * @param position position at which text was inserted
     * @param chars text that was inserted
     * @param nChars number of characters inserted
     */
    emitInsertedText(position: number, chars: string, nChars: number): void
    /**
     * Retrieves the length in bytes of the buffer.
     * See gtk_entry_buffer_get_length().
     */
    getBytes(): number
    // Has conflict: getLength(): number
    /**
     * Retrieves the maximum allowed length of the text in
     * `buffer`. See gtk_entry_buffer_set_max_length().
     */
    getMaxLength(): number
    // Has conflict: getText(): string
    // Has conflict: insertText(position: number, chars: string, nChars: number): number
    /**
     * Sets the maximum allowed length of the contents of the buffer. If
     * the current contents are longer than the given length, then they
     * will be truncated to fit.
     * @param maxLength the maximum length of the entry buffer, or 0 for no maximum.   (other than the maximum length of entries.) The value passed in will   be clamped to the range 0-65536.
     */
    setMaxLength(maxLength: number): void
    /**
     * Sets the text in the buffer.
     * 
     * This is roughly equivalent to calling gtk_entry_buffer_delete_text()
     * and gtk_entry_buffer_insert_text().
     * 
     * Note that `n_chars` is in characters, not in bytes.
     * @param chars the new text
     * @param nChars the number of characters in `text,` or -1
     */
    setText(chars: string, nChars: number): void

    // Own virtual methods of Gtk-2.0.Gtk.EntryBuffer

    /**
     * Deletes a sequence of characters from the buffer. `n_chars` characters are
     * deleted starting at `position`. If `n_chars` is negative, then all characters
     * until the end of the text are deleted.
     * 
     * If `position` or `n_chars` are out of bounds, then they are coerced to sane
     * values.
     * 
     * Note that the positions are specified in characters, not bytes.
     * @virtual 
     * @param position position at which to delete text
     * @param nChars number of characters to delete
     */
    deleteText(position: number, nChars: number): number
    deletedText(position: number, nChars: number): void
    /**
     * Retrieves the length in characters of the buffer.
     * @virtual 
     */
    getLength(): number
    getText(nBytes: number): string
    /**
     * Inserts `n_chars` characters of `chars` into the contents of the
     * buffer, at position `position`.
     * 
     * If `n_chars` is negative, then characters from chars will be inserted
     * until a null-terminator is found. If `position` or `n_chars` are out of
     * bounds, or the maximum buffer text length is exceeded, then they are
     * coerced to sane values.
     * 
     * Note that the position and length are in characters, not in bytes.
     * @virtual 
     * @param position the position at which to insert text.
     * @param chars the text to insert into the buffer.
     * @param nChars the length of the text in characters, or -1
     */
    insertText(position: number, chars: string, nChars: number): number
    insertedText(position: number, chars: string, nChars: number): void

    // Own signals of Gtk-2.0.Gtk.EntryBuffer

    connect(sigName: "deleted-text", callback: EntryBuffer.DeletedTextSignalCallback): number
    on(sigName: "deleted-text", callback: EntryBuffer.DeletedTextSignalCallback): number
    once(sigName: "deleted-text", callback: EntryBuffer.DeletedTextSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "deleted-text", nChars: number, ...args: any[]): void
    connect(sigName: "inserted-text", callback: EntryBuffer.InsertedTextSignalCallback): number
    on(sigName: "inserted-text", callback: EntryBuffer.InsertedTextSignalCallback): number
    once(sigName: "inserted-text", callback: EntryBuffer.InsertedTextSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "inserted-text", chars: string, nChars: number, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.EntryBuffer

    connect(sigName: "notify::length", callback: any): number
    on(sigName: "notify::length", callback: any): number
    once(sigName: "notify::length", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::max-length", callback: any): number
    on(sigName: "notify::max-length", callback: any): number
    once(sigName: "notify::max-length", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-length", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkEntryBuffer class contains the actual text displayed in a
 * #GtkEntry widget.
 * 
 * A single #GtkEntryBuffer object can be shared by multiple #GtkEntry
 * widgets which will then share the same text content, but not the cursor
 * position, visibility attributes, icon etc.
 * 
 * #GtkEntryBuffer may be derived from. Such a derived class might allow
 * text to be stored in an alternate location, such as non-pageable memory,
 * useful in the case of important passwords. Or a derived class could
 * integrate with an application's concept of undo/redo.
 * @class 
 */
export class EntryBuffer extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.EntryBuffer

    static name: string

    // Constructors of Gtk-2.0.Gtk.EntryBuffer

    constructor(config?: EntryBuffer.ConstructorProperties) 
    /**
     * Create a new GtkEntryBuffer object.
     * 
     * Optionally, specify initial text to set in the buffer.
     * @constructor 
     * @param initialChars initial buffer text, or %NULL
     * @param nInitialChars number of characters in `initial_chars,` or -1
     */
    constructor(initialChars: string | null, nInitialChars: number) 
    /**
     * Create a new GtkEntryBuffer object.
     * 
     * Optionally, specify initial text to set in the buffer.
     * @constructor 
     * @param initialChars initial buffer text, or %NULL
     * @param nInitialChars number of characters in `initial_chars,` or -1
     */
    static new(initialChars: string | null, nInitialChars: number): EntryBuffer
    _init(config?: EntryBuffer.ConstructorProperties): void
}

export module EntryCompletion {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action-activated`
     */
    export interface ActionActivatedSignalCallback {
        (index: number): void
    }

    /**
     * Signal callback interface for `cursor-on-match`
     */
    export interface CursorOnMatchSignalCallback {
        (model: TreeModel, iter: TreeIter): boolean
    }

    /**
     * Signal callback interface for `insert-prefix`
     */
    export interface InsertPrefixSignalCallback {
        (prefix: string): boolean
    }

    /**
     * Signal callback interface for `match-selected`
     */
    export interface MatchSelectedSignalCallback {
        (model: TreeModel, iter: TreeIter): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, CellLayout.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.EntryCompletion

        /**
         * Determines whether the common prefix of the possible completions
         * should be inserted automatically in the entry. Note that this
         * requires text-column to be set, even if you are using a custom
         * match function.
         */
        inlineCompletion?: boolean | null
        /**
         * Determines whether the possible completions on the popup
         * will appear in the entry as you navigate through them.
         */
        inlineSelection?: boolean | null
        minimumKeyLength?: number | null
        model?: TreeModel | null
        /**
         * Determines whether the possible completions should be
         * shown in a popup window.
         */
        popupCompletion?: boolean | null
        /**
         * Determines whether the completions popup window will be
         * resized to the width of the entry.
         */
        popupSetWidth?: boolean | null
        /**
         * Determines whether the completions popup window will shown
         * for a single possible completion. You probably want to set
         * this to %FALSE if you are using
         * <link linkend="GtkEntryCompletion--inline-completion">inline
         * completion</link>.
         */
        popupSingleMatch?: boolean | null
        /**
         * The column of the model containing the strings.
         * Note that the strings must be UTF-8.
         */
        textColumn?: number | null
    }

}

export interface EntryCompletion extends Buildable, CellLayout {

    // Own properties of Gtk-2.0.Gtk.EntryCompletion

    /**
     * Determines whether the common prefix of the possible completions
     * should be inserted automatically in the entry. Note that this
     * requires text-column to be set, even if you are using a custom
     * match function.
     */
    inlineCompletion: boolean
    /**
     * Determines whether the possible completions on the popup
     * will appear in the entry as you navigate through them.
     */
    inlineSelection: boolean
    minimumKeyLength: number
    model: TreeModel
    /**
     * Determines whether the possible completions should be
     * shown in a popup window.
     */
    popupCompletion: boolean
    /**
     * Determines whether the completions popup window will be
     * resized to the width of the entry.
     */
    popupSetWidth: boolean
    /**
     * Determines whether the completions popup window will shown
     * for a single possible completion. You probably want to set
     * this to %FALSE if you are using
     * <link linkend="GtkEntryCompletion--inline-completion">inline
     * completion</link>.
     */
    popupSingleMatch: boolean
    /**
     * The column of the model containing the strings.
     * Note that the strings must be UTF-8.
     */
    textColumn: number

    // Own fields of Gtk-2.0.Gtk.EntryCompletion

    parentInstance: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.EntryCompletion

    /**
     * Requests a completion operation, or in other words a refiltering of the
     * current list with completions, using the current key. The completion list
     * view will be updated accordingly.
     */
    complete(): void
    /**
     * Deletes the action at `index_` from `completion'`s action list.
     * @param index The index of the item to Delete.
     */
    deleteAction(index: number): void
    /**
     * Get the original text entered by the user that triggered
     * the completion or %NULL if there's no completion ongoing.
     */
    getCompletionPrefix(): string
    /**
     * Gets the entry `completion` has been attached to.
     */
    getEntry(): Widget
    /**
     * Returns whether the common prefix of the possible completions should
     * be automatically inserted in the entry.
     */
    getInlineCompletion(): boolean
    /**
     * Returns %TRUE if inline-selection mode is turned on.
     */
    getInlineSelection(): boolean
    /**
     * Returns the minimum key length as set for `completion`.
     */
    getMinimumKeyLength(): number
    /**
     * Returns the model the #GtkEntryCompletion is using as data source.
     * Returns %NULL if the model is unset.
     */
    getModel(): TreeModel
    /**
     * Returns whether the completions should be presented in a popup window.
     */
    getPopupCompletion(): boolean
    /**
     * Returns whether the  completion popup window will be resized to the
     * width of the entry.
     */
    getPopupSetWidth(): boolean
    /**
     * Returns whether the completion popup window will appear even if there is
     * only a single match.
     */
    getPopupSingleMatch(): boolean
    /**
     * Returns the column in the model of `completion` to get strings from.
     */
    getTextColumn(): number
    /**
     * Inserts an action in `completion'`s action item list at position `index_`
     * with markup `markup`.
     * @param index The index of the item to insert.
     * @param markup Markup of the item to insert.
     */
    insertActionMarkup(index: number, markup: string): void
    /**
     * Inserts an action in `completion'`s action item list at position `index_`
     * with text `text`. If you want the action item to have markup, use
     * gtk_entry_completion_insert_action_markup().
     * @param index The index of the item to insert.
     * @param text Text of the item to insert.
     */
    insertActionText(index: number, text: string): void
    // Has conflict: insertPrefix(): void
    /**
     * Sets whether the common prefix of the possible completions should
     * be automatically inserted in the entry.
     * @param inlineCompletion %TRUE to do inline completion
     */
    setInlineCompletion(inlineCompletion: boolean): void
    /**
     * Sets whether it is possible to cycle through the possible completions
     * inside the entry.
     * @param inlineSelection %TRUE to do inline selection
     */
    setInlineSelection(inlineSelection: boolean): void
    /**
     * Sets the match function for `completion` to be `func`. The match function
     * is used to determine if a row should or should not be in the completion
     * list.
     * @param func The #GtkEntryCompletionMatchFunc to use.
     */
    setMatchFunc(func: EntryCompletionMatchFunc): void
    /**
     * Requires the length of the search key for `completion` to be at least
     * `length`. This is useful for long lists, where completing using a small
     * key takes a lot of time and will come up with meaningless results anyway
     * (ie, a too large dataset).
     * @param length The minimum length of the key in order to start completing.
     */
    setMinimumKeyLength(length: number): void
    /**
     * Sets the model for a #GtkEntryCompletion. If `completion` already has
     * a model set, it will remove it before setting the new model.
     * If model is %NULL, then it will unset the model.
     * @param model The #GtkTreeModel.
     */
    setModel(model: TreeModel | null): void
    /**
     * Sets whether the completions should be presented in a popup window.
     * @param popupCompletion %TRUE to do popup completion
     */
    setPopupCompletion(popupCompletion: boolean): void
    /**
     * Sets whether the completion popup window will be resized to be the same
     * width as the entry.
     * @param popupSetWidth %TRUE to make the width of the popup the same as the entry
     */
    setPopupSetWidth(popupSetWidth: boolean): void
    /**
     * Sets whether the completion popup window will appear even if there is
     * only a single match. You may want to set this to %FALSE if you
     * are using <link linkend="GtkEntryCompletion--inline-completion">inline
     * completion</link>.
     * @param popupSingleMatch %TRUE if the popup should appear even for a single   match
     */
    setPopupSingleMatch(popupSingleMatch: boolean): void
    /**
     * Convenience function for setting up the most used case of this code: a
     * completion list with just strings. This function will set up `completion`
     * to have a list displaying all (and just) strings in the completion list,
     * and to get those strings from `column` in the model of `completion`.
     * 
     * This functions creates and adds a #GtkCellRendererText for the selected
     * column. If you need to set the text column, but don't want the cell
     * renderer, use g_object_set() to set the ::text_column property directly.
     * @param column The column in the model of `completion` to get strings from.
     */
    setTextColumn(column: number): void

    // Own virtual methods of Gtk-2.0.Gtk.EntryCompletion

    actionActivated(index: number): void
    cursorOnMatch(model: TreeModel, iter: TreeIter): boolean
    insertPrefix(prefix: string): boolean
    matchSelected(model: TreeModel, iter: TreeIter): boolean

    // Own signals of Gtk-2.0.Gtk.EntryCompletion

    connect(sigName: "action-activated", callback: EntryCompletion.ActionActivatedSignalCallback): number
    on(sigName: "action-activated", callback: EntryCompletion.ActionActivatedSignalCallback): number
    once(sigName: "action-activated", callback: EntryCompletion.ActionActivatedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "action-activated", ...args: any[]): void
    connect(sigName: "cursor-on-match", callback: EntryCompletion.CursorOnMatchSignalCallback): number
    on(sigName: "cursor-on-match", callback: EntryCompletion.CursorOnMatchSignalCallback): number
    once(sigName: "cursor-on-match", callback: EntryCompletion.CursorOnMatchSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cursor-on-match", iter: TreeIter, ...args: any[]): void
    connect(sigName: "insert-prefix", callback: EntryCompletion.InsertPrefixSignalCallback): number
    on(sigName: "insert-prefix", callback: EntryCompletion.InsertPrefixSignalCallback): number
    once(sigName: "insert-prefix", callback: EntryCompletion.InsertPrefixSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-prefix", ...args: any[]): void
    connect(sigName: "match-selected", callback: EntryCompletion.MatchSelectedSignalCallback): number
    on(sigName: "match-selected", callback: EntryCompletion.MatchSelectedSignalCallback): number
    once(sigName: "match-selected", callback: EntryCompletion.MatchSelectedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "match-selected", iter: TreeIter, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.EntryCompletion

    connect(sigName: "notify::inline-completion", callback: any): number
    on(sigName: "notify::inline-completion", callback: any): number
    once(sigName: "notify::inline-completion", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::inline-completion", ...args: any[]): void
    connect(sigName: "notify::inline-selection", callback: any): number
    on(sigName: "notify::inline-selection", callback: any): number
    once(sigName: "notify::inline-selection", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::inline-selection", ...args: any[]): void
    connect(sigName: "notify::minimum-key-length", callback: any): number
    on(sigName: "notify::minimum-key-length", callback: any): number
    once(sigName: "notify::minimum-key-length", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::minimum-key-length", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::popup-completion", callback: any): number
    on(sigName: "notify::popup-completion", callback: any): number
    once(sigName: "notify::popup-completion", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::popup-completion", ...args: any[]): void
    connect(sigName: "notify::popup-set-width", callback: any): number
    on(sigName: "notify::popup-set-width", callback: any): number
    once(sigName: "notify::popup-set-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::popup-set-width", ...args: any[]): void
    connect(sigName: "notify::popup-single-match", callback: any): number
    on(sigName: "notify::popup-single-match", callback: any): number
    once(sigName: "notify::popup-single-match", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::popup-single-match", ...args: any[]): void
    connect(sigName: "notify::text-column", callback: any): number
    on(sigName: "notify::text-column", callback: any): number
    once(sigName: "notify::text-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-column", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class EntryCompletion extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.EntryCompletion

    static name: string

    // Constructors of Gtk-2.0.Gtk.EntryCompletion

    constructor(config?: EntryCompletion.ConstructorProperties) 
    /**
     * Creates a new #GtkEntryCompletion object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkEntryCompletion object.
     * @constructor 
     */
    static new(): EntryCompletion
    _init(config?: EntryCompletion.ConstructorProperties): void
}

export module EventBox {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.EventBox

        aboveChild?: boolean | null
        visibleWindow?: boolean | null
    }

}

export interface EventBox extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.EventBox

    aboveChild: boolean
    visibleWindow: boolean

    // Own fields of Gtk-2.0.Gtk.EventBox

    bin: Bin

    // Owm methods of Gtk-2.0.Gtk.EventBox

    /**
     * Returns whether the event box window is above or below the
     * windows of its child. See gtk_event_box_set_above_child() for
     * details.
     */
    getAboveChild(): boolean
    /**
     * Returns whether the event box has a visible window.
     * See gtk_event_box_set_visible_window() for details.
     */
    getVisibleWindow(): boolean
    /**
     * Set whether the event box window is positioned above the windows of its child,
     * as opposed to below it. If the window is above, all events inside the
     * event box will go to the event box. If the window is below, events
     * in windows of child widgets will first got to that widget, and then
     * to its parents.
     * 
     * The default is to keep the window below the child.
     * @param aboveChild %TRUE if the event box window is above the windows of its child
     */
    setAboveChild(aboveChild: boolean): void
    /**
     * Set whether the event box uses a visible or invisible child
     * window. The default is to use visible windows.
     * 
     * In an invisible window event box, the window that the
     * event box creates is a %GDK_INPUT_ONLY window, which
     * means that it is invisible and only serves to receive
     * events.
     * 
     * A visible window event box creates a visible (%GDK_INPUT_OUTPUT)
     * window that acts as the parent window for all the widgets
     * contained in the event box.
     * 
     * You should generally make your event box invisible if
     * you just want to trap events. Creating a visible window
     * may cause artifacts that are visible to the user, especially
     * if the user is using a theme with gradients or pixmaps.
     * 
     * The main reason to create a non input-only event box is if
     * you want to set the background to a different color or
     * draw on it.
     * 
     * <note><para>
     * There is one unexpected issue for an invisible event box that has its
     * window below the child. (See gtk_event_box_set_above_child().)
     * Since the input-only window is not an ancestor window of any windows
     * that descendent widgets of the event box create, events on these
     * windows aren't propagated up by the windowing system, but only by GTK+.
     * The practical effect of this is if an event isn't in the event
     * mask for the descendant window (see gtk_widget_add_events()),
     * it won't be received by the event box.
     * </para><para>
     * This problem doesn't occur for visible event boxes, because in
     * that case, the event box window is actually the ancestor of the
     * descendant windows, not just at the same place on the screen.
     * </para></note>
     * @param visibleWindow boolean value
     */
    setVisibleWindow(visibleWindow: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.EventBox

    connect(sigName: "notify::above-child", callback: any): number
    on(sigName: "notify::above-child", callback: any): number
    once(sigName: "notify::above-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::above-child", ...args: any[]): void
    connect(sigName: "notify::visible-window", callback: any): number
    on(sigName: "notify::visible-window", callback: any): number
    once(sigName: "notify::visible-window", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-window", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class EventBox extends Bin {

    // Own properties of Gtk-2.0.Gtk.EventBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.EventBox

    constructor(config?: EventBox.ConstructorProperties) 
    constructor() 
    static new(): EventBox
    _init(config?: EventBox.ConstructorProperties): void
}

export module Expander {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Expander

        expanded?: boolean | null
        label?: string | null
        labelFill?: boolean | null
        labelWidget?: Widget | null
        spacing?: number | null
        useMarkup?: boolean | null
        useUnderline?: boolean | null
    }

}

export interface Expander extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Expander

    expanded: boolean
    label: string
    labelFill: boolean
    labelWidget: Widget
    spacing: number
    useMarkup: boolean
    useUnderline: boolean

    // Own fields of Gtk-2.0.Gtk.Expander

    bin: Bin
    priv: ExpanderPrivate

    // Owm methods of Gtk-2.0.Gtk.Expander

    /**
     * Queries a #GtkExpander and returns its current state. Returns %TRUE
     * if the child widget is revealed.
     * 
     * See gtk_expander_set_expanded().
     */
    getExpanded(): boolean
    /**
     * Fetches the text from a label widget including any embedded
     * underlines indicating mnemonics and Pango markup, as set by
     * gtk_expander_set_label(). If the label text has not been set the
     * return value will be %NULL. This will be the case if you create an
     * empty button with gtk_button_new() to use as a container.
     * 
     * Note that this function behaved differently in versions prior to
     * 2.14 and used to return the label text stripped of embedded
     * underlines indicating mnemonics and Pango markup. This problem can
     * be avoided by fetching the label text directly from the label
     * widget.
     */
    getLabel(): string
    /**
     * Returns whether the label widget will fill all available horizontal
     * space allocated to `expander`.
     */
    getLabelFill(): boolean
    /**
     * Retrieves the label widget for the frame. See
     * gtk_expander_set_label_widget().
     */
    getLabelWidget(): Widget
    /**
     * Gets the value set by gtk_expander_set_spacing().
     */
    getSpacing(): number
    /**
     * Returns whether the label's text is interpreted as marked up with
     * the <link linkend="PangoMarkupFormat">Pango text markup
     * language</link>. See gtk_expander_set_use_markup ().
     */
    getUseMarkup(): boolean
    /**
     * Returns whether an embedded underline in the expander label indicates a
     * mnemonic. See gtk_expander_set_use_underline().
     */
    getUseUnderline(): boolean
    /**
     * Sets the state of the expander. Set to %TRUE, if you want
     * the child widget to be revealed, and %FALSE if you want the
     * child widget to be hidden.
     * @param expanded whether the child widget is revealed
     */
    setExpanded(expanded: boolean): void
    /**
     * Sets the text of the label of the expander to `label`.
     * 
     * This will also clear any previously set labels.
     * @param label a string
     */
    setLabel(label: string | null): void
    /**
     * Sets whether the label widget should fill all available horizontal space
     * allocated to `expander`.
     * @param labelFill %TRUE if the label should should fill all available horizontal              space
     */
    setLabelFill(labelFill: boolean): void
    /**
     * Set the label widget for the expander. This is the widget
     * that will appear embedded alongside the expander arrow.
     * @param labelWidget the new label widget
     */
    setLabelWidget(labelWidget: Widget | null): void
    /**
     * Sets the spacing field of `expander,` which is the number of pixels to
     * place between expander and the child.
     * @param spacing distance between the expander and child in pixels.
     */
    setSpacing(spacing: number): void
    /**
     * Sets whether the text of the label contains markup in <link
     * linkend="PangoMarkupFormat">Pango's text markup
     * language</link>. See gtk_label_set_markup().
     * @param useMarkup %TRUE if the label's text should be parsed for markup
     */
    setUseMarkup(useMarkup: boolean): void
    /**
     * If true, an underline in the text of the expander label indicates
     * the next character should be used for the mnemonic accelerator key.
     * @param useUnderline %TRUE if underlines in the text indicate mnemonics
     */
    setUseUnderline(useUnderline: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Expander

    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean

    // Own signals of Gtk-2.0.Gtk.Expander

    connect(sigName: "activate", callback: Expander.ActivateSignalCallback): number
    on(sigName: "activate", callback: Expander.ActivateSignalCallback): number
    once(sigName: "activate", callback: Expander.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Expander

    connect(sigName: "notify::expanded", callback: any): number
    on(sigName: "notify::expanded", callback: any): number
    once(sigName: "notify::expanded", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::expanded", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::label-fill", callback: any): number
    on(sigName: "notify::label-fill", callback: any): number
    once(sigName: "notify::label-fill", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-fill", ...args: any[]): void
    connect(sigName: "notify::label-widget", callback: any): number
    on(sigName: "notify::label-widget", callback: any): number
    once(sigName: "notify::label-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-widget", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: any): number
    on(sigName: "notify::spacing", callback: any): number
    once(sigName: "notify::spacing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: any): number
    on(sigName: "notify::use-markup", callback: any): number
    once(sigName: "notify::use-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Expander extends Bin {

    // Own properties of Gtk-2.0.Gtk.Expander

    static name: string

    // Constructors of Gtk-2.0.Gtk.Expander

    constructor(config?: Expander.ConstructorProperties) 
    /**
     * Creates a new expander using `label` as the text of the label.
     * @constructor 
     * @param label the text of the label
     */
    constructor(label: string) 
    /**
     * Creates a new expander using `label` as the text of the label.
     * @constructor 
     * @param label the text of the label
     */
    static new(label: string): Expander
    /**
     * Creates a new expander using `label` as the text of the label.
     * If characters in `label` are preceded by an underscore, they are underlined.
     * If you need a literal underscore character in a label, use '__' (two
     * underscores). The first underlined character represents a keyboard
     * accelerator called a mnemonic.
     * Pressing Alt and that key activates the button.
     * @constructor 
     * @param label the text of the label with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string | null): Expander
    _init(config?: Expander.ConstructorProperties): void
}

export module FileChooserButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `file-set`
     */
    export interface FileSetSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, FileChooser.ConstructorProperties, Orientable.ConstructorProperties, HBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.FileChooserButton

        /**
         * Instance of the #GtkFileChooserDialog associated with the button.
         */
        dialog?: FileChooser | null
        /**
         * Whether the #GtkFileChooserButton button grabs focus when it is clicked
         * with the mouse.
         */
        focusOnClick?: boolean | null
        /**
         * Title to put on the #GtkFileChooserDialog associated with the button.
         */
        title?: string | null
        /**
         * The width of the entry and label inside the button, in characters.
         */
        widthChars?: number | null
    }

}

export interface FileChooserButton extends Atk.ImplementorIface, Buildable, FileChooser, Orientable {

    // Own properties of Gtk-2.0.Gtk.FileChooserButton

    /**
     * Instance of the #GtkFileChooserDialog associated with the button.
     */
    readonly dialog: FileChooser
    /**
     * Whether the #GtkFileChooserButton button grabs focus when it is clicked
     * with the mouse.
     */
    focusOnClick: boolean
    /**
     * Title to put on the #GtkFileChooserDialog associated with the button.
     */
    title: string
    /**
     * The width of the entry and label inside the button, in characters.
     */
    widthChars: number

    // Owm methods of Gtk-2.0.Gtk.FileChooserButton

    /**
     * Returns whether the button grabs focus when it is clicked with the mouse.
     * See gtk_file_chooser_button_set_focus_on_click().
     */
    getFocusOnClick(): boolean
    /**
     * Retrieves the title of the browse dialog used by `button`. The returned value
     * should not be modified or freed.
     */
    getTitle(): string
    /**
     * Retrieves the width in characters of the `button` widget's entry and/or label.
     */
    getWidthChars(): number
    /**
     * Sets whether the button will grab focus when it is clicked with the mouse.
     * Making mouse clicks not grab focus is useful in places like toolbars where
     * you don't want the keyboard focus removed from the main area of the
     * application.
     * @param focusOnClick whether the button grabs focus when clicked with the mouse
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Modifies the `title` of the browse dialog used by `button`.
     * @param title the new browse dialog title.
     */
    setTitle(title: string): void
    /**
     * Sets the width (in characters) that `button` will use to `n_chars`.
     * @param nChars the new width, in characters.
     */
    setWidthChars(nChars: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.FileChooserButton

    fileSet(): void

    // Own signals of Gtk-2.0.Gtk.FileChooserButton

    connect(sigName: "file-set", callback: FileChooserButton.FileSetSignalCallback): number
    on(sigName: "file-set", callback: FileChooserButton.FileSetSignalCallback): number
    once(sigName: "file-set", callback: FileChooserButton.FileSetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "file-set", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.FileChooserButton

    connect(sigName: "notify::dialog", callback: any): number
    on(sigName: "notify::dialog", callback: any): number
    once(sigName: "notify::dialog", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::dialog", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: any): number
    on(sigName: "notify::focus-on-click", callback: any): number
    once(sigName: "notify::focus-on-click", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::title", callback: any): number
    on(sigName: "notify::title", callback: any): number
    once(sigName: "notify::title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::action", callback: any): number
    on(sigName: "notify::action", callback: any): number
    once(sigName: "notify::action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action", ...args: any[]): void
    connect(sigName: "notify::create-folders", callback: any): number
    on(sigName: "notify::create-folders", callback: any): number
    once(sigName: "notify::create-folders", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::create-folders", ...args: any[]): void
    connect(sigName: "notify::do-overwrite-confirmation", callback: any): number
    on(sigName: "notify::do-overwrite-confirmation", callback: any): number
    once(sigName: "notify::do-overwrite-confirmation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::do-overwrite-confirmation", ...args: any[]): void
    connect(sigName: "notify::extra-widget", callback: any): number
    on(sigName: "notify::extra-widget", callback: any): number
    once(sigName: "notify::extra-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extra-widget", ...args: any[]): void
    connect(sigName: "notify::file-system-backend", callback: any): number
    on(sigName: "notify::file-system-backend", callback: any): number
    once(sigName: "notify::file-system-backend", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::file-system-backend", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::preview-widget", callback: any): number
    on(sigName: "notify::preview-widget", callback: any): number
    once(sigName: "notify::preview-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget", ...args: any[]): void
    connect(sigName: "notify::preview-widget-active", callback: any): number
    on(sigName: "notify::preview-widget-active", callback: any): number
    once(sigName: "notify::preview-widget-active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget-active", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-hidden", callback: any): number
    on(sigName: "notify::show-hidden", callback: any): number
    once(sigName: "notify::show-hidden", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-hidden", ...args: any[]): void
    connect(sigName: "notify::use-preview-label", callback: any): number
    on(sigName: "notify::use-preview-label", callback: any): number
    once(sigName: "notify::use-preview-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-preview-label", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FileChooserButton extends HBox {

    // Own properties of Gtk-2.0.Gtk.FileChooserButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.FileChooserButton

    constructor(config?: FileChooserButton.ConstructorProperties) 
    /**
     * Creates a new file-selecting button widget.
     * @constructor 
     * @param title the title of the browse dialog.
     * @param action the open mode for the widget.
     */
    constructor(title: string, action: FileChooserAction) 
    /**
     * Creates a new file-selecting button widget.
     * @constructor 
     * @param title the title of the browse dialog.
     * @param action the open mode for the widget.
     */
    static new(title: string, action: FileChooserAction): FileChooserButton

    // Overloads of new

    /**
     * Creates a new #GtkHBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): HBox
    /**
     * Creates a new file-selecting button widget using `backend`.
     * @constructor 
     * @param title the title of the browse dialog.
     * @param action the open mode for the widget.
     * @param backend the name of the #GtkFileSystem backend to use.
     */
    static newWithBackend(title: string, action: FileChooserAction, backend: string): FileChooserButton
    /**
     * Creates a #GtkFileChooserButton widget which uses `dialog` as its
     * file-picking window.
     * 
     * Note that `dialog` must be a #GtkDialog (or subclass) which
     * implements the #GtkFileChooser interface and must not have
     * %GTK_DIALOG_DESTROY_WITH_PARENT set.
     * 
     * Also note that the dialog needs to have its confirmative button
     * added with response %GTK_RESPONSE_ACCEPT or %GTK_RESPONSE_OK in
     * order for the button to take over the file selected in the dialog.
     * @constructor 
     * @param dialog the widget to use as dialog
     */
    static newWithDialog(dialog: Widget): FileChooserButton
    _init(config?: FileChooserButton.ConstructorProperties): void
}

export module FileChooserDialog {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, FileChooser.ConstructorProperties, Dialog.ConstructorProperties {
    }

}

export interface FileChooserDialog extends Atk.ImplementorIface, Buildable, FileChooser {

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Own fields of Gtk-2.0.Gtk.FileChooserDialog

    parentInstance: any
    priv: FileChooserDialogPrivate

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean

    // Class property signals of Gtk-2.0.Gtk.FileChooserDialog

    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::action", callback: any): number
    on(sigName: "notify::action", callback: any): number
    once(sigName: "notify::action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action", ...args: any[]): void
    connect(sigName: "notify::create-folders", callback: any): number
    on(sigName: "notify::create-folders", callback: any): number
    once(sigName: "notify::create-folders", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::create-folders", ...args: any[]): void
    connect(sigName: "notify::do-overwrite-confirmation", callback: any): number
    on(sigName: "notify::do-overwrite-confirmation", callback: any): number
    once(sigName: "notify::do-overwrite-confirmation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::do-overwrite-confirmation", ...args: any[]): void
    connect(sigName: "notify::extra-widget", callback: any): number
    on(sigName: "notify::extra-widget", callback: any): number
    once(sigName: "notify::extra-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extra-widget", ...args: any[]): void
    connect(sigName: "notify::file-system-backend", callback: any): number
    on(sigName: "notify::file-system-backend", callback: any): number
    once(sigName: "notify::file-system-backend", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::file-system-backend", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::preview-widget", callback: any): number
    on(sigName: "notify::preview-widget", callback: any): number
    once(sigName: "notify::preview-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget", ...args: any[]): void
    connect(sigName: "notify::preview-widget-active", callback: any): number
    on(sigName: "notify::preview-widget-active", callback: any): number
    once(sigName: "notify::preview-widget-active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget-active", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-hidden", callback: any): number
    on(sigName: "notify::show-hidden", callback: any): number
    once(sigName: "notify::show-hidden", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-hidden", ...args: any[]): void
    connect(sigName: "notify::use-preview-label", callback: any): number
    on(sigName: "notify::use-preview-label", callback: any): number
    once(sigName: "notify::use-preview-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-preview-label", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FileChooserDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.FileChooserDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.FileChooserDialog

    constructor(config?: FileChooserDialog.ConstructorProperties) 
    _init(config?: FileChooserDialog.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

export module FileChooserWidget {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, FileChooser.ConstructorProperties, Orientable.ConstructorProperties, VBox.ConstructorProperties {
    }

}

export interface FileChooserWidget extends Atk.ImplementorIface, Buildable, FileChooser, Orientable {

    // Own fields of Gtk-2.0.Gtk.FileChooserWidget

    parentInstance: any
    priv: FileChooserWidgetPrivate

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.FileChooserWidget

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::action", callback: any): number
    on(sigName: "notify::action", callback: any): number
    once(sigName: "notify::action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action", ...args: any[]): void
    connect(sigName: "notify::create-folders", callback: any): number
    on(sigName: "notify::create-folders", callback: any): number
    once(sigName: "notify::create-folders", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::create-folders", ...args: any[]): void
    connect(sigName: "notify::do-overwrite-confirmation", callback: any): number
    on(sigName: "notify::do-overwrite-confirmation", callback: any): number
    once(sigName: "notify::do-overwrite-confirmation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::do-overwrite-confirmation", ...args: any[]): void
    connect(sigName: "notify::extra-widget", callback: any): number
    on(sigName: "notify::extra-widget", callback: any): number
    once(sigName: "notify::extra-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extra-widget", ...args: any[]): void
    connect(sigName: "notify::file-system-backend", callback: any): number
    on(sigName: "notify::file-system-backend", callback: any): number
    once(sigName: "notify::file-system-backend", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::file-system-backend", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::preview-widget", callback: any): number
    on(sigName: "notify::preview-widget", callback: any): number
    once(sigName: "notify::preview-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget", ...args: any[]): void
    connect(sigName: "notify::preview-widget-active", callback: any): number
    on(sigName: "notify::preview-widget-active", callback: any): number
    once(sigName: "notify::preview-widget-active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-widget-active", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-hidden", callback: any): number
    on(sigName: "notify::show-hidden", callback: any): number
    once(sigName: "notify::show-hidden", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-hidden", ...args: any[]): void
    connect(sigName: "notify::use-preview-label", callback: any): number
    on(sigName: "notify::use-preview-label", callback: any): number
    once(sigName: "notify::use-preview-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-preview-label", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FileChooserWidget extends VBox {

    // Own properties of Gtk-2.0.Gtk.FileChooserWidget

    static name: string

    // Constructors of Gtk-2.0.Gtk.FileChooserWidget

    constructor(config?: FileChooserWidget.ConstructorProperties) 
    /**
     * Creates a new #GtkFileChooserWidget.  This is a file chooser widget that can
     * be embedded in custom windows, and it is the same widget that is used by
     * #GtkFileChooserDialog.
     * @constructor 
     * @param action Open or save mode for the widget
     */
    constructor(action: FileChooserAction) 
    /**
     * Creates a new #GtkFileChooserWidget.  This is a file chooser widget that can
     * be embedded in custom windows, and it is the same widget that is used by
     * #GtkFileChooserDialog.
     * @constructor 
     * @param action Open or save mode for the widget
     */
    static new(action: FileChooserAction): FileChooserWidget

    // Overloads of new

    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): VBox
    /**
     * Creates a new #GtkFileChooserWidget with a specified backend.  This is
     * especially useful if you use gtk_file_chooser_set_local_only() to allow
     * non-local files.  This is a file chooser widget that can be embedded in
     * custom windows and it is the same widget that is used by
     * #GtkFileChooserDialog.
     * @constructor 
     * @param action Open or save mode for the widget
     * @param backend The name of the specific filesystem backend to use.
     */
    static newWithBackend(action: FileChooserAction, backend: string): FileChooserWidget
    _init(config?: FileChooserWidget.ConstructorProperties): void
}

export module FileFilter {

    // Constructor properties interface

    export interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

export interface FileFilter {

    // Owm methods of Gtk-2.0.Gtk.FileFilter

    /**
     * Adds rule to a filter that allows files based on a custom callback
     * function. The bitfield `needed` which is passed in provides information
     * about what sorts of information that the filter function needs;
     * this allows GTK+ to avoid retrieving expensive information when
     * it isn't needed by the filter.
     * @param needed bitfield of flags indicating the information that the custom          filter function needs.
     * @param func callback function; if the function returns %TRUE, then   the file will be displayed.
     */
    addCustom(needed: FileFilterFlags, func: FileFilterFunc): void
    /**
     * Adds a rule allowing a given mime type to `filter`.
     * @param mimeType name of a MIME type
     */
    addMimeType(mimeType: string): void
    /**
     * Adds a rule allowing a shell style glob to a filter.
     * @param pattern a shell style glob
     */
    addPattern(pattern: string): void
    /**
     * Adds a rule allowing image files in the formats supported
     * by GdkPixbuf.
     */
    addPixbufFormats(): void
    /**
     * Tests whether a file should be displayed according to `filter`.
     * The #GtkFileFilterInfo structure `filter_info` should include
     * the fields returned from gtk_file_filter_get_needed().
     * 
     * This function will not typically be used by applications; it
     * is intended principally for use in the implementation of
     * #GtkFileChooser.
     * @param filterInfo a #GtkFileFilterInfo structure containing information  about a file.
     */
    filter(filterInfo: FileFilterInfo): boolean
    /**
     * Gets the human-readable name for the filter. See gtk_file_filter_set_name().
     */
    getName(): string
    /**
     * Gets the fields that need to be filled in for the structure
     * passed to gtk_file_filter_filter()
     * 
     * This function will not typically be used by applications; it
     * is intended principally for use in the implementation of
     * #GtkFileChooser.
     */
    getNeeded(): FileFilterFlags
    /**
     * Sets the human-readable name of the filter; this is the string
     * that will be displayed in the file selector user interface if
     * there is a selectable list of filters.
     * @param name the human-readable-name for the filter, or %NULL   to remove any existing name.
     */
    setName(name: string | null): void

    // Class property signals of Gtk-2.0.Gtk.FileFilter

    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FileFilter extends Object {

    // Own properties of Gtk-2.0.Gtk.FileFilter

    static name: string

    // Constructors of Gtk-2.0.Gtk.FileFilter

    constructor(config?: FileFilter.ConstructorProperties) 
    /**
     * Creates a new #GtkFileFilter with no rules added to it.
     * Such a filter doesn't accept any files, so is not
     * particularly useful until you add rules with
     * gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),
     * or gtk_file_filter_add_custom(). To create a filter
     * that accepts any file, use:
     * |[
     * GtkFileFilter *filter = gtk_file_filter_new ();
     * gtk_file_filter_add_pattern (filter, "*");
     * ```
     * 
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkFileFilter with no rules added to it.
     * Such a filter doesn't accept any files, so is not
     * particularly useful until you add rules with
     * gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),
     * or gtk_file_filter_add_custom(). To create a filter
     * that accepts any file, use:
     * |[
     * GtkFileFilter *filter = gtk_file_filter_new ();
     * gtk_file_filter_add_pattern (filter, "*");
     * ```
     * 
     * @constructor 
     */
    static new(): FileFilter
    _init(config?: FileFilter.ConstructorProperties): void
}

export module FileSelection {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Dialog.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.FileSelection

        filename?: string | null
        selectMultiple?: boolean | null
        showFileops?: boolean | null
    }

}

export interface FileSelection extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.FileSelection

    filename: string
    selectMultiple: boolean
    showFileops: boolean

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Own fields of Gtk-2.0.Gtk.FileSelection

    dirList: Widget
    fileList: Widget
    selectionEntry: Widget
    selectionText: Widget
    mainVbox: Widget
    okButton: Widget
    cancelButton: Widget
    helpButton: Widget
    historyPulldown: Widget
    historyMenu: Widget
    historyList: object[]
    fileopDialog: Widget
    fileopEntry: Widget
    fileopFile: string
    cmplState: object
    fileopCDir: Widget
    fileopDelFile: Widget
    fileopRenFile: Widget
    buttonArea: Widget
    actionArea: Widget

    // Owm methods of Gtk-2.0.Gtk.FileSelection

    complete(pattern: string): void
    /**
     * This function returns the selected filename in the GLib file name
     * encoding. To convert to UTF-8, call g_filename_to_utf8(). The
     * returned string points to a statically allocated buffer and should
     * be copied if you plan to keep it around.
     * 
     * If no file is selected then the selected directory path is returned.
     */
    getFilename(): string
    /**
     * Determines whether or not the user is allowed to select multiple files in
     * the file list. See gtk_file_selection_set_select_multiple().
     */
    getSelectMultiple(): boolean
    hideFileopButtons(): void
    /**
     * Sets a default path for the file requestor. If `filename` includes a
     * directory path, then the requestor will open with that path as its
     * current working directory.
     * 
     * This has the consequence that in order to open the requestor with a
     * working directory and an empty filename, `filename` must have a trailing
     * directory separator.
     * 
     * The encoding of `filename` is preferred GLib file name encoding, which
     * may not be UTF-8. See g_filename_from_utf8().
     * @param filename a string to set as the default file name.
     */
    setFilename(filename: string): void
    /**
     * Sets whether the user is allowed to select multiple files in the file list.
     * Use gtk_file_selection_get_selections () to get the list of selected files.
     * @param selectMultiple whether or not the user is allowed to select multiple files in the file list.
     */
    setSelectMultiple(selectMultiple: boolean): void
    showFileopButtons(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.FileSelection

    connect(sigName: "notify::filename", callback: any): number
    on(sigName: "notify::filename", callback: any): number
    once(sigName: "notify::filename", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filename", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-fileops", callback: any): number
    on(sigName: "notify::show-fileops", callback: any): number
    once(sigName: "notify::show-fileops", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fileops", ...args: any[]): void
    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FileSelection extends Dialog {

    // Own properties of Gtk-2.0.Gtk.FileSelection

    static name: string

    // Constructors of Gtk-2.0.Gtk.FileSelection

    constructor(config?: FileSelection.ConstructorProperties) 
    constructor(title: string) 
    static new(title: string): FileSelection

    // Overloads of new

    static new(): Dialog
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: FileSelection.ConstructorProperties): void
}

export module Fixed {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {
    }

}

export interface Fixed extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Fixed

    container: Container
    children: object[]

    // Owm methods of Gtk-2.0.Gtk.Fixed

    /**
     * Gets whether the #GtkFixed has its own #GdkWindow.
     * See gtk_fixed_set_has_window().
     */
    getHasWindow(): boolean
    move(widget: Widget, x: number, y: number): void
    put(widget: Widget, x: number, y: number): void
    /**
     * Sets whether a #GtkFixed widget is created with a separate
     * #GdkWindow for `widget->`window or not. (By default, it will be
     * created with no separate #GdkWindow). This function must be called
     * while the #GtkFixed is not realized, for instance, immediately after the
     * window is created.
     * 
     * This function was added to provide an easy migration path for
     * older applications which may expect #GtkFixed to have a separate window.
     * @param hasWindow %TRUE if a separate window should be created
     */
    setHasWindow(hasWindow: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Fixed

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Fixed extends Container {

    // Own properties of Gtk-2.0.Gtk.Fixed

    static name: string

    // Constructors of Gtk-2.0.Gtk.Fixed

    constructor(config?: Fixed.ConstructorProperties) 
    constructor() 
    static new(): Fixed
    _init(config?: Fixed.ConstructorProperties): void
}

export module FontButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `font-set`
     */
    export interface FontSetSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Button.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.FontButton

        /**
         * The name of the currently selected font.
         */
        fontName?: string | null
        /**
         * If this property is set to %TRUE, the selected font size will be shown
         * in the label. For a more WYSIWYG way to show the selected size, see the
         * ::use-size property.
         */
        showSize?: boolean | null
        /**
         * If this property is set to %TRUE, the name of the selected font style
         * will be shown in the label. For a more WYSIWYG way to show the selected
         * style, see the ::use-font property.
         */
        showStyle?: boolean | null
        /**
         * The title of the font selection dialog.
         */
        title?: string | null
        /**
         * If this property is set to %TRUE, the label will be drawn
         * in the selected font.
         */
        useFont?: boolean | null
        /**
         * If this property is set to %TRUE, the label will be drawn
         * with the selected font size.
         */
        useSize?: boolean | null
    }

}

export interface FontButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.FontButton

    /**
     * The name of the currently selected font.
     */
    fontName: string
    /**
     * If this property is set to %TRUE, the selected font size will be shown
     * in the label. For a more WYSIWYG way to show the selected size, see the
     * ::use-size property.
     */
    showSize: boolean
    /**
     * If this property is set to %TRUE, the name of the selected font style
     * will be shown in the label. For a more WYSIWYG way to show the selected
     * style, see the ::use-font property.
     */
    showStyle: boolean
    /**
     * The title of the font selection dialog.
     */
    title: string
    /**
     * If this property is set to %TRUE, the label will be drawn
     * in the selected font.
     */
    useFont: boolean
    /**
     * If this property is set to %TRUE, the label will be drawn
     * with the selected font size.
     */
    useSize: boolean

    // Own fields of Gtk-2.0.Gtk.FontButton

    button: Button

    // Owm methods of Gtk-2.0.Gtk.FontButton

    /**
     * Retrieves the name of the currently selected font. This name includes
     * style and size information as well. If you want to render something
     * with the font, use this string with pango_font_description_from_string() .
     * If you're interested in peeking certain values (family name,
     * style, size, weight) just query these properties from the
     * #PangoFontDescription object.
     */
    getFontName(): string
    /**
     * Returns whether the font size will be shown in the label.
     */
    getShowSize(): boolean
    /**
     * Returns whether the name of the font style will be shown in the label.
     */
    getShowStyle(): boolean
    /**
     * Retrieves the title of the font selection dialog.
     */
    getTitle(): string
    /**
     * Returns whether the selected font is used in the label.
     */
    getUseFont(): boolean
    /**
     * Returns whether the selected size is used in the label.
     */
    getUseSize(): boolean
    /**
     * Sets or updates the currently-displayed font in font picker dialog.
     * @param fontname Name of font to display in font selection dialog
     */
    setFontName(fontname: string): boolean
    /**
     * If `show_size` is %TRUE, the font size will be displayed along with the name of the selected font.
     * @param showSize %TRUE if font size should be displayed in dialog.
     */
    setShowSize(showSize: boolean): void
    /**
     * If `show_style` is %TRUE, the font style will be displayed along with name of the selected font.
     * @param showStyle %TRUE if font style should be displayed in label.
     */
    setShowStyle(showStyle: boolean): void
    /**
     * Sets the title for the font selection dialog.
     * @param title a string containing the font selection dialog title
     */
    setTitle(title: string): void
    /**
     * If `use_font` is %TRUE, the font name will be written using the selected font.
     * @param useFont If %TRUE, font name will be written using font chosen.
     */
    setUseFont(useFont: boolean): void
    /**
     * If `use_size` is %TRUE, the font name will be written using the selected size.
     * @param useSize If %TRUE, font name will be written using the selected size.
     */
    setUseSize(useSize: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.FontButton

    fontSet(): void

    // Own signals of Gtk-2.0.Gtk.FontButton

    connect(sigName: "font-set", callback: FontButton.FontSetSignalCallback): number
    on(sigName: "font-set", callback: FontButton.FontSetSignalCallback): number
    once(sigName: "font-set", callback: FontButton.FontSetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "font-set", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.FontButton

    connect(sigName: "notify::font-name", callback: any): number
    on(sigName: "notify::font-name", callback: any): number
    once(sigName: "notify::font-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-name", ...args: any[]): void
    connect(sigName: "notify::show-size", callback: any): number
    on(sigName: "notify::show-size", callback: any): number
    once(sigName: "notify::show-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-size", ...args: any[]): void
    connect(sigName: "notify::show-style", callback: any): number
    on(sigName: "notify::show-style", callback: any): number
    once(sigName: "notify::show-style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-style", ...args: any[]): void
    connect(sigName: "notify::title", callback: any): number
    on(sigName: "notify::title", callback: any): number
    once(sigName: "notify::title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::use-font", callback: any): number
    on(sigName: "notify::use-font", callback: any): number
    once(sigName: "notify::use-font", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-font", ...args: any[]): void
    connect(sigName: "notify::use-size", callback: any): number
    on(sigName: "notify::use-size", callback: any): number
    once(sigName: "notify::use-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-size", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FontButton extends Button {

    // Own properties of Gtk-2.0.Gtk.FontButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.FontButton

    constructor(config?: FontButton.ConstructorProperties) 
    /**
     * Creates a new font picker widget.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new font picker widget.
     * @constructor 
     */
    static new(): FontButton
    /**
     * Creates a new font picker widget.
     * @constructor 
     * @param fontname Name of font to display in font selection dialog
     */
    static newWithFont(fontname: string): FontButton
    _init(config?: FontButton.ConstructorProperties): void
}

export module FontSelection {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, VBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.FontSelection

        fontName?: string | null
        previewText?: string | null
    }

}

export interface FontSelection extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.FontSelection

    fontName: string
    previewText: string

    // Own fields of Gtk-2.0.Gtk.FontSelection

    parentInstance: any
    fontEntry: Widget
    familyList: Widget
    fontStyleEntry: Widget
    faceList: Widget
    sizeEntry: Widget
    sizeList: Widget
    pixelsButton: Widget
    pointsButton: Widget
    filterButton: Widget
    previewEntry: Widget
    family: Pango.FontFamily
    face: Pango.FontFace
    size: number
    font: Gdk.Font

    // Owm methods of Gtk-2.0.Gtk.FontSelection

    /**
     * Gets the #PangoFontFace representing the selected font group
     * details (i.e. family, slant, weight, width, etc).
     */
    getFace(): Pango.FontFace
    /**
     * This returns the #GtkTreeView which lists all styles available for
     * the selected font. For example, 'Regular', 'Bold', etc.
     */
    getFaceList(): Widget
    /**
     * Gets the #PangoFontFamily representing the selected font family.
     */
    getFamily(): Pango.FontFamily
    /**
     * This returns the #GtkTreeView that lists font families, for
     * example, 'Sans', 'Serif', etc.
     */
    getFamilyList(): Widget
    /**
     * Gets the currently-selected font.
     */
    getFont(): Gdk.Font
    /**
     * Gets the currently-selected font name.
     * 
     * Note that this can be a different string than what you set with
     * gtk_font_selection_set_font_name(), as the font selection widget may
     * normalize font names and thus return a string with a different structure.
     * For example, "Helvetica Italic Bold 12" could be normalized to
     * "Helvetica Bold Italic 12". Use pango_font_description_equal()
     * if you want to compare two font descriptions.
     */
    getFontName(): string
    /**
     * This returns the #GtkEntry used to display the font as a preview.
     */
    getPreviewEntry(): Widget
    /**
     * Gets the text displayed in the preview area.
     */
    getPreviewText(): string
    /**
     * The selected font size.
     */
    getSize(): number
    /**
     * This returns the #GtkEntry used to allow the user to edit the font
     * number manually instead of selecting it from the list of font sizes.
     */
    getSizeEntry(): Widget
    /**
     * This returns the #GtkTreeeView used to list font sizes.
     */
    getSizeList(): Widget
    /**
     * Sets the currently-selected font.
     * 
     * Note that the `fontsel` needs to know the screen in which it will appear
     * for this to work; this can be guaranteed by simply making sure that the
     * `fontsel` is inserted in a toplevel window before you call this function.
     * @param fontname a font name like "Helvetica 12" or "Times Bold 18"
     */
    setFontName(fontname: string): boolean
    /**
     * Sets the text displayed in the preview area.
     * The `text` is used to show how the selected font looks.
     * @param text the text to display in the preview area
     */
    setPreviewText(text: string): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.FontSelection

    connect(sigName: "notify::font-name", callback: any): number
    on(sigName: "notify::font-name", callback: any): number
    once(sigName: "notify::font-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-name", ...args: any[]): void
    connect(sigName: "notify::preview-text", callback: any): number
    on(sigName: "notify::preview-text", callback: any): number
    once(sigName: "notify::preview-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::preview-text", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FontSelection extends VBox {

    // Own properties of Gtk-2.0.Gtk.FontSelection

    static name: string

    // Constructors of Gtk-2.0.Gtk.FontSelection

    constructor(config?: FontSelection.ConstructorProperties) 
    /**
     * Creates a new #GtkFontSelection.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkFontSelection.
     * @constructor 
     */
    static new(): FontSelection

    // Overloads of new

    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): VBox
    _init(config?: FontSelection.ConstructorProperties): void
}

export module FontSelectionDialog {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Dialog.ConstructorProperties {
    }

}

export interface FontSelectionDialog extends Atk.ImplementorIface, Buildable {

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Own fields of Gtk-2.0.Gtk.FontSelectionDialog

    parentInstance: any
    okButton: Widget
    applyButton: Widget
    cancelButton: Widget

    // Owm methods of Gtk-2.0.Gtk.FontSelectionDialog

    /**
     * Gets the 'Cancel' button.
     */
    getCancelButton(): Widget
    /**
     * Gets the currently-selected font.
     */
    getFont(): Gdk.Font
    /**
     * Gets the currently-selected font name.
     * 
     * Note that this can be a different string than what you set with
     * gtk_font_selection_dialog_set_font_name(), as the font selection widget
     * may normalize font names and thus return a string with a different
     * structure. For example, "Helvetica Italic Bold 12" could be normalized
     * to "Helvetica Bold Italic 12".  Use pango_font_description_equal()
     * if you want to compare two font descriptions.
     */
    getFontName(): string
    /**
     * Retrieves the #GtkFontSelection widget embedded in the dialog.
     */
    getFontSelection(): Widget
    /**
     * Gets the 'OK' button.
     */
    getOkButton(): Widget
    /**
     * Gets the text displayed in the preview area.
     */
    getPreviewText(): string
    /**
     * Sets the currently selected font.
     * @param fontname a font name like "Helvetica 12" or "Times Bold 18"
     */
    setFontName(fontname: string): boolean
    /**
     * Sets the text displayed in the preview area.
     * @param text the text to display in the preview area
     */
    setPreviewText(text: string): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.FontSelectionDialog

    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class FontSelectionDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.FontSelectionDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.FontSelectionDialog

    constructor(config?: FontSelectionDialog.ConstructorProperties) 
    /**
     * Creates a new #GtkFontSelectionDialog.
     * @constructor 
     * @param title the title of the dialog window
     */
    constructor(title: string) 
    /**
     * Creates a new #GtkFontSelectionDialog.
     * @constructor 
     * @param title the title of the dialog window
     */
    static new(title: string): FontSelectionDialog

    // Overloads of new

    static new(): Dialog
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: FontSelectionDialog.ConstructorProperties): void
}

export module Frame {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Frame

        label?: string | null
        labelWidget?: Widget | null
        labelXalign?: number | null
        labelYalign?: number | null
        shadow?: ShadowType | null
        shadowType?: ShadowType | null
    }

}

export interface Frame extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Frame

    label: string
    shadow: ShadowType

    // Own fields of Gtk-2.0.Gtk.Frame

    bin: Bin
    labelWidget: Widget
    shadowType: number
    labelXalign: number
    labelYalign: number
    childAllocation: Allocation

    // Owm methods of Gtk-2.0.Gtk.Frame

    /**
     * If the frame's label widget is a #GtkLabel, returns the
     * text in the label widget. (The frame will have a #GtkLabel
     * for the label widget if a non-%NULL argument was passed
     * to gtk_frame_new().)
     */
    getLabel(): string
    /**
     * Retrieves the X and Y alignment of the frame's label. See
     * gtk_frame_set_label_align().
     */
    getLabelAlign(): [ /* xalign */ number, /* yalign */ number ]
    /**
     * Retrieves the label widget for the frame. See
     * gtk_frame_set_label_widget().
     */
    getLabelWidget(): Widget
    /**
     * Retrieves the shadow type of the frame. See
     * gtk_frame_set_shadow_type().
     */
    getShadowType(): ShadowType
    /**
     * Sets the text of the label. If `label` is %NULL,
     * the current label is removed.
     * @param label the text to use as the label of the frame
     */
    setLabel(label: string | null): void
    /**
     * Sets the alignment of the frame widget's label. The
     * default values for a newly created frame are 0.0 and 0.5.
     * @param xalign The position of the label along the top edge   of the widget. A value of 0.0 represents left alignment;   1.0 represents right alignment.
     * @param yalign The y alignment of the label. A value of 0.0 aligns under   the frame; 1.0 aligns above the frame. If the values are exactly   0.0 or 1.0 the gap in the frame won't be painted because the label   will be completely above or below the frame.
     */
    setLabelAlign(xalign: number, yalign: number): void
    /**
     * Sets the label widget for the frame. This is the widget that
     * will appear embedded in the top edge of the frame as a
     * title.
     * @param labelWidget the new label widget
     */
    setLabelWidget(labelWidget: Widget): void
    /**
     * Sets the shadow type for `frame`.
     * @param type the new #GtkShadowType
     */
    setShadowType(type: ShadowType): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Frame

    computeChildAllocation(allocation: Allocation): void

    // Class property signals of Gtk-2.0.Gtk.Frame

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::shadow", callback: any): number
    on(sigName: "notify::shadow", callback: any): number
    once(sigName: "notify::shadow", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::shadow", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Frame extends Bin {

    // Own properties of Gtk-2.0.Gtk.Frame

    static name: string

    // Constructors of Gtk-2.0.Gtk.Frame

    constructor(config?: Frame.ConstructorProperties) 
    /**
     * Creates a new #GtkFrame, with optional label `label`.
     * If `label` is %NULL, the label is omitted.
     * @constructor 
     * @param label the text to use as the label of the frame
     */
    constructor(label: string) 
    /**
     * Creates a new #GtkFrame, with optional label `label`.
     * If `label` is %NULL, the label is omitted.
     * @constructor 
     * @param label the text to use as the label of the frame
     */
    static new(label: string): Frame
    _init(config?: Frame.ConstructorProperties): void
}

export module GammaCurve {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, VBox.ConstructorProperties {
    }

}

export interface GammaCurve extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.GammaCurve

    vbox: VBox
    table: Widget
    curve: Widget
    button: Widget[]
    gamma: number
    gammaDialog: Widget
    gammaText: Widget

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.GammaCurve

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class GammaCurve extends VBox {

    // Own properties of Gtk-2.0.Gtk.GammaCurve

    static name: string

    // Constructors of Gtk-2.0.Gtk.GammaCurve

    constructor(config?: GammaCurve.ConstructorProperties) 
    constructor() 
    static new(): GammaCurve

    // Overloads of new

    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): VBox
    _init(config?: GammaCurve.ConstructorProperties): void
}

export module HBox {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Box.ConstructorProperties {
    }

}

export interface HBox extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HBox

    box: Box

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HBox

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkHBox is a container that organizes child widgets into a single row.
 * 
 * Use the #GtkBox packing interface to determine the arrangement,
 * spacing, width, and alignment of #GtkHBox children.
 * 
 * All children are allocated the same height.
 * @class 
 */
export class HBox extends Box {

    // Own properties of Gtk-2.0.Gtk.HBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.HBox

    constructor(config?: HBox.ConstructorProperties) 
    /**
     * Creates a new #GtkHBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    constructor(homogeneous: boolean, spacing: number) 
    /**
     * Creates a new #GtkHBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): HBox
    _init(config?: HBox.ConstructorProperties): void
}

export module HButtonBox {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, ButtonBox.ConstructorProperties {
    }

}

export interface HButtonBox extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HButtonBox

    buttonBox: ButtonBox

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HButtonBox

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HButtonBox extends ButtonBox {

    // Own properties of Gtk-2.0.Gtk.HButtonBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.HButtonBox

    constructor(config?: HButtonBox.ConstructorProperties) 
    constructor() 
    static new(): HButtonBox
    _init(config?: HButtonBox.ConstructorProperties): void
    static getLayoutDefault(): ButtonBoxStyle
    static getSpacingDefault(): number
    static setLayoutDefault(layout: ButtonBoxStyle): void
    static setSpacingDefault(spacing: number): void
}

export module HPaned {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Paned.ConstructorProperties {
    }

}

export interface HPaned extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HPaned

    paned: Paned

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HPaned

    connect(sigName: "notify::max-position", callback: any): number
    on(sigName: "notify::max-position", callback: any): number
    once(sigName: "notify::max-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-position", ...args: any[]): void
    connect(sigName: "notify::min-position", callback: any): number
    on(sigName: "notify::min-position", callback: any): number
    once(sigName: "notify::min-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::min-position", ...args: any[]): void
    connect(sigName: "notify::position", callback: any): number
    on(sigName: "notify::position", callback: any): number
    once(sigName: "notify::position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::position", ...args: any[]): void
    connect(sigName: "notify::position-set", callback: any): number
    on(sigName: "notify::position-set", callback: any): number
    once(sigName: "notify::position-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::position-set", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HPaned extends Paned {

    // Own properties of Gtk-2.0.Gtk.HPaned

    static name: string

    // Constructors of Gtk-2.0.Gtk.HPaned

    constructor(config?: HPaned.ConstructorProperties) 
    constructor() 
    static new(): HPaned
    _init(config?: HPaned.ConstructorProperties): void
}

export module HRuler {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Ruler.ConstructorProperties {
    }

}

export interface HRuler extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HRuler

    ruler: Ruler

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HRuler

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HRuler extends Ruler {

    // Own properties of Gtk-2.0.Gtk.HRuler

    static name: string

    // Constructors of Gtk-2.0.Gtk.HRuler

    constructor(config?: HRuler.ConstructorProperties) 
    constructor() 
    static new(): HRuler
    _init(config?: HRuler.ConstructorProperties): void
}

export module HSV {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `move`
     */
    export interface MoveSignalCallback {
        (object: DirectionType): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {
    }

}

export interface HSV extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.HSV

    parentInstance: any
    priv: object

    // Owm methods of Gtk-2.0.Gtk.HSV

    /**
     * Queries the current color in an HSV color selector.
     * Returned values will be in the [0.0, 1.0] range.
     */
    getColor(): [ /* h */ number, /* s */ number, /* v */ number ]
    /**
     * Queries the size and ring width of an HSV color selector.
     */
    getMetrics(): [ /* size */ number, /* ringWidth */ number ]
    /**
     * An HSV color selector can be said to be adjusting if multiple rapid
     * changes are being made to its value, for example, when the user is
     * adjusting the value with the mouse. This function queries whether
     * the HSV color selector is being adjusted or not.
     */
    isAdjusting(): boolean
    /**
     * Sets the current color in an HSV color selector.
     * Color component values must be in the [0.0, 1.0] range.
     * @param h Hue
     * @param s Saturation
     * @param v Value
     */
    setColor(h: number, s: number, v: number): void
    /**
     * Sets the size and ring width of an HSV color selector.
     * @param size Diameter for the hue ring
     * @param ringWidth Width of the hue ring
     */
    setMetrics(size: number, ringWidth: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.HSV

    changed(): void
    move(type: DirectionType): void

    // Own signals of Gtk-2.0.Gtk.HSV

    connect(sigName: "changed", callback: HSV.ChangedSignalCallback): number
    on(sigName: "changed", callback: HSV.ChangedSignalCallback): number
    once(sigName: "changed", callback: HSV.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void
    connect(sigName: "move", callback: HSV.MoveSignalCallback): number
    on(sigName: "move", callback: HSV.MoveSignalCallback): number
    once(sigName: "move", callback: HSV.MoveSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.HSV

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HSV extends Widget {

    // Own properties of Gtk-2.0.Gtk.HSV

    static name: string

    // Constructors of Gtk-2.0.Gtk.HSV

    constructor(config?: HSV.ConstructorProperties) 
    /**
     * Creates a new HSV color selector.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new HSV color selector.
     * @constructor 
     */
    static new(): HSV
    _init(config?: HSV.ConstructorProperties): void
    /**
     * Converts a color from HSV space to RGB.
     * Input values must be in the [0.0, 1.0] range;
     * output values will be in the same range.
     * @param h Hue
     * @param s Saturation
     * @param v Value
     */
    static toRgb(h: number, s: number, v: number): [ /* r */ number, /* g */ number, /* b */ number ]
}

export module HScale {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Scale.ConstructorProperties {
    }

}

export interface HScale extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HScale

    scale: Scale

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HScale

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HScale extends Scale {

    // Own properties of Gtk-2.0.Gtk.HScale

    static name: string

    // Constructors of Gtk-2.0.Gtk.HScale

    constructor(config?: HScale.ConstructorProperties) 
    constructor(adjustment: Adjustment) 
    static new(adjustment: Adjustment): HScale
    /**
     * Creates a new horizontal scale widget that lets the user input a
     * number between `min` and `max` (including `min` and `max)` with the
     * increment `step`.  `step` must be nonzero; it's the distance the
     * slider moves when using the arrow keys to adjust the scale value.
     * 
     * Note that the way in which the precision is derived works best if `step`
     * is a power of ten. If the resulting precision is not suitable for your
     * needs, use gtk_scale_set_digits() to correct it.
     * @constructor 
     * @param min minimum value
     * @param max maximum value
     * @param step step increment (tick size) used with keyboard shortcuts
     */
    static newWithRange(min: number, max: number, step: number): HScale
    _init(config?: HScale.ConstructorProperties): void
}

export module HScrollbar {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Scrollbar.ConstructorProperties {
    }

}

export interface HScrollbar extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HScrollbar

    scrollbar: Scrollbar

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HScrollbar

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HScrollbar extends Scrollbar {

    // Own properties of Gtk-2.0.Gtk.HScrollbar

    static name: string

    // Constructors of Gtk-2.0.Gtk.HScrollbar

    constructor(config?: HScrollbar.ConstructorProperties) 
    /**
     * Creates a new horizontal scrollbar.
     * @constructor 
     * @param adjustment the #GtkAdjustment to use, or %NULL to create a new adjustment
     */
    constructor(adjustment: Adjustment | null) 
    /**
     * Creates a new horizontal scrollbar.
     * @constructor 
     * @param adjustment the #GtkAdjustment to use, or %NULL to create a new adjustment
     */
    static new(adjustment: Adjustment | null): HScrollbar
    _init(config?: HScrollbar.ConstructorProperties): void
}

export module HSeparator {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Separator.ConstructorProperties {
    }

}

export interface HSeparator extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.HSeparator

    separator: Separator

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.HSeparator

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HSeparator extends Separator {

    // Own properties of Gtk-2.0.Gtk.HSeparator

    static name: string

    // Constructors of Gtk-2.0.Gtk.HSeparator

    constructor(config?: HSeparator.ConstructorProperties) 
    constructor() 
    static new(): HSeparator
    _init(config?: HSeparator.ConstructorProperties): void
}

export module HandleBox {

    // Signal callback interfaces

    /**
     * Signal callback interface for `child-attached`
     */
    export interface ChildAttachedSignalCallback {
        (object: Widget): void
    }

    /**
     * Signal callback interface for `child-detached`
     */
    export interface ChildDetachedSignalCallback {
        (object: Widget): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.HandleBox

        handlePosition?: PositionType | null
        shadow?: ShadowType | null
        shadowType?: ShadowType | null
        snapEdge?: PositionType | null
        snapEdgeSet?: boolean | null
    }

}

export interface HandleBox extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.HandleBox

    shadow: ShadowType
    snapEdgeSet: boolean

    // Own fields of Gtk-2.0.Gtk.HandleBox

    bin: Bin
    binWindow: Gdk.Window
    floatWindow: Gdk.Window
    shadowType: ShadowType
    handlePosition: number
    floatWindowMapped: number
    // Has conflict: childDetached: number
    inDrag: number
    shrinkOnDetach: number
    snapEdge: number
    deskoffX: number
    deskoffY: number
    attachAllocation: Allocation
    floatAllocation: Allocation

    // Owm methods of Gtk-2.0.Gtk.HandleBox

    /**
     * Whether the handlebox's child is currently detached.
     */
    getChildDetached(): boolean
    /**
     * Gets the handle position of the handle box. See
     * gtk_handle_box_set_handle_position().
     */
    getHandlePosition(): PositionType
    /**
     * Gets the type of shadow drawn around the handle box. See
     * gtk_handle_box_set_shadow_type().
     */
    getShadowType(): ShadowType
    /**
     * Gets the edge used for determining reattachment of the handle box. See
     * gtk_handle_box_set_snap_edge().
     */
    getSnapEdge(): PositionType
    setHandlePosition(position: PositionType): void
    setShadowType(type: ShadowType): void
    setSnapEdge(edge: PositionType): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.HandleBox

    childAttached(child: Widget): void
    childDetached(child: Widget): void

    // Own signals of Gtk-2.0.Gtk.HandleBox

    connect(sigName: "child-attached", callback: HandleBox.ChildAttachedSignalCallback): number
    on(sigName: "child-attached", callback: HandleBox.ChildAttachedSignalCallback): number
    once(sigName: "child-attached", callback: HandleBox.ChildAttachedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "child-attached", ...args: any[]): void
    connect(sigName: "child-detached", callback: HandleBox.ChildDetachedSignalCallback): number
    on(sigName: "child-detached", callback: HandleBox.ChildDetachedSignalCallback): number
    once(sigName: "child-detached", callback: HandleBox.ChildDetachedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "child-detached", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.HandleBox

    connect(sigName: "notify::shadow", callback: any): number
    on(sigName: "notify::shadow", callback: any): number
    once(sigName: "notify::shadow", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::shadow", ...args: any[]): void
    connect(sigName: "notify::snap-edge-set", callback: any): number
    on(sigName: "notify::snap-edge-set", callback: any): number
    once(sigName: "notify::snap-edge-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::snap-edge-set", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class HandleBox extends Bin {

    // Own properties of Gtk-2.0.Gtk.HandleBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.HandleBox

    constructor(config?: HandleBox.ConstructorProperties) 
    constructor() 
    static new(): HandleBox
    _init(config?: HandleBox.ConstructorProperties): void
}

export module IMContext {

    // Signal callback interfaces

    /**
     * Signal callback interface for `commit`
     */
    export interface CommitSignalCallback {
        (str: string): void
    }

    /**
     * Signal callback interface for `delete-surrounding`
     */
    export interface DeleteSurroundingSignalCallback {
        (offset: number, nChars: number): boolean
    }

    /**
     * Signal callback interface for `preedit-changed`
     */
    export interface PreeditChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `preedit-end`
     */
    export interface PreeditEndSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `preedit-start`
     */
    export interface PreeditStartSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `retrieve-surrounding`
     */
    export interface RetrieveSurroundingSignalCallback {
        (): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface IMContext {

    // Own fields of Gtk-2.0.Gtk.IMContext

    parentInstance: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.IMContext

    // Has conflict: deleteSurrounding(offset: number, nChars: number): boolean
    // Has conflict: filterKeypress(event: Gdk.EventKey): boolean
    // Has conflict: focusIn(): void
    // Has conflict: focusOut(): void
    // Has conflict: getPreeditString(): [ /* str */ string, /* attrs */ Pango.AttrList, /* cursorPos */ number ]
    // Has conflict: getSurrounding(): [ /* returnType */ boolean, /* text */ string, /* cursorIndex */ number ]
    // Has conflict: reset(): void
    // Has conflict: setClientWindow(window: Gdk.Window | null): void
    // Has conflict: setCursorLocation(area: Gdk.Rectangle): void
    // Has conflict: setSurrounding(text: string, len: number, cursorIndex: number): void
    // Has conflict: setUsePreedit(usePreedit: boolean): void

    // Own virtual methods of Gtk-2.0.Gtk.IMContext

    commit(str: string): void
    /**
     * Asks the widget that the input context is attached to to delete
     * characters around the cursor position by emitting the
     * GtkIMContext::delete_surrounding signal. Note that `offset` and `n_chars`
     * are in characters not in bytes which differs from the usage other
     * places in #GtkIMContext.
     * 
     * In order to use this function, you should first call
     * gtk_im_context_get_surrounding() to get the current context, and
     * call this function immediately afterwards to make sure that you
     * know what you are deleting. You should also account for the fact
     * that even if the signal was handled, the input context might not
     * have deleted all the characters that were requested to be deleted.
     * 
     * This function is used by an input method that wants to make
     * subsitutions in the existing text in response to new input. It is
     * not useful for applications.
     * @virtual 
     * @param offset offset from cursor position in chars;    a negative value means start before the cursor.
     * @param nChars number of characters to delete.
     */
    deleteSurrounding(offset: number, nChars: number): boolean
    /**
     * Allow an input method to internally handle key press and release
     * events. If this function returns %TRUE, then no further processing
     * should be done for this key event.
     * @virtual 
     * @param event the key event
     */
    filterKeypress(event: Gdk.EventKey): boolean
    /**
     * Notify the input method that the widget to which this
     * input context corresponds has gained focus. The input method
     * may, for example, change the displayed feedback to reflect
     * this change.
     * @virtual 
     */
    focusIn(): void
    /**
     * Notify the input method that the widget to which this
     * input context corresponds has lost focus. The input method
     * may, for example, change the displayed feedback or reset the contexts
     * state to reflect this change.
     * @virtual 
     */
    focusOut(): void
    /**
     * Retrieve the current preedit string for the input context,
     * and a list of attributes to apply to the string.
     * This string should be displayed inserted at the insertion
     * point.
     * @virtual 
     */
    getPreeditString(): [ /* str */ string, /* attrs */ Pango.AttrList, /* cursorPos */ number ]
    /**
     * Retrieves context around the insertion point. Input methods
     * typically want context in order to constrain input text based on
     * existing text; this is important for languages such as Thai where
     * only some sequences of characters are allowed.
     * 
     * This function is implemented by emitting the
     * GtkIMContext::retrieve_surrounding signal on the input method; in
     * response to this signal, a widget should provide as much context as
     * is available, up to an entire paragraph, by calling
     * gtk_im_context_set_surrounding(). Note that there is no obligation
     * for a widget to respond to the ::retrieve_surrounding signal, so input
     * methods must be prepared to function without context.
     * @virtual 
     */
    getSurrounding(): [ /* returnType */ boolean, /* text */ string, /* cursorIndex */ number ]
    preeditChanged(): void
    preeditEnd(): void
    preeditStart(): void
    /**
     * Notify the input method that a change such as a change in cursor
     * position has been made. This will typically cause the input
     * method to clear the preedit state.
     * @virtual 
     */
    reset(): void
    retrieveSurrounding(): boolean
    /**
     * Set the client window for the input context; this is the
     * #GdkWindow in which the input appears. This window is
     * used in order to correctly position status windows, and may
     * also be used for purposes internal to the input method.
     * @virtual 
     * @param window the client window. This may be %NULL to indicate           that the previous client window no longer exists.
     */
    setClientWindow(window: Gdk.Window | null): void
    /**
     * Notify the input method that a change in cursor
     * position has been made. The location is relative to the client
     * window.
     * @virtual 
     * @param area new location
     */
    setCursorLocation(area: Gdk.Rectangle): void
    /**
     * Sets surrounding context around the insertion point and preedit
     * string. This function is expected to be called in response to the
     * GtkIMContext::retrieve_surrounding signal, and will likely have no
     * effect if called at other times.
     * @virtual 
     * @param text text surrounding the insertion point, as UTF-8.        the preedit string should not be included within        `text`.
     * @param len the length of `text,` or -1 if `text` is nul-terminated
     * @param cursorIndex the byte index of the insertion cursor within `text`.
     */
    setSurrounding(text: string, len: number, cursorIndex: number): void
    /**
     * Sets whether the IM context should use the preedit string
     * to display feedback. If `use_preedit` is FALSE (default
     * is TRUE), then the IM context may use some other method to display
     * feedback, such as displaying it in a child of the root window.
     * @virtual 
     * @param usePreedit whether the IM context should use the preedit string.
     */
    setUsePreedit(usePreedit: boolean): void

    // Own signals of Gtk-2.0.Gtk.IMContext

    connect(sigName: "commit", callback: IMContext.CommitSignalCallback): number
    on(sigName: "commit", callback: IMContext.CommitSignalCallback): number
    once(sigName: "commit", callback: IMContext.CommitSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "commit", ...args: any[]): void
    connect(sigName: "delete-surrounding", callback: IMContext.DeleteSurroundingSignalCallback): number
    on(sigName: "delete-surrounding", callback: IMContext.DeleteSurroundingSignalCallback): number
    once(sigName: "delete-surrounding", callback: IMContext.DeleteSurroundingSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "delete-surrounding", nChars: number, ...args: any[]): void
    connect(sigName: "preedit-changed", callback: IMContext.PreeditChangedSignalCallback): number
    on(sigName: "preedit-changed", callback: IMContext.PreeditChangedSignalCallback): number
    once(sigName: "preedit-changed", callback: IMContext.PreeditChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "preedit-changed", ...args: any[]): void
    connect(sigName: "preedit-end", callback: IMContext.PreeditEndSignalCallback): number
    on(sigName: "preedit-end", callback: IMContext.PreeditEndSignalCallback): number
    once(sigName: "preedit-end", callback: IMContext.PreeditEndSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "preedit-end", ...args: any[]): void
    connect(sigName: "preedit-start", callback: IMContext.PreeditStartSignalCallback): number
    on(sigName: "preedit-start", callback: IMContext.PreeditStartSignalCallback): number
    once(sigName: "preedit-start", callback: IMContext.PreeditStartSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "preedit-start", ...args: any[]): void
    connect(sigName: "retrieve-surrounding", callback: IMContext.RetrieveSurroundingSignalCallback): number
    on(sigName: "retrieve-surrounding", callback: IMContext.RetrieveSurroundingSignalCallback): number
    once(sigName: "retrieve-surrounding", callback: IMContext.RetrieveSurroundingSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "retrieve-surrounding", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.IMContext

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkIMContext defines the interface for GTK+ input methods. An input method
 * is used by GTK+ text input widgets like #GtkEntry to map from key events to
 * Unicode character strings.
 * 
 * The user may change the current input method via a context menu, unless the
 * #GtkSettings:gtk-show-input-method-menu GtkSettings property is set to FALSE.
 * The default input method can be set programmatically via the
 * #GtkSettings:gtk-im-module GtkSettings property. Alternatively, you may set
 * the GTK_IM_MODULE environment variable as documented in #gtk-running.
 * 
 * The #GtkEntry #GtkEntry:im-module and #GtkTextView #GtkTextView:im-module
 * properties may also be used to set input methods for specific widget
 * instances. For instance, a certain entry widget might be expected to contain
 * certain characters which would be easier to input with a certain input
 * method.
 * 
 * An input method may consume multiple key events in sequence and finally
 * output the composed result. This is called preediting, and an input method
 * may provide feedback about this process by displaying the intermediate
 * composition states as preedit text. For instance, the default GTK+ input
 * method implements the input of arbitrary Unicode code points by holding down
 * the Control and Shift keys and then typing "U" followed by the hexadecimal
 * digits of the code point.  When releasing the Control and Shift keys,
 * preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for
 * example results in the € sign.
 * 
 * Additional input methods can be made available for use by GTK+ widgets as
 * loadable modules. An input method module is a small shared library which
 * implements a subclass of #GtkIMContext or #GtkIMContextSimple and exports
 * these four functions:
 * 
 * <informalexample><programlisting>
 * void im_module_init(#GTypeModule *module);
 * </programlisting></informalexample>
 * This function should register the #GType of the #GtkIMContext subclass which
 * implements the input method by means of g_type_module_register_type(). Note
 * that g_type_register_static() cannot be used as the type needs to be
 * registered dynamically.
 * 
 * <informalexample><programlisting>
 * void im_module_exit(void);
 * </programlisting></informalexample>
 * Here goes any cleanup code your input method might require on module unload.
 * 
 * <informalexample><programlisting>
 * void im_module_list(const #GtkIMContextInfo ***contexts, int *n_contexts)
 * {
 *   *contexts = info_list;
 *   *n_contexts = G_N_ELEMENTS (info_list);
 * }
 * </programlisting></informalexample>
 * This function returns the list of input methods provided by the module. The
 * example implementation above shows a common solution and simply returns a
 * pointer to statically defined array of #GtkIMContextInfo items for each
 * provided input method.
 * 
 * <informalexample><programlisting>
 * #GtkIMContext * im_module_create(const #gchar *context_id);
 * </programlisting></informalexample>
 * This function should return a pointer to a newly created instance of the
 * #GtkIMContext subclass identified by `context_id`. The context ID is the same
 * as specified in the #GtkIMContextInfo array returned by im_module_list().
 * 
 * After a new loadable input method module has been installed on the system,
 * the configuration file <filename>immodules.cache</filename> needs to be
 * regenerated by <link linkend="gtk-query-immodules-2.0">gtk-query-immodules-2.0</link>,
 * in order for the new input method to become available to GTK+ applications.
 * @class 
 */
export class IMContext extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.IMContext

    static name: string

    // Constructors of Gtk-2.0.Gtk.IMContext

    constructor(config?: IMContext.ConstructorProperties) 
    _init(config?: IMContext.ConstructorProperties): void
}

export module IMContextSimple {

    // Constructor properties interface

    export interface ConstructorProperties extends IMContext.ConstructorProperties {
    }

}

export interface IMContextSimple {

    // Own fields of Gtk-2.0.Gtk.IMContextSimple

    object: IMContext
    tables: object[]
    composeBuffer: number[]
    tentativeMatch: string
    tentativeMatchLen: number
    inHexSequence: number
    modifiersDropped: number

    // Owm methods of Gtk-2.0.Gtk.IMContextSimple

    /**
     * Adds an additional table to search to the input context.
     * Each row of the table consists of `max_seq_len` key symbols
     * followed by two #guint16 interpreted as the high and low
     * words of a #gunicode value. Tables are searched starting
     * from the last added.
     * 
     * The table must be sorted in dictionary order on the
     * numeric value of the key symbol fields. (Values beyond
     * the length of the sequence should be zero.)
     * @param data the table
     * @param maxSeqLen Maximum length of a sequence in the table               (cannot be greater than #GTK_MAX_COMPOSE_LEN)
     * @param nSeqs number of sequences in the table
     */
    addTable(data: number, maxSeqLen: number, nSeqs: number): void

    // Class property signals of Gtk-2.0.Gtk.IMContextSimple

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class IMContextSimple extends IMContext {

    // Own properties of Gtk-2.0.Gtk.IMContextSimple

    static name: string

    // Constructors of Gtk-2.0.Gtk.IMContextSimple

    constructor(config?: IMContextSimple.ConstructorProperties) 
    /**
     * Creates a new #GtkIMContextSimple.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkIMContextSimple.
     * @constructor 
     */
    static new(): IMContextSimple
    _init(config?: IMContextSimple.ConstructorProperties): void
}

export module IMMulticontext {

    // Constructor properties interface

    export interface ConstructorProperties extends IMContext.ConstructorProperties {
    }

}

export interface IMMulticontext {

    // Own fields of Gtk-2.0.Gtk.IMMulticontext

    object: IMContext
    slave: IMContext
    priv: IMMulticontextPrivate
    contextId: string

    // Owm methods of Gtk-2.0.Gtk.IMMulticontext

    /**
     * Add menuitems for various available input methods to a menu;
     * the menuitems, when selected, will switch the input method
     * for the context and the global default input method.
     * @param menushell a #GtkMenuShell
     */
    appendMenuitems(menushell: MenuShell): void
    /**
     * Gets the id of the currently active slave of the `context`.
     */
    getContextId(): string
    /**
     * Sets the context id for `context`.
     * 
     * This causes the currently active slave of `context` to be
     * replaced by the slave corresponding to the new context id.
     * @param contextId the id to use
     */
    setContextId(contextId: string): void

    // Class property signals of Gtk-2.0.Gtk.IMMulticontext

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class IMMulticontext extends IMContext {

    // Own properties of Gtk-2.0.Gtk.IMMulticontext

    static name: string

    // Constructors of Gtk-2.0.Gtk.IMMulticontext

    constructor(config?: IMMulticontext.ConstructorProperties) 
    /**
     * Creates a new #GtkIMMulticontext.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkIMMulticontext.
     * @constructor 
     */
    static new(): IMMulticontext
    _init(config?: IMMulticontext.ConstructorProperties): void
}

export module IconFactory {

    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

export interface IconFactory extends Buildable {

    // Own fields of Gtk-2.0.Gtk.IconFactory

    parentInstance: GObject.Object
    icons: GLib.HashTable

    // Owm methods of Gtk-2.0.Gtk.IconFactory

    /**
     * Adds the given `icon_set` to the icon factory, under the name
     * `stock_id`.  `stock_id` should be namespaced for your application,
     * e.g. "myapp-whatever-icon".  Normally applications create a
     * #GtkIconFactory, then add it to the list of default factories with
     * gtk_icon_factory_add_default(). Then they pass the `stock_id` to
     * widgets such as #GtkImage to display the icon. Themes can provide
     * an icon with the same name (such as "myapp-whatever-icon") to
     * override your application's default icons. If an icon already
     * existed in `factory` for `stock_id,` it is unreferenced and replaced
     * with the new `icon_set`.
     * @param stockId icon name
     * @param iconSet icon set
     */
    add(stockId: string, iconSet: IconSet): void
    /**
     * Adds an icon factory to the list of icon factories searched by
     * gtk_style_lookup_icon_set(). This means that, for example,
     * gtk_image_new_from_stock() will be able to find icons in `factory`.
     * There will normally be an icon factory added for each library or
     * application that comes with icons. The default icon factories
     * can be overridden by themes.
     */
    addDefault(): void
    /**
     * Looks up `stock_id` in the icon factory, returning an icon set
     * if found, otherwise %NULL. For display to the user, you should
     * use gtk_style_lookup_icon_set() on the #GtkStyle for the
     * widget that will display the icon, instead of using this
     * function directly, so that themes are taken into account.
     * @param stockId an icon name
     */
    lookup(stockId: string): IconSet
    /**
     * Removes an icon factory from the list of default icon
     * factories. Not normally used; you might use it for a library that
     * can be unloaded or shut down.
     */
    removeDefault(): void

    // Class property signals of Gtk-2.0.Gtk.IconFactory

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class IconFactory extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.IconFactory

    static name: string

    // Constructors of Gtk-2.0.Gtk.IconFactory

    constructor(config?: IconFactory.ConstructorProperties) 
    /**
     * Creates a new #GtkIconFactory. An icon factory manages a collection
     * of #GtkIconSet<!-- -->s; a #GtkIconSet manages a set of variants of a
     * particular icon (i.e. a #GtkIconSet contains variants for different
     * sizes and widget states). Icons in an icon factory are named by a
     * stock ID, which is a simple string identifying the icon. Each
     * #GtkStyle has a list of #GtkIconFactory<!-- -->s derived from the current
     * theme; those icon factories are consulted first when searching for
     * an icon. If the theme doesn't set a particular icon, GTK+ looks for
     * the icon in a list of default icon factories, maintained by
     * gtk_icon_factory_add_default() and
     * gtk_icon_factory_remove_default(). Applications with icons should
     * add a default icon factory with their icons, which will allow
     * themes to override the icons for the application.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkIconFactory. An icon factory manages a collection
     * of #GtkIconSet<!-- -->s; a #GtkIconSet manages a set of variants of a
     * particular icon (i.e. a #GtkIconSet contains variants for different
     * sizes and widget states). Icons in an icon factory are named by a
     * stock ID, which is a simple string identifying the icon. Each
     * #GtkStyle has a list of #GtkIconFactory<!-- -->s derived from the current
     * theme; those icon factories are consulted first when searching for
     * an icon. If the theme doesn't set a particular icon, GTK+ looks for
     * the icon in a list of default icon factories, maintained by
     * gtk_icon_factory_add_default() and
     * gtk_icon_factory_remove_default(). Applications with icons should
     * add a default icon factory with their icons, which will allow
     * themes to override the icons for the application.
     * @constructor 
     */
    static new(): IconFactory
    _init(config?: IconFactory.ConstructorProperties): void
    /**
     * Looks for an icon in the list of default icon factories.  For
     * display to the user, you should use gtk_style_lookup_icon_set() on
     * the #GtkStyle for the widget that will display the icon, instead of
     * using this function directly, so that themes are taken into
     * account.
     * @param stockId an icon name
     */
    static lookupDefault(stockId: string): IconSet
}

export module IconTheme {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface IconTheme {

    // Owm methods of Gtk-2.0.Gtk.IconTheme

    /**
     * Appends a directory to the search path.
     * See gtk_icon_theme_set_search_path().
     * @param path directory name to append to the icon path
     */
    appendSearchPath(path: string): void
    /**
     * Looks up a named icon and returns a structure containing
     * information such as the filename of the icon. The icon
     * can then be rendered into a pixbuf using
     * gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
     * combines these two steps if all you need is the pixbuf.)
     * 
     * If `icon_names` contains more than one name, this function
     * tries them all in the given order before falling back to
     * inherited icon themes.
     * @param iconNames %NULL-terminated array of     icon names to lookup
     * @param size desired icon size
     * @param flags flags modifying the behavior of the icon lookup
     */
    chooseIcon(iconNames: string[], size: number, flags: IconLookupFlags): IconInfo
    /**
     * Gets the name of an icon that is representative of the
     * current theme (for instance, to use when presenting
     * a list of themes to the user.)
     */
    getExampleIconName(): string
    /**
     * Returns an array of integers describing the sizes at which
     * the icon is available without scaling. A size of -1 means
     * that the icon is available in a scalable format. The array
     * is zero-terminated.
     * @param iconName the name of an icon
     */
    getIconSizes(iconName: string): number[]
    /**
     * Gets the current search path. See gtk_icon_theme_set_search_path().
     */
    getSearchPath(): /* path */ string[]
    /**
     * Checks whether an icon theme includes an icon
     * for a particular name.
     * @param iconName the name of an icon
     */
    hasIcon(iconName: string): boolean
    /**
     * Gets the list of contexts available within the current
     * hierarchy of icon themes
     */
    listContexts(): string[]
    /**
     * Lists the icons in the current icon theme. Only a subset
     * of the icons can be listed by providing a context string.
     * The set of values for the context string is system dependent,
     * but will typically include such values as "Applications" and
     * "MimeTypes".
     * @param context a string identifying a particular type of icon,           or %NULL to list all icons.
     */
    listIcons(context: string): string[]
    /**
     * Looks up an icon in an icon theme, scales it to the given size
     * and renders it into a pixbuf. This is a convenience function;
     * if more details about the icon are needed, use
     * gtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon().
     * 
     * Note that you probably want to listen for icon theme changes and
     * update the icon. This is usually done by connecting to the
     * GtkWidget::style-set signal. If for some reason you do not want to
     * update the icon when the icon theme changes, you should consider
     * using gdk_pixbuf_copy() to make a private copy of the pixbuf
     * returned by this function. Otherwise GTK+ may need to keep the old
     * icon theme loaded, which would be a waste of memory.
     * @param iconName the name of the icon to lookup
     * @param size the desired icon size. The resulting icon may not be        exactly this size; see gtk_icon_info_load_icon().
     * @param flags flags modifying the behavior of the icon lookup
     */
    loadIcon(iconName: string, size: number, flags: IconLookupFlags): GdkPixbuf.Pixbuf
    /**
     * Looks up an icon and returns a structure containing
     * information such as the filename of the icon.
     * The icon can then be rendered into a pixbuf using
     * gtk_icon_info_load_icon().
     * @param icon the #GIcon to look up
     * @param size desired icon size
     * @param flags flags modifying the behavior of the icon lookup
     */
    lookupByGicon(icon: Gio.Icon, size: number, flags: IconLookupFlags): IconInfo
    /**
     * Looks up a named icon and returns a structure containing
     * information such as the filename of the icon. The icon
     * can then be rendered into a pixbuf using
     * gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
     * combines these two steps if all you need is the pixbuf.)
     * @param iconName the name of the icon to lookup
     * @param size desired icon size
     * @param flags flags modifying the behavior of the icon lookup
     */
    lookupIcon(iconName: string, size: number, flags: IconLookupFlags): IconInfo
    /**
     * Prepends a directory to the search path.
     * See gtk_icon_theme_set_search_path().
     * @param path directory name to prepend to the icon path
     */
    prependSearchPath(path: string): void
    /**
     * Checks to see if the icon theme has changed; if it has, any
     * currently cached information is discarded and will be reloaded
     * next time `icon_theme` is accessed.
     */
    rescanIfNeeded(): boolean
    /**
     * Sets the name of the icon theme that the #GtkIconTheme object uses
     * overriding system configuration. This function cannot be called
     * on the icon theme objects returned from gtk_icon_theme_get_default()
     * and gtk_icon_theme_get_for_screen().
     * @param themeName name of icon theme to use instead of configured theme,   or %NULL to unset a previously set custom theme
     */
    setCustomTheme(themeName: string): void
    /**
     * Sets the screen for an icon theme; the screen is used
     * to track the user's currently configured icon theme,
     * which might be different for different screens.
     * @param screen a #GdkScreen
     */
    setScreen(screen: Gdk.Screen): void
    /**
     * Sets the search path for the icon theme object. When looking
     * for an icon theme, GTK+ will search for a subdirectory of
     * one or more of the directories in `path` with the same name
     * as the icon theme. (Themes from multiple of the path elements
     * are combined to allow themes to be extended by adding icons
     * in the user's home directory.)
     * 
     * In addition if an icon found isn't found either in the current
     * icon theme or the default icon theme, and an image file with
     * the right name is found directly in one of the elements of
     * `path,` then that image will be used for the icon name.
     * (This is legacy feature, and new icons should be put
     * into the default icon theme, which is called DEFAULT_THEME_NAME,
     * rather than directly on the icon path.)
     * @param path array of     directories that are searched for icon themes
     */
    setSearchPath(path: string[]): void

    // Own virtual methods of Gtk-2.0.Gtk.IconTheme

    changed(): void

    // Own signals of Gtk-2.0.Gtk.IconTheme

    connect(sigName: "changed", callback: IconTheme.ChangedSignalCallback): number
    on(sigName: "changed", callback: IconTheme.ChangedSignalCallback): number
    once(sigName: "changed", callback: IconTheme.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.IconTheme

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class IconTheme extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.IconTheme

    static name: string

    // Constructors of Gtk-2.0.Gtk.IconTheme

    constructor(config?: IconTheme.ConstructorProperties) 
    /**
     * Creates a new icon theme object. Icon theme objects are used
     * to lookup up an icon by name in a particular icon theme.
     * Usually, you'll want to use gtk_icon_theme_get_default()
     * or gtk_icon_theme_get_for_screen() rather than creating
     * a new icon theme object for scratch.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new icon theme object. Icon theme objects are used
     * to lookup up an icon by name in a particular icon theme.
     * Usually, you'll want to use gtk_icon_theme_get_default()
     * or gtk_icon_theme_get_for_screen() rather than creating
     * a new icon theme object for scratch.
     * @constructor 
     */
    static new(): IconTheme
    _init(config?: IconTheme.ConstructorProperties): void
    /**
     * Registers a built-in icon for icon theme lookups. The idea
     * of built-in icons is to allow an application or library
     * that uses themed icons to function requiring files to
     * be present in the file system. For instance, the default
     * images for all of GTK+'s stock icons are registered
     * as built-icons.
     * 
     * In general, if you use gtk_icon_theme_add_builtin_icon()
     * you should also install the icon in the icon theme, so
     * that the icon is generally available.
     * 
     * This function will generally be used with pixbufs loaded
     * via gdk_pixbuf_new_from_inline().
     * @param iconName the name of the icon to register
     * @param size the size at which to register the icon (different        images can be registered for the same icon name        at different sizes.)
     * @param pixbuf #GdkPixbuf that contains the image to use          for `icon_name`.
     */
    static addBuiltinIcon(iconName: string, size: number, pixbuf: GdkPixbuf.Pixbuf): void
    /**
     * Gets the icon theme for the default screen. See
     * gtk_icon_theme_get_for_screen().
     */
    static getDefault(): IconTheme
    /**
     * Gets the icon theme object associated with `screen;` if this
     * function has not previously been called for the given
     * screen, a new icon theme object will be created and
     * associated with the screen. Icon theme objects are
     * fairly expensive to create, so using this function
     * is usually a better choice than calling than gtk_icon_theme_new()
     * and setting the screen yourself; by using this function
     * a single icon theme object will be shared between users.
     * @param screen a #GdkScreen
     */
    static getForScreen(screen: Gdk.Screen): IconTheme
}

export module IconView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate-cursor-item`
     */
    export interface ActivateCursorItemSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `item-activated`
     */
    export interface ItemActivatedSignalCallback {
        (path: TreePath): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    export interface MoveCursorSignalCallback {
        (step: MovementStep, count: number): boolean
    }

    /**
     * Signal callback interface for `select-all`
     */
    export interface SelectAllSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `select-cursor-item`
     */
    export interface SelectCursorItemSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `selection-changed`
     */
    export interface SelectionChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (object: Adjustment, p0: Adjustment): void
    }

    /**
     * Signal callback interface for `toggle-cursor-item`
     */
    export interface ToggleCursorItemSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unselect-all`
     */
    export interface UnselectAllSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellLayout.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.IconView

        /**
         * The column-spacing property specifies the space which is inserted between
         * the columns of the icon view.
         */
        columnSpacing?: number | null
        /**
         * The columns property contains the number of the columns in which the
         * items should be displayed. If it is -1, the number of columns will
         * be chosen automatically to fill the available area.
         */
        columns?: number | null
        /**
         * The item-orientation property specifies how the cells (i.e. the icon and
         * the text) of the item are positioned relative to each other.
         */
        itemOrientation?: Orientation | null
        /**
         * The item-padding property specifies the padding around each
         * of the icon view's item.
         */
        itemPadding?: number | null
        /**
         * The item-width property specifies the width to use for each item.
         * If it is set to -1, the icon view will automatically determine a
         * suitable item size.
         */
        itemWidth?: number | null
        /**
         * The margin property specifies the space which is inserted
         * at the edges of the icon view.
         */
        margin?: number | null
        /**
         * The ::markup-column property contains the number of the model column
         * containing markup information to be displayed. The markup column must be
         * of type #G_TYPE_STRING. If this property and the :text-column property
         * are both set to column numbers, it overrides the text column.
         * If both are set to -1, no texts are displayed.
         */
        markupColumn?: number | null
        model?: TreeModel | null
        /**
         * The orientation property specifies how the cells (i.e. the icon and
         * the text) of the item are positioned relative to each other.
         */
        orientation?: Orientation | null
        /**
         * The ::pixbuf-column property contains the number of the model column
         * containing the pixbufs which are displayed. The pixbuf column must be
         * of type #GDK_TYPE_PIXBUF. Setting this property to -1 turns off the
         * display of pixbufs.
         */
        pixbufColumn?: number | null
        /**
         * The reorderable property specifies if the items can be reordered
         * by DND.
         */
        reorderable?: boolean | null
        /**
         * The row-spacing property specifies the space which is inserted between
         * the rows of the icon view.
         */
        rowSpacing?: number | null
        /**
         * The ::selection-mode property specifies the selection mode of
         * icon view. If the mode is #GTK_SELECTION_MULTIPLE, rubberband selection
         * is enabled, for the other modes, only keyboard selection is possible.
         */
        selectionMode?: SelectionMode | null
        /**
         * The spacing property specifies the space which is inserted between
         * the cells (i.e. the icon and the text) of an item.
         */
        spacing?: number | null
        /**
         * The ::text-column property contains the number of the model column
         * containing the texts which are displayed. The text column must be
         * of type #G_TYPE_STRING. If this property and the :markup-column
         * property are both set to -1, no texts are displayed.
         */
        textColumn?: number | null
        tooltipColumn?: number | null
    }

}

export interface IconView extends Atk.ImplementorIface, Buildable, CellLayout {

    // Own properties of Gtk-2.0.Gtk.IconView

    /**
     * The column-spacing property specifies the space which is inserted between
     * the columns of the icon view.
     */
    columnSpacing: number
    /**
     * The columns property contains the number of the columns in which the
     * items should be displayed. If it is -1, the number of columns will
     * be chosen automatically to fill the available area.
     */
    columns: number
    /**
     * The item-orientation property specifies how the cells (i.e. the icon and
     * the text) of the item are positioned relative to each other.
     */
    itemOrientation: Orientation
    /**
     * The item-padding property specifies the padding around each
     * of the icon view's item.
     */
    itemPadding: number
    /**
     * The item-width property specifies the width to use for each item.
     * If it is set to -1, the icon view will automatically determine a
     * suitable item size.
     */
    itemWidth: number
    /**
     * The margin property specifies the space which is inserted
     * at the edges of the icon view.
     */
    margin: number
    /**
     * The ::markup-column property contains the number of the model column
     * containing markup information to be displayed. The markup column must be
     * of type #G_TYPE_STRING. If this property and the :text-column property
     * are both set to column numbers, it overrides the text column.
     * If both are set to -1, no texts are displayed.
     */
    markupColumn: number
    model: TreeModel
    /**
     * The orientation property specifies how the cells (i.e. the icon and
     * the text) of the item are positioned relative to each other.
     */
    orientation: Orientation
    /**
     * The ::pixbuf-column property contains the number of the model column
     * containing the pixbufs which are displayed. The pixbuf column must be
     * of type #GDK_TYPE_PIXBUF. Setting this property to -1 turns off the
     * display of pixbufs.
     */
    pixbufColumn: number
    /**
     * The reorderable property specifies if the items can be reordered
     * by DND.
     */
    reorderable: boolean
    /**
     * The row-spacing property specifies the space which is inserted between
     * the rows of the icon view.
     */
    rowSpacing: number
    /**
     * The ::selection-mode property specifies the selection mode of
     * icon view. If the mode is #GTK_SELECTION_MULTIPLE, rubberband selection
     * is enabled, for the other modes, only keyboard selection is possible.
     */
    selectionMode: SelectionMode
    /**
     * The spacing property specifies the space which is inserted between
     * the cells (i.e. the icon and the text) of an item.
     */
    spacing: number
    /**
     * The ::text-column property contains the number of the model column
     * containing the texts which are displayed. The text column must be
     * of type #G_TYPE_STRING. If this property and the :markup-column
     * property are both set to -1, no texts are displayed.
     */
    textColumn: number
    tooltipColumn: number

    // Own fields of Gtk-2.0.Gtk.IconView

    parent: Container & Widget
    priv: IconViewPrivate

    // Owm methods of Gtk-2.0.Gtk.IconView

    /**
     * Converts widget coordinates to coordinates for the bin_window,
     * as expected by e.g. gtk_icon_view_get_path_at_pos().
     * @param wx X coordinate relative to the widget
     * @param wy Y coordinate relative to the widget
     */
    convertWidgetToBinWindowCoords(wx: number, wy: number): [ /* bx */ number, /* by */ number ]
    /**
     * Creates a #GdkPixmap representation of the item at `path`.
     * This image is used for a drag icon.
     * @param path a #GtkTreePath in `icon_view`
     */
    createDragIcon(path: TreePath): Gdk.Pixmap
    /**
     * Turns `icon_view` into a drop destination for automatic DND. Calling this
     * method sets #GtkIconView:reorderable to %FALSE.
     * @param targets the table of targets that the drag will support
     * @param nTargets the number of items in `targets`
     * @param actions the bitmask of possible actions for a drag to this    widget
     */
    enableModelDragDest(targets: TargetEntry, nTargets: number, actions: Gdk.DragAction): void
    /**
     * Turns `icon_view` into a drag source for automatic DND. Calling this
     * method sets #GtkIconView:reorderable to %FALSE.
     * @param startButtonMask Mask of allowed buttons to start drag
     * @param targets the table of targets that the drag will support
     * @param nTargets the number of items in `targets`
     * @param actions the bitmask of possible actions for a drag from this    widget
     */
    enableModelDragSource(startButtonMask: Gdk.ModifierType, targets: TargetEntry, nTargets: number, actions: Gdk.DragAction): void
    /**
     * Returns the value of the ::column-spacing property.
     */
    getColumnSpacing(): number
    /**
     * Returns the value of the ::columns property.
     */
    getColumns(): number
    /**
     * Fills in `path` and `cell` with the current cursor path and cell.
     * If the cursor isn't currently set, then *`path` will be %NULL.
     * If no cell currently has focus, then *`cell` will be %NULL.
     * 
     * The returned #GtkTreePath must be freed with gtk_tree_path_free().
     * @param path Return location for the current cursor path, or %NULL
     * @param cell Return location the current focus cell, or %NULL
     */
    getCursor(path: TreePath | null, cell: CellRenderer | null): boolean
    /**
     * Determines the destination item for a given position.
     * @param dragX the position to determine the destination item for
     * @param dragY the position to determine the destination item for
     * @param path Return location for the path of the item, or %NULL.
     * @param pos Return location for the drop position, or %NULL
     */
    getDestItemAtPos(dragX: number, dragY: number, path: TreePath | null, pos: IconViewDropPosition | null): boolean
    /**
     * Gets information about the item that is highlighted for feedback.
     * @param path Return location for the path of the highlighted item, or %NULL.
     * @param pos Return location for the drop position, or %NULL
     */
    getDragDestItem(path: TreePath | null, pos: IconViewDropPosition | null): void
    /**
     * Finds the path at the point (`x,` `y)`, relative to bin_window coordinates.
     * In contrast to gtk_icon_view_get_path_at_pos(), this function also
     * obtains the cell at the specified position. The returned path should
     * be freed with gtk_tree_path_free().
     * See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
     * widget coordinates to bin_window coordinates.
     * @param x The x position to be identified
     * @param y The y position to be identified
     * @param path Return location for the path, or %NULL
     * @param cell Return location for the renderer responsible for the cell   at (`x,` `y)`, or %NULL
     */
    getItemAtPos(x: number, y: number, path: TreePath | null, cell: CellRenderer): boolean
    /**
     * Gets the column in which the item `path` is currently
     * displayed. Column numbers start at 0.
     * @param path the #GtkTreePath of the item
     */
    getItemColumn(path: TreePath): number
    /**
     * Returns the value of the ::item-orientation property which determines
     * whether the labels are drawn beside the icons instead of below.
     */
    getItemOrientation(): Orientation
    /**
     * Returns the value of the ::item-padding property.
     */
    getItemPadding(): number
    /**
     * Gets the row in which the item `path` is currently
     * displayed. Row numbers start at 0.
     * @param path the #GtkTreePath of the item
     */
    getItemRow(path: TreePath): number
    /**
     * Returns the value of the ::item-width property.
     */
    getItemWidth(): number
    /**
     * Returns the value of the ::margin property.
     */
    getMargin(): number
    /**
     * Returns the column with markup text for `icon_view`.
     */
    getMarkupColumn(): number
    /**
     * Returns the model the #GtkIconView is based on.  Returns %NULL if the
     * model is unset.
     */
    getModel(): TreeModel
    /**
     * Returns the value of the ::orientation property which determines
     * whether the labels are drawn beside the icons instead of below.
     */
    getOrientation(): Orientation
    /**
     * Finds the path at the point (`x,` `y)`, relative to bin_window coordinates.
     * See gtk_icon_view_get_item_at_pos(), if you are also interested in
     * the cell at the specified position.
     * See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
     * widget coordinates to bin_window coordinates.
     * @param x The x position to be identified
     * @param y The y position to be identified
     */
    getPathAtPos(x: number, y: number): TreePath
    /**
     * Returns the column with pixbufs for `icon_view`.
     */
    getPixbufColumn(): number
    /**
     * Retrieves whether the user can reorder the list via drag-and-drop.
     * See gtk_icon_view_set_reorderable().
     */
    getReorderable(): boolean
    /**
     * Returns the value of the ::row-spacing property.
     */
    getRowSpacing(): number
    /**
     * Creates a list of paths of all selected items. Additionally, if you are
     * planning on modifying the model after calling this function, you may
     * want to convert the returned list into a list of #GtkTreeRowReference<!-- -->s.
     * To do this, you can use gtk_tree_row_reference_new().
     * 
     * To free the return value, use:
     * |[
     * g_list_foreach (list, (GFunc)gtk_tree_path_free, NULL);
     * g_list_free (list);
     * ```
     * 
     */
    getSelectedItems(): TreePath[]
    /**
     * Gets the selection mode of the `icon_view`.
     */
    getSelectionMode(): SelectionMode
    /**
     * Returns the value of the ::spacing property.
     */
    getSpacing(): number
    /**
     * Returns the column with text for `icon_view`.
     */
    getTextColumn(): number
    /**
     * Returns the column of `icon_view'`s model which is being used for
     * displaying tooltips on `icon_view'`s rows.
     */
    getTooltipColumn(): number
    /**
     * This function is supposed to be used in a #GtkWidget::query-tooltip
     * signal handler for #GtkIconView.  The `x,` `y` and `keyboard_tip` values
     * which are received in the signal handler, should be passed to this
     * function without modification.
     * 
     * The return value indicates whether there is an icon view item at the given
     * coordinates (%TRUE) or not (%FALSE) for mouse tooltips. For keyboard
     * tooltips the item returned will be the cursor item. When %TRUE, then any of
     * `model,` `path` and `iter` which have been provided will be set to point to
     * that row and the corresponding model. `x` and `y` will always be converted
     * to be relative to `icon_view'`s bin_window if `keyboard_tooltip` is %FALSE.
     * @param x the x coordinate (relative to widget coordinates)
     * @param y the y coordinate (relative to widget coordinates)
     * @param keyboardTip whether this is a keyboard tooltip or not
     */
    getTooltipContext(x: number, y: number, keyboardTip: boolean): [ /* returnType */ boolean, /* x */ number, /* y */ number, /* model */ TreeModel, /* path */ TreePath, /* iter */ TreeIter ]
    /**
     * Sets `start_path` and `end_path` to be the first and last visible path.
     * Note that there may be invisible paths in between.
     * 
     * Both paths should be freed with gtk_tree_path_free() after use.
     * @param startPath Return location for start of region, or %NULL
     * @param endPath Return location for end of region, or %NULL
     */
    getVisibleRange(startPath: TreePath | null, endPath: TreePath | null): boolean
    // Has conflict: itemActivated(path: TreePath): void
    /**
     * Returns %TRUE if the icon pointed to by `path` is currently
     * selected. If `path` does not point to a valid location, %FALSE is returned.
     * @param path A #GtkTreePath to check selection on.
     */
    pathIsSelected(path: TreePath): boolean
    /**
     * Moves the alignments of `icon_view` to the position specified by `path`.
     * `row_align` determines where the row is placed, and `col_align` determines
     * where `column` is placed.  Both are expected to be between 0.0 and 1.0.
     * 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means
     * center.
     * 
     * If `use_align` is %FALSE, then the alignment arguments are ignored, and the
     * tree does the minimum amount of work to scroll the item onto the screen.
     * This means that the item will be scrolled to the edge closest to its current
     * position.  If the item is currently visible on the screen, nothing is done.
     * 
     * This function only works if the model is set, and `path` is a valid row on
     * the model. If the model changes before the `icon_view` is realized, the
     * centered path will be modified to reflect this change.
     * @param path The path of the item to move to.
     * @param useAlign whether to use alignment arguments, or %FALSE.
     * @param rowAlign The vertical alignment of the item specified by `path`.
     * @param colAlign The horizontal alignment of the item specified by `path`.
     */
    scrollToPath(path: TreePath, useAlign: boolean, rowAlign: number, colAlign: number): void
    // Has conflict: selectAll(): void
    /**
     * Selects the row at `path`.
     * @param path The #GtkTreePath to be selected.
     */
    selectPath(path: TreePath): void
    /**
     * Calls a function for each selected icon. Note that the model or
     * selection cannot be modified from within this function.
     * @param func The function to call for each selected icon.
     */
    selectedForeach(func: IconViewForeachFunc): void
    /**
     * Sets the ::column-spacing property which specifies the space
     * which is inserted between the columns of the icon view.
     * @param columnSpacing the column spacing
     */
    setColumnSpacing(columnSpacing: number): void
    /**
     * Sets the ::columns property which determines in how
     * many columns the icons are arranged. If `columns` is
     * -1, the number of columns will be chosen automatically
     * to fill the available area.
     * @param columns the number of columns
     */
    setColumns(columns: number): void
    /**
     * Sets the current keyboard focus to be at `path,` and selects it.  This is
     * useful when you want to focus the user's attention on a particular item.
     * If `cell` is not %NULL, then focus is given to the cell specified by
     * it. Additionally, if `start_editing` is %TRUE, then editing should be
     * started in the specified cell.
     * 
     * This function is often followed by <literal>gtk_widget_grab_focus
     * (icon_view)</literal> in order to give keyboard focus to the widget.
     * Please note that editing can only happen when the widget is realized.
     * @param path A #GtkTreePath
     * @param cell One of the cell renderers of `icon_view,` or %NULL
     * @param startEditing %TRUE if the specified cell should start being edited.
     */
    setCursor(path: TreePath, cell: CellRenderer | null, startEditing: boolean): void
    /**
     * Sets the item that is highlighted for feedback.
     * @param path The path of the item to highlight, or %NULL.
     * @param pos Specifies where to drop, relative to the item
     */
    setDragDestItem(path: TreePath | null, pos: IconViewDropPosition): void
    /**
     * Sets the ::item-orientation property which determines whether
     * the labels are drawn beside the icons instead of below.
     * @param orientation the relative position of texts and icons
     */
    setItemOrientation(orientation: Orientation): void
    /**
     * Sets the #GtkIconView:item-padding property which specifies the padding
     * around each of the icon view's items.
     * @param itemPadding the item padding
     */
    setItemPadding(itemPadding: number): void
    /**
     * Sets the ::item-width property which specifies the width
     * to use for each item. If it is set to -1, the icon view will
     * automatically determine a suitable item size.
     * @param itemWidth the width for each item
     */
    setItemWidth(itemWidth: number): void
    /**
     * Sets the ::margin property which specifies the space
     * which is inserted at the top, bottom, left and right
     * of the icon view.
     * @param margin the margin
     */
    setMargin(margin: number): void
    /**
     * Sets the column with markup information for `icon_view` to be
     * `column`. The markup column must be of type #G_TYPE_STRING.
     * If the markup column is set to something, it overrides
     * the text column set by gtk_icon_view_set_text_column().
     * @param column A column in the currently used model, or -1 to display no text
     */
    setMarkupColumn(column: number): void
    /**
     * Sets the model for a #GtkIconView.
     * If the `icon_view` already has a model set, it will remove
     * it before setting the new model.  If `model` is %NULL, then
     * it will unset the old model.
     * @param model The model.
     */
    setModel(model: TreeModel | null): void
    /**
     * Sets the ::orientation property which determines whether the labels
     * are drawn beside the icons instead of below.
     * @param orientation the relative position of texts and icons
     */
    setOrientation(orientation: Orientation): void
    /**
     * Sets the column with pixbufs for `icon_view` to be `column`. The pixbuf
     * column must be of type #GDK_TYPE_PIXBUF
     * @param column A column in the currently used model, or -1 to disable
     */
    setPixbufColumn(column: number): void
    /**
     * This function is a convenience function to allow you to reorder models that
     * support the #GtkTreeDragSourceIface and the #GtkTreeDragDestIface.  Both
     * #GtkTreeStore and #GtkListStore support these.  If `reorderable` is %TRUE, then
     * the user can reorder the model by dragging and dropping rows.  The
     * developer can listen to these changes by connecting to the model's
     * row_inserted and row_deleted signals. The reordering is implemented by setting up
     * the icon view as a drag source and destination. Therefore, drag and
     * drop can not be used in a reorderable view for any other purpose.
     * 
     * This function does not give you any degree of control over the order -- any
     * reordering is allowed.  If more control is needed, you should probably
     * handle drag and drop manually.
     * @param reorderable %TRUE, if the list of items can be reordered.
     */
    setReorderable(reorderable: boolean): void
    /**
     * Sets the ::row-spacing property which specifies the space
     * which is inserted between the rows of the icon view.
     * @param rowSpacing the row spacing
     */
    setRowSpacing(rowSpacing: number): void
    /**
     * Sets the selection mode of the `icon_view`.
     * @param mode The selection mode
     */
    setSelectionMode(mode: SelectionMode): void
    /**
     * Sets the ::spacing property which specifies the space
     * which is inserted between the cells (i.e. the icon and
     * the text) of an item.
     * @param spacing the spacing
     */
    setSpacing(spacing: number): void
    /**
     * Sets the column with text for `icon_view` to be `column`. The text
     * column must be of type #G_TYPE_STRING.
     * @param column A column in the currently used model, or -1 to display no text
     */
    setTextColumn(column: number): void
    /**
     * Sets the tip area of `tooltip` to the area which `cell` occupies in
     * the item pointed to by `path`. See also gtk_tooltip_set_tip_area().
     * 
     * See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
     * @param tooltip a #GtkTooltip
     * @param path a #GtkTreePath
     * @param cell a #GtkCellRenderer or %NULL
     */
    setTooltipCell(tooltip: Tooltip, path: TreePath, cell: CellRenderer | null): void
    /**
     * If you only plan to have simple (text-only) tooltips on full items, you
     * can use this function to have #GtkIconView handle these automatically
     * for you. `column` should be set to the column in `icon_view'`s model
     * containing the tooltip texts, or -1 to disable this feature.
     * 
     * When enabled, #GtkWidget::has-tooltip will be set to %TRUE and
     * `icon_view` will connect a #GtkWidget::query-tooltip signal handler.
     * @param column an integer, which is a valid column number for `icon_view'`s model
     */
    setTooltipColumn(column: number): void
    /**
     * Sets the tip area of `tooltip` to be the area covered by the item at `path`.
     * See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
     * See also gtk_tooltip_set_tip_area().
     * @param tooltip a #GtkTooltip
     * @param path a #GtkTreePath
     */
    setTooltipItem(tooltip: Tooltip, path: TreePath): void
    // Has conflict: unselectAll(): void
    /**
     * Unselects the row at `path`.
     * @param path The #GtkTreePath to be unselected.
     */
    unselectPath(path: TreePath): void
    /**
     * Undoes the effect of gtk_icon_view_enable_model_drag_dest(). Calling this
     * method sets #GtkIconView:reorderable to %FALSE.
     */
    unsetModelDragDest(): void
    /**
     * Undoes the effect of gtk_icon_view_enable_model_drag_source(). Calling this
     * method sets #GtkIconView:reorderable to %FALSE.
     */
    unsetModelDragSource(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.IconView

    activateCursorItem(): boolean
    /**
     * Activates the item determined by `path`.
     * @virtual 
     * @param path The #GtkTreePath to be activated
     */
    itemActivated(path: TreePath): void
    moveCursor(step: MovementStep, count: number): boolean
    /**
     * Selects all the icons. `icon_view` must has its selection mode set
     * to #GTK_SELECTION_MULTIPLE.
     * @virtual 
     */
    selectAll(): void
    selectCursorItem(): void
    selectionChanged(): void
    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean
    toggleCursorItem(): void
    /**
     * Unselects all the icons.
     * @virtual 
     */
    unselectAll(): void

    // Own signals of Gtk-2.0.Gtk.IconView

    connect(sigName: "activate-cursor-item", callback: IconView.ActivateCursorItemSignalCallback): number
    on(sigName: "activate-cursor-item", callback: IconView.ActivateCursorItemSignalCallback): number
    once(sigName: "activate-cursor-item", callback: IconView.ActivateCursorItemSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-cursor-item", ...args: any[]): void
    connect(sigName: "item-activated", callback: IconView.ItemActivatedSignalCallback): number
    on(sigName: "item-activated", callback: IconView.ItemActivatedSignalCallback): number
    once(sigName: "item-activated", callback: IconView.ItemActivatedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "item-activated", ...args: any[]): void
    connect(sigName: "move-cursor", callback: IconView.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: IconView.MoveCursorSignalCallback): number
    once(sigName: "move-cursor", callback: IconView.MoveCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-cursor", count: number, ...args: any[]): void
    connect(sigName: "select-all", callback: IconView.SelectAllSignalCallback): number
    on(sigName: "select-all", callback: IconView.SelectAllSignalCallback): number
    once(sigName: "select-all", callback: IconView.SelectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-all", ...args: any[]): void
    connect(sigName: "select-cursor-item", callback: IconView.SelectCursorItemSignalCallback): number
    on(sigName: "select-cursor-item", callback: IconView.SelectCursorItemSignalCallback): number
    once(sigName: "select-cursor-item", callback: IconView.SelectCursorItemSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-cursor-item", ...args: any[]): void
    connect(sigName: "selection-changed", callback: IconView.SelectionChangedSignalCallback): number
    on(sigName: "selection-changed", callback: IconView.SelectionChangedSignalCallback): number
    once(sigName: "selection-changed", callback: IconView.SelectionChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-changed", ...args: any[]): void
    connect(sigName: "set-scroll-adjustments", callback: IconView.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: IconView.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: IconView.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", p0: Adjustment, ...args: any[]): void
    connect(sigName: "toggle-cursor-item", callback: IconView.ToggleCursorItemSignalCallback): number
    on(sigName: "toggle-cursor-item", callback: IconView.ToggleCursorItemSignalCallback): number
    once(sigName: "toggle-cursor-item", callback: IconView.ToggleCursorItemSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-cursor-item", ...args: any[]): void
    connect(sigName: "unselect-all", callback: IconView.UnselectAllSignalCallback): number
    on(sigName: "unselect-all", callback: IconView.UnselectAllSignalCallback): number
    once(sigName: "unselect-all", callback: IconView.UnselectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unselect-all", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.IconView

    connect(sigName: "notify::column-spacing", callback: any): number
    on(sigName: "notify::column-spacing", callback: any): number
    once(sigName: "notify::column-spacing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::column-spacing", ...args: any[]): void
    connect(sigName: "notify::columns", callback: any): number
    on(sigName: "notify::columns", callback: any): number
    once(sigName: "notify::columns", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::columns", ...args: any[]): void
    connect(sigName: "notify::item-orientation", callback: any): number
    on(sigName: "notify::item-orientation", callback: any): number
    once(sigName: "notify::item-orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::item-orientation", ...args: any[]): void
    connect(sigName: "notify::item-padding", callback: any): number
    on(sigName: "notify::item-padding", callback: any): number
    once(sigName: "notify::item-padding", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::item-padding", ...args: any[]): void
    connect(sigName: "notify::item-width", callback: any): number
    on(sigName: "notify::item-width", callback: any): number
    once(sigName: "notify::item-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::item-width", ...args: any[]): void
    connect(sigName: "notify::margin", callback: any): number
    on(sigName: "notify::margin", callback: any): number
    once(sigName: "notify::margin", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::markup-column", callback: any): number
    on(sigName: "notify::markup-column", callback: any): number
    once(sigName: "notify::markup-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::markup-column", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: "notify::pixbuf-column", callback: any): number
    on(sigName: "notify::pixbuf-column", callback: any): number
    once(sigName: "notify::pixbuf-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf-column", ...args: any[]): void
    connect(sigName: "notify::reorderable", callback: any): number
    on(sigName: "notify::reorderable", callback: any): number
    once(sigName: "notify::reorderable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::reorderable", ...args: any[]): void
    connect(sigName: "notify::row-spacing", callback: any): number
    on(sigName: "notify::row-spacing", callback: any): number
    once(sigName: "notify::row-spacing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::row-spacing", ...args: any[]): void
    connect(sigName: "notify::selection-mode", callback: any): number
    on(sigName: "notify::selection-mode", callback: any): number
    once(sigName: "notify::selection-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selection-mode", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: any): number
    on(sigName: "notify::spacing", callback: any): number
    once(sigName: "notify::spacing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::text-column", callback: any): number
    on(sigName: "notify::text-column", callback: any): number
    once(sigName: "notify::text-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-column", ...args: any[]): void
    connect(sigName: "notify::tooltip-column", callback: any): number
    on(sigName: "notify::tooltip-column", callback: any): number
    once(sigName: "notify::tooltip-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-column", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class IconView extends Container {

    // Own properties of Gtk-2.0.Gtk.IconView

    static name: string

    // Constructors of Gtk-2.0.Gtk.IconView

    constructor(config?: IconView.ConstructorProperties) 
    /**
     * Creates a new #GtkIconView widget
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkIconView widget
     * @constructor 
     */
    static new(): IconView
    /**
     * Creates a new #GtkIconView widget with the model `model`.
     * @constructor 
     * @param model The model.
     */
    static newWithModel(model: TreeModel): IconView
    _init(config?: IconView.ConstructorProperties): void
}

export interface Identifier {
}

export class Identifier {

    // Own properties of Gtk-2.0.Gtk.Identifier

    static name: string
}

export module Image {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Misc.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Image

        file?: string | null
        /**
         * The GIcon displayed in the GtkImage. For themed icons,
         * If the icon theme is changed, the image will be updated
         * automatically.
         */
        gicon?: Gio.Icon | null
        /**
         * The name of the icon in the icon theme. If the icon theme is
         * changed, the image will be updated automatically.
         */
        iconName?: string | null
        iconSet?: IconSet | null
        iconSize?: number | null
        image?: Gdk.Image | null
        mask?: Gdk.Pixmap | null
        pixbuf?: GdkPixbuf.Pixbuf | null
        pixbufAnimation?: GdkPixbuf.PixbufAnimation | null
        /**
         * The "pixel-size" property can be used to specify a fixed size
         * overriding the #GtkImage:icon-size property for images of type
         * %GTK_IMAGE_ICON_NAME.
         */
        pixelSize?: number | null
        pixmap?: Gdk.Pixmap | null
        stock?: string | null
    }

}

export interface Image extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Image

    file: string
    /**
     * The GIcon displayed in the GtkImage. For themed icons,
     * If the icon theme is changed, the image will be updated
     * automatically.
     */
    gicon: Gio.Icon
    /**
     * The name of the icon in the icon theme. If the icon theme is
     * changed, the image will be updated automatically.
     */
    iconName: string
    iconSet: IconSet
    image: Gdk.Image
    pixbuf: GdkPixbuf.Pixbuf
    pixbufAnimation: GdkPixbuf.PixbufAnimation
    /**
     * The "pixel-size" property can be used to specify a fixed size
     * overriding the #GtkImage:icon-size property for images of type
     * %GTK_IMAGE_ICON_NAME.
     */
    pixelSize: number
    pixmap: Gdk.Pixmap
    stock: string

    // Own fields of Gtk-2.0.Gtk.Image

    misc: Misc
    storageType: ImageType
    mask: Gdk.Bitmap
    iconSize: IconSize

    // Owm methods of Gtk-2.0.Gtk.Image

    /**
     * Resets the image to be empty.
     */
    clear(): void
    /**
     * Gets the #GtkImage.
     * @param val return location for a #GdkImage
     * @param mask a #GdkBitmap that indicates which parts of the image should be transparent.
     */
    get(val: Gdk.Image, mask: Gdk.Bitmap): void
    /**
     * Gets the #GdkPixbufAnimation being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned animation.
     */
    getAnimation(): GdkPixbuf.PixbufAnimation
    /**
     * Gets the #GIcon and size being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_GICON (see gtk_image_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned #GIcon.
     */
    getGicon(): [ /* gicon */ Gio.Icon, /* size */ number ]
    /**
     * Gets the icon name and size being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).
     * The returned string is owned by the #GtkImage and should not
     * be freed.
     */
    getIconName(): [ /* iconName */ string, /* size */ number ]
    /**
     * Gets the icon set and size being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).
     */
    getIconSet(): [ /* iconSet */ IconSet, /* size */ number ]
    /**
     * Gets the #GdkImage and mask being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_IMAGE (see gtk_image_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned image and mask.
     */
    getImage(): [ /* gdkImage */ Gdk.Image, /* mask */ Gdk.Bitmap ]
    /**
     * Gets the #GdkPixbuf being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned pixbuf.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Gets the pixel size used for named icons.
     */
    getPixelSize(): number
    /**
     * Gets the pixmap and mask being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_PIXMAP (see gtk_image_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned pixmap and mask.
     */
    getPixmap(): [ /* pixmap */ Gdk.Pixmap, /* mask */ Gdk.Bitmap ]
    /**
     * Gets the stock icon name and size being displayed by the #GtkImage.
     * The storage type of the image must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).
     * The returned string is owned by the #GtkImage and should not
     * be freed.
     */
    getStock(): [ /* stockId */ string, /* size */ number ]
    /**
     * Gets the type of representation being used by the #GtkImage
     * to store image data. If the #GtkImage has no image data,
     * the return value will be %GTK_IMAGE_EMPTY.
     */
    getStorageType(): ImageType
    /**
     * Sets the #GtkImage.
     * @param val a #GdkImage
     * @param mask a #GdkBitmap that indicates which parts of the image should be transparent.
     */
    set(val: Gdk.Image, mask: Gdk.Bitmap): void
    /**
     * Causes the #GtkImage to display the given animation (or display
     * nothing, if you set the animation to %NULL).
     * @param animation the #GdkPixbufAnimation
     */
    setFromAnimation(animation: GdkPixbuf.PixbufAnimation): void
    /**
     * See gtk_image_new_from_file() for details.
     * @param filename a filename or %NULL
     */
    setFromFile(filename: string | null): void
    /**
     * See gtk_image_new_from_gicon() for details.
     * @param icon an icon
     * @param size an icon size
     */
    setFromGicon(icon: Gio.Icon, size: number): void
    /**
     * See gtk_image_new_from_icon_name() for details.
     * @param iconName an icon name
     * @param size an icon size
     */
    setFromIconName(iconName: string, size: number): void
    /**
     * See gtk_image_new_from_icon_set() for details.
     * @param iconSet a #GtkIconSet
     * @param size a stock icon size
     */
    setFromIconSet(iconSet: IconSet, size: number): void
    /**
     * See gtk_image_new_from_image() for details.
     * @param gdkImage a #GdkImage or %NULL
     * @param mask a #GdkBitmap or %NULL
     */
    setFromImage(gdkImage: Gdk.Image | null, mask: Gdk.Bitmap | null): void
    /**
     * See gtk_image_new_from_pixbuf() for details.
     * @param pixbuf a #GdkPixbuf or %NULL
     */
    setFromPixbuf(pixbuf: GdkPixbuf.Pixbuf | null): void
    /**
     * See gtk_image_new_from_pixmap() for details.
     * @param pixmap a #GdkPixmap or %NULL
     * @param mask a #GdkBitmap or %NULL
     */
    setFromPixmap(pixmap: Gdk.Pixmap | null, mask: Gdk.Bitmap | null): void
    /**
     * See gtk_image_new_from_stock() for details.
     * @param stockId a stock icon name
     * @param size a stock icon size
     */
    setFromStock(stockId: string, size: number): void
    /**
     * Sets the pixel size to use for named icons. If the pixel size is set
     * to a value != -1, it is used instead of the icon size set by
     * gtk_image_set_from_icon_name().
     * @param pixelSize the new pixel size
     */
    setPixelSize(pixelSize: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Image

    connect(sigName: "notify::file", callback: any): number
    on(sigName: "notify::file", callback: any): number
    once(sigName: "notify::file", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::icon-set", callback: any): number
    on(sigName: "notify::icon-set", callback: any): number
    once(sigName: "notify::icon-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-set", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::pixbuf", callback: any): number
    on(sigName: "notify::pixbuf", callback: any): number
    once(sigName: "notify::pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf", ...args: any[]): void
    connect(sigName: "notify::pixbuf-animation", callback: any): number
    on(sigName: "notify::pixbuf-animation", callback: any): number
    once(sigName: "notify::pixbuf-animation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf-animation", ...args: any[]): void
    connect(sigName: "notify::pixel-size", callback: any): number
    on(sigName: "notify::pixel-size", callback: any): number
    once(sigName: "notify::pixel-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixel-size", ...args: any[]): void
    connect(sigName: "notify::pixmap", callback: any): number
    on(sigName: "notify::pixmap", callback: any): number
    once(sigName: "notify::pixmap", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixmap", ...args: any[]): void
    connect(sigName: "notify::stock", callback: any): number
    on(sigName: "notify::stock", callback: any): number
    once(sigName: "notify::stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkImage widget displays an image. Various kinds of object
 * can be displayed as an image; most typically, you would load a
 * #GdkPixbuf ("pixel buffer") from a file, and then display that.
 * There's a convenience function to do this, gtk_image_new_from_file(),
 * used as follows:
 * <informalexample><programlisting>
 *   GtkWidget *image;
 *   image = gtk_image_new_from_file ("myfile.png");
 * </programlisting></informalexample>
 * If the file isn't loaded successfully, the image will contain a
 * "broken image" icon similar to that used in many web browsers.
 * If you want to handle errors in loading the file yourself,
 * for example by displaying an error message, then load the image with
 * gdk_pixbuf_new_from_file(), then create the #GtkImage with
 * gtk_image_new_from_pixbuf().
 * 
 * The image file may contain an animation, if so the #GtkImage will
 * display an animation (#GdkPixbufAnimation) instead of a static image.
 * 
 * #GtkImage is a subclass of #GtkMisc, which implies that you can
 * align it (center, left, right) and add padding to it, using
 * #GtkMisc methods.
 * 
 * #GtkImage is a "no window" widget (has no #GdkWindow of its own),
 * so by default does not receive events. If you want to receive events
 * on the image, such as button clicks, place the image inside a
 * #GtkEventBox, then connect to the event signals on the event box.
 * <example>
 * <title>Handling button press events on a
 * <structname>GtkImage</structname>.</title>
 * <programlisting>
 *   static gboolean
 *   button_press_callback (GtkWidget      *event_box,
 *                          GdkEventButton *event,
 *                          gpointer        data)
 *   {
 *     g_print ("Event box clicked at coordinates &percnt;f,&percnt;f\n",
 *              event->x, event->y);
 * 
 *     /<!---->* Returning TRUE means we handled the event, so the signal
 *      * emission should be stopped (don't call any further
 *      * callbacks that may be connected). Return FALSE
 *      * to continue invoking callbacks.
 *      *<!---->/
 *     return TRUE;
 *   }
 * 
 *   static GtkWidget*
 *   create_image (void)
 *   {
 *     GtkWidget *image;
 *     GtkWidget *event_box;
 * 
 *     image = gtk_image_new_from_file ("myfile.png");
 * 
 *     event_box = gtk_event_box_new (<!-- -->);
 * 
 *     gtk_container_add (GTK_CONTAINER (event_box), image);
 * 
 *     g_signal_connect (G_OBJECT (event_box),
 *                       "button_press_event",
 *                       G_CALLBACK (button_press_callback),
 *                       image);
 * 
 *     return image;
 *   }
 * </programlisting>
 * </example>
 * 
 * When handling events on the event box, keep in mind that coordinates
 * in the image may be different from event box coordinates due to
 * the alignment and padding settings on the image (see #GtkMisc).
 * The simplest way to solve this is to set the alignment to 0.0
 * (left/top), and set the padding to zero. Then the origin of
 * the image will be the same as the origin of the event box.
 * 
 * Sometimes an application will want to avoid depending on external data
 * files, such as image files. GTK+ comes with a program to avoid this,
 * called <application>gdk-pixbuf-csource</application>. This program
 * allows you to convert an image into a C variable declaration, which
 * can then be loaded into a #GdkPixbuf using
 * gdk_pixbuf_new_from_inline().
 * @class 
 */
export class Image extends Misc {

    // Own properties of Gtk-2.0.Gtk.Image

    static name: string

    // Constructors of Gtk-2.0.Gtk.Image

    constructor(config?: Image.ConstructorProperties) 
    /**
     * Creates a new empty #GtkImage widget.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new empty #GtkImage widget.
     * @constructor 
     */
    static new(): Image
    /**
     * Creates a #GtkImage displaying the given animation.
     * The #GtkImage does not assume a reference to the
     * animation; you still need to unref it if you own references.
     * #GtkImage will add its own reference rather than adopting yours.
     * 
     * Note that the animation frames are shown using a timeout with
     * #G_PRIORITY_DEFAULT. When using animations to indicate busyness,
     * keep in mind that the animation will only be shown if the main loop
     * is not busy with something that has a higher priority.
     * @constructor 
     * @param animation an animation
     */
    static newFromAnimation(animation: GdkPixbuf.PixbufAnimation): Image
    /**
     * Creates a new #GtkImage displaying the file `filename`. If the file
     * isn't found or can't be loaded, the resulting #GtkImage will
     * display a "broken image" icon. This function never returns %NULL,
     * it always returns a valid #GtkImage widget.
     * 
     * If the file contains an animation, the image will contain an
     * animation.
     * 
     * If you need to detect failures to load the file, use
     * gdk_pixbuf_new_from_file() to load the file yourself, then create
     * the #GtkImage from the pixbuf. (Or for animations, use
     * gdk_pixbuf_animation_new_from_file()).
     * 
     * The storage type (gtk_image_get_storage_type()) of the returned
     * image is not defined, it will be whatever is appropriate for
     * displaying the file.
     * @constructor 
     * @param filename a filename
     */
    static newFromFile(filename: string): Image
    /**
     * Creates a #GtkImage displaying an icon from the current icon theme.
     * If the icon name isn't known, a "broken image" icon will be
     * displayed instead.  If the current icon theme is changed, the icon
     * will be updated appropriately.
     * @constructor 
     * @param icon an icon
     * @param size a stock icon size
     */
    static newFromGicon(icon: Gio.Icon, size: number): Image
    /**
     * Creates a #GtkImage displaying an icon from the current icon theme.
     * If the icon name isn't known, a "broken image" icon will be
     * displayed instead.  If the current icon theme is changed, the icon
     * will be updated appropriately.
     * @constructor 
     * @param iconName an icon name
     * @param size a stock icon size
     */
    static newFromIconName(iconName: string, size: number): Image
    /**
     * Creates a #GtkImage displaying an icon set. Sample stock sizes are
     * #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using
     * this function, usually it's better to create a #GtkIconFactory, put
     * your icon sets in the icon factory, add the icon factory to the
     * list of default factories with gtk_icon_factory_add_default(), and
     * then use gtk_image_new_from_stock(). This will allow themes to
     * override the icon you ship with your application.
     * 
     * The #GtkImage does not assume a reference to the
     * icon set; you still need to unref it if you own references.
     * #GtkImage will add its own reference rather than adopting yours.
     * @constructor 
     * @param iconSet a #GtkIconSet
     * @param size a stock icon size
     */
    static newFromIconSet(iconSet: IconSet, size: number): Image
    /**
     * Creates a #GtkImage widget displaying a `image` with a `mask`.
     * A #GdkImage is a client-side image buffer in the pixel format of the
     * current display. The #GtkImage does not assume a reference to the
     * image or mask; you still need to unref them if you own references.
     * #GtkImage will add its own reference rather than adopting yours.
     * @constructor 
     * @param image a #GdkImage, or %NULL
     * @param mask a #GdkBitmap, or %NULL
     */
    static newFromImage(image: Gdk.Image | null, mask: Gdk.Bitmap | null): Image
    /**
     * Creates a new #GtkImage displaying `pixbuf`.
     * The #GtkImage does not assume a reference to the
     * pixbuf; you still need to unref it if you own references.
     * #GtkImage will add its own reference rather than adopting yours.
     * 
     * Note that this function just creates an #GtkImage from the pixbuf. The
     * #GtkImage created will not react to state changes. Should you want that,
     * you should use gtk_image_new_from_icon_set().
     * @constructor 
     * @param pixbuf a #GdkPixbuf, or %NULL
     */
    static newFromPixbuf(pixbuf: GdkPixbuf.Pixbuf | null): Image
    /**
     * Creates a #GtkImage widget displaying `pixmap` with a `mask`.
     * A #GdkPixmap is a server-side image buffer in the pixel format of the
     * current display. The #GtkImage does not assume a reference to the
     * pixmap or mask; you still need to unref them if you own references.
     * #GtkImage will add its own reference rather than adopting yours.
     * @constructor 
     * @param pixmap a #GdkPixmap, or %NULL
     * @param mask a #GdkBitmap, or %NULL
     */
    static newFromPixmap(pixmap: Gdk.Pixmap | null, mask: Gdk.Bitmap | null): Image
    /**
     * Creates a #GtkImage displaying a stock icon. Sample stock icon
     * names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. Sample stock sizes
     * are #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock
     * icon name isn't known, the image will be empty.
     * You can register your own stock icon names, see
     * gtk_icon_factory_add_default() and gtk_icon_factory_add().
     * @constructor 
     * @param stockId a stock icon name
     * @param size a stock icon size
     */
    static newFromStock(stockId: string, size: number): Image
    _init(config?: Image.ConstructorProperties): void
}

export module ImageMenuItem {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, MenuItem.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ImageMenuItem

        /**
         * The Accel Group to use for stock accelerator keys
         */
        accelGroup?: AccelGroup | null
        /**
         * If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images
         * setting and always show the image, if available.
         * 
         * Use this property if the menuitem would be useless or hard to use
         * without the image.
         */
        alwaysShowImage?: boolean | null
        image?: Widget | null
        /**
         * If %TRUE, the label set in the menuitem is used as a
         * stock id to select the stock item for the item.
         */
        useStock?: boolean | null
    }

}

export interface ImageMenuItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.ImageMenuItem

    /**
     * The Accel Group to use for stock accelerator keys
     */
    accelGroup: AccelGroup
    /**
     * If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images
     * setting and always show the image, if available.
     * 
     * Use this property if the menuitem would be useless or hard to use
     * without the image.
     */
    alwaysShowImage: boolean
    image: Widget
    /**
     * If %TRUE, the label set in the menuitem is used as a
     * stock id to select the stock item for the item.
     */
    useStock: boolean

    // Own fields of Gtk-2.0.Gtk.ImageMenuItem

    menuItem: MenuItem

    // Owm methods of Gtk-2.0.Gtk.ImageMenuItem

    /**
     * Returns whether the menu item will ignore the #GtkSettings:gtk-menu-images
     * setting and always show the image, if available.
     */
    getAlwaysShowImage(): boolean
    /**
     * Gets the widget that is currently set as the image of `image_menu_item`.
     * See gtk_image_menu_item_set_image().
     */
    getImage(): Widget
    /**
     * Checks whether the label set in the menuitem is used as a
     * stock id to select the stock item for the item.
     */
    getUseStock(): boolean
    /**
     * Specifies an `accel_group` to add the menu items accelerator to
     * (this only applies to stock items so a stock item must already
     * be set, make sure to call gtk_image_menu_item_set_use_stock()
     * and gtk_menu_item_set_label() with a valid stock item first).
     * 
     * If you want this menu item to have changeable accelerators then
     * you shouldnt need this (see gtk_image_menu_item_new_from_stock()).
     * @param accelGroup the #GtkAccelGroup
     */
    setAccelGroup(accelGroup: AccelGroup): void
    /**
     * If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images
     * setting and always show the image, if available.
     * 
     * Use this property if the menuitem would be useless or hard to use
     * without the image.
     * @param alwaysShow %TRUE if the menuitem should always show the image
     */
    setAlwaysShowImage(alwaysShow: boolean): void
    /**
     * Sets the image of `image_menu_item` to the given widget.
     * Note that it depends on the show-menu-images setting whether
     * the image will be displayed or not.
     * @param image a widget to set as the image for the menu item.
     */
    setImage(image: Widget | null): void
    /**
     * If %TRUE, the label set in the menuitem is used as a
     * stock id to select the stock item for the item.
     * @param useStock %TRUE if the menuitem should use a stock item
     */
    setUseStock(useStock: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    deselect(): void

    // Overloads of deselect

    deselect(): void
    deselect(): void
    select(): void

    // Overloads of select

    select(): void
    select(): void
    /**
     * Set the accelerator path on `menu_item,` through which runtime changes of the
     * menu item's accelerator caused by the user can be identified and saved to
     * persistant storage (see gtk_accel_map_save() on this).
     * To setup a default accelerator for this menu item, call
     * gtk_accel_map_add_entry() with the same `accel_path`.
     * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
     * and gtk_menu_set_accel_path() for a more convenient variant of this function.
     * 
     * This function is basically a convenience wrapper that handles calling
     * gtk_widget_set_accel_path() with the appropriate accelerator group for
     * the menu item.
     * 
     * Note that you do need to set an accelerator on the parent menu with
     * gtk_menu_set_accel_group() for this to work.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath accelerator path, corresponding to this menu item's              functionality, or %NULL to unset the current path.
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ImageMenuItem

    connect(sigName: "notify::accel-group", callback: any): number
    on(sigName: "notify::accel-group", callback: any): number
    once(sigName: "notify::accel-group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accel-group", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: any): number
    on(sigName: "notify::always-show-image", callback: any): number
    once(sigName: "notify::always-show-image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::use-stock", callback: any): number
    on(sigName: "notify::use-stock", callback: any): number
    once(sigName: "notify::use-stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-stock", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::right-justified", callback: any): number
    on(sigName: "notify::right-justified", callback: any): number
    once(sigName: "notify::right-justified", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-justified", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ImageMenuItem extends MenuItem {

    // Own properties of Gtk-2.0.Gtk.ImageMenuItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.ImageMenuItem

    constructor(config?: ImageMenuItem.ConstructorProperties) 
    /**
     * Creates a new #GtkImageMenuItem with an empty label.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkImageMenuItem with an empty label.
     * @constructor 
     */
    static new(): ImageMenuItem
    /**
     * Creates a new #GtkImageMenuItem containing the image and text from a
     * stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
     * and #GTK_STOCK_APPLY.
     * 
     * If you want this menu item to have changeable accelerators, then pass in
     * %NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an
     * appropriate path for the menu item, use gtk_stock_lookup() to look up the
     * standard accelerator for the stock item, and if one is found, call
     * gtk_accel_map_add_entry() to register it.
     * @constructor 
     * @param stockId the name of the stock item.
     * @param accelGroup the #GtkAccelGroup to add the menu items   accelerator to, or %NULL.
     */
    static newFromStock(stockId: string, accelGroup: AccelGroup | null): ImageMenuItem
    /**
     * Creates a new #GtkImageMenuItem containing a label.
     * @constructor 
     * @param label the text of the menu item.
     */
    static newWithLabel(label: string): ImageMenuItem
    /**
     * Creates a new #GtkImageMenuItem containing a label. The label
     * will be created using gtk_label_new_with_mnemonic(), so underscores
     * in `label` indicate the mnemonic for the menu item.
     * @constructor 
     * @param label the text of the menu item, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string): ImageMenuItem
    _init(config?: ImageMenuItem.ConstructorProperties): void
}

export module InfoBar {

    // Signal callback interfaces

    /**
     * Signal callback interface for `close`
     */
    export interface CloseSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `response`
     */
    export interface ResponseSignalCallback {
        (responseId: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, HBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.InfoBar

        /**
         * The type of the message.
         * 
         * The type is used to determine the colors to use in the info bar.
         * The following symbolic color names can by used to customize
         * these colors:
         * "info_fg_color", "info_bg_color",
         * "warning_fg_color", "warning_bg_color",
         * "question_fg_color", "question_bg_color",
         * "error_fg_color", "error_bg_color".
         * "other_fg_color", "other_bg_color".
         * 
         * If the type is #GTK_MESSAGE_OTHER, no info bar is painted but the
         * colors are still set.
         */
        messageType?: MessageType | null
    }

}

export interface InfoBar extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.InfoBar

    /**
     * The type of the message.
     * 
     * The type is used to determine the colors to use in the info bar.
     * The following symbolic color names can by used to customize
     * these colors:
     * "info_fg_color", "info_bg_color",
     * "warning_fg_color", "warning_bg_color",
     * "question_fg_color", "question_bg_color",
     * "error_fg_color", "error_bg_color".
     * "other_fg_color", "other_bg_color".
     * 
     * If the type is #GTK_MESSAGE_OTHER, no info bar is painted but the
     * colors are still set.
     */
    messageType: MessageType

    // Own fields of Gtk-2.0.Gtk.InfoBar

    parent: HBox & Widget

    // Owm methods of Gtk-2.0.Gtk.InfoBar

    /**
     * Add an activatable widget to the action area of a #GtkInfoBar,
     * connecting a signal handler that will emit the #GtkInfoBar::response
     * signal on the message area when the widget is activated. The widget
     * is appended to the end of the message areas action area.
     * @param child an activatable widget
     * @param responseId response ID for `child`
     */
    addActionWidget(child: Widget, responseId: number): void
    /**
     * Adds a button with the given text (or a stock button, if button_text
     * is a stock ID) and sets things up so that clicking the button will emit
     * the "response" signal with the given response_id. The button is appended
     * to the end of the info bars's action area. The button widget is
     * returned, but usually you don't need it.
     * @param buttonText text of button, or stock ID
     * @param responseId response ID for the button
     */
    addButton(buttonText: string, responseId: number): Widget
    /**
     * Returns the action area of `info_bar`.
     */
    getActionArea(): Widget
    /**
     * Returns the content area of `info_bar`.
     */
    getContentArea(): Widget
    /**
     * Returns the message type of the message area.
     */
    getMessageType(): MessageType
    // Has conflict: response(responseId: number): void
    /**
     * Sets the last widget in the info bar's action area with
     * the given response_id as the default widget for the dialog.
     * Pressing "Enter" normally activates the default widget.
     * 
     * Note that this function currently requires `info_bar` to
     * be added to a widget hierarchy.
     * @param responseId a response ID
     */
    setDefaultResponse(responseId: number): void
    /**
     * Sets the message type of the message area.
     * GTK+ uses this type to determine what color to use
     * when drawing the message area.
     * @param messageType a #GtkMessageType
     */
    setMessageType(messageType: MessageType): void
    /**
     * Calls gtk_widget_set_sensitive (widget, setting) for each
     * widget in the info bars's action area with the given response_id.
     * A convenient way to sensitize/desensitize dialog buttons.
     * @param responseId a response ID
     * @param setting TRUE for sensitive
     */
    setResponseSensitive(responseId: number, setting: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.InfoBar

    close(): void
    /**
     * Emits the 'response' signal with the given `response_id`.
     * @virtual 
     * @param responseId a response ID
     */
    response(responseId: number): void

    // Own signals of Gtk-2.0.Gtk.InfoBar

    connect(sigName: "close", callback: InfoBar.CloseSignalCallback): number
    on(sigName: "close", callback: InfoBar.CloseSignalCallback): number
    once(sigName: "close", callback: InfoBar.CloseSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "close", ...args: any[]): void
    connect(sigName: "response", callback: InfoBar.ResponseSignalCallback): number
    on(sigName: "response", callback: InfoBar.ResponseSignalCallback): number
    once(sigName: "response", callback: InfoBar.ResponseSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "response", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.InfoBar

    connect(sigName: "notify::message-type", callback: any): number
    on(sigName: "notify::message-type", callback: any): number
    once(sigName: "notify::message-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::message-type", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkInfoBar is a widget that can be used to show messages to
 * the user without showing a dialog. It is often temporarily shown
 * at the top or bottom of a document. In contrast to #GtkDialog, which
 * has a horizontal action area at the bottom, #GtkInfoBar has a
 * vertical action area at the side.
 * 
 * The API of #GtkInfoBar is very similar to #GtkDialog, allowing you
 * to add buttons to the action area with gtk_info_bar_add_button() or
 * gtk_info_bar_new_with_buttons(). The sensitivity of action widgets
 * can be controlled with gtk_info_bar_set_response_sensitive().
 * To add widgets to the main content area of a #GtkInfoBar, use
 * gtk_info_bar_get_content_area() and add your widgets to the container.
 * 
 * Similar to #GtkMessageDialog, the contents of a #GtkInfoBar can by
 * classified as error message, warning, informational message, etc,
 * by using gtk_info_bar_set_message_type(). GTK+ uses the message type
 * to determine the background color of the message area.
 * 
 * <example>
 * <title>Simple GtkInfoBar usage.</title>
 * <programlisting>
 * /&ast; set up info bar &ast;/
 * info_bar = gtk_info_bar_new ();
 * gtk_widget_set_no_show_all (info_bar, TRUE);
 * message_label = gtk_label_new ("");
 * gtk_widget_show (message_label);
 * content_area = gtk_info_bar_get_content_area (GTK_INFO_BAR (info_bar));
 * gtk_container_add (GTK_CONTAINER (content_area), message_label);
 * gtk_info_bar_add_button (GTK_INFO_BAR (info_bar),
 *                          GTK_STOCK_OK, GTK_RESPONSE_OK);
 * g_signal_connect (info_bar, "response",
 *                   G_CALLBACK (gtk_widget_hide), NULL);
 * gtk_table_attach (GTK_TABLE (table),
 *                   info_bar,
 *                   0, 1, 2, 3,
 *                   GTK_EXPAND | GTK_FILL,  0,
 *                   0,                      0);
 * 
 * /&ast; ... &ast;/
 * 
 * /&ast; show an error message &ast;/
 * gtk_label_set_text (GTK_LABEL (message_label), error_message);
 * gtk_info_bar_set_message_type (GTK_INFO_BAR (info_bar),
 *                                GTK_MESSAGE_ERROR);
 * gtk_widget_show (info_bar);
 * </programlisting>
 * </example>
 * 
 * <refsect2 id="GtkInfoBar-BUILDER-UI">
 * <title>GtkInfoBar as GtkBuildable</title>
 * <para>
 * The GtkInfoBar implementation of the GtkBuildable interface exposes
 * the content area and action area as internal children with the names
 * "content_area" and "action_area".
 * </para>
 * <para>
 * GtkInfoBar supports a custom &lt;action-widgets&gt; element, which
 * can contain multiple &lt;action-widget&gt; elements. The "response"
 * attribute specifies a numeric response, and the content of the element
 * is the id of widget (which should be a child of the dialogs `action_area)`.
 * </para>
 * </refsect2>
 * @class 
 */
export class InfoBar extends HBox {

    // Own properties of Gtk-2.0.Gtk.InfoBar

    static name: string

    // Constructors of Gtk-2.0.Gtk.InfoBar

    constructor(config?: InfoBar.ConstructorProperties) 
    /**
     * Creates a new #GtkInfoBar object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkInfoBar object.
     * @constructor 
     */
    static new(): InfoBar

    // Overloads of new

    /**
     * Creates a new #GtkHBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): HBox
    _init(config?: InfoBar.ConstructorProperties): void
}

export module InputDialog {

    // Signal callback interfaces

    /**
     * Signal callback interface for `disable-device`
     */
    export interface DisableDeviceSignalCallback {
        (object: Gdk.Device): void
    }

    /**
     * Signal callback interface for `enable-device`
     */
    export interface EnableDeviceSignalCallback {
        (object: Gdk.Device): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Dialog.ConstructorProperties {
    }

}

export interface InputDialog extends Atk.ImplementorIface, Buildable {

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Own fields of Gtk-2.0.Gtk.InputDialog

    dialog: Dialog
    axisList: Widget
    axisListbox: Widget
    modeOptionmenu: Widget
    closeButton: Widget
    saveButton: Widget
    axisItems: Widget[]
    currentDevice: Gdk.Device
    keysList: Widget
    keysListbox: Widget

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.InputDialog

    disableDevice(device: Gdk.Device): void
    enableDevice(device: Gdk.Device): void

    // Own signals of Gtk-2.0.Gtk.InputDialog

    connect(sigName: "disable-device", callback: InputDialog.DisableDeviceSignalCallback): number
    on(sigName: "disable-device", callback: InputDialog.DisableDeviceSignalCallback): number
    once(sigName: "disable-device", callback: InputDialog.DisableDeviceSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "disable-device", ...args: any[]): void
    connect(sigName: "enable-device", callback: InputDialog.EnableDeviceSignalCallback): number
    on(sigName: "enable-device", callback: InputDialog.EnableDeviceSignalCallback): number
    once(sigName: "enable-device", callback: InputDialog.EnableDeviceSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "enable-device", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.InputDialog

    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class InputDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.InputDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.InputDialog

    constructor(config?: InputDialog.ConstructorProperties) 
    constructor() 
    static new(): InputDialog

    // Overloads of new

    static new(): Dialog
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: InputDialog.ConstructorProperties): void
}

export module Invisible {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Invisible

        screen?: Gdk.Screen | null
    }

}

export interface Invisible extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Invisible

    widget: Widget
    hasUserRefCount: boolean
    screen: Gdk.Screen

    // Owm methods of Gtk-2.0.Gtk.Invisible

    /**
     * Returns the #GdkScreen object associated with `invisible`
     */
    getScreen(): Gdk.Screen
    /**
     * Sets the #GdkScreen where the #GtkInvisible object will be displayed.
     * @param screen a #GdkScreen.
     */
    setScreen(screen: Gdk.Screen): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Invisible

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Invisible extends Widget {

    // Own properties of Gtk-2.0.Gtk.Invisible

    static name: string

    // Constructors of Gtk-2.0.Gtk.Invisible

    constructor(config?: Invisible.ConstructorProperties) 
    /**
     * Creates a new #GtkInvisible.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkInvisible.
     * @constructor 
     */
    static new(): Invisible
    /**
     * Creates a new #GtkInvisible object for a specified screen
     * @constructor 
     * @param screen a #GdkScreen which identifies on which     the new #GtkInvisible will be created.
     */
    static newForScreen(screen: Gdk.Screen): Invisible
    _init(config?: Invisible.ConstructorProperties): void
}

export module Item {

    // Signal callback interfaces

    /**
     * Signal callback interface for `deselect`
     */
    export interface DeselectSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `select`
     */
    export interface SelectSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle`
     */
    export interface ToggleSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {
    }

}

export interface Item extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Item

    bin: Bin

    // Owm methods of Gtk-2.0.Gtk.Item

    // Has conflict: deselect(): void
    // Has conflict: select(): void
    // Has conflict: toggle(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Item

    deselect(): void
    select(): void
    toggle(): void

    // Own signals of Gtk-2.0.Gtk.Item

    connect(sigName: "deselect", callback: Item.DeselectSignalCallback): number
    on(sigName: "deselect", callback: Item.DeselectSignalCallback): number
    once(sigName: "deselect", callback: Item.DeselectSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "deselect", ...args: any[]): void
    connect(sigName: "select", callback: Item.SelectSignalCallback): number
    on(sigName: "select", callback: Item.SelectSignalCallback): number
    once(sigName: "select", callback: Item.SelectSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select", ...args: any[]): void
    connect(sigName: "toggle", callback: Item.ToggleSignalCallback): number
    on(sigName: "toggle", callback: Item.ToggleSignalCallback): number
    once(sigName: "toggle", callback: Item.ToggleSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Item

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Item extends Bin {

    // Own properties of Gtk-2.0.Gtk.Item

    static name: string

    // Constructors of Gtk-2.0.Gtk.Item

    constructor(config?: Item.ConstructorProperties) 
    _init(config?: Item.ConstructorProperties): void
    /**
     * Deletes all widgets constructed from the specified path.
     * @param ifactoryPath a factory path to prepend to `path`. May be %NULL if `path`   starts with a factory path
     * @param path a path
     */
    static factoriesPathDelete(ifactoryPath: string, path: string): void
}

export module ItemFactory {

    // Constructor properties interface

    export interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

export interface ItemFactory {

    // Own fields of Gtk-2.0.Gtk.ItemFactory

    object: Object
    path: string
    accelGroup: AccelGroup
    widget: Widget
    items: object[]
    translateFunc: TranslateFunc
    translateData: object
    translateNotify: GLib.DestroyNotify

    // Owm methods of Gtk-2.0.Gtk.ItemFactory

    /**
     * Initializes an item factory.
     * @param containerType the kind of menu to create; can be    #GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
     * @param path the factory path of `ifactory,` a string of the form    <literal>"&lt;name&gt;"</literal>
     * @param accelGroup a #GtkAccelGroup to which the accelerators for the    menu items will be added, or %NULL to create a new one
     */
    construct(containerType: GObject.GType, path: string, accelGroup: AccelGroup): void
    /**
     * Creates an item for `entry`.
     * @param entry the #GtkItemFactoryEntry to create an item for
     * @param callbackData data passed to the callback function of `entry`
     * @param callbackType 1 if the callback function of `entry` is of type    #GtkItemFactoryCallback1, 2 if it is of type #GtkItemFactoryCallback2
     */
    createItem(entry: ItemFactoryEntry, callbackData: object | null, callbackType: number): void
    /**
     * Creates the menu items from the `entries`.
     * @param nEntries the length of `entries`
     * @param entries an array of #GtkItemFactoryEntry<!-- -->s whose `callback` members    must by of type #GtkItemFactoryCallback1
     * @param callbackData data passed to the callback functions of all entries
     */
    createItems(nEntries: number, entries: ItemFactoryEntry, callbackData: object | null): void
    /**
     * Creates the menu items from the `entries`.
     * @param nEntries the length of `entries`
     * @param entries an array of #GtkItemFactoryEntry<!-- -->s
     * @param callbackData data passed to the callback functions of all entries
     * @param callbackType 1 if the callback functions in `entries` are of type    #GtkItemFactoryCallback1, 2 if they are of type #GtkItemFactoryCallback2
     */
    createItemsAc(nEntries: number, entries: ItemFactoryEntry, callbackData: object | null, callbackType: number): void
    /**
     * Deletes the menu items which were created from the `entries` by the given
     * item factory.
     * @param nEntries the length of `entries`
     * @param entries an array of #GtkItemFactoryEntry<!-- -->s
     */
    deleteEntries(nEntries: number, entries: ItemFactoryEntry): void
    /**
     * Deletes the menu item which was created from `entry` by the given
     * item factory.
     * @param entry a #GtkItemFactoryEntry
     */
    deleteEntry(entry: ItemFactoryEntry): void
    /**
     * Deletes the menu item which was created for `path` by the given
     * item factory.
     * @param path a path
     */
    deleteItem(path: string): void
    /**
     * Pops up the menu constructed from the item factory at (`x,` `y)`.
     * 
     * The `mouse_button` parameter should be the mouse button pressed to initiate
     * the menu popup. If the menu popup was initiated by something other than
     * a mouse button press, such as a mouse button release or a keypress,
     * `mouse_button` should be 0.
     * 
     * The `time_` parameter should be the time stamp of the event that
     * initiated the popup. If such an event is not available, use
     * gtk_get_current_event_time() instead.
     * 
     * The operation of the `mouse_button` and the `time_` parameter is the same
     * as the `button` and `activation_time` parameters for gtk_menu_popup().
     * @param x the x position
     * @param y the y position
     * @param mouseButton the mouse button which was pressed to initiate the popup
     * @param time the time at which the activation event occurred
     */
    popup(x: number, y: number, mouseButton: number, time: number): void
    /**
     * Obtains the `popup_data` which was passed to
     * gtk_item_factory_popup_with_data(). This data is available until the menu
     * is popped down again.
     */
    popupData(): object | null
    /**
     * Pops up the menu constructed from the item factory at (`x,` `y)`. Callbacks
     * can access the `popup_data` while the menu is posted via
     * gtk_item_factory_popup_data() and gtk_item_factory_popup_data_from_widget().
     * 
     * The `mouse_button` parameter should be the mouse button pressed to initiate
     * the menu popup. If the menu popup was initiated by something other than
     * a mouse button press, such as a mouse button release or a keypress,
     * `mouse_button` should be 0.
     * 
     * The `time_` parameter should be the time stamp of the event that
     * initiated the popup. If such an event is not available, use
     * gtk_get_current_event_time() instead.
     * 
     * The operation of the `mouse_button` and the `time_` parameters is the same
     * as the `button` and `activation_time` parameters for gtk_menu_popup().
     * @param popupData data available for callbacks while the menu is posted
     * @param destroy a #GDestroyNotify function to be called on `popup_data` when  the menu is unposted
     * @param x the x position
     * @param y the y position
     * @param mouseButton the mouse button which was pressed to initiate the popup
     * @param time the time at which the activation event occurred
     */
    popupWithData(popupData: object | null, destroy: GLib.DestroyNotify, x: number, y: number, mouseButton: number, time: number): void
    /**
     * Sets a function to be used for translating the path elements before they
     * are displayed.
     * @param func the #GtkTranslateFunc function to be used to translate path elements
     */
    setTranslateFunc(func: TranslateFunc): void

    // Class property signals of Gtk-2.0.Gtk.ItemFactory

    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ItemFactory extends Object {

    // Own properties of Gtk-2.0.Gtk.ItemFactory

    static name: string

    // Constructors of Gtk-2.0.Gtk.ItemFactory

    constructor(config?: ItemFactory.ConstructorProperties) 
    /**
     * Creates a new #GtkItemFactory.
     * 
     * Beware that the returned object does not have a floating reference.
     * @constructor 
     * @param containerType the kind of menu to create; can be    #GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
     * @param path the factory path of the new item factory, a string of the form    <literal>"&lt;name&gt;"</literal>
     * @param accelGroup a #GtkAccelGroup to which the accelerators for the    menu items will be added, or %NULL to create a new one
     */
    constructor(containerType: GObject.GType, path: string, accelGroup: AccelGroup | null) 
    /**
     * Creates a new #GtkItemFactory.
     * 
     * Beware that the returned object does not have a floating reference.
     * @constructor 
     * @param containerType the kind of menu to create; can be    #GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
     * @param path the factory path of the new item factory, a string of the form    <literal>"&lt;name&gt;"</literal>
     * @param accelGroup a #GtkAccelGroup to which the accelerators for the    menu items will be added, or %NULL to create a new one
     */
    static new(containerType: GObject.GType, path: string, accelGroup: AccelGroup | null): ItemFactory
    _init(config?: ItemFactory.ConstructorProperties): void
    /**
     * Installs an accelerator for `accel_widget` in `accel_group,` that causes
     * the ::activate signal to be emitted if the accelerator is activated.
     * 
     * This function can be used to make widgets participate in the accel
     * saving/restoring functionality provided by gtk_accel_map_save() and
     * gtk_accel_map_load(), even if they haven't been created by an item
     * factory.
     * @param accelWidget widget to install an accelerator on
     * @param fullPath the full path for the `accel_widget`
     * @param accelGroup the accelerator group to install the accelerator in
     * @param keyval key value of the accelerator
     * @param modifiers modifier combination of the accelerator
     */
    static addForeign(accelWidget: Widget, fullPath: string, accelGroup: AccelGroup, keyval: number, modifiers: Gdk.ModifierType): void
    /**
     * Creates the menu items from the `entries`.
     * @param nEntries the length of `entries`
     * @param entries an array of #GtkMenuEntry<!-- -->s
     */
    static createMenuEntries(nEntries: number, entries: MenuEntry): void
    /**
     * If `widget` has been created by an item factory, returns the full path
     * to it. (The full path of a widget is the concatenation of the factory
     * path specified in gtk_item_factory_new() with the path specified in the
     * #GtkItemFactoryEntry from which the widget was created.)
     * @param widget a widget
     */
    static pathFromWidget(widget: Widget): string
    /**
     * Obtains the `popup_data` which was passed to
     * gtk_item_factory_popup_with_data(). This data is available until the menu
     * is popped down again.
     * @param widget a widget
     */
    static popupDataFromWidget(widget: Widget): object | null
}

export module Label {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate-current-link`
     */
    export interface ActivateCurrentLinkSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `activate-link`
     */
    export interface ActivateLinkSignalCallback {
        (uri: string): boolean
    }

    /**
     * Signal callback interface for `copy-clipboard`
     */
    export interface CopyClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    export interface MoveCursorSignalCallback {
        (step: MovementStep, count: number, extendSelection: boolean): void
    }

    /**
     * Signal callback interface for `populate-popup`
     */
    export interface PopulatePopupSignalCallback {
        (menu: Menu): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Misc.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Label

        /**
         * The angle that the baseline of the label makes with the horizontal,
         * in degrees, measured counterclockwise. An angle of 90 reads from
         * from bottom to top, an angle of 270, from top to bottom. Ignored
         * if the label is selectable, wrapped, or ellipsized.
         */
        angle?: number | null
        attributes?: Pango.AttrList | null
        /**
         * The preferred place to ellipsize the string, if the label does
         * not have enough room to display the entire string, specified as a
         * #PangoEllisizeMode.
         * 
         * Note that setting this property to a value other than
         * %PANGO_ELLIPSIZE_NONE has the side-effect that the label requests
         * only enough space to display the ellipsis "...". In particular, this
         * means that ellipsizing labels do not work well in notebook tabs, unless
         * the tab's #GtkNotebook:tab-expand property is set to %TRUE. Other ways
         * to set a label's width are gtk_widget_set_size_request() and
         * gtk_label_set_width_chars().
         */
        ellipsize?: Pango.EllipsizeMode | null
        justify?: Justification | null
        label?: string | null
        /**
         * The desired maximum width of the label, in characters. If this property
         * is set to -1, the width will be calculated automatically, otherwise the
         * label will request space for no more than the requested number of
         * characters. If the #GtkLabel:width-chars property is set to a positive
         * value, then the "max-width-chars" property is ignored.
         */
        maxWidthChars?: number | null
        mnemonicWidget?: Widget | null
        pattern?: string | null
        selectable?: boolean | null
        /**
         * Whether the label is in single line mode. In single line mode,
         * the height of the label does not depend on the actual text, it
         * is always set to ascent + descent of the font. This can be an
         * advantage in situations where resizing the label because of text
         * changes would be distracting, e.g. in a statusbar.
         */
        singleLineMode?: boolean | null
        /**
         * Set this property to %TRUE to make the label track which links
         * have been clicked. It will then apply the ::visited-link-color
         * color, instead of ::link-color.
         */
        trackVisitedLinks?: boolean | null
        useMarkup?: boolean | null
        useUnderline?: boolean | null
        /**
         * The desired width of the label, in characters. If this property is set to
         * -1, the width will be calculated automatically, otherwise the label will
         * request either 3 characters or the property value, whichever is greater.
         * If the "width-chars" property is set to a positive value, then the
         * #GtkLabel:max-width-chars property is ignored.
         */
        widthChars?: number | null
        wrap?: boolean | null
        /**
         * If line wrapping is on (see the #GtkLabel:wrap property) this controls
         * how the line wrapping is done. The default is %PANGO_WRAP_WORD, which
         * means wrap on word boundaries.
         */
        wrapMode?: Pango.WrapMode | null
    }

}

export interface Label extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Label

    /**
     * The angle that the baseline of the label makes with the horizontal,
     * in degrees, measured counterclockwise. An angle of 90 reads from
     * from bottom to top, an angle of 270, from top to bottom. Ignored
     * if the label is selectable, wrapped, or ellipsized.
     */
    angle: number
    attributes: Pango.AttrList
    readonly cursorPosition: number
    /**
     * The preferred place to ellipsize the string, if the label does
     * not have enough room to display the entire string, specified as a
     * #PangoEllisizeMode.
     * 
     * Note that setting this property to a value other than
     * %PANGO_ELLIPSIZE_NONE has the side-effect that the label requests
     * only enough space to display the ellipsis "...". In particular, this
     * means that ellipsizing labels do not work well in notebook tabs, unless
     * the tab's #GtkNotebook:tab-expand property is set to %TRUE. Other ways
     * to set a label's width are gtk_widget_set_size_request() and
     * gtk_label_set_width_chars().
     */
    ellipsize: Pango.EllipsizeMode
    justify: Justification
    label: string
    /**
     * The desired maximum width of the label, in characters. If this property
     * is set to -1, the width will be calculated automatically, otherwise the
     * label will request space for no more than the requested number of
     * characters. If the #GtkLabel:width-chars property is set to a positive
     * value, then the "max-width-chars" property is ignored.
     */
    maxWidthChars: number
    readonly mnemonicKeyval: number
    mnemonicWidget: Widget
    pattern: string
    selectable: boolean
    readonly selectionBound: number
    /**
     * Whether the label is in single line mode. In single line mode,
     * the height of the label does not depend on the actual text, it
     * is always set to ascent + descent of the font. This can be an
     * advantage in situations where resizing the label because of text
     * changes would be distracting, e.g. in a statusbar.
     */
    singleLineMode: boolean
    /**
     * Set this property to %TRUE to make the label track which links
     * have been clicked. It will then apply the ::visited-link-color
     * color, instead of ::link-color.
     */
    trackVisitedLinks: boolean
    useMarkup: boolean
    useUnderline: boolean
    /**
     * The desired width of the label, in characters. If this property is set to
     * -1, the width will be calculated automatically, otherwise the label will
     * request either 3 characters or the property value, whichever is greater.
     * If the "width-chars" property is set to a positive value, then the
     * #GtkLabel:max-width-chars property is ignored.
     */
    widthChars: number
    wrap: boolean
    /**
     * If line wrapping is on (see the #GtkLabel:wrap property) this controls
     * how the line wrapping is done. The default is %PANGO_WRAP_WORD, which
     * means wrap on word boundaries.
     */
    wrapMode: Pango.WrapMode

    // Own fields of Gtk-2.0.Gtk.Label

    misc: Misc

    // Owm methods of Gtk-2.0.Gtk.Label

    get(str: string): void
    /**
     * Gets the angle of rotation for the label. See
     * gtk_label_set_angle().
     */
    getAngle(): number
    /**
     * Gets the attribute list that was set on the label using
     * gtk_label_set_attributes(), if any. This function does
     * not reflect attributes that come from the labels markup
     * (see gtk_label_set_markup()). If you want to get the
     * effective attributes for the label, use
     * pango_layout_get_attribute (gtk_label_get_layout (label)).
     */
    getAttributes(): Pango.AttrList
    /**
     * Returns the URI for the currently active link in the label.
     * The active link is the one under the mouse pointer or, in a
     * selectable label, the link in which the text cursor is currently
     * positioned.
     * 
     * This function is intended for use in a #GtkLabel::activate-link handler
     * or for use in a #GtkWidget::query-tooltip handler.
     */
    getCurrentUri(): string
    /**
     * Returns the ellipsizing position of the label. See gtk_label_set_ellipsize().
     */
    getEllipsize(): Pango.EllipsizeMode
    /**
     * Returns the justification of the label. See gtk_label_set_justify().
     */
    getJustify(): Justification
    /**
     * Fetches the text from a label widget including any embedded
     * underlines indicating mnemonics and Pango markup. (See
     * gtk_label_get_text()).
     */
    getLabel(): string
    /**
     * Gets the #PangoLayout used to display the label.
     * The layout is useful to e.g. convert text positions to
     * pixel positions, in combination with gtk_label_get_layout_offsets().
     * The returned layout is owned by the label so need not be
     * freed by the caller.
     */
    getLayout(): Pango.Layout
    /**
     * Obtains the coordinates where the label will draw the #PangoLayout
     * representing the text in the label; useful to convert mouse events
     * into coordinates inside the #PangoLayout, e.g. to take some action
     * if some part of the label is clicked. Of course you will need to
     * create a #GtkEventBox to receive the events, and pack the label
     * inside it, since labels are a #GTK_NO_WINDOW widget. Remember
     * when using the #PangoLayout functions you need to convert to
     * and from pixels using PANGO_PIXELS() or #PANGO_SCALE.
     */
    getLayoutOffsets(): [ /* x */ number, /* y */ number ]
    /**
     * Returns whether lines in the label are automatically wrapped.
     * See gtk_label_set_line_wrap().
     */
    getLineWrap(): boolean
    /**
     * Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode().
     */
    getLineWrapMode(): Pango.WrapMode
    /**
     * Retrieves the desired maximum width of `label,` in characters. See
     * gtk_label_set_width_chars().
     */
    getMaxWidthChars(): number
    /**
     * If the label has been set so that it has an mnemonic key this function
     * returns the keyval used for the mnemonic accelerator. If there is no
     * mnemonic set up it returns #GDK_VoidSymbol.
     */
    getMnemonicKeyval(): number
    /**
     * Retrieves the target of the mnemonic (keyboard shortcut) of this
     * label. See gtk_label_set_mnemonic_widget().
     */
    getMnemonicWidget(): Widget
    /**
     * Gets the value set by gtk_label_set_selectable().
     */
    getSelectable(): boolean
    /**
     * Gets the selected range of characters in the label, returning %TRUE
     * if there's a selection.
     */
    getSelectionBounds(): [ /* returnType */ boolean, /* start */ number, /* end */ number ]
    /**
     * Returns whether the label is in single line mode.
     */
    getSingleLineMode(): boolean
    /**
     * Fetches the text from a label widget, as displayed on the
     * screen. This does not include any embedded underlines
     * indicating mnemonics or Pango markup. (See gtk_label_get_label())
     */
    getText(): string
    /**
     * Returns whether the label is currently keeping track
     * of clicked links.
     */
    getTrackVisitedLinks(): boolean
    /**
     * Returns whether the label's text is interpreted as marked up with
     * the <link linkend="PangoMarkupFormat">Pango text markup
     * language</link>. See gtk_label_set_use_markup ().
     */
    getUseMarkup(): boolean
    /**
     * Returns whether an embedded underline in the label indicates a
     * mnemonic. See gtk_label_set_use_underline().
     */
    getUseUnderline(): boolean
    /**
     * Retrieves the desired width of `label,` in characters. See
     * gtk_label_set_width_chars().
     */
    getWidthChars(): number
    parseUline(string: string): number
    /**
     * Selects a range of characters in the label, if the label is selectable.
     * See gtk_label_set_selectable(). If the label is not selectable,
     * this function has no effect. If `start_offset` or
     * `end_offset` are -1, then the end of the label will be substituted.
     * @param startOffset start offset (in characters not bytes)
     * @param endOffset end offset (in characters not bytes)
     */
    selectRegion(startOffset: number, endOffset: number): void
    /**
     * Sets the angle of rotation for the label. An angle of 90 reads from
     * from bottom to top, an angle of 270, from top to bottom. The angle
     * setting for the label is ignored if the label is selectable,
     * wrapped, or ellipsized.
     * @param angle the angle that the baseline of the label makes with   the horizontal, in degrees, measured counterclockwise
     */
    setAngle(angle: number): void
    /**
     * Sets a #PangoAttrList; the attributes in the list are applied to the
     * label text.
     * 
     * <note><para>The attributes set with this function will be applied
     * and merged with any other attributes previously effected by way
     * of the #GtkLabel:use-underline or #GtkLabel:use-markup properties.
     * While it is not recommended to mix markup strings with manually set
     * attributes, if you must; know that the attributes will be applied
     * to the label after the markup string is parsed.</para></note>
     * @param attrs a #PangoAttrList
     */
    setAttributes(attrs: Pango.AttrList): void
    /**
     * Sets the mode used to ellipsize (add an ellipsis: "...") to the text
     * if there is not enough space to render the entire string.
     * @param mode a #PangoEllipsizeMode
     */
    setEllipsize(mode: Pango.EllipsizeMode): void
    /**
     * Sets the alignment of the lines in the text of the label relative to
     * each other. %GTK_JUSTIFY_LEFT is the default value when the
     * widget is first created with gtk_label_new(). If you instead want
     * to set the alignment of the label as a whole, use
     * gtk_misc_set_alignment() instead. gtk_label_set_justify() has no
     * effect on labels containing only a single line.
     * @param jtype a #GtkJustification
     */
    setJustify(jtype: Justification): void
    /**
     * Sets the text of the label. The label is interpreted as
     * including embedded underlines and/or Pango markup depending
     * on the values of the #GtkLabel:use-underline" and
     * #GtkLabel:use-markup properties.
     * @param str the new text to set for the label
     */
    setLabel(str: string): void
    /**
     * Toggles line wrapping within the #GtkLabel widget. %TRUE makes it break
     * lines if text exceeds the widget's size. %FALSE lets the text get cut off
     * by the edge of the widget if it exceeds the widget size.
     * 
     * Note that setting line wrapping to %TRUE does not make the label
     * wrap at its parent container's width, because GTK+ widgets
     * conceptually can't make their requisition depend on the parent
     * container's size. For a label that wraps at a specific position,
     * set the label's width using gtk_widget_set_size_request().
     * @param wrap the setting
     */
    setLineWrap(wrap: boolean): void
    /**
     * If line wrapping is on (see gtk_label_set_line_wrap()) this controls how
     * the line wrapping is done. The default is %PANGO_WRAP_WORD which means
     * wrap on word boundaries.
     * @param wrapMode the line wrapping mode
     */
    setLineWrapMode(wrapMode: Pango.WrapMode): void
    /**
     * Parses `str` which is marked up with the <link
     * linkend="PangoMarkupFormat">Pango text markup language</link>, setting the
     * label's text and attribute list based on the parse results. If the `str` is
     * external data, you may need to escape it with g_markup_escape_text() or
     * g_markup_printf_escaped()<!-- -->:
     * |[
     * char *markup;
     *   
     * markup = g_markup_printf_escaped ("&lt;span style=\"italic\"&gt;&percnt;s&lt;/span&gt;", str);
     * gtk_label_set_markup (GTK_LABEL (label), markup);
     * g_free (markup);
     * ```
     * 
     * @param str a markup string (see <link linkend="PangoMarkupFormat">Pango markup format</link>)
     */
    setMarkup(str: string): void
    /**
     * Parses `str` which is marked up with the <link linkend="PangoMarkupFormat">Pango text markup language</link>,
     * setting the label's text and attribute list based on the parse results.
     * If characters in `str` are preceded by an underscore, they are underlined
     * indicating that they represent a keyboard accelerator called a mnemonic.
     * 
     * The mnemonic key can be used to activate another widget, chosen
     * automatically, or explicitly using gtk_label_set_mnemonic_widget().
     * @param str a markup string (see <link linkend="PangoMarkupFormat">Pango markup format</link>)
     */
    setMarkupWithMnemonic(str: string): void
    /**
     * Sets the desired maximum width in characters of `label` to `n_chars`.
     * @param nChars the new desired maximum width, in characters.
     */
    setMaxWidthChars(nChars: number): void
    /**
     * If the label has been set so that it has an mnemonic key (using
     * i.e. gtk_label_set_markup_with_mnemonic(),
     * gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()
     * or the "use_underline" property) the label can be associated with a
     * widget that is the target of the mnemonic. When the label is inside
     * a widget (like a #GtkButton or a #GtkNotebook tab) it is
     * automatically associated with the correct widget, but sometimes
     * (i.e. when the target is a #GtkEntry next to the label) you need to
     * set it explicitly using this function.
     * 
     * The target widget will be accelerated by emitting the
     * GtkWidget::mnemonic-activate signal on it. The default handler for
     * this signal will activate the widget if there are no mnemonic collisions
     * and toggle focus between the colliding widgets otherwise.
     * @param widget the target #GtkWidget
     */
    setMnemonicWidget(widget: Widget | null): void
    setPattern(pattern: string): void
    /**
     * Selectable labels allow the user to select text from the label, for
     * copy-and-paste.
     * @param setting %TRUE to allow selecting text in the label
     */
    setSelectable(setting: boolean): void
    /**
     * Sets whether the label is in single line mode.
     * @param singleLineMode %TRUE if the label should be in single line mode
     */
    setSingleLineMode(singleLineMode: boolean): void
    /**
     * Sets the text within the #GtkLabel widget. It overwrites any text that
     * was there before.
     * 
     * This will also clear any previously set mnemonic accelerators.
     * @param str The text you want to set
     */
    setText(str: string): void
    /**
     * Sets the label's text from the string `str`.
     * If characters in `str` are preceded by an underscore, they are underlined
     * indicating that they represent a keyboard accelerator called a mnemonic.
     * The mnemonic key can be used to activate another widget, chosen
     * automatically, or explicitly using gtk_label_set_mnemonic_widget().
     * @param str a string
     */
    setTextWithMnemonic(str: string): void
    /**
     * Sets whether the label should keep track of clicked
     * links (and use a different color for them).
     * @param trackLinks %TRUE to track visited links
     */
    setTrackVisitedLinks(trackLinks: boolean): void
    /**
     * Sets whether the text of the label contains markup in <link
     * linkend="PangoMarkupFormat">Pango's text markup
     * language</link>. See gtk_label_set_markup().
     * @param setting %TRUE if the label's text should be parsed for markup.
     */
    setUseMarkup(setting: boolean): void
    /**
     * If true, an underline in the text indicates the next character should be
     * used for the mnemonic accelerator key.
     * @param setting %TRUE if underlines in the text indicate mnemonics
     */
    setUseUnderline(setting: boolean): void
    /**
     * Sets the desired width in characters of `label` to `n_chars`.
     * @param nChars the new desired width, in characters.
     */
    setWidthChars(nChars: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Label

    activateLink(uri: string): boolean
    copyClipboard(): void
    moveCursor(step: MovementStep, count: number, extendSelection: boolean): void
    populatePopup(menu: Menu): void

    // Own signals of Gtk-2.0.Gtk.Label

    connect(sigName: "activate-current-link", callback: Label.ActivateCurrentLinkSignalCallback): number
    on(sigName: "activate-current-link", callback: Label.ActivateCurrentLinkSignalCallback): number
    once(sigName: "activate-current-link", callback: Label.ActivateCurrentLinkSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-current-link", ...args: any[]): void
    connect(sigName: "activate-link", callback: Label.ActivateLinkSignalCallback): number
    on(sigName: "activate-link", callback: Label.ActivateLinkSignalCallback): number
    once(sigName: "activate-link", callback: Label.ActivateLinkSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-link", ...args: any[]): void
    connect(sigName: "copy-clipboard", callback: Label.CopyClipboardSignalCallback): number
    on(sigName: "copy-clipboard", callback: Label.CopyClipboardSignalCallback): number
    once(sigName: "copy-clipboard", callback: Label.CopyClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "copy-clipboard", ...args: any[]): void
    connect(sigName: "move-cursor", callback: Label.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: Label.MoveCursorSignalCallback): number
    once(sigName: "move-cursor", callback: Label.MoveCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-cursor", count: number, extendSelection: boolean, ...args: any[]): void
    connect(sigName: "populate-popup", callback: Label.PopulatePopupSignalCallback): number
    on(sigName: "populate-popup", callback: Label.PopulatePopupSignalCallback): number
    once(sigName: "populate-popup", callback: Label.PopulatePopupSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "populate-popup", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Label

    connect(sigName: "notify::angle", callback: any): number
    on(sigName: "notify::angle", callback: any): number
    once(sigName: "notify::angle", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::angle", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: any): number
    on(sigName: "notify::cursor-position", callback: any): number
    once(sigName: "notify::cursor-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::justify", callback: any): number
    on(sigName: "notify::justify", callback: any): number
    once(sigName: "notify::justify", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::justify", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::max-width-chars", callback: any): number
    on(sigName: "notify::max-width-chars", callback: any): number
    once(sigName: "notify::max-width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-width-chars", ...args: any[]): void
    connect(sigName: "notify::mnemonic-keyval", callback: any): number
    on(sigName: "notify::mnemonic-keyval", callback: any): number
    once(sigName: "notify::mnemonic-keyval", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonic-keyval", ...args: any[]): void
    connect(sigName: "notify::mnemonic-widget", callback: any): number
    on(sigName: "notify::mnemonic-widget", callback: any): number
    once(sigName: "notify::mnemonic-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonic-widget", ...args: any[]): void
    connect(sigName: "notify::pattern", callback: any): number
    on(sigName: "notify::pattern", callback: any): number
    once(sigName: "notify::pattern", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pattern", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: any): number
    on(sigName: "notify::selectable", callback: any): number
    once(sigName: "notify::selectable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: any): number
    on(sigName: "notify::selection-bound", callback: any): number
    once(sigName: "notify::selection-bound", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::single-line-mode", callback: any): number
    on(sigName: "notify::single-line-mode", callback: any): number
    once(sigName: "notify::single-line-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-line-mode", ...args: any[]): void
    connect(sigName: "notify::track-visited-links", callback: any): number
    on(sigName: "notify::track-visited-links", callback: any): number
    once(sigName: "notify::track-visited-links", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::track-visited-links", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: any): number
    on(sigName: "notify::use-markup", callback: any): number
    once(sigName: "notify::use-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap", callback: any): number
    on(sigName: "notify::wrap", callback: any): number
    once(sigName: "notify::wrap", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Label extends Misc {

    // Own properties of Gtk-2.0.Gtk.Label

    static name: string

    // Constructors of Gtk-2.0.Gtk.Label

    constructor(config?: Label.ConstructorProperties) 
    /**
     * Creates a new label with the given text inside it. You can
     * pass %NULL to get an empty label widget.
     * @constructor 
     * @param str The text of the label
     */
    constructor(str: string) 
    /**
     * Creates a new label with the given text inside it. You can
     * pass %NULL to get an empty label widget.
     * @constructor 
     * @param str The text of the label
     */
    static new(str: string): Label
    /**
     * Creates a new #GtkLabel, containing the text in `str`.
     * 
     * If characters in `str` are preceded by an underscore, they are
     * underlined. If you need a literal underscore character in a label, use
     * '__' (two underscores). The first underlined character represents a
     * keyboard accelerator called a mnemonic. The mnemonic key can be used
     * to activate another widget, chosen automatically, or explicitly using
     * gtk_label_set_mnemonic_widget().
     * 
     * If gtk_label_set_mnemonic_widget() is not called, then the first
     * activatable ancestor of the #GtkLabel will be chosen as the mnemonic
     * widget. For instance, if the label is inside a button or menu item,
     * the button or menu item will automatically become the mnemonic widget
     * and be activated by the mnemonic.
     * @constructor 
     * @param str The text of the label, with an underscore in front of the       mnemonic character
     */
    static newWithMnemonic(str: string): Label
    _init(config?: Label.ConstructorProperties): void
}

export module Layout {

    // Signal callback interfaces

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (object: Adjustment, p0: Adjustment): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Layout

        hadjustment?: Adjustment | null
        height?: number | null
        vadjustment?: Adjustment | null
        width?: number | null
    }

}

export interface Layout extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Layout

    container: Container
    children: object[]
    width: number
    height: number
    hadjustment: Adjustment
    vadjustment: Adjustment
    binWindow: Gdk.Window

    // Owm methods of Gtk-2.0.Gtk.Layout

    /**
     * This is a deprecated function, it doesn't do anything useful.
     */
    freeze(): void
    /**
     * Retrieve the bin window of the layout used for drawing operations.
     */
    getBinWindow(): Gdk.Window
    /**
     * This function should only be called after the layout has been
     * placed in a #GtkScrolledWindow or otherwise configured for
     * scrolling. It returns the #GtkAdjustment used for communication
     * between the horizontal scrollbar and `layout`.
     * 
     * See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
     */
    getHadjustment(): Adjustment
    /**
     * Gets the size that has been set on the layout, and that determines
     * the total extents of the layout's scrollbar area. See
     * gtk_layout_set_size ().
     */
    getSize(): [ /* width */ number, /* height */ number ]
    /**
     * This function should only be called after the layout has been
     * placed in a #GtkScrolledWindow or otherwise configured for
     * scrolling. It returns the #GtkAdjustment used for communication
     * between the vertical scrollbar and `layout`.
     * 
     * See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
     */
    getVadjustment(): Adjustment
    /**
     * Moves a current child of `layout` to a new position.
     * @param childWidget a current child of `layout`
     * @param x X position to move to
     * @param y Y position to move to
     */
    move(childWidget: Widget, x: number, y: number): void
    /**
     * Adds `child_widget` to `layout,` at position (`x,``y)`.
     * `layout` becomes the new parent container of `child_widget`.
     * @param childWidget child widget
     * @param x X position of child widget
     * @param y Y position of child widget
     */
    put(childWidget: Widget, x: number, y: number): void
    /**
     * Sets the horizontal scroll adjustment for the layout.
     * 
     * See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
     * @param adjustment new scroll adjustment
     */
    setHadjustment(adjustment: Adjustment | null): void
    /**
     * Sets the size of the scrollable area of the layout.
     * @param width width of entire scrollable area
     * @param height height of entire scrollable area
     */
    setSize(width: number, height: number): void
    /**
     * Sets the vertical scroll adjustment for the layout.
     * 
     * See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
     * @param adjustment new scroll adjustment
     */
    setVadjustment(adjustment: Adjustment | null): void
    /**
     * This is a deprecated function, it doesn't do anything useful.
     */
    thaw(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Layout

    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean

    // Own signals of Gtk-2.0.Gtk.Layout

    connect(sigName: "set-scroll-adjustments", callback: Layout.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: Layout.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: Layout.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", p0: Adjustment, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Layout

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Layout extends Container {

    // Own properties of Gtk-2.0.Gtk.Layout

    static name: string

    // Constructors of Gtk-2.0.Gtk.Layout

    constructor(config?: Layout.ConstructorProperties) 
    /**
     * Creates a new #GtkLayout. Unless you have a specific adjustment
     * you'd like the layout to use for scrolling, pass %NULL for
     * `hadjustment` and `vadjustment`.
     * @constructor 
     * @param hadjustment horizontal scroll adjustment, or %NULL
     * @param vadjustment vertical scroll adjustment, or %NULL
     */
    constructor(hadjustment: Adjustment | null, vadjustment: Adjustment | null) 
    /**
     * Creates a new #GtkLayout. Unless you have a specific adjustment
     * you'd like the layout to use for scrolling, pass %NULL for
     * `hadjustment` and `vadjustment`.
     * @constructor 
     * @param hadjustment horizontal scroll adjustment, or %NULL
     * @param vadjustment vertical scroll adjustment, or %NULL
     */
    static new(hadjustment: Adjustment | null, vadjustment: Adjustment | null): Layout
    _init(config?: Layout.ConstructorProperties): void
}

export module LinkButton {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Button.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.LinkButton

        /**
         * The URI bound to this button.
         */
        uri?: string | null
        /**
         * The 'visited' state of this button. A visited link is drawn in a
         * different color.
         */
        visited?: boolean | null
    }

}

export interface LinkButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.LinkButton

    /**
     * The URI bound to this button.
     */
    uri: string
    /**
     * The 'visited' state of this button. A visited link is drawn in a
     * different color.
     */
    visited: boolean

    // Own fields of Gtk-2.0.Gtk.LinkButton

    parentInstance: any
    priv: LinkButtonPrivate

    // Owm methods of Gtk-2.0.Gtk.LinkButton

    /**
     * Retrieves the URI set using gtk_link_button_set_uri().
     */
    getUri(): string
    /**
     * Retrieves the 'visited' state of the URI where the #GtkLinkButton
     * points. The button becomes visited when it is clicked. If the URI
     * is changed on the button, the 'visited' state is unset again.
     * 
     * The state may also be changed using gtk_link_button_set_visited().
     */
    getVisited(): boolean
    /**
     * Sets `uri` as the URI where the #GtkLinkButton points. As a side-effect
     * this unsets the 'visited' state of the button.
     * @param uri a valid URI
     */
    setUri(uri: string): void
    /**
     * Sets the 'visited' state of the URI where the #GtkLinkButton
     * points.  See gtk_link_button_get_visited() for more details.
     * @param visited the new 'visited' state
     */
    setVisited(visited: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.LinkButton

    connect(sigName: "notify::uri", callback: any): number
    on(sigName: "notify::uri", callback: any): number
    once(sigName: "notify::uri", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::visited", callback: any): number
    on(sigName: "notify::visited", callback: any): number
    once(sigName: "notify::visited", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visited", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class LinkButton extends Button {

    // Own properties of Gtk-2.0.Gtk.LinkButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.LinkButton

    constructor(config?: LinkButton.ConstructorProperties) 
    /**
     * Creates a new #GtkLinkButton with the URI as its text.
     * @constructor 
     * @param uri a valid URI
     */
    constructor(uri: string) 
    /**
     * Creates a new #GtkLinkButton with the URI as its text.
     * @constructor 
     * @param uri a valid URI
     */
    static new(uri: string): LinkButton

    // Overloads of new

    static new(): Button
    /**
     * Creates a new #GtkLinkButton containing a label.
     * @constructor 
     * @param uri a valid URI
     * @param label the text of the button
     */
    static newWithLabel(uri: string, label: string | null): LinkButton

    // Overloads of newWithLabel

    static newWithLabel(label: string): Button
    _init(config?: LinkButton.ConstructorProperties): void
}

export module List {

    // Signal callback interfaces

    /**
     * Signal callback interface for `select-child`
     */
    export interface SelectChildSignalCallback {
        (object: Widget): void
    }

    /**
     * Signal callback interface for `selection-changed`
     */
    export interface SelectionChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unselect-child`
     */
    export interface UnselectChildSignalCallback {
        (object: Widget): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.List

        selectionMode?: SelectionMode | null
    }

}

export interface List extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.List

    container: Container
    children: object[]
    selection: object[]
    undoSelection: object[]
    undoUnselection: object[]
    lastFocusChild: Widget
    undoFocusChild: Widget
    htimer: number
    vtimer: number
    anchor: number
    dragPos: number
    anchorState: StateType
    selectionMode: number
    dragSelection: number
    addMode: number

    // Owm methods of Gtk-2.0.Gtk.List

    childPosition(child: Widget): number
    clearItems(start: number, end: number): void
    endDragSelection(): void
    endSelection(): void
    extendSelection(scrollType: ScrollType, position: number, autoStartSelection: boolean): void
    scrollHorizontal(scrollType: ScrollType, position: number): void
    scrollVertical(scrollType: ScrollType, position: number): void
    selectAll(): void
    // Has conflict: selectChild(child: Widget): void
    selectItem(item: number): void
    setSelectionMode(mode: SelectionMode): void
    startSelection(): void
    toggleAddMode(): void
    toggleFocusRow(): void
    toggleRow(item: Widget): void
    unselectAll(): void
    // Has conflict: unselectChild(child: Widget): void
    unselectItem(item: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.List

    selectChild(child: Widget): void
    selectionChanged(): void
    unselectChild(child: Widget): void

    // Own signals of Gtk-2.0.Gtk.List

    connect(sigName: "select-child", callback: List.SelectChildSignalCallback): number
    on(sigName: "select-child", callback: List.SelectChildSignalCallback): number
    once(sigName: "select-child", callback: List.SelectChildSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-child", ...args: any[]): void
    connect(sigName: "selection-changed", callback: List.SelectionChangedSignalCallback): number
    on(sigName: "selection-changed", callback: List.SelectionChangedSignalCallback): number
    once(sigName: "selection-changed", callback: List.SelectionChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-changed", ...args: any[]): void
    connect(sigName: "unselect-child", callback: List.UnselectChildSignalCallback): number
    on(sigName: "unselect-child", callback: List.UnselectChildSignalCallback): number
    once(sigName: "unselect-child", callback: List.UnselectChildSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unselect-child", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.List

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class List extends Container {

    // Own properties of Gtk-2.0.Gtk.List

    static name: string

    // Constructors of Gtk-2.0.Gtk.List

    constructor(config?: List.ConstructorProperties) 
    constructor() 
    static new(): List
    _init(config?: List.ConstructorProperties): void
}

export module ListItem {

    // Signal callback interfaces

    /**
     * Signal callback interface for `end-selection`
     */
    export interface EndSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `extend-selection`
     */
    export interface ExtendSelectionSignalCallback {
        (object: ScrollType, p0: number, p1: boolean): void
    }

    /**
     * Signal callback interface for `scroll-horizontal`
     */
    export interface ScrollHorizontalSignalCallback {
        (object: ScrollType, p0: number): void
    }

    /**
     * Signal callback interface for `scroll-vertical`
     */
    export interface ScrollVerticalSignalCallback {
        (object: ScrollType, p0: number): void
    }

    /**
     * Signal callback interface for `select-all`
     */
    export interface SelectAllSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `start-selection`
     */
    export interface StartSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-add-mode`
     */
    export interface ToggleAddModeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-focus-row`
     */
    export interface ToggleFocusRowSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `undo-selection`
     */
    export interface UndoSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unselect-all`
     */
    export interface UnselectAllSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Item.ConstructorProperties {
    }

}

export interface ListItem extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.ListItem

    item: Item

    // Owm methods of Gtk-2.0.Gtk.ListItem

    deselect(): void

    // Overloads of deselect

    deselect(): void
    select(): void

    // Overloads of select

    select(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ListItem

    endSelection(): void
    extendSelection(scrollType: ScrollType, position: number, autoStartSelection: boolean): void
    scrollHorizontal(scrollType: ScrollType, position: number): void
    scrollVertical(scrollType: ScrollType, position: number): void
    selectAll(): void
    startSelection(): void
    toggleAddMode(): void
    toggleFocusRow(): void
    undoSelection(): void
    unselectAll(): void

    // Own signals of Gtk-2.0.Gtk.ListItem

    connect(sigName: "end-selection", callback: ListItem.EndSelectionSignalCallback): number
    on(sigName: "end-selection", callback: ListItem.EndSelectionSignalCallback): number
    once(sigName: "end-selection", callback: ListItem.EndSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "end-selection", ...args: any[]): void
    connect(sigName: "extend-selection", callback: ListItem.ExtendSelectionSignalCallback): number
    on(sigName: "extend-selection", callback: ListItem.ExtendSelectionSignalCallback): number
    once(sigName: "extend-selection", callback: ListItem.ExtendSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "extend-selection", p0: number, p1: boolean, ...args: any[]): void
    connect(sigName: "scroll-horizontal", callback: ListItem.ScrollHorizontalSignalCallback): number
    on(sigName: "scroll-horizontal", callback: ListItem.ScrollHorizontalSignalCallback): number
    once(sigName: "scroll-horizontal", callback: ListItem.ScrollHorizontalSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-horizontal", p0: number, ...args: any[]): void
    connect(sigName: "scroll-vertical", callback: ListItem.ScrollVerticalSignalCallback): number
    on(sigName: "scroll-vertical", callback: ListItem.ScrollVerticalSignalCallback): number
    once(sigName: "scroll-vertical", callback: ListItem.ScrollVerticalSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-vertical", p0: number, ...args: any[]): void
    connect(sigName: "select-all", callback: ListItem.SelectAllSignalCallback): number
    on(sigName: "select-all", callback: ListItem.SelectAllSignalCallback): number
    once(sigName: "select-all", callback: ListItem.SelectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-all", ...args: any[]): void
    connect(sigName: "start-selection", callback: ListItem.StartSelectionSignalCallback): number
    on(sigName: "start-selection", callback: ListItem.StartSelectionSignalCallback): number
    once(sigName: "start-selection", callback: ListItem.StartSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "start-selection", ...args: any[]): void
    connect(sigName: "toggle-add-mode", callback: ListItem.ToggleAddModeSignalCallback): number
    on(sigName: "toggle-add-mode", callback: ListItem.ToggleAddModeSignalCallback): number
    once(sigName: "toggle-add-mode", callback: ListItem.ToggleAddModeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-add-mode", ...args: any[]): void
    connect(sigName: "toggle-focus-row", callback: ListItem.ToggleFocusRowSignalCallback): number
    on(sigName: "toggle-focus-row", callback: ListItem.ToggleFocusRowSignalCallback): number
    once(sigName: "toggle-focus-row", callback: ListItem.ToggleFocusRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-focus-row", ...args: any[]): void
    connect(sigName: "undo-selection", callback: ListItem.UndoSelectionSignalCallback): number
    on(sigName: "undo-selection", callback: ListItem.UndoSelectionSignalCallback): number
    once(sigName: "undo-selection", callback: ListItem.UndoSelectionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "undo-selection", ...args: any[]): void
    connect(sigName: "unselect-all", callback: ListItem.UnselectAllSignalCallback): number
    on(sigName: "unselect-all", callback: ListItem.UnselectAllSignalCallback): number
    once(sigName: "unselect-all", callback: ListItem.UnselectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unselect-all", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ListItem

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ListItem extends Item {

    // Own properties of Gtk-2.0.Gtk.ListItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.ListItem

    constructor(config?: ListItem.ConstructorProperties) 
    constructor() 
    static new(): ListItem
    static newWithLabel(label: string): ListItem
    _init(config?: ListItem.ConstructorProperties): void
}

export module ListStore {

    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, TreeDragDest.ConstructorProperties, TreeDragSource.ConstructorProperties, TreeModel.ConstructorProperties, TreeSortable.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

export interface ListStore extends Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable {

    // Own fields of Gtk-2.0.Gtk.ListStore

    parent: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.ListStore

    /**
     * Appends a new row to `list_store`.  `iter` will be changed to point to this new
     * row.  The row will be empty after this function is called.  To fill in
     * values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
     */
    append(): /* iter */ TreeIter
    /**
     * Removes all rows from the list store.
     */
    clear(): void
    /**
     * Creates a new row at `position`.  `iter` will be changed to point to this new
     * row.  If `position` is larger than the number of rows on the list, then the
     * new row will be appended to the list. The row will be empty after this
     * function is called.  To fill in values, you need to call
     * gtk_list_store_set() or gtk_list_store_set_value().
     * @param position position to insert the new row
     */
    insert(position: number): /* iter */ TreeIter
    /**
     * Inserts a new row after `sibling`. If `sibling` is %NULL, then the row will be
     * prepended to the beginning of the list. `iter` will be changed to point to
     * this new row. The row will be empty after this function is called. To fill
     * in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
     * @param sibling A valid #GtkTreeIter, or %NULL
     */
    insertAfter(sibling: TreeIter | null): /* iter */ TreeIter
    /**
     * Inserts a new row before `sibling`. If `sibling` is %NULL, then the row will
     * be appended to the end of the list. `iter` will be changed to point to this
     * new row. The row will be empty after this function is called. To fill in
     * values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
     * @param sibling A valid #GtkTreeIter, or %NULL
     */
    insertBefore(sibling: TreeIter | null): /* iter */ TreeIter
    /**
     * A variant of gtk_list_store_insert_with_values() which
     * takes the columns and values as two arrays, instead of
     * varargs. This function is mainly intended for
     * language-bindings.
     * @param position position to insert the new row
     * @param columns an array of column numbers
     * @param values an array of GValues
     */
    insertWithValuesv(position: number, columns: number[], values: any[]): /* iter */ TreeIter
    /**
     * <warning>This function is slow. Only use it for debugging and/or testing
     * purposes.</warning>
     * 
     * Checks if the given iter is a valid iter for this #GtkListStore.
     * @param iter A #GtkTreeIter.
     */
    iterIsValid(iter: TreeIter): boolean
    /**
     * Moves `iter` in `store` to the position after `position`. Note that this
     * function only works with unsorted stores. If `position` is %NULL, `iter`
     * will be moved to the start of the list.
     * @param iter A #GtkTreeIter.
     * @param position A #GtkTreeIter or %NULL.
     */
    moveAfter(iter: TreeIter, position: TreeIter | null): void
    /**
     * Moves `iter` in `store` to the position before `position`. Note that this
     * function only works with unsorted stores. If `position` is %NULL, `iter`
     * will be moved to the end of the list.
     * @param iter A #GtkTreeIter.
     * @param position A #GtkTreeIter, or %NULL.
     */
    moveBefore(iter: TreeIter, position: TreeIter | null): void
    /**
     * Prepends a new row to `list_store`. `iter` will be changed to point to this new
     * row. The row will be empty after this function is called. To fill in
     * values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
     */
    prepend(): /* iter */ TreeIter
    /**
     * Removes the given row from the list store.  After being removed,
     * `iter` is set to be the next valid row, or invalidated if it pointed
     * to the last row in `list_store`.
     * @param iter A valid #GtkTreeIter
     */
    remove(iter: TreeIter): boolean
    /**
     * Reorders `store` to follow the order indicated by `new_order`. Note that
     * this function only works with unsorted stores.
     * @param newOrder an array of integers mapping the new position of each child      to its old position before the re-ordering,      i.e. `new_order<`literal>[newpos] = oldpos</literal>.
     */
    reorder(newOrder: number[]): void
    /**
     * This function is meant primarily for #GObjects that inherit from #GtkListStore,
     * and should only be used when constructing a new #GtkListStore.  It will not
     * function after a row has been added, or a method on the #GtkTreeModel
     * interface is called.
     * @param types An array length n of #GTypes
     */
    setColumnTypes(types: GObject.GType[]): void
    /**
     * Sets the data in the cell specified by `iter` and `column`.
     * The type of `value` must be convertible to the type of the
     * column.
     * @param iter A valid #GtkTreeIter for the row being modified
     * @param column column number to modify
     * @param value new value for the cell
     */
    setValue(iter: TreeIter, column: number, value: any): void
    /**
     * A variant of gtk_list_store_set_valist() which
     * takes the columns and values as two arrays, instead of
     * varargs. This function is mainly intended for
     * language-bindings and in case the number of columns to
     * change is not known until run-time.
     * @param iter A valid #GtkTreeIter for the row being modified
     * @param columns an array of column numbers
     * @param values an array of GValues
     */
    setValuesv(iter: TreeIter, columns: number[], values: any[]): void
    /**
     * Swaps `a` and `b` in `store`. Note that this function only works with
     * unsorted stores.
     * @param a A #GtkTreeIter.
     * @param b Another #GtkTreeIter.
     */
    swap(a: TreeIter, b: TreeIter): void

    // Class property signals of Gtk-2.0.Gtk.ListStore

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ListStore extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.ListStore

    static name: string

    // Constructors of Gtk-2.0.Gtk.ListStore

    constructor(config?: ListStore.ConstructorProperties) 
    /**
     * Non-vararg creation function.  Used primarily by language bindings.
     * @constructor 
     * @param types an array of #GType types for the columns, from first to last
     */
    static newv(types: GObject.GType[]): ListStore

    // Overloads of newv

    /**
     * Creates a new instance of a #GObject subtype and sets its properties.
     * 
     * Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
     * which are not explicitly specified are set to their default values.
     * @constructor 
     * @param objectType the type id of the #GObject subtype to instantiate
     * @param parameters an array of #GParameter
     */
    static newv(objectType: GObject.GType, parameters: GObject.Parameter[]): GObject.Object
    _init(config?: ListStore.ConstructorProperties): void
}

export module Menu {

    // Signal callback interfaces

    /**
     * Signal callback interface for `move-scroll`
     */
    export interface MoveScrollSignalCallback {
        (object: ScrollType): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, MenuShell.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Menu

        /**
         * The accel group holding accelerators for the menu.
         */
        accelGroup?: AccelGroup | null
        /**
         * An accel path used to conveniently construct accel paths of child items.
         */
        accelPath?: string | null
        /**
         * The index of the currently selected menu item, or -1 if no
         * menu item is selected.
         */
        active?: number | null
        /**
         * The widget the menu is attached to. Setting this property attaches
         * the menu without a #GtkMenuDetachFunc. If you need to use a detacher,
         * use gtk_menu_attach_to_widget() directly.
         */
        attachWidget?: Widget | null
        /**
         * The monitor the menu will be popped up on.
         */
        monitor?: number | null
        /**
         * A boolean that indicates whether the menu reserves space for
         * toggles and icons, regardless of their actual presence.
         * 
         * This property should only be changed from its default value
         * for special-purposes such as tabular menus. Regular menus that
         * are connected to a menu bar or context menus should reserve
         * toggle space for consistency.
         */
        reserveToggleSize?: boolean | null
        /**
         * A boolean that indicates whether the menu is torn-off.
         */
        tearoffState?: boolean | null
        tearoffTitle?: string | null
    }

}

export interface Menu extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Menu

    /**
     * The index of the currently selected menu item, or -1 if no
     * menu item is selected.
     */
    active: number
    /**
     * The widget the menu is attached to. Setting this property attaches
     * the menu without a #GtkMenuDetachFunc. If you need to use a detacher,
     * use gtk_menu_attach_to_widget() directly.
     */
    attachWidget: Widget
    /**
     * The monitor the menu will be popped up on.
     */
    monitor: number
    /**
     * A boolean that indicates whether the menu reserves space for
     * toggles and icons, regardless of their actual presence.
     * 
     * This property should only be changed from its default value
     * for special-purposes such as tabular menus. Regular menus that
     * are connected to a menu bar or context menus should reserve
     * toggle space for consistency.
     */
    reserveToggleSize: boolean
    /**
     * A boolean that indicates whether the menu is torn-off.
     */
    tearoffState: boolean
    tearoffTitle: string

    // Own fields of Gtk-2.0.Gtk.Menu

    menuShell: MenuShell
    parentMenuItem: Widget
    oldActiveMenuItem: Widget
    accelGroup: AccelGroup
    accelPath: string
    positionFunc: MenuPositionFunc
    positionFuncData: object
    toggleSize: number
    toplevel: Widget
    tearoffWindow: Widget
    tearoffHbox: Widget
    tearoffScrollbar: Widget
    tearoffAdjustment: Adjustment
    viewWindow: Gdk.Window
    binWindow: Gdk.Window
    scrollOffset: number
    savedScrollOffset: number
    scrollStep: number
    timeoutId: number
    navigationRegion: Gdk.Region
    navigationTimeout: number
    needsDestructionRefCount: number
    tornOff: number
    tearoffActive: number
    scrollFast: number
    upperArrowVisible: number
    lowerArrowVisible: number
    upperArrowPrelight: number
    lowerArrowPrelight: number

    // Owm methods of Gtk-2.0.Gtk.Menu

    /**
     * Adds a new #GtkMenuItem to a (table) menu. The number of 'cells' that
     * an item will occupy is specified by `left_attach,` `right_attach,`
     * `top_attach` and `bottom_attach`. These each represent the leftmost,
     * rightmost, uppermost and lower column and row numbers of the table.
     * (Columns and rows are indexed from zero).
     * 
     * Note that this function is not related to gtk_menu_detach().
     * @param child a #GtkMenuItem.
     * @param leftAttach The column number to attach the left side of the item to.
     * @param rightAttach The column number to attach the right side of the item to.
     * @param topAttach The row number to attach the top of the item to.
     * @param bottomAttach The row number to attach the bottom of the item to.
     */
    attach(child: Widget, leftAttach: number, rightAttach: number, topAttach: number, bottomAttach: number): void
    detach(): void
    /**
     * `menu` a #GtkMenu
     * Gets the #GtkAccelGroup which holds global accelerators for the
     * menu.  See gtk_menu_set_accel_group().
     */
    getAccelGroup(): AccelGroup
    /**
     * Retrieves the accelerator path set on the menu.
     */
    getAccelPath(): string
    /**
     * Returns the selected menu item from the menu.  This is used by the
     * #GtkOptionMenu.
     */
    getActive(): Widget
    /**
     * Returns the #GtkWidget that the menu is attached to.
     */
    getAttachWidget(): Widget
    /**
     * Retrieves the number of the monitor on which to show the menu.
     */
    getMonitor(): number
    /**
     * Returns whether the menu reserves space for toggles and
     * icons, regardless of their actual presence.
     */
    getReserveToggleSize(): boolean
    /**
     * Returns whether the menu is torn off. See
     * gtk_menu_set_tearoff_state ().
     */
    getTearoffState(): boolean
    /**
     * Returns the title of the menu. See gtk_menu_set_title().
     */
    getTitle(): string
    popdown(): void
    reorderChild(child: Widget, position: number): void
    reposition(): void
    setAccelGroup(accelGroup: AccelGroup | null): void
    /**
     * Sets an accelerator path for this menu from which accelerator paths
     * for its immediate children, its menu items, can be constructed.
     * The main purpose of this function is to spare the programmer the
     * inconvenience of having to call gtk_menu_item_set_accel_path() on
     * each menu item that should support runtime user changable accelerators.
     * Instead, by just calling gtk_menu_set_accel_path() on their parent,
     * each menu item of this menu, that contains a label describing its purpose,
     * automatically gets an accel path assigned. For example, a menu containing
     * menu items "New" and "Exit", will, after
     * <literal>gtk_menu_set_accel_path (menu, "&lt;Gnumeric-Sheet&gt;/File");</literal>
     * has been called, assign its items the accel paths:
     * <literal>"&lt;Gnumeric-Sheet&gt;/File/New"</literal> and <literal>"&lt;Gnumeric-Sheet&gt;/File/Exit"</literal>.
     * Assigning accel paths to menu items then enables the user to change
     * their accelerators at runtime. More details about accelerator paths
     * and their default setups can be found at gtk_accel_map_add_entry().
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath a valid accelerator path
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    setActive(index: number): void
    /**
     * Informs GTK+ on which monitor a menu should be popped up.
     * See gdk_screen_get_monitor_geometry().
     * 
     * This function should be called from a #GtkMenuPositionFunc if the
     * menu should not appear on the same monitor as the pointer. This
     * information can't be reliably inferred from the coordinates returned
     * by a #GtkMenuPositionFunc, since, for very long menus, these coordinates
     * may extend beyond the monitor boundaries or even the screen boundaries.
     * @param monitorNum the number of the monitor on which the menu should    be popped up
     */
    setMonitor(monitorNum: number): void
    /**
     * Sets whether the menu should reserve space for drawing toggles
     * or icons, regardless of their actual presence.
     * @param reserveToggleSize whether to reserve size for toggles
     */
    setReserveToggleSize(reserveToggleSize: boolean): void
    /**
     * Sets the #GdkScreen on which the menu will be displayed.
     * @param screen a #GdkScreen, or %NULL if the screen should be          determined by the widget the menu is attached to.
     */
    setScreen(screen: Gdk.Screen | null): void
    setTearoffState(tornOff: boolean): void
    /**
     * Sets the title string for the menu.  The title is displayed when the menu
     * is shown as a tearoff menu.  If `title` is %NULL, the menu will see if it is
     * attached to a parent menu item, and if so it will try to use the same text as
     * that menu item's label.
     * @param title a string containing the title for the menu.
     */
    setTitle(title: string): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own signals of Gtk-2.0.Gtk.Menu

    connect(sigName: "move-scroll", callback: Menu.MoveScrollSignalCallback): number
    on(sigName: "move-scroll", callback: Menu.MoveScrollSignalCallback): number
    once(sigName: "move-scroll", callback: Menu.MoveScrollSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-scroll", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Menu

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::attach-widget", callback: any): number
    on(sigName: "notify::attach-widget", callback: any): number
    once(sigName: "notify::attach-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attach-widget", ...args: any[]): void
    connect(sigName: "notify::monitor", callback: any): number
    on(sigName: "notify::monitor", callback: any): number
    once(sigName: "notify::monitor", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::monitor", ...args: any[]): void
    connect(sigName: "notify::reserve-toggle-size", callback: any): number
    on(sigName: "notify::reserve-toggle-size", callback: any): number
    once(sigName: "notify::reserve-toggle-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::reserve-toggle-size", ...args: any[]): void
    connect(sigName: "notify::tearoff-state", callback: any): number
    on(sigName: "notify::tearoff-state", callback: any): number
    once(sigName: "notify::tearoff-state", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-state", ...args: any[]): void
    connect(sigName: "notify::tearoff-title", callback: any): number
    on(sigName: "notify::tearoff-title", callback: any): number
    once(sigName: "notify::tearoff-title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-title", ...args: any[]): void
    connect(sigName: "notify::take-focus", callback: any): number
    on(sigName: "notify::take-focus", callback: any): number
    once(sigName: "notify::take-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::take-focus", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Menu extends MenuShell {

    // Own properties of Gtk-2.0.Gtk.Menu

    static name: string

    // Constructors of Gtk-2.0.Gtk.Menu

    constructor(config?: Menu.ConstructorProperties) 
    constructor() 
    static new(): Menu
    _init(config?: Menu.ConstructorProperties): void
    /**
     * Returns a list of the menus which are attached to this widget.
     * This list is owned by GTK+ and must not be modified.
     * @param widget a #GtkWidget
     */
    static getForAttachWidget(widget: Widget): Widget[]
}

export module MenuBar {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, MenuShell.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.MenuBar

        /**
         * The child pack direction of the menubar. It determines how
         * the widgets contained in child menuitems are arranged.
         */
        childPackDirection?: PackDirection | null
        /**
         * The pack direction of the menubar. It determines how
         * menuitems are arranged in the menubar.
         */
        packDirection?: PackDirection | null
    }

}

export interface MenuBar extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.MenuBar

    /**
     * The child pack direction of the menubar. It determines how
     * the widgets contained in child menuitems are arranged.
     */
    childPackDirection: PackDirection
    /**
     * The pack direction of the menubar. It determines how
     * menuitems are arranged in the menubar.
     */
    packDirection: PackDirection

    // Own fields of Gtk-2.0.Gtk.MenuBar

    menuShell: MenuShell

    // Owm methods of Gtk-2.0.Gtk.MenuBar

    /**
     * Retrieves the current child pack direction of the menubar.
     * See gtk_menu_bar_set_child_pack_direction().
     */
    getChildPackDirection(): PackDirection
    /**
     * Retrieves the current pack direction of the menubar.
     * See gtk_menu_bar_set_pack_direction().
     */
    getPackDirection(): PackDirection
    /**
     * Sets how widgets should be packed inside the children of a menubar.
     * @param childPackDir a new #GtkPackDirection
     */
    setChildPackDirection(childPackDir: PackDirection): void
    /**
     * Sets how items should be packed inside a menubar.
     * @param packDir a new #GtkPackDirection
     */
    setPackDirection(packDir: PackDirection): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.MenuBar

    connect(sigName: "notify::child-pack-direction", callback: any): number
    on(sigName: "notify::child-pack-direction", callback: any): number
    once(sigName: "notify::child-pack-direction", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child-pack-direction", ...args: any[]): void
    connect(sigName: "notify::pack-direction", callback: any): number
    on(sigName: "notify::pack-direction", callback: any): number
    once(sigName: "notify::pack-direction", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pack-direction", ...args: any[]): void
    connect(sigName: "notify::take-focus", callback: any): number
    on(sigName: "notify::take-focus", callback: any): number
    once(sigName: "notify::take-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::take-focus", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class MenuBar extends MenuShell {

    // Own properties of Gtk-2.0.Gtk.MenuBar

    static name: string

    // Constructors of Gtk-2.0.Gtk.MenuBar

    constructor(config?: MenuBar.ConstructorProperties) 
    constructor() 
    static new(): MenuBar
    _init(config?: MenuBar.ConstructorProperties): void
}

export module MenuItem {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `activate-item`
     */
    export interface ActivateItemSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-size-allocate`
     */
    export interface ToggleSizeAllocateSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `toggle-size-request`
     */
    export interface ToggleSizeRequestSignalCallback {
        (object: object | null): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Item.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.MenuItem

        /**
         * Sets the accelerator path of the menu item, through which runtime
         * changes of the menu item's accelerator caused by the user can be
         * identified and saved to persistant storage.
         */
        accelPath?: string | null
        /**
         * The text for the child label.
         */
        label?: string | null
        /**
         * Sets whether the menu item appears justified at the right side of a menu bar.
         */
        rightJustified?: boolean | null
        /**
         * The submenu attached to the menu item, or NULL if it has none.
         */
        submenu?: Menu | null
        /**
         * %TRUE if underlines in the text indicate mnemonics
         */
        useUnderline?: boolean | null
    }

}

export interface MenuItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.MenuItem

    /**
     * The text for the child label.
     */
    label: string
    /**
     * Sets whether the menu item appears justified at the right side of a menu bar.
     */
    rightJustified: boolean
    /**
     * %TRUE if underlines in the text indicate mnemonics
     */
    useUnderline: boolean

    // Own fields of Gtk-2.0.Gtk.MenuItem

    item: Item
    submenu: Widget
    eventWindow: Gdk.Window
    toggleSize: number
    acceleratorWidth: number
    accelPath: string
    showSubmenuIndicator: number
    submenuPlacement: number
    submenuDirection: number
    rightJustify: number
    timerFromKeypress: number
    fromMenubar: number
    timer: number

    // Owm methods of Gtk-2.0.Gtk.MenuItem

    // Has conflict: activate(): void
    deselect(): void

    // Overloads of deselect

    deselect(): void
    /**
     * Retrieve the accelerator path that was previously set on `menu_item`.
     * 
     * See gtk_menu_item_set_accel_path() for details.
     */
    getAccelPath(): string
    // Has conflict: getLabel(): string
    /**
     * Gets whether the menu item appears justified at the right
     * side of the menu bar.
     */
    getRightJustified(): boolean
    /**
     * Gets the submenu underneath this menu item, if any.
     * See gtk_menu_item_set_submenu().
     */
    getSubmenu(): Widget
    /**
     * Checks if an underline in the text indicates the next character should be
     * used for the mnemonic accelerator key.
     */
    getUseUnderline(): boolean
    /**
     * Removes the widget's submenu.
     */
    removeSubmenu(): void
    select(): void

    // Overloads of select

    select(): void
    /**
     * Set the accelerator path on `menu_item,` through which runtime changes of the
     * menu item's accelerator caused by the user can be identified and saved to
     * persistant storage (see gtk_accel_map_save() on this).
     * To setup a default accelerator for this menu item, call
     * gtk_accel_map_add_entry() with the same `accel_path`.
     * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
     * and gtk_menu_set_accel_path() for a more convenient variant of this function.
     * 
     * This function is basically a convenience wrapper that handles calling
     * gtk_widget_set_accel_path() with the appropriate accelerator group for
     * the menu item.
     * 
     * Note that you do need to set an accelerator on the parent menu with
     * gtk_menu_set_accel_group() for this to work.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath accelerator path, corresponding to this menu item's              functionality, or %NULL to unset the current path.
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    // Has conflict: setLabel(label: string): void
    /**
     * Sets whether the menu item appears justified at the right
     * side of a menu bar. This was traditionally done for "Help" menu
     * items, but is now considered a bad idea. (If the widget
     * layout is reversed for a right-to-left language like Hebrew
     * or Arabic, right-justified-menu-items appear at the left.)
     * @param rightJustified if %TRUE the menu item will appear at the   far right if added to a menu bar.
     */
    setRightJustified(rightJustified: boolean): void
    /**
     * Sets or replaces the menu item's submenu, or removes it when a %NULL
     * submenu is passed.
     * @param submenu the submenu, or %NULL
     */
    setSubmenu(submenu: Widget | null): void
    /**
     * If true, an underline in the text indicates the next character should be
     * used for the mnemonic accelerator key.
     * @param setting %TRUE if underlines in the text indicate mnemonics
     */
    setUseUnderline(setting: boolean): void
    // Has conflict: toggleSizeAllocate(allocation: number): void
    // Has conflict: toggleSizeRequest(requisition: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.MenuItem

    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    activateItem(): void
    /**
     * Sets `text` on the `menu_item` label
     * @virtual 
     */
    getLabel(): string
    /**
     * Sets `text` on the `menu_item` label
     * @virtual 
     * @param label the text you want to set
     */
    setLabel(label: string): void
    toggleSizeAllocate(allocation: number): void
    toggleSizeRequest(requisition: number): void

    // Own signals of Gtk-2.0.Gtk.MenuItem

    connect(sigName: "activate", callback: MenuItem.ActivateSignalCallback): number
    on(sigName: "activate", callback: MenuItem.ActivateSignalCallback): number
    once(sigName: "activate", callback: MenuItem.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "activate-item", callback: MenuItem.ActivateItemSignalCallback): number
    on(sigName: "activate-item", callback: MenuItem.ActivateItemSignalCallback): number
    once(sigName: "activate-item", callback: MenuItem.ActivateItemSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-item", ...args: any[]): void
    connect(sigName: "toggle-size-allocate", callback: MenuItem.ToggleSizeAllocateSignalCallback): number
    on(sigName: "toggle-size-allocate", callback: MenuItem.ToggleSizeAllocateSignalCallback): number
    once(sigName: "toggle-size-allocate", callback: MenuItem.ToggleSizeAllocateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-size-allocate", ...args: any[]): void
    connect(sigName: "toggle-size-request", callback: MenuItem.ToggleSizeRequestSignalCallback): number
    on(sigName: "toggle-size-request", callback: MenuItem.ToggleSizeRequestSignalCallback): number
    once(sigName: "toggle-size-request", callback: MenuItem.ToggleSizeRequestSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-size-request", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.MenuItem

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::right-justified", callback: any): number
    on(sigName: "notify::right-justified", callback: any): number
    once(sigName: "notify::right-justified", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-justified", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class MenuItem extends Item {

    // Own properties of Gtk-2.0.Gtk.MenuItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.MenuItem

    constructor(config?: MenuItem.ConstructorProperties) 
    constructor() 
    static new(): MenuItem
    static newWithLabel(label: string): MenuItem
    /**
     * Creates a new #GtkMenuItem containing a label. The label
     * will be created using gtk_label_new_with_mnemonic(), so underscores
     * in `label` indicate the mnemonic for the menu item.
     * @constructor 
     * @param label The text of the button, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string): MenuItem
    _init(config?: MenuItem.ConstructorProperties): void
}

export module MenuShell {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate-current`
     */
    export interface ActivateCurrentSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `cancel`
     */
    export interface CancelSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cycle-focus`
     */
    export interface CycleFocusSignalCallback {
        (object: DirectionType): void
    }

    /**
     * Signal callback interface for `deactivate`
     */
    export interface DeactivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `insert`
     */
    export interface InsertSignalCallback {
        (child: Widget, position: number): void
    }

    /**
     * Signal callback interface for `move-current`
     */
    export interface MoveCurrentSignalCallback {
        (object: MenuDirectionType): void
    }

    /**
     * Signal callback interface for `move-selected`
     */
    export interface MoveSelectedSignalCallback {
        (distance: number): boolean
    }

    /**
     * Signal callback interface for `selection-done`
     */
    export interface SelectionDoneSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.MenuShell

        /**
         * A boolean that determines whether the menu and its submenus grab the
         * keyboard focus. See gtk_menu_shell_set_take_focus() and
         * gtk_menu_shell_get_take_focus().
         */
        takeFocus?: boolean | null
    }

}

export interface MenuShell extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.MenuShell

    /**
     * A boolean that determines whether the menu and its submenus grab the
     * keyboard focus. See gtk_menu_shell_set_take_focus() and
     * gtk_menu_shell_get_take_focus().
     */
    takeFocus: boolean

    // Own fields of Gtk-2.0.Gtk.MenuShell

    container: Container
    children: object[]
    activeMenuItem: Widget
    parentMenuShell: Widget
    button: number
    activateTime: number
    active: number
    haveGrab: number
    haveXgrab: number
    ignoreLeave: number
    menuFlag: number
    ignoreEnter: number
    keyboardMode: number

    // Owm methods of Gtk-2.0.Gtk.MenuShell

    activateItem(menuItem: Widget, forceDeactivate: boolean): void
    append(child: Widget): void
    // Has conflict: cancel(): void
    // Has conflict: deactivate(): void
    deselect(): void
    /**
     * Returns %TRUE if the menu shell will take the keyboard focus on popup.
     */
    getTakeFocus(): boolean
    // Has conflict: insert(child: Widget, position: number): void
    prepend(child: Widget): void
    /**
     * Select the first visible or selectable child of the menu shell;
     * don't select tearoff items unless the only item is a tearoff
     * item.
     * @param searchSensitive if %TRUE, search for the first selectable                    menu item, otherwise select nothing if                    the first item isn't sensitive. This                    should be %FALSE if the menu is being                    popped up initially.
     */
    selectFirst(searchSensitive: boolean): void
    // Has conflict: selectItem(menuItem: Widget): void
    /**
     * If `take_focus` is %TRUE (the default) the menu shell will take the keyboard
     * focus so that it will receive all keyboard events which is needed to enable
     * keyboard navigation in menus.
     * 
     * Setting `take_focus` to %FALSE is useful only for special applications
     * like virtual keyboard implementations which should not take keyboard
     * focus.
     * 
     * The `take_focus` state of a menu or menu bar is automatically propagated
     * to submenus whenever a submenu is popped up, so you don't have to worry
     * about recursively setting it for your entire menu hierarchy. Only when
     * programmatically picking a submenu and popping it up manually, the
     * `take_focus` property of the submenu needs to be set explicitely.
     * 
     * Note that setting it to %FALSE has side-effects:
     * 
     * If the focus is in some other app, it keeps the focus and keynav in
     * the menu doesn't work. Consequently, keynav on the menu will only
     * work if the focus is on some toplevel owned by the onscreen keyboard.
     * 
     * To avoid confusing the user, menus with `take_focus` set to %FALSE
     * should not display mnemonics or accelerators, since it cannot be
     * guaranteed that they will work.
     * 
     * See also gdk_keyboard_grab()
     * @param takeFocus %TRUE if the menu shell should take the keyboard focus on popup.
     */
    setTakeFocus(takeFocus: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.MenuShell

    activateCurrent(forceHide: boolean): void
    /**
     * Cancels the selection within the menu shell.
     * @virtual 
     */
    cancel(): void
    deactivate(): void
    getPopupDelay(): number
    insert(child: Widget, position: number): void
    moveCurrent(direction: MenuDirectionType): void
    moveSelected(distance: number): boolean
    selectItem(menuItem: Widget): void
    selectionDone(): void

    // Own signals of Gtk-2.0.Gtk.MenuShell

    connect(sigName: "activate-current", callback: MenuShell.ActivateCurrentSignalCallback): number
    on(sigName: "activate-current", callback: MenuShell.ActivateCurrentSignalCallback): number
    once(sigName: "activate-current", callback: MenuShell.ActivateCurrentSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-current", ...args: any[]): void
    connect(sigName: "cancel", callback: MenuShell.CancelSignalCallback): number
    on(sigName: "cancel", callback: MenuShell.CancelSignalCallback): number
    once(sigName: "cancel", callback: MenuShell.CancelSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cancel", ...args: any[]): void
    connect(sigName: "cycle-focus", callback: MenuShell.CycleFocusSignalCallback): number
    on(sigName: "cycle-focus", callback: MenuShell.CycleFocusSignalCallback): number
    once(sigName: "cycle-focus", callback: MenuShell.CycleFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cycle-focus", ...args: any[]): void
    connect(sigName: "deactivate", callback: MenuShell.DeactivateSignalCallback): number
    on(sigName: "deactivate", callback: MenuShell.DeactivateSignalCallback): number
    once(sigName: "deactivate", callback: MenuShell.DeactivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "deactivate", ...args: any[]): void
    connect(sigName: "insert", callback: MenuShell.InsertSignalCallback): number
    on(sigName: "insert", callback: MenuShell.InsertSignalCallback): number
    once(sigName: "insert", callback: MenuShell.InsertSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert", position: number, ...args: any[]): void
    connect(sigName: "move-current", callback: MenuShell.MoveCurrentSignalCallback): number
    on(sigName: "move-current", callback: MenuShell.MoveCurrentSignalCallback): number
    once(sigName: "move-current", callback: MenuShell.MoveCurrentSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-current", ...args: any[]): void
    connect(sigName: "move-selected", callback: MenuShell.MoveSelectedSignalCallback): number
    on(sigName: "move-selected", callback: MenuShell.MoveSelectedSignalCallback): number
    once(sigName: "move-selected", callback: MenuShell.MoveSelectedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-selected", ...args: any[]): void
    connect(sigName: "selection-done", callback: MenuShell.SelectionDoneSignalCallback): number
    on(sigName: "selection-done", callback: MenuShell.SelectionDoneSignalCallback): number
    once(sigName: "selection-done", callback: MenuShell.SelectionDoneSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-done", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.MenuShell

    connect(sigName: "notify::take-focus", callback: any): number
    on(sigName: "notify::take-focus", callback: any): number
    once(sigName: "notify::take-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::take-focus", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class MenuShell extends Container {

    // Own properties of Gtk-2.0.Gtk.MenuShell

    static name: string

    // Constructors of Gtk-2.0.Gtk.MenuShell

    constructor(config?: MenuShell.ConstructorProperties) 
    _init(config?: MenuShell.ConstructorProperties): void
}

export module MenuToolButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `show-menu`
     */
    export interface ShowMenuSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, ToolButton.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.MenuToolButton

        menu?: Menu | null
    }

}

export interface MenuToolButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.MenuToolButton

    menu: Menu

    // Own fields of Gtk-2.0.Gtk.MenuToolButton

    parent: ToolButton & ToolItem & Bin & Widget & Widget

    // Owm methods of Gtk-2.0.Gtk.MenuToolButton

    /**
     * Gets the #GtkMenu associated with #GtkMenuToolButton.
     */
    getMenu(): Widget
    /**
     * Sets the #GtkTooltips object to be used for arrow button which
     * pops up the menu. See gtk_tool_item_set_tooltip() for setting
     * a tooltip on the whole #GtkMenuToolButton.
     * @param tooltips the #GtkTooltips object to be used
     * @param tipText text to be used as tooltip text for tool_item
     * @param tipPrivate text to be used as private tooltip text
     */
    setArrowTooltip(tooltips: Tooltips, tipText: string | null, tipPrivate: string | null): void
    /**
     * Sets the tooltip markup text to be used as tooltip for the arrow button
     * which pops up the menu.  See gtk_tool_item_set_tooltip() for setting a
     * tooltip on the whole #GtkMenuToolButton.
     * @param markup markup text to be used as tooltip text for button's arrow button
     */
    setArrowTooltipMarkup(markup: string): void
    /**
     * Sets the tooltip text to be used as tooltip for the arrow button which
     * pops up the menu.  See gtk_tool_item_set_tooltip() for setting a tooltip
     * on the whole #GtkMenuToolButton.
     * @param text text to be used as tooltip text for button's arrow button
     */
    setArrowTooltipText(text: string): void
    /**
     * Sets the #GtkMenu that is popped up when the user clicks on the arrow.
     * If `menu` is NULL, the arrow button becomes insensitive.
     * @param menu the #GtkMenu associated with #GtkMenuToolButton
     */
    setMenu(menu: Widget): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the markup text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_markup().
     * @param markup markup text to be used as tooltip for `tool_item`
     */
    setTooltipMarkup(markup: string): void

    // Overloads of setTooltipMarkup

    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.MenuToolButton

    showMenu(): void

    // Own signals of Gtk-2.0.Gtk.MenuToolButton

    connect(sigName: "show-menu", callback: MenuToolButton.ShowMenuSignalCallback): number
    on(sigName: "show-menu", callback: MenuToolButton.ShowMenuSignalCallback): number
    once(sigName: "show-menu", callback: MenuToolButton.ShowMenuSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "show-menu", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.MenuToolButton

    connect(sigName: "notify::menu", callback: any): number
    on(sigName: "notify::menu", callback: any): number
    once(sigName: "notify::menu", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::menu", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::icon-widget", callback: any): number
    on(sigName: "notify::icon-widget", callback: any): number
    once(sigName: "notify::icon-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-widget", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::label-widget", callback: any): number
    on(sigName: "notify::label-widget", callback: any): number
    once(sigName: "notify::label-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-widget", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class MenuToolButton extends ToolButton {

    // Own properties of Gtk-2.0.Gtk.MenuToolButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.MenuToolButton

    constructor(config?: MenuToolButton.ConstructorProperties) 
    /**
     * Creates a new #GtkMenuToolButton using `icon_widget` as icon and
     * `label` as label.
     * @constructor 
     * @param iconWidget a widget that will be used as icon widget, or %NULL
     * @param label a string that will be used as label, or %NULL
     */
    constructor(iconWidget: Widget | null, label: string | null) 
    /**
     * Creates a new #GtkMenuToolButton using `icon_widget` as icon and
     * `label` as label.
     * @constructor 
     * @param iconWidget a widget that will be used as icon widget, or %NULL
     * @param label a string that will be used as label, or %NULL
     */
    static new(iconWidget: Widget | null, label: string | null): MenuToolButton

    // Overloads of new

    /**
     * Creates a new %GtkToolButton using `icon_widget` as icon and `label` as
     * label.
     * @constructor 
     * @param iconWidget a #GtkMisc widget that will be used as icon widget, or %NULL
     * @param label a string that will be used as label, or %NULL
     */
    static new(iconWidget: Widget | null, label: string | null): ToolButton
    /**
     * Creates a new #GtkToolItem
     * @constructor 
     */
    static new(): ToolItem
    /**
     * Creates a new #GtkMenuToolButton.
     * The new #GtkMenuToolButton will contain an icon and label from
     * the stock item indicated by `stock_id`.
     * @constructor 
     * @param stockId the name of a stock item
     */
    static newFromStock(stockId: string): MenuToolButton
    _init(config?: MenuToolButton.ConstructorProperties): void
}

export module MessageDialog {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Dialog.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.MessageDialog

        buttons?: ButtonsType | null
        /**
         * The image for this dialog.
         */
        image?: Widget | null
        /**
         * The type of the message. The type is used to determine
         * the image that is shown in the dialog, unless the image is
         * explicitly set by the ::image property.
         */
        messageType?: MessageType | null
        /**
         * The secondary text of the message dialog.
         */
        secondaryText?: string | null
        /**
         * %TRUE if the secondary text of the dialog includes Pango markup.
         * See pango_parse_markup().
         */
        secondaryUseMarkup?: boolean | null
        /**
         * The primary text of the message dialog. If the dialog has
         * a secondary text, this will appear as the title.
         */
        text?: string | null
        /**
         * %TRUE if the primary text of the dialog includes Pango markup.
         * See pango_parse_markup().
         */
        useMarkup?: boolean | null
    }

}

export interface MessageDialog extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.MessageDialog

    readonly buttons: ButtonsType
    /**
     * The image for this dialog.
     */
    image: Widget
    /**
     * The #GtkVBox that corresponds to the message area of this dialog.  See
     * gtk_message_dialog_get_message_area() for a detailed description of this
     * area.
     */
    readonly messageArea: Widget
    /**
     * The type of the message. The type is used to determine
     * the image that is shown in the dialog, unless the image is
     * explicitly set by the ::image property.
     */
    messageType: MessageType
    /**
     * The secondary text of the message dialog.
     */
    secondaryText: string
    /**
     * %TRUE if the secondary text of the dialog includes Pango markup.
     * See pango_parse_markup().
     */
    secondaryUseMarkup: boolean
    /**
     * The primary text of the message dialog. If the dialog has
     * a secondary text, this will appear as the title.
     */
    text: string
    /**
     * %TRUE if the primary text of the dialog includes Pango markup.
     * See pango_parse_markup().
     */
    useMarkup: boolean

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Owm methods of Gtk-2.0.Gtk.MessageDialog

    /**
     * Gets the dialog's image.
     */
    getImage(): Widget
    /**
     * Returns the message area of the dialog. This is the box where the
     * dialog's primary and secondary labels are packed. You can add your
     * own extra content to that box and it will appear below those labels,
     * on the right side of the dialog's image (or on the left for right-to-left
     * languages).  See gtk_dialog_get_content_area() for the corresponding
     * function in the parent #GtkDialog.
     */
    getMessageArea(): Widget
    /**
     * Sets the dialog's image to `image`.
     * @param image the image
     */
    setImage(image: Widget): void
    /**
     * Sets the text of the message dialog to be `str,` which is marked
     * up with the <link linkend="PangoMarkupFormat">Pango text markup
     * language</link>.
     * @param str markup string (see <link linkend="PangoMarkupFormat">Pango markup format</link>)
     */
    setMarkup(str: string): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.MessageDialog

    connect(sigName: "notify::buttons", callback: any): number
    on(sigName: "notify::buttons", callback: any): number
    once(sigName: "notify::buttons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::buttons", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::message-area", callback: any): number
    on(sigName: "notify::message-area", callback: any): number
    once(sigName: "notify::message-area", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::message-area", ...args: any[]): void
    connect(sigName: "notify::message-type", callback: any): number
    on(sigName: "notify::message-type", callback: any): number
    once(sigName: "notify::message-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::message-type", ...args: any[]): void
    connect(sigName: "notify::secondary-text", callback: any): number
    on(sigName: "notify::secondary-text", callback: any): number
    once(sigName: "notify::secondary-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-text", ...args: any[]): void
    connect(sigName: "notify::secondary-use-markup", callback: any): number
    on(sigName: "notify::secondary-use-markup", callback: any): number
    once(sigName: "notify::secondary-use-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-use-markup", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: any): number
    on(sigName: "notify::use-markup", callback: any): number
    once(sigName: "notify::use-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkMessageDialog presents a dialog with an image representing the type of
 * message (Error, Question, etc.) alongside some message text. It's simply a
 * convenience widget; you could construct the equivalent of #GtkMessageDialog
 * from #GtkDialog without too much effort, but #GtkMessageDialog saves typing.
 * 
 * The easiest way to do a modal message dialog is to use gtk_dialog_run(), though
 * you can also pass in the %GTK_DIALOG_MODAL flag, gtk_dialog_run() automatically
 * makes the dialog modal and waits for the user to respond to it. gtk_dialog_run()
 * returns when any dialog button is clicked.
 * <example>
 * <title>A modal dialog.</title>
 * <programlisting>
 *  dialog = gtk_message_dialog_new (main_application_window,
 *                                   GTK_DIALOG_DESTROY_WITH_PARENT,
 *                                   GTK_MESSAGE_ERROR,
 *                                   GTK_BUTTONS_CLOSE,
 *                                   "Error loading file '&percnt;s': &percnt;s",
 *                                   filename, g_strerror (errno));
 *  gtk_dialog_run (GTK_DIALOG (dialog));
 *  gtk_widget_destroy (dialog);
 * </programlisting>
 * </example>
 * You might do a non-modal #GtkMessageDialog as follows:
 * <example>
 * <title>A non-modal dialog.</title>
 * <programlisting>
 *  dialog = gtk_message_dialog_new (main_application_window,
 *                                   GTK_DIALOG_DESTROY_WITH_PARENT,
 *                                   GTK_MESSAGE_ERROR,
 *                                   GTK_BUTTONS_CLOSE,
 *                                   "Error loading file '&percnt;s': &percnt;s",
 *                                   filename, g_strerror (errno));
 * 
 *  /&ast; Destroy the dialog when the user responds to it (e.g. clicks a button) &ast;/
 *  g_signal_connect_swapped (dialog, "response",
 *                            G_CALLBACK (gtk_widget_destroy),
 *                            dialog);
 * </programlisting>
 * </example>
 * 
 * <refsect2 id="GtkMessageDialog-BUILDER-UI">
 * <title>GtkMessageDialog as GtkBuildable</title>
 * <para>
 * The GtkMessageDialog implementation of the GtkBuildable interface exposes
 * the message area as an internal child with the name "message_area".
 * </para>
 * </refsect2>
 * @class 
 */
export class MessageDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.MessageDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.MessageDialog

    constructor(config?: MessageDialog.ConstructorProperties) 
    _init(config?: MessageDialog.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

export module Misc {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Misc

        xalign?: number | null
        xpad?: number | null
        yalign?: number | null
        ypad?: number | null
    }

}

export interface Misc extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Misc

    widget: Widget
    xalign: number
    yalign: number
    xpad: number
    ypad: number

    // Owm methods of Gtk-2.0.Gtk.Misc

    /**
     * Gets the X and Y alignment of the widget within its allocation.
     * See gtk_misc_set_alignment().
     */
    getAlignment(): [ /* xalign */ number, /* yalign */ number ]
    /**
     * Gets the padding in the X and Y directions of the widget.
     * See gtk_misc_set_padding().
     */
    getPadding(): [ /* xpad */ number, /* ypad */ number ]
    setAlignment(xalign: number, yalign: number): void
    setPadding(xpad: number, ypad: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Misc

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Misc extends Widget {

    // Own properties of Gtk-2.0.Gtk.Misc

    static name: string

    // Constructors of Gtk-2.0.Gtk.Misc

    constructor(config?: Misc.ConstructorProperties) 
    _init(config?: Misc.ConstructorProperties): void
}

export module MountOperation {

    // Constructor properties interface

    export interface ConstructorProperties extends Gio.MountOperation.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.MountOperation

        parent?: Window | null
        screen?: Gdk.Screen | null
    }

}

export interface MountOperation {

    // Own properties of Gtk-2.0.Gtk.MountOperation

    readonly isShowing: boolean
    parent: Window
    screen: Gdk.Screen

    // Own fields of Gtk-2.0.Gtk.MountOperation

    parentInstance: any
    priv: any

    // Owm methods of Gtk-2.0.Gtk.MountOperation

    /**
     * Gets the transient parent used by the #GtkMountOperation
     */
    getParent(): Window
    /**
     * Gets the screen on which windows of the #GtkMountOperation
     * will be shown.
     */
    getScreen(): Gdk.Screen
    /**
     * Sets the transient parent for windows shown by the
     * #GtkMountOperation.
     * @param parent transient parent of the window, or %NULL
     */
    setParent(parent: Window | null): void
    /**
     * Sets the screen to show windows of the #GtkMountOperation on.
     * @param screen a #GdkScreen
     */
    setScreen(screen: Gdk.Screen): void

    // Class property signals of Gtk-2.0.Gtk.MountOperation

    connect(sigName: "notify::is-showing", callback: any): number
    on(sigName: "notify::is-showing", callback: any): number
    once(sigName: "notify::is-showing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-showing", ...args: any[]): void
    connect(sigName: "notify::parent", callback: any): number
    on(sigName: "notify::parent", callback: any): number
    once(sigName: "notify::parent", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::screen", callback: any): number
    on(sigName: "notify::screen", callback: any): number
    once(sigName: "notify::screen", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::screen", ...args: any[]): void
    connect(sigName: "notify::anonymous", callback: any): number
    on(sigName: "notify::anonymous", callback: any): number
    once(sigName: "notify::anonymous", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::anonymous", ...args: any[]): void
    connect(sigName: "notify::choice", callback: any): number
    on(sigName: "notify::choice", callback: any): number
    once(sigName: "notify::choice", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::choice", ...args: any[]): void
    connect(sigName: "notify::domain", callback: any): number
    on(sigName: "notify::domain", callback: any): number
    once(sigName: "notify::domain", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::domain", ...args: any[]): void
    connect(sigName: "notify::is-tcrypt-hidden-volume", callback: any): number
    on(sigName: "notify::is-tcrypt-hidden-volume", callback: any): number
    once(sigName: "notify::is-tcrypt-hidden-volume", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-tcrypt-hidden-volume", ...args: any[]): void
    connect(sigName: "notify::is-tcrypt-system-volume", callback: any): number
    on(sigName: "notify::is-tcrypt-system-volume", callback: any): number
    once(sigName: "notify::is-tcrypt-system-volume", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-tcrypt-system-volume", ...args: any[]): void
    connect(sigName: "notify::password", callback: any): number
    on(sigName: "notify::password", callback: any): number
    once(sigName: "notify::password", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::password", ...args: any[]): void
    connect(sigName: "notify::password-save", callback: any): number
    on(sigName: "notify::password-save", callback: any): number
    once(sigName: "notify::password-save", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::password-save", ...args: any[]): void
    connect(sigName: "notify::pim", callback: any): number
    on(sigName: "notify::pim", callback: any): number
    once(sigName: "notify::pim", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pim", ...args: any[]): void
    connect(sigName: "notify::username", callback: any): number
    on(sigName: "notify::username", callback: any): number
    once(sigName: "notify::username", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::username", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * This should not be accessed directly. Use the accessor functions below.
 * @class 
 */
export class MountOperation extends Gio.MountOperation {

    // Own properties of Gtk-2.0.Gtk.MountOperation

    static name: string

    // Constructors of Gtk-2.0.Gtk.MountOperation

    constructor(config?: MountOperation.ConstructorProperties) 
    /**
     * Creates a new #GtkMountOperation
     * @constructor 
     * @param parent transient parent of the window, or %NULL
     */
    constructor(parent: Window | null) 
    /**
     * Creates a new #GtkMountOperation
     * @constructor 
     * @param parent transient parent of the window, or %NULL
     */
    static new(parent: Window | null): MountOperation

    // Overloads of new

    /**
     * Creates a new mount operation.
     * @constructor 
     */
    static new(): Gio.MountOperation
    _init(config?: MountOperation.ConstructorProperties): void
}

export module Notebook {

    // Signal callback interfaces

    /**
     * Signal callback interface for `change-current-page`
     */
    export interface ChangeCurrentPageSignalCallback {
        (object: number): boolean
    }

    /**
     * Signal callback interface for `create-window`
     */
    export interface CreateWindowSignalCallback {
        (page: Widget, x: number, y: number): Notebook
    }

    /**
     * Signal callback interface for `focus-tab`
     */
    export interface FocusTabSignalCallback {
        (object: NotebookTab): boolean
    }

    /**
     * Signal callback interface for `move-focus-out`
     */
    export interface MoveFocusOutSignalCallback {
        (object: DirectionType): void
    }

    /**
     * Signal callback interface for `page-added`
     */
    export interface PageAddedSignalCallback {
        (child: Widget, pageNum: number): void
    }

    /**
     * Signal callback interface for `page-removed`
     */
    export interface PageRemovedSignalCallback {
        (child: Widget, pageNum: number): void
    }

    /**
     * Signal callback interface for `page-reordered`
     */
    export interface PageReorderedSignalCallback {
        (child: Widget, pageNum: number): void
    }

    /**
     * Signal callback interface for `reorder-tab`
     */
    export interface ReorderTabSignalCallback {
        (object: DirectionType, p0: boolean): boolean
    }

    /**
     * Signal callback interface for `select-page`
     */
    export interface SelectPageSignalCallback {
        (object: boolean): boolean
    }

    /**
     * Signal callback interface for `switch-page`
     */
    export interface SwitchPageSignalCallback {
        (object: object | null, p0: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Notebook

        enablePopup?: boolean | null
        /**
         * Group for tabs drag and drop.
         */
        group?: object | null
        groupId?: number | null
        /**
         * Group name for tabs drag and drop.
         */
        groupName?: string | null
        homogeneous?: boolean | null
        page?: number | null
        scrollable?: boolean | null
        showBorder?: boolean | null
        showTabs?: boolean | null
        tabBorder?: number | null
        tabHborder?: number | null
        tabPos?: PositionType | null
        tabVborder?: number | null
    }

}

export interface Notebook extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Notebook

    enablePopup: boolean
    /**
     * Group for tabs drag and drop.
     */
    group: object
    groupId: number
    /**
     * Group name for tabs drag and drop.
     */
    groupName: string
    page: number
    tabBorder: number

    // Own fields of Gtk-2.0.Gtk.Notebook

    container: Container
    curPage: NotebookPage
    children: object[]
    firstTab: object[]
    // Has conflict: focusTab: object[]
    menu: Widget
    eventWindow: Gdk.Window
    timer: number
    tabHborder: number
    tabVborder: number
    showTabs: number
    homogeneous: number
    showBorder: number
    tabPos: number
    scrollable: number
    inChild: number
    clickChild: number
    button: number
    needTimer: number
    childHasFocus: number
    haveVisibleChild: number
    focusOut: number
    hasBeforePrevious: number
    hasBeforeNext: number
    hasAfterPrevious: number
    hasAfterNext: number

    // Owm methods of Gtk-2.0.Gtk.Notebook

    /**
     * Appends a page to `notebook`.
     * @param child the #GtkWidget to use as the contents of the page.
     * @param tabLabel the #GtkWidget to be used as the label for the page,             or %NULL to use the default label, 'page N'.
     */
    appendPage(child: Widget, tabLabel: Widget | null): number
    /**
     * Appends a page to `notebook,` specifying the widget to use as the
     * label in the popup menu.
     * @param child the #GtkWidget to use as the contents of the page.
     * @param tabLabel the #GtkWidget to be used as the label for the page,             or %NULL to use the default label, 'page N'.
     * @param menuLabel the widget to use as a label for the page-switch              menu, if that is enabled. If %NULL, and `tab_label`              is a #GtkLabel or %NULL, then the menu label will be              a newly created label with the same text as `tab_label;`              If `tab_label` is not a #GtkLabel, `menu_label` must be              specified if the page-switch menu is to be used.
     */
    appendPageMenu(child: Widget, tabLabel: Widget | null, menuLabel: Widget | null): number
    /**
     * Gets one of the action widgets. See gtk_notebook_set_action_widget().
     * @param packType pack type of the action widget to receive
     */
    getActionWidget(packType: PackType): Widget
    /**
     * Returns the page number of the current page.
     */
    getCurrentPage(): number
    /**
     * Gets the current group identificator pointer for `notebook`.
     */
    getGroup(): object | null
    /**
     * Gets the current group identificator for `notebook`.
     */
    getGroupId(): number
    /**
     * Gets the current group name for `notebook`.
     * 
     * Note that this funtion can emphasis not be used
     * together with gtk_notebook_set_group() or
     * gtk_notebook_set_group_id().
     * 
     *  Return Value: (transfer none): the group name,
     *     or %NULL if none is set.
     */
    getGroupName(): string
    /**
     * Retrieves the menu label widget of the page containing `child`.
     * @param child a widget contained in a page of `notebook`
     */
    getMenuLabel(child: Widget): Widget
    /**
     * Retrieves the text of the menu label for the page containing
     *    `child`.
     * @param child the child widget of a page of the notebook.
     */
    getMenuLabelText(child: Widget): string
    /**
     * Gets the number of pages in a notebook.
     */
    getNPages(): number
    /**
     * Returns the child widget contained in page number `page_num`.
     * @param pageNum the index of a page in the notebook, or -1            to get the last page.
     */
    getNthPage(pageNum: number): Widget
    /**
     * Returns whether the tab label area has arrows for scrolling. See
     * gtk_notebook_set_scrollable().
     */
    getScrollable(): boolean
    /**
     * Returns whether a bevel will be drawn around the notebook pages. See
     * gtk_notebook_set_show_border().
     */
    getShowBorder(): boolean
    /**
     * Returns whether the tabs of the notebook are shown. See
     * gtk_notebook_set_show_tabs().
     */
    getShowTabs(): boolean
    /**
     * Returns whether the tab contents can be detached from `notebook`.
     * @param child a child #GtkWidget
     */
    getTabDetachable(child: Widget): boolean
    /**
     * Returns the horizontal width of a tab border.
     */
    getTabHborder(): number
    /**
     * Returns the tab label widget for the page `child`. %NULL is returned
     * if `child` is not in `notebook` or if no tab label has specifically
     * been set for `child`.
     * @param child the page
     */
    getTabLabel(child: Widget): Widget
    /**
     * Retrieves the text of the tab label for the page containing
     *    `child`.
     * @param child a widget contained in a page of `notebook`
     */
    getTabLabelText(child: Widget): string
    /**
     * Gets the edge at which the tabs for switching pages in the
     * notebook are drawn.
     */
    getTabPos(): PositionType
    /**
     * Gets whether the tab can be reordered via drag and drop or not.
     * @param child a child #GtkWidget
     */
    getTabReorderable(child: Widget): boolean
    /**
     * Returns the vertical width of a tab border.
     */
    getTabVborder(): number
    // Has conflict: insertPage(child: Widget, tabLabel: Widget | null, position: number): number
    /**
     * Insert a page into `notebook` at the given position, specifying
     * the widget to use as the label in the popup menu.
     * @param child the #GtkWidget to use as the contents of the page.
     * @param tabLabel the #GtkWidget to be used as the label for the page,             or %NULL to use the default label, 'page N'.
     * @param menuLabel the widget to use as a label for the page-switch              menu, if that is enabled. If %NULL, and `tab_label`              is a #GtkLabel or %NULL, then the menu label will be              a newly created label with the same text as `tab_label;`              If `tab_label` is not a #GtkLabel, `menu_label` must be              specified if the page-switch menu is to be used.
     * @param position the index (starting at 0) at which to insert the page,            or -1 to append the page after all other pages.
     */
    insertPageMenu(child: Widget, tabLabel: Widget | null, menuLabel: Widget | null, position: number): number
    /**
     * Switches to the next page. Nothing happens if the current page is
     * the last page.
     */
    nextPage(): void
    /**
     * Finds the index of the page which contains the given child
     * widget.
     * @param child a #GtkWidget
     */
    pageNum(child: Widget): number
    /**
     * Disables the popup menu.
     */
    popupDisable(): void
    /**
     * Enables the popup menu: if the user clicks with the right mouse button on
     * the tab labels, a menu with all the pages will be popped up.
     */
    popupEnable(): void
    /**
     * Prepends a page to `notebook`.
     * @param child the #GtkWidget to use as the contents of the page.
     * @param tabLabel the #GtkWidget to be used as the label for the page,             or %NULL to use the default label, 'page N'.
     */
    prependPage(child: Widget, tabLabel: Widget | null): number
    /**
     * Prepends a page to `notebook,` specifying the widget to use as the
     * label in the popup menu.
     * @param child the #GtkWidget to use as the contents of the page.
     * @param tabLabel the #GtkWidget to be used as the label for the page,             or %NULL to use the default label, 'page N'.
     * @param menuLabel the widget to use as a label for the page-switch              menu, if that is enabled. If %NULL, and `tab_label`              is a #GtkLabel or %NULL, then the menu label will be              a newly created label with the same text as `tab_label;`              If `tab_label` is not a #GtkLabel, `menu_label` must be              specified if the page-switch menu is to be used.
     */
    prependPageMenu(child: Widget, tabLabel: Widget | null, menuLabel: Widget | null): number
    /**
     * Switches to the previous page. Nothing happens if the current page
     * is the first page.
     */
    prevPage(): void
    /**
     * Query the packing attributes for the tab label of the page
     * containing `child`.
     * @param child the page
     * @param expand location to store the expand value (or NULL)
     * @param fill location to store the fill value (or NULL)
     * @param packType location to store the pack_type (or NULL)
     */
    queryTabLabelPacking(child: Widget, expand: boolean, fill: boolean, packType: PackType): void
    /**
     * Removes a page from the notebook given its index
     * in the notebook.
     * @param pageNum the index of a notebook page, starting            from 0. If -1, the last page will            be removed.
     */
    removePage(pageNum: number): void
    /**
     * Reorders the page containing `child,` so that it appears in position
     * `position`. If `position` is greater than or equal to the number of
     * children in the list or negative, `child` will be moved to the end
     * of the list.
     * @param child the child to move
     * @param position the new position, or -1 to move to the end
     */
    reorderChild(child: Widget, position: number): void
    /**
     * Sets `widget` as one of the action widgets. Depending on the pack type
     * the widget will be placed before or after the tabs. You can use
     * a #GtkBox if you need to pack more than one widget on the same side.
     * 
     * Note that action widgets are "internal" children of the notebook and thus
     * not included in the list returned from gtk_container_foreach().
     * @param widget a #GtkWidget
     * @param packType pack type of the action widget
     */
    setActionWidget(widget: Widget, packType: PackType): void
    /**
     * Switches to the page number `page_num`.
     * 
     * Note that due to historical reasons, GtkNotebook refuses
     * to switch to a page unless the child widget is visible.
     * Therefore, it is recommended to show child widgets before
     * adding them to a notebook.
     * @param pageNum index of the page to switch to, starting from 0.            If negative, the last page will be used. If greater            than the number of pages in the notebook, nothing            will be done.
     */
    setCurrentPage(pageNum: number): void
    /**
     * Sets a group identificator pointer for `notebook,` notebooks sharing
     * the same group identificator pointer will be able to exchange tabs
     * via drag and drop. A notebook with a %NULL group identificator will
     * not be able to exchange tabs with any other notebook.
     * @param group a pointer to identify the notebook group, or %NULL to unset it
     */
    setGroup(group: object | null): void
    /**
     * Sets an group identificator for `notebook,` notebooks sharing
     * the same group identificator will be able to exchange tabs
     * via drag and drop. A notebook with group identificator -1 will
     * not be able to exchange tabs with any other notebook.
     * @param groupId a group identificator, or -1 to unset it
     */
    setGroupId(groupId: number): void
    /**
     * Sets a group name for `notebook`.
     * 
     * Notebooks with the same name will be able to exchange tabs
     * via drag and drop. A notebook with a %NULL group name will
     * not be able to exchange tabs with any other notebook.
     * @param groupName 
     */
    setGroupName(groupName: string): void
    /**
     * Sets whether the tabs must have all the same size or not.
     * @param homogeneous %TRUE if all tabs should be the same size.
     */
    setHomogeneousTabs(homogeneous: boolean): void
    /**
     * Changes the menu label for the page containing `child`.
     * @param child the child widget
     * @param menuLabel the menu label, or NULL for default
     */
    setMenuLabel(child: Widget, menuLabel: Widget | null): void
    /**
     * Creates a new label and sets it as the menu label of `child`.
     * @param child the child widget
     * @param menuText the label text
     */
    setMenuLabelText(child: Widget, menuText: string): void
    /**
     * Sets whether the tab label area will have arrows for scrolling if
     * there are too many tabs to fit in the area.
     * @param scrollable %TRUE if scroll arrows should be added
     */
    setScrollable(scrollable: boolean): void
    /**
     * Sets whether a bevel will be drawn around the notebook pages.
     * This only has a visual effect when the tabs are not shown.
     * See gtk_notebook_set_show_tabs().
     * @param showBorder %TRUE if a bevel should be drawn around the notebook.
     */
    setShowBorder(showBorder: boolean): void
    /**
     * Sets whether to show the tabs for the notebook or not.
     * @param showTabs %TRUE if the tabs should be shown.
     */
    setShowTabs(showTabs: boolean): void
    /**
     * Sets the width the border around the tab labels
     * in a notebook. This is equivalent to calling
     * gtk_notebook_set_tab_hborder (`notebook,` `border_width)` followed
     * by gtk_notebook_set_tab_vborder (`notebook,` `border_width)`.
     * @param borderWidth width of the border around the tab labels.
     */
    setTabBorder(borderWidth: number): void
    /**
     * Sets whether the tab can be detached from `notebook` to another
     * notebook or widget.
     * 
     * Note that 2 notebooks must share a common group identificator
     * (see gtk_notebook_set_group_id ()) to allow automatic tabs
     * interchange between them.
     * 
     * If you want a widget to interact with a notebook through DnD
     * (i.e.: accept dragged tabs from it) it must be set as a drop
     * destination and accept the target "GTK_NOTEBOOK_TAB". The notebook
     * will fill the selection with a GtkWidget** pointing to the child
     * widget that corresponds to the dropped tab.
     * |[
     *  static void
     *  on_drop_zone_drag_data_received (GtkWidget        *widget,
     *                                   GdkDragContext   *context,
     *                                   gint              x,
     *                                   gint              y,
     *                                   GtkSelectionData *selection_data,
     *                                   guint             info,
     *                                   guint             time,
     *                                   gpointer          user_data)
     *  {
     *    GtkWidget *notebook;
     *    GtkWidget **child;
     *    
     *    notebook = gtk_drag_get_source_widget (context);
     *    child = (void*) selection_data->data;
     *    
     *    process_widget (*child);
     *    gtk_container_remove (GTK_CONTAINER (notebook), *child);
     *  }
     * ```
     * 
     * 
     * If you want a notebook to accept drags from other widgets,
     * you will have to set your own DnD code to do it.
     * @param child a child #GtkWidget
     * @param detachable whether the tab is detachable or not
     */
    setTabDetachable(child: Widget, detachable: boolean): void
    /**
     * Sets the width of the horizontal border of tab labels.
     * @param tabHborder width of the horizontal border of tab labels.
     */
    setTabHborder(tabHborder: number): void
    /**
     * Changes the tab label for `child`. If %NULL is specified
     * for `tab_label,` then the page will have the label 'page N'.
     * @param child the page
     * @param tabLabel the tab label widget to use, or %NULL for default tab             label.
     */
    setTabLabel(child: Widget, tabLabel: Widget | null): void
    /**
     * Sets the packing parameters for the tab label of the page
     * containing `child`. See gtk_box_pack_start() for the exact meaning
     * of the parameters.
     * @param child the child widget
     * @param expand whether to expand the tab label or not
     * @param fill whether the tab label should fill the allocated area or not
     * @param packType the position of the tab label
     */
    setTabLabelPacking(child: Widget, expand: boolean, fill: boolean, packType: PackType): void
    /**
     * Creates a new label and sets it as the tab label for the page
     * containing `child`.
     * @param child the page
     * @param tabText the label text
     */
    setTabLabelText(child: Widget, tabText: string): void
    /**
     * Sets the edge at which the tabs for switching pages in the
     * notebook are drawn.
     * @param pos the edge to draw the tabs at.
     */
    setTabPos(pos: PositionType): void
    /**
     * Sets whether the notebook tab can be reordered
     * via drag and drop or not.
     * @param child a child #GtkWidget
     * @param reorderable whether the tab is reorderable or not.
     */
    setTabReorderable(child: Widget, reorderable: boolean): void
    /**
     * Sets the width of the vertical border of tab labels.
     * @param tabVborder width of the vertical border of tab labels.
     */
    setTabVborder(tabVborder: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Notebook

    changeCurrentPage(offset: number): boolean
    focusTab(type: NotebookTab): boolean
    insertPage(child: Widget, tabLabel: Widget, menuLabel: Widget, position: number): number
    moveFocusOut(direction: DirectionType): void
    reorderTab(direction: DirectionType, moveToLast: boolean): boolean
    selectPage(moveFocus: boolean): boolean
    switchPage(page: NotebookPage, pageNum: number): void

    // Own signals of Gtk-2.0.Gtk.Notebook

    connect(sigName: "change-current-page", callback: Notebook.ChangeCurrentPageSignalCallback): number
    on(sigName: "change-current-page", callback: Notebook.ChangeCurrentPageSignalCallback): number
    once(sigName: "change-current-page", callback: Notebook.ChangeCurrentPageSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "change-current-page", ...args: any[]): void
    connect(sigName: "create-window", callback: Notebook.CreateWindowSignalCallback): number
    on(sigName: "create-window", callback: Notebook.CreateWindowSignalCallback): number
    once(sigName: "create-window", callback: Notebook.CreateWindowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "create-window", x: number, y: number, ...args: any[]): void
    connect(sigName: "focus-tab", callback: Notebook.FocusTabSignalCallback): number
    on(sigName: "focus-tab", callback: Notebook.FocusTabSignalCallback): number
    once(sigName: "focus-tab", callback: Notebook.FocusTabSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "focus-tab", ...args: any[]): void
    connect(sigName: "move-focus-out", callback: Notebook.MoveFocusOutSignalCallback): number
    on(sigName: "move-focus-out", callback: Notebook.MoveFocusOutSignalCallback): number
    once(sigName: "move-focus-out", callback: Notebook.MoveFocusOutSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-focus-out", ...args: any[]): void
    connect(sigName: "page-added", callback: Notebook.PageAddedSignalCallback): number
    on(sigName: "page-added", callback: Notebook.PageAddedSignalCallback): number
    once(sigName: "page-added", callback: Notebook.PageAddedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "page-added", pageNum: number, ...args: any[]): void
    connect(sigName: "page-removed", callback: Notebook.PageRemovedSignalCallback): number
    on(sigName: "page-removed", callback: Notebook.PageRemovedSignalCallback): number
    once(sigName: "page-removed", callback: Notebook.PageRemovedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "page-removed", pageNum: number, ...args: any[]): void
    connect(sigName: "page-reordered", callback: Notebook.PageReorderedSignalCallback): number
    on(sigName: "page-reordered", callback: Notebook.PageReorderedSignalCallback): number
    once(sigName: "page-reordered", callback: Notebook.PageReorderedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "page-reordered", pageNum: number, ...args: any[]): void
    connect(sigName: "reorder-tab", callback: Notebook.ReorderTabSignalCallback): number
    on(sigName: "reorder-tab", callback: Notebook.ReorderTabSignalCallback): number
    once(sigName: "reorder-tab", callback: Notebook.ReorderTabSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "reorder-tab", p0: boolean, ...args: any[]): void
    connect(sigName: "select-page", callback: Notebook.SelectPageSignalCallback): number
    on(sigName: "select-page", callback: Notebook.SelectPageSignalCallback): number
    once(sigName: "select-page", callback: Notebook.SelectPageSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-page", ...args: any[]): void
    connect(sigName: "switch-page", callback: Notebook.SwitchPageSignalCallback): number
    on(sigName: "switch-page", callback: Notebook.SwitchPageSignalCallback): number
    once(sigName: "switch-page", callback: Notebook.SwitchPageSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "switch-page", p0: number, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Notebook

    connect(sigName: "notify::enable-popup", callback: any): number
    on(sigName: "notify::enable-popup", callback: any): number
    once(sigName: "notify::enable-popup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::enable-popup", ...args: any[]): void
    connect(sigName: "notify::group", callback: any): number
    on(sigName: "notify::group", callback: any): number
    once(sigName: "notify::group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::group", ...args: any[]): void
    connect(sigName: "notify::group-id", callback: any): number
    on(sigName: "notify::group-id", callback: any): number
    once(sigName: "notify::group-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::group-id", ...args: any[]): void
    connect(sigName: "notify::group-name", callback: any): number
    on(sigName: "notify::group-name", callback: any): number
    once(sigName: "notify::group-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::group-name", ...args: any[]): void
    connect(sigName: "notify::page", callback: any): number
    on(sigName: "notify::page", callback: any): number
    once(sigName: "notify::page", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::page", ...args: any[]): void
    connect(sigName: "notify::tab-border", callback: any): number
    on(sigName: "notify::tab-border", callback: any): number
    once(sigName: "notify::tab-border", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tab-border", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Notebook extends Container {

    // Own properties of Gtk-2.0.Gtk.Notebook

    static name: string

    // Constructors of Gtk-2.0.Gtk.Notebook

    constructor(config?: Notebook.ConstructorProperties) 
    /**
     * Creates a new #GtkNotebook widget with no pages.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkNotebook widget with no pages.
     * @constructor 
     */
    static new(): Notebook
    _init(config?: Notebook.ConstructorProperties): void
}

export module Object {

    // Signal callback interfaces

    /**
     * Signal callback interface for `destroy`
     */
    export interface DestroySignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.InitiallyUnowned.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Object

        userData?: object | null
    }

}

export interface Object {

    // Own properties of Gtk-2.0.Gtk.Object

    userData: object

    // Own fields of Gtk-2.0.Gtk.Object

    parentInstance: GObject.InitiallyUnowned
    flags: number

    // Owm methods of Gtk-2.0.Gtk.Object

    // Has conflict: destroy(): void
    getData(key: string): object | null
    getDataById(dataId: GLib.Quark): object | null
    getUserData(): object | null
    removeData(key: string): void
    removeDataById(dataId: GLib.Quark): void
    removeNoNotify(key: string): void
    removeNoNotifyById(keyId: GLib.Quark): void
    setData(key: string, data: object | null): void
    setDataById(dataId: GLib.Quark, data: object | null): void
    setDataByIdFull(dataId: GLib.Quark, data: object | null, destroy: GLib.DestroyNotify): void
    setDataFull(key: string, data: object | null, destroy: GLib.DestroyNotify): void
    setUserData(data: object | null): void
    sink(): void
    unref(): void
    weakref(notify: GLib.DestroyNotify, data: object | null): void
    weakunref(notify: GLib.DestroyNotify, data: object | null): void

    // Own virtual methods of Gtk-2.0.Gtk.Object

    destroy(): void
    getArg(arg: Arg, argId: number): void
    setArg(arg: Arg, argId: number): void

    // Own signals of Gtk-2.0.Gtk.Object

    connect(sigName: "destroy", callback: Object.DestroySignalCallback): number
    on(sigName: "destroy", callback: Object.DestroySignalCallback): number
    once(sigName: "destroy", callback: Object.DestroySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "destroy", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Object

    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Object extends GObject.InitiallyUnowned {

    // Own properties of Gtk-2.0.Gtk.Object

    static name: string

    // Constructors of Gtk-2.0.Gtk.Object

    constructor(config?: Object.ConstructorProperties) 
    _init(config?: Object.ConstructorProperties): void
    static addArgType(argName: string, argType: GObject.GType, argFlags: number, argId: number): void
}

export module OffscreenWindow {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Window.ConstructorProperties {
    }

}

export interface OffscreenWindow extends Atk.ImplementorIface, Buildable {

    // Conflicting properties

    hasFocus: any

    // Own fields of Gtk-2.0.Gtk.OffscreenWindow

    parentObject: Window

    // Owm methods of Gtk-2.0.Gtk.OffscreenWindow

    /**
     * Retrieves a snapshot of the contained widget in the form of
     * a #GdkPixbuf.  This is a new pixbuf with a reference count of 1,
     * and the application should unreference it once it is no longer
     * needed.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Retrieves a snapshot of the contained widget in the form of
     * a #GdkPixmap.  If you need to keep this around over window
     * resizes then you should add a reference to it.
     */
    getPixmap(): Gdk.Pixmap

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.OffscreenWindow

    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkOffscreenWindow is strictly intended to be used for obtaining
 * snapshots of widgets that are not part of a normal widget hierarchy.
 * It differs from gtk_widget_get_snapshot() in that the widget you
 * want to get a snapshot of need not be displayed on the user's screen
 * as a part of a widget hierarchy.  However, since #GtkOffscreenWindow
 * is a toplevel widget you cannot obtain snapshots of a full window
 * with it since you cannot pack a toplevel widget in another toplevel.
 * 
 * The idea is to take a widget and manually set the state of it,
 * add it to a #GtkOffscreenWindow and then retrieve the snapshot
 * as a #GdkPixmap or #GdkPixbuf.
 * 
 * #GtkOffscreenWindow derives from #GtkWindow only as an implementation
 * detail.  Applications should not use any API specific to #GtkWindow
 * to operate on this object.  It should be treated as a #GtkBin that
 * has no parent widget.
 * 
 * When contained offscreen widgets are redrawn, #GtkOffscreenWindow
 * will emit a #GtkWidget::damage-event signal.
 * @class 
 */
export class OffscreenWindow extends Window {

    // Own properties of Gtk-2.0.Gtk.OffscreenWindow

    static name: string

    // Constructors of Gtk-2.0.Gtk.OffscreenWindow

    constructor(config?: OffscreenWindow.ConstructorProperties) 
    /**
     * Creates a toplevel container widget that is used to retrieve
     * snapshots of widgets without showing them on the screen.  For
     * widgets that are on the screen and part of a normal widget
     * hierarchy, gtk_widget_get_snapshot() can be used instead.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a toplevel container widget that is used to retrieve
     * snapshots of widgets without showing them on the screen.  For
     * widgets that are on the screen and part of a normal widget
     * hierarchy, gtk_widget_get_snapshot() can be used instead.
     * @constructor 
     */
    static new(): OffscreenWindow

    // Overloads of new

    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: OffscreenWindow.ConstructorProperties): void
}

export module OldEditable {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `copy-clipboard`
     */
    export interface CopyClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cut-clipboard`
     */
    export interface CutClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `kill-char`
     */
    export interface KillCharSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `kill-line`
     */
    export interface KillLineSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `kill-word`
     */
    export interface KillWordSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    export interface MoveCursorSignalCallback {
        (object: number, p0: number): void
    }

    /**
     * Signal callback interface for `move-page`
     */
    export interface MovePageSignalCallback {
        (object: number, p0: number): void
    }

    /**
     * Signal callback interface for `move-to-column`
     */
    export interface MoveToColumnSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `move-to-row`
     */
    export interface MoveToRowSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `move-word`
     */
    export interface MoveWordSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `paste-clipboard`
     */
    export interface PasteClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `set-editable`
     */
    export interface SetEditableSignalCallback {
        (object: boolean): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Editable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.OldEditable

        editable?: boolean | null
        textPosition?: number | null
    }

}

export interface OldEditable extends Atk.ImplementorIface, Buildable, Editable {

    // Own properties of Gtk-2.0.Gtk.OldEditable

    editable: boolean
    textPosition: number

    // Own fields of Gtk-2.0.Gtk.OldEditable

    widget: Widget
    currentPos: number
    selectionStartPos: number
    selectionEndPos: number
    hasSelection: number

    // Owm methods of Gtk-2.0.Gtk.OldEditable

    /**
     * Emits the ::changed signal on `old_editable`.
     */
    changed(): void
    /**
     * Claims or gives up ownership of the selection.
     * @param claim if %TRUE, claim ownership of the selection, if %FALSE, give   up ownership
     * @param time timestamp for this operation
     */
    claimSelection(claim: boolean, time: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.OldEditable

    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    copyClipboard(): void

    // Overloads of copyClipboard

    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    cutClipboard(): void

    // Overloads of cutClipboard

    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    getChars(startPos: number, endPos: number): string

    // Overloads of getChars

    /**
     * Retrieves a sequence of characters. The characters that are retrieved
     * are those characters at positions from `start_pos` up to, but not
     * including `end_pos`. If `end_pos` is negative, then the the characters
     * retrieved are those characters from `start_pos` to the end of the text.
     * 
     * Note that positions are specified in characters, not bytes.
     * @param startPos start of text
     * @param endPos end of text
     */
    getChars(startPos: number, endPos: number): string
    killChar(direction: number): void
    killLine(direction: number): void
    killWord(direction: number): void
    moveCursor(x: number, y: number): void
    movePage(x: number, y: number): void
    moveToColumn(row: number): void
    moveToRow(row: number): void
    moveWord(n: number): void
    pasteClipboard(): void

    // Overloads of pasteClipboard

    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void
    setEditable(isEditable: boolean): void

    // Overloads of setEditable

    /**
     * Determines if the user can edit the text in the editable
     * widget or not.
     * @param isEditable %TRUE if the user is allowed to edit the text   in the widget
     */
    setEditable(isEditable: boolean): void
    setPosition(position: number): void

    // Overloads of setPosition

    /**
     * Sets the cursor position in the editable to the given value.
     * 
     * The cursor is displayed before the character with the given (base 0)
     * index in the contents of the editable. The value must be less than or
     * equal to the number of characters in the editable. A value of -1
     * indicates that the position should be set after the last character
     * of the editable. Note that `position` is in characters, not in bytes.
     * @param position the position of the cursor
     */
    setPosition(position: number): void
    setSelection(startPos: number, endPos: number): void
    updateText(startPos: number, endPos: number): void

    // Own signals of Gtk-2.0.Gtk.OldEditable

    connect(sigName: "activate", callback: OldEditable.ActivateSignalCallback): number
    on(sigName: "activate", callback: OldEditable.ActivateSignalCallback): number
    once(sigName: "activate", callback: OldEditable.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "copy-clipboard", callback: OldEditable.CopyClipboardSignalCallback): number
    on(sigName: "copy-clipboard", callback: OldEditable.CopyClipboardSignalCallback): number
    once(sigName: "copy-clipboard", callback: OldEditable.CopyClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "copy-clipboard", ...args: any[]): void
    connect(sigName: "cut-clipboard", callback: OldEditable.CutClipboardSignalCallback): number
    on(sigName: "cut-clipboard", callback: OldEditable.CutClipboardSignalCallback): number
    once(sigName: "cut-clipboard", callback: OldEditable.CutClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cut-clipboard", ...args: any[]): void
    connect(sigName: "kill-char", callback: OldEditable.KillCharSignalCallback): number
    on(sigName: "kill-char", callback: OldEditable.KillCharSignalCallback): number
    once(sigName: "kill-char", callback: OldEditable.KillCharSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "kill-char", ...args: any[]): void
    connect(sigName: "kill-line", callback: OldEditable.KillLineSignalCallback): number
    on(sigName: "kill-line", callback: OldEditable.KillLineSignalCallback): number
    once(sigName: "kill-line", callback: OldEditable.KillLineSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "kill-line", ...args: any[]): void
    connect(sigName: "kill-word", callback: OldEditable.KillWordSignalCallback): number
    on(sigName: "kill-word", callback: OldEditable.KillWordSignalCallback): number
    once(sigName: "kill-word", callback: OldEditable.KillWordSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "kill-word", ...args: any[]): void
    connect(sigName: "move-cursor", callback: OldEditable.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: OldEditable.MoveCursorSignalCallback): number
    once(sigName: "move-cursor", callback: OldEditable.MoveCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-cursor", p0: number, ...args: any[]): void
    connect(sigName: "move-page", callback: OldEditable.MovePageSignalCallback): number
    on(sigName: "move-page", callback: OldEditable.MovePageSignalCallback): number
    once(sigName: "move-page", callback: OldEditable.MovePageSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-page", p0: number, ...args: any[]): void
    connect(sigName: "move-to-column", callback: OldEditable.MoveToColumnSignalCallback): number
    on(sigName: "move-to-column", callback: OldEditable.MoveToColumnSignalCallback): number
    once(sigName: "move-to-column", callback: OldEditable.MoveToColumnSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-to-column", ...args: any[]): void
    connect(sigName: "move-to-row", callback: OldEditable.MoveToRowSignalCallback): number
    on(sigName: "move-to-row", callback: OldEditable.MoveToRowSignalCallback): number
    once(sigName: "move-to-row", callback: OldEditable.MoveToRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-to-row", ...args: any[]): void
    connect(sigName: "move-word", callback: OldEditable.MoveWordSignalCallback): number
    on(sigName: "move-word", callback: OldEditable.MoveWordSignalCallback): number
    once(sigName: "move-word", callback: OldEditable.MoveWordSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-word", ...args: any[]): void
    connect(sigName: "paste-clipboard", callback: OldEditable.PasteClipboardSignalCallback): number
    on(sigName: "paste-clipboard", callback: OldEditable.PasteClipboardSignalCallback): number
    once(sigName: "paste-clipboard", callback: OldEditable.PasteClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "paste-clipboard", ...args: any[]): void
    connect(sigName: "set-editable", callback: OldEditable.SetEditableSignalCallback): number
    on(sigName: "set-editable", callback: OldEditable.SetEditableSignalCallback): number
    once(sigName: "set-editable", callback: OldEditable.SetEditableSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-editable", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.OldEditable

    connect(sigName: "notify::editable", callback: any): number
    on(sigName: "notify::editable", callback: any): number
    once(sigName: "notify::editable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::text-position", callback: any): number
    on(sigName: "notify::text-position", callback: any): number
    once(sigName: "notify::text-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-position", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class OldEditable extends Widget {

    // Own properties of Gtk-2.0.Gtk.OldEditable

    static name: string

    // Constructors of Gtk-2.0.Gtk.OldEditable

    constructor(config?: OldEditable.ConstructorProperties) 
    _init(config?: OldEditable.ConstructorProperties): void
}

export module OptionMenu {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Button.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.OptionMenu

        menu?: Menu | null
    }

}

export interface OptionMenu extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.OptionMenu

    button: Button
    menu: Widget
    menuItem: Widget
    width: number
    height: number

    // Owm methods of Gtk-2.0.Gtk.OptionMenu

    /**
     * Retrieves the index of the currently selected menu item. The menu
     * items are numbered from top to bottom, starting with 0.
     */
    getHistory(): number
    removeMenu(): void
    setHistory(index: number): void
    setMenu(menu: Widget): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.OptionMenu

    changed(): void

    // Own signals of Gtk-2.0.Gtk.OptionMenu

    connect(sigName: "changed", callback: OptionMenu.ChangedSignalCallback): number
    on(sigName: "changed", callback: OptionMenu.ChangedSignalCallback): number
    once(sigName: "changed", callback: OptionMenu.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.OptionMenu

    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class OptionMenu extends Button {

    // Own properties of Gtk-2.0.Gtk.OptionMenu

    static name: string

    // Constructors of Gtk-2.0.Gtk.OptionMenu

    constructor(config?: OptionMenu.ConstructorProperties) 
    constructor() 
    static new(): OptionMenu
    _init(config?: OptionMenu.ConstructorProperties): void
}

export module PageSetup {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface PageSetup {

    // Owm methods of Gtk-2.0.Gtk.PageSetup

    /**
     * Copies a #GtkPageSetup.
     */
    copy(): PageSetup
    /**
     * Gets the bottom margin in units of `unit`.
     * @param unit the unit for the return value
     */
    getBottomMargin(unit: Unit): number
    /**
     * Gets the left margin in units of `unit`.
     * @param unit the unit for the return value
     */
    getLeftMargin(unit: Unit): number
    /**
     * Gets the page orientation of the #GtkPageSetup.
     */
    getOrientation(): PageOrientation
    /**
     * Returns the page height in units of `unit`.
     * 
     * Note that this function takes orientation and
     * margins into consideration.
     * See gtk_page_setup_get_paper_height().
     * @param unit the unit for the return value
     */
    getPageHeight(unit: Unit): number
    /**
     * Returns the page width in units of `unit`.
     * 
     * Note that this function takes orientation and
     * margins into consideration.
     * See gtk_page_setup_get_paper_width().
     * @param unit the unit for the return value
     */
    getPageWidth(unit: Unit): number
    /**
     * Returns the paper height in units of `unit`.
     * 
     * Note that this function takes orientation, but
     * not margins into consideration.
     * See gtk_page_setup_get_page_height().
     * @param unit the unit for the return value
     */
    getPaperHeight(unit: Unit): number
    /**
     * Gets the paper size of the #GtkPageSetup.
     */
    getPaperSize(): PaperSize
    /**
     * Returns the paper width in units of `unit`.
     * 
     * Note that this function takes orientation, but
     * not margins into consideration.
     * See gtk_page_setup_get_page_width().
     * @param unit the unit for the return value
     */
    getPaperWidth(unit: Unit): number
    /**
     * Gets the right margin in units of `unit`.
     * @param unit the unit for the return value
     */
    getRightMargin(unit: Unit): number
    /**
     * Gets the top margin in units of `unit`.
     * @param unit the unit for the return value
     */
    getTopMargin(unit: Unit): number
    /**
     * Reads the page setup from the file `file_name`.
     * See gtk_page_setup_to_file().
     * @param fileName the filename to read the page setup from
     */
    loadFile(fileName: string): boolean
    /**
     * Reads the page setup from the group `group_name` in the key file
     * `key_file`.
     * @param keyFile the #GKeyFile to retrieve the page_setup from
     * @param groupName the name of the group in the key_file to read, or %NULL              to use the default name "Page Setup"
     */
    loadKeyFile(keyFile: GLib.KeyFile, groupName: string | null): boolean
    /**
     * Sets the bottom margin of the #GtkPageSetup.
     * @param margin the new bottom margin in units of `unit`
     * @param unit the units for `margin`
     */
    setBottomMargin(margin: number, unit: Unit): void
    /**
     * Sets the left margin of the #GtkPageSetup.
     * @param margin the new left margin in units of `unit`
     * @param unit the units for `margin`
     */
    setLeftMargin(margin: number, unit: Unit): void
    /**
     * Sets the page orientation of the #GtkPageSetup.
     * @param orientation a #GtkPageOrientation value
     */
    setOrientation(orientation: PageOrientation): void
    /**
     * Sets the paper size of the #GtkPageSetup without
     * changing the margins. See
     * gtk_page_setup_set_paper_size_and_default_margins().
     * @param size a #GtkPaperSize
     */
    setPaperSize(size: PaperSize): void
    /**
     * Sets the paper size of the #GtkPageSetup and modifies
     * the margins according to the new paper size.
     * @param size a #GtkPaperSize
     */
    setPaperSizeAndDefaultMargins(size: PaperSize): void
    /**
     * Sets the right margin of the #GtkPageSetup.
     * @param margin the new right margin in units of `unit`
     * @param unit the units for `margin`
     */
    setRightMargin(margin: number, unit: Unit): void
    /**
     * Sets the top margin of the #GtkPageSetup.
     * @param margin the new top margin in units of `unit`
     * @param unit the units for `margin`
     */
    setTopMargin(margin: number, unit: Unit): void
    /**
     * This function saves the information from `setup` to `file_name`.
     * @param fileName the file to save to
     */
    toFile(fileName: string): boolean
    /**
     * This function adds the page setup from `setup` to `key_file`.
     * @param keyFile the #GKeyFile to save the page setup to
     * @param groupName the group to add the settings to in `key_file,`      or %NULL to use the default name "Page Setup"
     */
    toKeyFile(keyFile: GLib.KeyFile, groupName: string): void

    // Class property signals of Gtk-2.0.Gtk.PageSetup

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class PageSetup extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.PageSetup

    static name: string

    // Constructors of Gtk-2.0.Gtk.PageSetup

    constructor(config?: PageSetup.ConstructorProperties) 
    /**
     * Creates a new #GtkPageSetup.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkPageSetup.
     * @constructor 
     */
    static new(): PageSetup
    /**
     * Reads the page setup from the file `file_name`. Returns a
     * new #GtkPageSetup object with the restored page setup,
     * or %NULL if an error occurred. See gtk_page_setup_to_file().
     * @constructor 
     * @param fileName the filename to read the page setup from
     */
    static newFromFile(fileName: string): PageSetup
    /**
     * Reads the page setup from the group `group_name` in the key file
     * `key_file`. Returns a new #GtkPageSetup object with the restored
     * page setup, or %NULL if an error occurred.
     * @constructor 
     * @param keyFile the #GKeyFile to retrieve the page_setup from
     * @param groupName the name of the group in the key_file to read, or %NULL              to use the default name "Page Setup"
     */
    static newFromKeyFile(keyFile: GLib.KeyFile, groupName: string | null): PageSetup
    _init(config?: PageSetup.ConstructorProperties): void
}

export module Paned {

    // Signal callback interfaces

    /**
     * Signal callback interface for `accept-position`
     */
    export interface AcceptPositionSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `cancel-position`
     */
    export interface CancelPositionSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `cycle-child-focus`
     */
    export interface CycleChildFocusSignalCallback {
        (reversed: boolean): boolean
    }

    /**
     * Signal callback interface for `cycle-handle-focus`
     */
    export interface CycleHandleFocusSignalCallback {
        (reversed: boolean): boolean
    }

    /**
     * Signal callback interface for `move-handle`
     */
    export interface MoveHandleSignalCallback {
        (scrollType: ScrollType): boolean
    }

    /**
     * Signal callback interface for `toggle-handle-focus`
     */
    export interface ToggleHandleFocusSignalCallback {
        (): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Paned

        position?: number | null
        positionSet?: boolean | null
    }

}

export interface Paned extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.Paned

    /**
     * The largest possible value for the position property. This property is derived from the
     * size and shrinkability of the widget's children.
     */
    readonly maxPosition: number
    /**
     * The smallest possible value for the position property. This property is derived from the
     * size and shrinkability of the widget's children.
     */
    readonly minPosition: number
    position: number
    positionSet: boolean

    // Own fields of Gtk-2.0.Gtk.Paned

    container: Container
    child1: Widget
    child2: Widget
    handle: Gdk.Window
    xorGc: Gdk.GC
    cursorType: Gdk.CursorType

    // Owm methods of Gtk-2.0.Gtk.Paned

    add1(child: Widget): void
    add2(child: Widget): void
    computePosition(allocation: number, child1Req: number, child2Req: number): void
    /**
     * Obtains the first child of the paned widget.
     */
    getChild1(): Widget
    /**
     * Obtains the second child of the paned widget.
     */
    getChild2(): Widget
    /**
     * Returns the #GdkWindow of the handle. This function is
     * useful when handling button or motion events because it
     * enables the callback to distinguish between the window
     * of the paned, a child and the handle.
     */
    getHandleWindow(): Gdk.Window
    /**
     * Obtains the position of the divider between the two panes.
     */
    getPosition(): number
    pack1(child: Widget, resize: boolean, shrink: boolean): void
    pack2(child: Widget, resize: boolean, shrink: boolean): void
    /**
     * Sets the position of the divider between the two panes.
     * @param position pixel position of divider, a negative value means that the position            is unset.
     */
    setPosition(position: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Paned

    acceptPosition(): boolean
    cancelPosition(): boolean
    cycleChildFocus(reverse: boolean): boolean
    cycleHandleFocus(reverse: boolean): boolean
    moveHandle(scroll: ScrollType): boolean
    toggleHandleFocus(): boolean

    // Own signals of Gtk-2.0.Gtk.Paned

    connect(sigName: "accept-position", callback: Paned.AcceptPositionSignalCallback): number
    on(sigName: "accept-position", callback: Paned.AcceptPositionSignalCallback): number
    once(sigName: "accept-position", callback: Paned.AcceptPositionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "accept-position", ...args: any[]): void
    connect(sigName: "cancel-position", callback: Paned.CancelPositionSignalCallback): number
    on(sigName: "cancel-position", callback: Paned.CancelPositionSignalCallback): number
    once(sigName: "cancel-position", callback: Paned.CancelPositionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cancel-position", ...args: any[]): void
    connect(sigName: "cycle-child-focus", callback: Paned.CycleChildFocusSignalCallback): number
    on(sigName: "cycle-child-focus", callback: Paned.CycleChildFocusSignalCallback): number
    once(sigName: "cycle-child-focus", callback: Paned.CycleChildFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cycle-child-focus", ...args: any[]): void
    connect(sigName: "cycle-handle-focus", callback: Paned.CycleHandleFocusSignalCallback): number
    on(sigName: "cycle-handle-focus", callback: Paned.CycleHandleFocusSignalCallback): number
    once(sigName: "cycle-handle-focus", callback: Paned.CycleHandleFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cycle-handle-focus", ...args: any[]): void
    connect(sigName: "move-handle", callback: Paned.MoveHandleSignalCallback): number
    on(sigName: "move-handle", callback: Paned.MoveHandleSignalCallback): number
    once(sigName: "move-handle", callback: Paned.MoveHandleSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-handle", ...args: any[]): void
    connect(sigName: "toggle-handle-focus", callback: Paned.ToggleHandleFocusSignalCallback): number
    on(sigName: "toggle-handle-focus", callback: Paned.ToggleHandleFocusSignalCallback): number
    once(sigName: "toggle-handle-focus", callback: Paned.ToggleHandleFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-handle-focus", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Paned

    connect(sigName: "notify::max-position", callback: any): number
    on(sigName: "notify::max-position", callback: any): number
    once(sigName: "notify::max-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-position", ...args: any[]): void
    connect(sigName: "notify::min-position", callback: any): number
    on(sigName: "notify::min-position", callback: any): number
    once(sigName: "notify::min-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::min-position", ...args: any[]): void
    connect(sigName: "notify::position", callback: any): number
    on(sigName: "notify::position", callback: any): number
    once(sigName: "notify::position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::position", ...args: any[]): void
    connect(sigName: "notify::position-set", callback: any): number
    on(sigName: "notify::position-set", callback: any): number
    once(sigName: "notify::position-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::position-set", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Paned extends Container {

    // Own properties of Gtk-2.0.Gtk.Paned

    static name: string

    // Constructors of Gtk-2.0.Gtk.Paned

    constructor(config?: Paned.ConstructorProperties) 
    _init(config?: Paned.ConstructorProperties): void
}

export module Pixmap {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Misc.ConstructorProperties {
    }

}

export interface Pixmap extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Pixmap

    misc: Misc
    pixmap: Gdk.Pixmap
    mask: Gdk.Bitmap
    pixmapInsensitive: Gdk.Pixmap
    buildInsensitive: number

    // Owm methods of Gtk-2.0.Gtk.Pixmap

    get(val: Gdk.Pixmap, mask: Gdk.Bitmap): void
    set(val: Gdk.Pixmap, mask: Gdk.Bitmap): void
    setBuildInsensitive(build: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Pixmap

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Pixmap extends Misc {

    // Own properties of Gtk-2.0.Gtk.Pixmap

    static name: string

    // Constructors of Gtk-2.0.Gtk.Pixmap

    constructor(config?: Pixmap.ConstructorProperties) 
    constructor(pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null) 
    static new(pixmap: Gdk.Pixmap, mask: Gdk.Bitmap | null): Pixmap
    _init(config?: Pixmap.ConstructorProperties): void
}

export module Plug {

    // Signal callback interfaces

    /**
     * Signal callback interface for `embedded`
     */
    export interface EmbeddedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Window.ConstructorProperties {
    }

}

export interface Plug extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Plug

    // Has conflict: readonly embedded: boolean

    // Conflicting properties

    hasFocus: any

    // Own fields of Gtk-2.0.Gtk.Plug

    window: Window & Gdk.Window
    socketWindow: Gdk.Window
    modalityWindow: Widget
    modalityGroup: WindowGroup
    grabbedKeys: GLib.HashTable
    sameApp: number

    // Owm methods of Gtk-2.0.Gtk.Plug

    /**
     * Finish the initialization of `plug` for a given #GtkSocket identified by
     * `socket_id`. This function will generally only be used by classes deriving from #GtkPlug.
     * @param socketId the XID of the socket's window.
     */
    construct(socketId: Gdk.NativeWindow): void
    /**
     * Finish the initialization of `plug` for a given #GtkSocket identified by
     * `socket_id` which is currently displayed on `display`.
     * This function will generally only be used by classes deriving from #GtkPlug.
     * @param display the #GdkDisplay associated with `socket_id'`s      #GtkSocket.
     * @param socketId the XID of the socket's window.
     */
    constructForDisplay(display: Gdk.Display, socketId: Gdk.NativeWindow): void
    /**
     * Determines whether the plug is embedded in a socket.
     */
    getEmbedded(): boolean
    /**
     * Gets the window ID of a #GtkPlug widget, which can then
     * be used to embed this window inside another window, for
     * instance with gtk_socket_add_id().
     */
    getId(): Gdk.NativeWindow
    /**
     * Retrieves the socket the plug is embedded in.
     */
    getSocketWindow(): Gdk.Window

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Plug

    embedded(): void

    // Own signals of Gtk-2.0.Gtk.Plug

    connect(sigName: "embedded", callback: Plug.EmbeddedSignalCallback): number
    on(sigName: "embedded", callback: Plug.EmbeddedSignalCallback): number
    once(sigName: "embedded", callback: Plug.EmbeddedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "embedded", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Plug

    connect(sigName: "notify::embedded", callback: any): number
    on(sigName: "notify::embedded", callback: any): number
    once(sigName: "notify::embedded", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::embedded", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * Together with #GtkSocket, #GtkPlug provides the ability
 * to embed widgets from one process into another process
 * in a fashion that is transparent to the user. One
 * process creates a #GtkSocket widget and passes the
 * ID of that widget's window to the other process,
 * which then creates a #GtkPlug with that window ID.
 * Any widgets contained in the #GtkPlug then will appear
 * inside the first application's window.
 * 
 * <note>
 * The #GtkPlug and #GtkSocket widgets are currently not available
 * on all platforms supported by GTK+.
 * </note>
 * @class 
 */
export class Plug extends Window {

    // Own properties of Gtk-2.0.Gtk.Plug

    static name: string

    // Constructors of Gtk-2.0.Gtk.Plug

    constructor(config?: Plug.ConstructorProperties) 
    /**
     * Creates a new plug widget inside the #GtkSocket identified
     * by `socket_id`. If `socket_id` is 0, the plug is left "unplugged" and
     * can later be plugged into a #GtkSocket by  gtk_socket_add_id().
     * @constructor 
     * @param socketId the window ID of the socket, or 0.
     */
    constructor(socketId: Gdk.NativeWindow) 
    /**
     * Creates a new plug widget inside the #GtkSocket identified
     * by `socket_id`. If `socket_id` is 0, the plug is left "unplugged" and
     * can later be plugged into a #GtkSocket by  gtk_socket_add_id().
     * @constructor 
     * @param socketId the window ID of the socket, or 0.
     */
    static new(socketId: Gdk.NativeWindow): Plug

    // Overloads of new

    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    /**
     * Create a new plug widget inside the #GtkSocket identified by socket_id.
     * @constructor 
     * @param display the #GdkDisplay on which `socket_id` is displayed
     * @param socketId the XID of the socket's window.
     */
    static newForDisplay(display: Gdk.Display, socketId: Gdk.NativeWindow): Plug
    _init(config?: Plug.ConstructorProperties): void
}

export module Preview {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Preview

        expand?: boolean | null
    }

}

export interface Preview extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Preview

    widget: Widget
    buffer: number
    bufferWidth: number
    bufferHeight: number
    bpp: number
    rowstride: number
    dither: Gdk.RgbDither
    type: number
    expand: number

    // Owm methods of Gtk-2.0.Gtk.Preview

    drawRow(data: number, x: number, y: number, w: number): void
    put(window: Gdk.Window, gc: Gdk.GC, srcx: number, srcy: number, destx: number, desty: number, width: number, height: number): void
    setDither(dither: Gdk.RgbDither): void
    setExpand(expand: boolean): void
    size(width: number, height: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Preview

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Preview extends Widget {

    // Own properties of Gtk-2.0.Gtk.Preview

    static name: string

    // Constructors of Gtk-2.0.Gtk.Preview

    constructor(config?: Preview.ConstructorProperties) 
    constructor(type: PreviewType) 
    static new(type: PreviewType): Preview
    _init(config?: Preview.ConstructorProperties): void
    static reset(): void
    static setColorCube(nredShades: number, ngreenShades: number, nblueShades: number, ngrayShades: number): void
    static setGamma(gamma: number): void
    static setInstallCmap(installCmap: number): void
    static setReserved(nreserved: number): void
    static uninit(): void
}

export module PrintContext {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface PrintContext {

    // Owm methods of Gtk-2.0.Gtk.PrintContext

    /**
     * Creates a new #PangoContext that can be used with the
     * #GtkPrintContext.
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new #PangoLayout that is suitable for use
     * with the #GtkPrintContext.
     */
    createPangoLayout(): Pango.Layout
    /**
     * Obtains the cairo context that is associated with the
     * #GtkPrintContext.
     */
    getCairoContext(): cairo.Context
    /**
     * Obtains the horizontal resolution of the #GtkPrintContext,
     * in dots per inch.
     */
    getDpiX(): number
    /**
     * Obtains the vertical resolution of the #GtkPrintContext,
     * in dots per inch.
     */
    getDpiY(): number
    /**
     * Obtains the hardware printer margins of the #GtkPrintContext, in units.
     */
    getHardMargins(): [ /* returnType */ boolean, /* top */ number, /* bottom */ number, /* left */ number, /* right */ number ]
    /**
     * Obtains the height of the #GtkPrintContext, in pixels.
     */
    getHeight(): number
    /**
     * Obtains the #GtkPageSetup that determines the page
     * dimensions of the #GtkPrintContext.
     */
    getPageSetup(): PageSetup
    /**
     * Returns a #PangoFontMap that is suitable for use
     * with the #GtkPrintContext.
     */
    getPangoFontmap(): Pango.FontMap
    /**
     * Obtains the width of the #GtkPrintContext, in pixels.
     */
    getWidth(): number
    /**
     * Sets a new cairo context on a print context.
     * 
     * This function is intended to be used when implementing
     * an internal print preview, it is not needed for printing,
     * since GTK+ itself creates a suitable cairo context in that
     * case.
     * @param cr the cairo context
     * @param dpiX the horizontal resolution to use with `cr`
     * @param dpiY the vertical resolution to use with `cr`
     */
    setCairoContext(cr: cairo.Context, dpiX: number, dpiY: number): void

    // Class property signals of Gtk-2.0.Gtk.PrintContext

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class PrintContext extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.PrintContext

    static name: string

    // Constructors of Gtk-2.0.Gtk.PrintContext

    constructor(config?: PrintContext.ConstructorProperties) 
    _init(config?: PrintContext.ConstructorProperties): void
}

export module PrintOperation {

    // Signal callback interfaces

    /**
     * Signal callback interface for `begin-print`
     */
    export interface BeginPrintSignalCallback {
        (context: PrintContext): void
    }

    /**
     * Signal callback interface for `create-custom-widget`
     */
    export interface CreateCustomWidgetSignalCallback {
        (): GObject.Object
    }

    /**
     * Signal callback interface for `custom-widget-apply`
     */
    export interface CustomWidgetApplySignalCallback {
        (widget: Widget): void
    }

    /**
     * Signal callback interface for `done`
     */
    export interface DoneSignalCallback {
        (result: PrintOperationResult): void
    }

    /**
     * Signal callback interface for `draw-page`
     */
    export interface DrawPageSignalCallback {
        (context: PrintContext, pageNr: number): void
    }

    /**
     * Signal callback interface for `end-print`
     */
    export interface EndPrintSignalCallback {
        (context: PrintContext): void
    }

    /**
     * Signal callback interface for `paginate`
     */
    export interface PaginateSignalCallback {
        (context: PrintContext): boolean
    }

    /**
     * Signal callback interface for `preview`
     */
    export interface PreviewSignalCallback {
        (preview: PrintOperationPreview, context: PrintContext, parent: Window | null): boolean
    }

    /**
     * Signal callback interface for `request-page-setup`
     */
    export interface RequestPageSetupSignalCallback {
        (context: PrintContext, pageNr: number, setup: PageSetup): void
    }

    /**
     * Signal callback interface for `status-changed`
     */
    export interface StatusChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `update-custom-widget`
     */
    export interface UpdateCustomWidgetSignalCallback {
        (widget: Widget, setup: PageSetup, settings: PrintSettings): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends PrintOperationPreview.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.PrintOperation

        /**
         * Determines whether the print operation may run asynchronously or not.
         * 
         * Some systems don't support asynchronous printing, but those that do
         * will return %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS as the status, and
         * emit the #GtkPrintOperation::done signal when the operation is actually
         * done.
         * 
         * The Windows port does not support asynchronous operation at all (this
         * is unlikely to change). On other platforms, all actions except for
         * %GTK_PRINT_OPERATION_ACTION_EXPORT support asynchronous operation.
         */
        allowAsync?: boolean | null
        /**
         * The current page in the document.
         * 
         * If this is set before gtk_print_operation_run(),
         * the user will be able to select to print only the current page.
         * 
         * Note that this only makes sense for pre-paginated documents.
         */
        currentPage?: number | null
        /**
         * Used as the label of the tab containing custom widgets.
         * Note that this property may be ignored on some platforms.
         * 
         * If this is %NULL, GTK+ uses a default label.
         */
        customTabLabel?: string | null
        /**
         * The #GtkPageSetup used by default.
         * 
         * This page setup will be used by gtk_print_operation_run(),
         * but it can be overridden on a per-page basis by connecting
         * to the #GtkPrintOperation::request-page-setup signal.
         */
        defaultPageSetup?: PageSetup | null
        /**
         * If %TRUE, page size combo box and orientation combo box are embedded into page setup page.
         */
        embedPageSetup?: boolean | null
        /**
         * The name of a file to generate instead of showing the print dialog.
         * Currently, PDF is the only supported format.
         * 
         * The intended use of this property is for implementing
         * "Export to PDF" actions.
         * 
         * "Print to PDF" support is independent of this and is done
         * by letting the user pick the "Print to PDF" item from the
         * list of printers in the print dialog.
         */
        exportFilename?: string | null
        /**
         * Determines whether there is a selection in your application.
         * This can allow your application to print the selection.
         * This is typically used to make a "Selection" button sensitive.
         */
        hasSelection?: boolean | null
        /**
         * A string used to identify the job (e.g. in monitoring
         * applications like eggcups).
         * 
         * If you don't set a job name, GTK+ picks a default one
         * by numbering successive print jobs.
         */
        jobName?: string | null
        /**
         * The number of pages in the document.
         * 
         * This <emphasis>must</emphasis> be set to a positive number
         * before the rendering starts. It may be set in a
         * #GtkPrintOperation::begin-print signal hander.
         * 
         * Note that the page numbers passed to the
         * #GtkPrintOperation::request-page-setup and
         * #GtkPrintOperation::draw-page signals are 0-based, i.e. if
         * the user chooses to print all pages, the last ::draw-page signal
         * will be for page `n_pages` - 1.
         */
        nPages?: number | null
        /**
         * The #GtkPrintSettings used for initializing the dialog.
         * 
         * Setting this property is typically used to re-establish
         * print settings from a previous print operation, see
         * gtk_print_operation_run().
         */
        printSettings?: PrintSettings | null
        /**
         * Determines whether to show a progress dialog during the
         * print operation.
         */
        showProgress?: boolean | null
        /**
         * If %TRUE, the print operation will support print of selection.
         * This allows the print dialog to show a "Selection" button.
         */
        supportSelection?: boolean | null
        /**
         * If %TRUE, the print operation will try to continue report on
         * the status of the print job in the printer queues and printer.
         * This can allow your application to show things like "out of paper"
         * issues, and when the print job actually reaches the printer.
         * However, this is often implemented using polling, and should
         * not be enabled unless needed.
         */
        trackPrintStatus?: boolean | null
        /**
         * The transformation for the cairo context obtained from
         * #GtkPrintContext is set up in such a way that distances
         * are measured in units of `unit`.
         */
        unit?: Unit | null
        /**
         * If %TRUE, the transformation for the cairo context obtained
         * from #GtkPrintContext puts the origin at the top left corner
         * of the page (which may not be the top left corner of the sheet,
         * depending on page orientation and the number of pages per sheet).
         * Otherwise, the origin is at the top left corner of the imageable
         * area (i.e. inside the margins).
         */
        useFullPage?: boolean | null
    }

}

export interface PrintOperation extends PrintOperationPreview {

    // Own properties of Gtk-2.0.Gtk.PrintOperation

    /**
     * Determines whether the print operation may run asynchronously or not.
     * 
     * Some systems don't support asynchronous printing, but those that do
     * will return %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS as the status, and
     * emit the #GtkPrintOperation::done signal when the operation is actually
     * done.
     * 
     * The Windows port does not support asynchronous operation at all (this
     * is unlikely to change). On other platforms, all actions except for
     * %GTK_PRINT_OPERATION_ACTION_EXPORT support asynchronous operation.
     */
    allowAsync: boolean
    /**
     * The current page in the document.
     * 
     * If this is set before gtk_print_operation_run(),
     * the user will be able to select to print only the current page.
     * 
     * Note that this only makes sense for pre-paginated documents.
     */
    currentPage: number
    /**
     * Used as the label of the tab containing custom widgets.
     * Note that this property may be ignored on some platforms.
     * 
     * If this is %NULL, GTK+ uses a default label.
     */
    customTabLabel: string
    /**
     * The #GtkPageSetup used by default.
     * 
     * This page setup will be used by gtk_print_operation_run(),
     * but it can be overridden on a per-page basis by connecting
     * to the #GtkPrintOperation::request-page-setup signal.
     */
    defaultPageSetup: PageSetup
    /**
     * If %TRUE, page size combo box and orientation combo box are embedded into page setup page.
     */
    embedPageSetup: boolean
    /**
     * The name of a file to generate instead of showing the print dialog.
     * Currently, PDF is the only supported format.
     * 
     * The intended use of this property is for implementing
     * "Export to PDF" actions.
     * 
     * "Print to PDF" support is independent of this and is done
     * by letting the user pick the "Print to PDF" item from the
     * list of printers in the print dialog.
     */
    exportFilename: string
    /**
     * Determines whether there is a selection in your application.
     * This can allow your application to print the selection.
     * This is typically used to make a "Selection" button sensitive.
     */
    hasSelection: boolean
    /**
     * A string used to identify the job (e.g. in monitoring
     * applications like eggcups).
     * 
     * If you don't set a job name, GTK+ picks a default one
     * by numbering successive print jobs.
     */
    jobName: string
    /**
     * The number of pages in the document.
     * 
     * This <emphasis>must</emphasis> be set to a positive number
     * before the rendering starts. It may be set in a
     * #GtkPrintOperation::begin-print signal hander.
     * 
     * Note that the page numbers passed to the
     * #GtkPrintOperation::request-page-setup and
     * #GtkPrintOperation::draw-page signals are 0-based, i.e. if
     * the user chooses to print all pages, the last ::draw-page signal
     * will be for page `n_pages` - 1.
     */
    nPages: number
    /**
     * The number of pages that will be printed.
     * 
     * Note that this value is set during print preparation phase
     * (%GTK_PRINT_STATUS_PREPARING), so this value should never be
     * get before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
     * You can connect to the #GtkPrintOperation::status-changed signal
     * and call gtk_print_operation_get_n_pages_to_print() when
     * print status is %GTK_PRINT_STATUS_GENERATING_DATA.
     * This is typically used to track the progress of print operation.
     */
    readonly nPagesToPrint: number
    /**
     * The #GtkPrintSettings used for initializing the dialog.
     * 
     * Setting this property is typically used to re-establish
     * print settings from a previous print operation, see
     * gtk_print_operation_run().
     */
    printSettings: PrintSettings
    /**
     * Determines whether to show a progress dialog during the
     * print operation.
     */
    showProgress: boolean
    /**
     * The status of the print operation.
     */
    readonly status: PrintStatus
    /**
     * A string representation of the status of the print operation.
     * The string is translated and suitable for displaying the print
     * status e.g. in a #GtkStatusbar.
     * 
     * See the #GtkPrintOperation:status property for a status value that
     * is suitable for programmatic use.
     */
    readonly statusString: string
    /**
     * If %TRUE, the print operation will support print of selection.
     * This allows the print dialog to show a "Selection" button.
     */
    supportSelection: boolean
    /**
     * If %TRUE, the print operation will try to continue report on
     * the status of the print job in the printer queues and printer.
     * This can allow your application to show things like "out of paper"
     * issues, and when the print job actually reaches the printer.
     * However, this is often implemented using polling, and should
     * not be enabled unless needed.
     */
    trackPrintStatus: boolean
    /**
     * The transformation for the cairo context obtained from
     * #GtkPrintContext is set up in such a way that distances
     * are measured in units of `unit`.
     */
    unit: Unit
    /**
     * If %TRUE, the transformation for the cairo context obtained
     * from #GtkPrintContext puts the origin at the top left corner
     * of the page (which may not be the top left corner of the sheet,
     * depending on page orientation and the number of pages per sheet).
     * Otherwise, the origin is at the top left corner of the imageable
     * area (i.e. inside the margins).
     */
    useFullPage: boolean

    // Own fields of Gtk-2.0.Gtk.PrintOperation

    parentInstance: GObject.Object
    priv: PrintOperationPrivate

    // Owm methods of Gtk-2.0.Gtk.PrintOperation

    /**
     * Cancels a running print operation. This function may
     * be called from a #GtkPrintOperation::begin-print,
     * #GtkPrintOperation::paginate or #GtkPrintOperation::draw-page
     * signal handler to stop the currently running print
     * operation.
     */
    cancel(): void
    /**
     * Signalize that drawing of particular page is complete.
     * 
     * It is called after completion of page drawing (e.g. drawing in another
     * thread).
     * If gtk_print_operation_set_defer_drawing() was called before, then this function
     * has to be called by application. In another case it is called by the library
     * itself.
     */
    drawPageFinish(): void
    /**
     * Returns the default page setup, see
     * gtk_print_operation_set_default_page_setup().
     */
    getDefaultPageSetup(): PageSetup
    /**
     * Gets the value of #GtkPrintOperation::embed-page-setup property.
     */
    getEmbedPageSetup(): boolean
    /**
     * Call this when the result of a print operation is
     * %GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by
     * gtk_print_operation_run(), or in the #GtkPrintOperation::done signal
     * handler. The returned #GError will contain more details on what went wrong.
     */
    getError(): void
    /**
     * Gets the value of #GtkPrintOperation::has-selection property.
     */
    getHasSelection(): boolean
    /**
     * Returns the number of pages that will be printed.
     * 
     * Note that this value is set during print preparation phase
     * (%GTK_PRINT_STATUS_PREPARING), so this function should never be
     * called before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
     * You can connect to the #GtkPrintOperation::status-changed signal
     * and call gtk_print_operation_get_n_pages_to_print() when
     * print status is %GTK_PRINT_STATUS_GENERATING_DATA.
     * This is typically used to track the progress of print operation.
     */
    getNPagesToPrint(): number
    /**
     * Returns the current print settings.
     * 
     * Note that the return value is %NULL until either
     * gtk_print_operation_set_print_settings() or
     * gtk_print_operation_run() have been called.
     */
    getPrintSettings(): PrintSettings
    /**
     * Returns the status of the print operation.
     * Also see gtk_print_operation_get_status_string().
     */
    getStatus(): PrintStatus
    /**
     * Returns a string representation of the status of the
     * print operation. The string is translated and suitable
     * for displaying the print status e.g. in a #GtkStatusbar.
     * 
     * Use gtk_print_operation_get_status() to obtain a status
     * value that is suitable for programmatic use.
     */
    getStatusString(): string
    /**
     * Gets the value of #GtkPrintOperation::support-selection property.
     */
    getSupportSelection(): boolean
    /**
     * A convenience function to find out if the print operation
     * is finished, either successfully (%GTK_PRINT_STATUS_FINISHED)
     * or unsuccessfully (%GTK_PRINT_STATUS_FINISHED_ABORTED).
     * 
     * Note: when you enable print status tracking the print operation
     * can be in a non-finished state even after done has been called, as
     * the operation status then tracks the print job status on the printer.
     */
    isFinished(): boolean
    /**
     * Runs the print operation, by first letting the user modify
     * print settings in the print dialog, and then print the document.
     * 
     * Normally that this function does not return until the rendering of all
     * pages is complete. You can connect to the
     * #GtkPrintOperation::status-changed signal on `op` to obtain some
     * information about the progress of the print operation.
     * Furthermore, it may use a recursive mainloop to show the print dialog.
     * 
     * If you call gtk_print_operation_set_allow_async() or set the
     * #GtkPrintOperation:allow-async property the operation will run
     * asynchronously if this is supported on the platform. The
     * #GtkPrintOperation::done signal will be emitted with the result of the
     * operation when the it is done (i.e. when the dialog is canceled, or when
     * the print succeeds or fails).
     * |[
     * if (settings != NULL)
     *   gtk_print_operation_set_print_settings (print, settings);
     *   
     * if (page_setup != NULL)
     *   gtk_print_operation_set_default_page_setup (print, page_setup);
     *   
     * g_signal_connect (print, "begin-print",
     *                   G_CALLBACK (begin_print), &data);
     * g_signal_connect (print, "draw-page",
     *                   G_CALLBACK (draw_page), &data);
     *  
     * res = gtk_print_operation_run (print,
     *                                GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
     *                                parent,
     *                                &error);
     *  
     * if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
     *  {
     *    error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
     *   			                     GTK_DIALOG_DESTROY_WITH_PARENT,
     * 					     GTK_MESSAGE_ERROR,
     * 					     GTK_BUTTONS_CLOSE,
     * 					     "Error printing file:\n%s",
     * 					     error->message);
     *    g_signal_connect (error_dialog, "response",
     *                      G_CALLBACK (gtk_widget_destroy), NULL);
     *    gtk_widget_show (error_dialog);
     *    g_error_free (error);
     *  }
     * else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
     *  {
     *    if (settings != NULL)
     * g_object_unref (settings);
     *    settings = g_object_ref (gtk_print_operation_get_print_settings (print));
     *  }
     * ```
     * 
     * 
     * Note that gtk_print_operation_run() can only be called once on a
     * given #GtkPrintOperation.
     * @param action the action to start
     * @param parent Transient parent of the dialog
     */
    run(action: PrintOperationAction, parent: Window | null): PrintOperationResult
    /**
     * Sets whether the gtk_print_operation_run() may return
     * before the print operation is completed. Note that
     * some platforms may not allow asynchronous operation.
     * @param allowAsync %TRUE to allow asynchronous operation
     */
    setAllowAsync(allowAsync: boolean): void
    /**
     * Sets the current page.
     * 
     * If this is called before gtk_print_operation_run(),
     * the user will be able to select to print only the current page.
     * 
     * Note that this only makes sense for pre-paginated documents.
     * @param currentPage the current page, 0-based
     */
    setCurrentPage(currentPage: number): void
    /**
     * Sets the label for the tab holding custom widgets.
     * @param label the label to use, or %NULL to use the default label
     */
    setCustomTabLabel(label: string | null): void
    /**
     * Makes `default_page_setup` the default page setup for `op`.
     * 
     * This page setup will be used by gtk_print_operation_run(),
     * but it can be overridden on a per-page basis by connecting
     * to the #GtkPrintOperation::request-page-setup signal.
     * @param defaultPageSetup a #GtkPageSetup, or %NULL
     */
    setDefaultPageSetup(defaultPageSetup: PageSetup | null): void
    /**
     * Sets up the #GtkPrintOperation to wait for calling of
     * gtk_print_operation_draw_page_finish() from application. It can
     * be used for drawing page in another thread.
     * 
     * This function must be called in the callback of "draw-page" signal.
     */
    setDeferDrawing(): void
    /**
     * Embed page size combo box and orientation combo box into page setup page.
     * Selected page setup is stored as default page setup in #GtkPrintOperation.
     * @param embed %TRUE to embed page setup selection in the #GtkPrintDialog
     */
    setEmbedPageSetup(embed: boolean): void
    /**
     * Sets up the #GtkPrintOperation to generate a file instead
     * of showing the print dialog. The indended use of this function
     * is for implementing "Export to PDF" actions. Currently, PDF
     * is the only supported format.
     * 
     * "Print to PDF" support is independent of this and is done
     * by letting the user pick the "Print to PDF" item from the list
     * of printers in the print dialog.
     * @param filename the filename for the exported file
     */
    setExportFilename(filename: string): void
    /**
     * Sets whether there is a selection to print.
     * 
     * Application has to set number of pages to which the selection
     * will draw by gtk_print_operation_set_n_pages() in a callback of
     * #GtkPrintOperation::begin-print.
     * @param hasSelection %TRUE indicates that a selection exists
     */
    setHasSelection(hasSelection: boolean): void
    /**
     * Sets the name of the print job. The name is used to identify
     * the job (e.g. in monitoring applications like eggcups).
     * 
     * If you don't set a job name, GTK+ picks a default one by
     * numbering successive print jobs.
     * @param jobName a string that identifies the print job
     */
    setJobName(jobName: string): void
    /**
     * Sets the number of pages in the document.
     * 
     * This <emphasis>must</emphasis> be set to a positive number
     * before the rendering starts. It may be set in a
     * #GtkPrintOperation::begin-print signal hander.
     * 
     * Note that the page numbers passed to the
     * #GtkPrintOperation::request-page-setup
     * and #GtkPrintOperation::draw-page signals are 0-based, i.e. if
     * the user chooses to print all pages, the last ::draw-page signal
     * will be for page `n_pages` - 1.
     * @param nPages the number of pages
     */
    setNPages(nPages: number): void
    /**
     * Sets the print settings for `op`. This is typically used to
     * re-establish print settings from a previous print operation,
     * see gtk_print_operation_run().
     * @param printSettings #GtkPrintSettings
     */
    setPrintSettings(printSettings: PrintSettings | null): void
    /**
     * If `show_progress` is %TRUE, the print operation will show a
     * progress dialog during the print operation.
     * @param showProgress %TRUE to show a progress dialog
     */
    setShowProgress(showProgress: boolean): void
    /**
     * Sets whether selection is supported by #GtkPrintOperation.
     * @param supportSelection %TRUE to support selection
     */
    setSupportSelection(supportSelection: boolean): void
    /**
     * If track_status is %TRUE, the print operation will try to continue report
     * on the status of the print job in the printer queues and printer. This
     * can allow your application to show things like "out of paper" issues,
     * and when the print job actually reaches the printer.
     * 
     * This function is often implemented using some form of polling, so it should
     * not be enabled unless needed.
     * @param trackStatus %TRUE to track status after printing
     */
    setTrackPrintStatus(trackStatus: boolean): void
    /**
     * Sets up the transformation for the cairo context obtained from
     * #GtkPrintContext in such a way that distances are measured in
     * units of `unit`.
     * @param unit the unit to use
     */
    setUnit(unit: Unit): void
    /**
     * If `full_page` is %TRUE, the transformation for the cairo context
     * obtained from #GtkPrintContext puts the origin at the top left
     * corner of the page (which may not be the top left corner of the
     * sheet, depending on page orientation and the number of pages per
     * sheet). Otherwise, the origin is at the top left corner of the
     * imageable area (i.e. inside the margins).
     * @param fullPage %TRUE to set up the #GtkPrintContext for the full page
     */
    setUseFullPage(fullPage: boolean): void

    // Own virtual methods of Gtk-2.0.Gtk.PrintOperation

    beginPrint(context: PrintContext): void
    customWidgetApply(widget: Widget): void
    done(result: PrintOperationResult): void
    drawPage(context: PrintContext, pageNr: number): void
    endPrint(context: PrintContext): void
    paginate(context: PrintContext): boolean
    preview(preview: PrintOperationPreview, context: PrintContext, parent: Window): boolean
    requestPageSetup(context: PrintContext, pageNr: number, setup: PageSetup): void
    statusChanged(): void
    updateCustomWidget(widget: Widget, setup: PageSetup, settings: PrintSettings): void

    // Own signals of Gtk-2.0.Gtk.PrintOperation

    connect(sigName: "begin-print", callback: PrintOperation.BeginPrintSignalCallback): number
    on(sigName: "begin-print", callback: PrintOperation.BeginPrintSignalCallback): number
    once(sigName: "begin-print", callback: PrintOperation.BeginPrintSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "begin-print", ...args: any[]): void
    connect(sigName: "create-custom-widget", callback: PrintOperation.CreateCustomWidgetSignalCallback): number
    on(sigName: "create-custom-widget", callback: PrintOperation.CreateCustomWidgetSignalCallback): number
    once(sigName: "create-custom-widget", callback: PrintOperation.CreateCustomWidgetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "create-custom-widget", ...args: any[]): void
    connect(sigName: "custom-widget-apply", callback: PrintOperation.CustomWidgetApplySignalCallback): number
    on(sigName: "custom-widget-apply", callback: PrintOperation.CustomWidgetApplySignalCallback): number
    once(sigName: "custom-widget-apply", callback: PrintOperation.CustomWidgetApplySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "custom-widget-apply", ...args: any[]): void
    connect(sigName: "done", callback: PrintOperation.DoneSignalCallback): number
    on(sigName: "done", callback: PrintOperation.DoneSignalCallback): number
    once(sigName: "done", callback: PrintOperation.DoneSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "done", ...args: any[]): void
    connect(sigName: "draw-page", callback: PrintOperation.DrawPageSignalCallback): number
    on(sigName: "draw-page", callback: PrintOperation.DrawPageSignalCallback): number
    once(sigName: "draw-page", callback: PrintOperation.DrawPageSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "draw-page", pageNr: number, ...args: any[]): void
    connect(sigName: "end-print", callback: PrintOperation.EndPrintSignalCallback): number
    on(sigName: "end-print", callback: PrintOperation.EndPrintSignalCallback): number
    once(sigName: "end-print", callback: PrintOperation.EndPrintSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "end-print", ...args: any[]): void
    connect(sigName: "paginate", callback: PrintOperation.PaginateSignalCallback): number
    on(sigName: "paginate", callback: PrintOperation.PaginateSignalCallback): number
    once(sigName: "paginate", callback: PrintOperation.PaginateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "paginate", ...args: any[]): void
    connect(sigName: "preview", callback: PrintOperation.PreviewSignalCallback): number
    on(sigName: "preview", callback: PrintOperation.PreviewSignalCallback): number
    once(sigName: "preview", callback: PrintOperation.PreviewSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "preview", context: PrintContext, parent: Window | null, ...args: any[]): void
    connect(sigName: "request-page-setup", callback: PrintOperation.RequestPageSetupSignalCallback): number
    on(sigName: "request-page-setup", callback: PrintOperation.RequestPageSetupSignalCallback): number
    once(sigName: "request-page-setup", callback: PrintOperation.RequestPageSetupSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "request-page-setup", pageNr: number, setup: PageSetup, ...args: any[]): void
    connect(sigName: "status-changed", callback: PrintOperation.StatusChangedSignalCallback): number
    on(sigName: "status-changed", callback: PrintOperation.StatusChangedSignalCallback): number
    once(sigName: "status-changed", callback: PrintOperation.StatusChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "status-changed", ...args: any[]): void
    connect(sigName: "update-custom-widget", callback: PrintOperation.UpdateCustomWidgetSignalCallback): number
    on(sigName: "update-custom-widget", callback: PrintOperation.UpdateCustomWidgetSignalCallback): number
    once(sigName: "update-custom-widget", callback: PrintOperation.UpdateCustomWidgetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "update-custom-widget", setup: PageSetup, settings: PrintSettings, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.PrintOperation

    connect(sigName: "notify::allow-async", callback: any): number
    on(sigName: "notify::allow-async", callback: any): number
    once(sigName: "notify::allow-async", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::allow-async", ...args: any[]): void
    connect(sigName: "notify::current-page", callback: any): number
    on(sigName: "notify::current-page", callback: any): number
    once(sigName: "notify::current-page", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::current-page", ...args: any[]): void
    connect(sigName: "notify::custom-tab-label", callback: any): number
    on(sigName: "notify::custom-tab-label", callback: any): number
    once(sigName: "notify::custom-tab-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::custom-tab-label", ...args: any[]): void
    connect(sigName: "notify::default-page-setup", callback: any): number
    on(sigName: "notify::default-page-setup", callback: any): number
    once(sigName: "notify::default-page-setup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-page-setup", ...args: any[]): void
    connect(sigName: "notify::embed-page-setup", callback: any): number
    on(sigName: "notify::embed-page-setup", callback: any): number
    once(sigName: "notify::embed-page-setup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::embed-page-setup", ...args: any[]): void
    connect(sigName: "notify::export-filename", callback: any): number
    on(sigName: "notify::export-filename", callback: any): number
    once(sigName: "notify::export-filename", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::export-filename", ...args: any[]): void
    connect(sigName: "notify::has-selection", callback: any): number
    on(sigName: "notify::has-selection", callback: any): number
    once(sigName: "notify::has-selection", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-selection", ...args: any[]): void
    connect(sigName: "notify::job-name", callback: any): number
    on(sigName: "notify::job-name", callback: any): number
    once(sigName: "notify::job-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::job-name", ...args: any[]): void
    connect(sigName: "notify::n-pages", callback: any): number
    on(sigName: "notify::n-pages", callback: any): number
    once(sigName: "notify::n-pages", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::n-pages", ...args: any[]): void
    connect(sigName: "notify::n-pages-to-print", callback: any): number
    on(sigName: "notify::n-pages-to-print", callback: any): number
    once(sigName: "notify::n-pages-to-print", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::n-pages-to-print", ...args: any[]): void
    connect(sigName: "notify::print-settings", callback: any): number
    on(sigName: "notify::print-settings", callback: any): number
    once(sigName: "notify::print-settings", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::print-settings", ...args: any[]): void
    connect(sigName: "notify::show-progress", callback: any): number
    on(sigName: "notify::show-progress", callback: any): number
    once(sigName: "notify::show-progress", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-progress", ...args: any[]): void
    connect(sigName: "notify::status", callback: any): number
    on(sigName: "notify::status", callback: any): number
    once(sigName: "notify::status", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::status", ...args: any[]): void
    connect(sigName: "notify::status-string", callback: any): number
    on(sigName: "notify::status-string", callback: any): number
    once(sigName: "notify::status-string", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::status-string", ...args: any[]): void
    connect(sigName: "notify::support-selection", callback: any): number
    on(sigName: "notify::support-selection", callback: any): number
    once(sigName: "notify::support-selection", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::support-selection", ...args: any[]): void
    connect(sigName: "notify::track-print-status", callback: any): number
    on(sigName: "notify::track-print-status", callback: any): number
    once(sigName: "notify::track-print-status", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::track-print-status", ...args: any[]): void
    connect(sigName: "notify::unit", callback: any): number
    on(sigName: "notify::unit", callback: any): number
    once(sigName: "notify::unit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::unit", ...args: any[]): void
    connect(sigName: "notify::use-full-page", callback: any): number
    on(sigName: "notify::use-full-page", callback: any): number
    once(sigName: "notify::use-full-page", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-full-page", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class PrintOperation extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.PrintOperation

    static name: string

    // Constructors of Gtk-2.0.Gtk.PrintOperation

    constructor(config?: PrintOperation.ConstructorProperties) 
    /**
     * Creates a new #GtkPrintOperation.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkPrintOperation.
     * @constructor 
     */
    static new(): PrintOperation
    _init(config?: PrintOperation.ConstructorProperties): void
}

export module PrintSettings {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface PrintSettings {

    // Owm methods of Gtk-2.0.Gtk.PrintSettings

    /**
     * Copies a #GtkPrintSettings object.
     */
    copy(): PrintSettings
    /**
     * Calls `func` for each key-value pair of `settings`.
     * @param func the function to call
     */
    foreach(func: PrintSettingsFunc): void
    /**
     * Looks up the string value associated with `key`.
     * @param key a key
     */
    get(key: string): string
    /**
     * Returns the boolean represented by the value
     * that is associated with `key`.
     * 
     * The string "true" represents %TRUE, any other
     * string %FALSE.
     * @param key a key
     */
    getBool(key: string): boolean
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_COLLATE.
     */
    getCollate(): boolean
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
     */
    getDefaultSource(): string
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_DITHER.
     */
    getDither(): string
    /**
     * Returns the double value associated with `key,` or 0.
     * @param key a key
     */
    getDouble(key: string): number
    /**
     * Returns the floating point number represented by
     * the value that is associated with `key,` or `default_val`
     * if the value does not represent a floating point number.
     * 
     * Floating point numbers are parsed with g_ascii_strtod().
     * @param key a key
     * @param def the default value
     */
    getDoubleWithDefault(key: string, def: number): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.
     */
    getDuplex(): PrintDuplex
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
     */
    getFinishings(): string
    /**
     * Returns the integer value of `key,` or 0.
     * @param key a key
     */
    getInt(key: string): number
    /**
     * Returns the value of `key,` interpreted as
     * an integer, or the default value.
     * @param key a key
     * @param def the default value
     */
    getIntWithDefault(key: string, def: number): number
    /**
     * Returns the value associated with `key,` interpreted
     * as a length. The returned value is converted to `units`.
     * @param key a key
     * @param unit the unit of the return value
     */
    getLength(key: string, unit: Unit): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.
     * 
     * The set of media types is defined in PWG 5101.1-2002 PWG.
     * <!-- FIXME link here -->
     */
    getMediaType(): string
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.
     */
    getNCopies(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
     */
    getNumberUp(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
     */
    getNumberUpLayout(): NumberUpLayout
    /**
     * Get the value of %GTK_PRINT_SETTINGS_ORIENTATION,
     * converted to a #GtkPageOrientation.
     */
    getOrientation(): PageOrientation
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
     */
    getOutputBin(): string
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
     */
    getPageRanges(): PageRange[]
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
     */
    getPageSet(): PageSet
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
     * converted to `unit`.
     * @param unit the unit for the return value
     */
    getPaperHeight(unit: Unit): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
     * converted to a #GtkPaperSize.
     */
    getPaperSize(): PaperSize
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
     * converted to `unit`.
     * @param unit the unit for the return value
     */
    getPaperWidth(unit: Unit): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
     */
    getPrintPages(): PrintPages
    /**
     * Convenience function to obtain the value of
     * %GTK_PRINT_SETTINGS_PRINTER.
     */
    getPrinter(): string
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
     */
    getPrinterLpi(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_QUALITY.
     */
    getQuality(): PrintQuality
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.
     */
    getResolution(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_X.
     */
    getResolutionX(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_Y.
     */
    getResolutionY(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_REVERSE.
     */
    getReverse(): boolean
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_SCALE.
     */
    getScale(): number
    /**
     * Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
     */
    getUseColor(): boolean
    /**
     * Returns %TRUE, if a value is associated with `key`.
     * @param key a key
     */
    hasKey(key: string): boolean
    /**
     * Reads the print settings from `file_name`. If the file could not be loaded
     * then error is set to either a #GFileError or #GKeyFileError.
     * See gtk_print_settings_to_file().
     * @param fileName the filename to read the settings from
     */
    loadFile(fileName: string): boolean
    /**
     * Reads the print settings from the group `group_name` in `key_file`. If the
     * file could not be loaded then error is set to either a #GFileError or
     * #GKeyFileError.
     * @param keyFile the #GKeyFile to retrieve the settings from
     * @param groupName the name of the group to use, or %NULL to use the default     "Print Settings"
     */
    loadKeyFile(keyFile: GLib.KeyFile, groupName: string | null): boolean
    /**
     * Associates `value` with `key`.
     * @param key a key
     * @param value a string value, or %NULL
     */
    set(key: string, value: string | null): void
    /**
     * Sets `key` to a boolean value.
     * @param key a key
     * @param value a boolean
     */
    setBool(key: string, value: boolean): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_COLLATE.
     * @param collate whether to collate the output
     */
    setCollate(collate: boolean): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
     * @param defaultSource the default source
     */
    setDefaultSource(defaultSource: string): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_DITHER.
     * @param dither the dithering that is used
     */
    setDither(dither: string): void
    /**
     * Sets `key` to a double value.
     * @param key a key
     * @param value a double value
     */
    setDouble(key: string, value: number): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.
     * @param duplex a #GtkPrintDuplex value
     */
    setDuplex(duplex: PrintDuplex): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
     * @param finishings the finishings
     */
    setFinishings(finishings: string): void
    /**
     * Sets `key` to an integer value.
     * @param key a key
     * @param value an integer
     */
    setInt(key: string, value: number): void
    /**
     * Associates a length in units of `unit` with `key`.
     * @param key a key
     * @param value a length
     * @param unit the unit of `length`
     */
    setLength(key: string, value: number, unit: Unit): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.
     * 
     * The set of media types is defined in PWG 5101.1-2002 PWG.
     * <!-- FIXME link here -->
     * @param mediaType the media type
     */
    setMediaType(mediaType: string): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.
     * @param numCopies the number of copies
     */
    setNCopies(numCopies: number): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
     * @param numberUp the number of pages per sheet
     */
    setNumberUp(numberUp: number): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
     * @param numberUpLayout a #GtkNumberUpLayout value
     */
    setNumberUpLayout(numberUpLayout: NumberUpLayout): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.
     * @param orientation a page orientation
     */
    setOrientation(orientation: PageOrientation): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
     * @param outputBin the output bin
     */
    setOutputBin(outputBin: string): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
     * @param pageRanges an array of #GtkPageRange<!-- -->s
     */
    setPageRanges(pageRanges: PageRange[]): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
     * @param pageSet a #GtkPageSet value
     */
    setPageSet(pageSet: PageSet): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
     * @param height the paper height
     * @param unit the units of `height`
     */
    setPaperHeight(height: number, unit: Unit): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
     * %GTK_PRINT_SETTINGS_PAPER_WIDTH and
     * %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
     * @param paperSize a paper size
     */
    setPaperSize(paperSize: PaperSize): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.
     * @param width the paper width
     * @param unit the units of `width`
     */
    setPaperWidth(width: number, unit: Unit): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
     * @param pages a #GtkPrintPages value
     */
    setPrintPages(pages: PrintPages): void
    /**
     * Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
     * to `printer`.
     * @param printer the printer name
     */
    setPrinter(printer: string): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
     * @param lpi the resolution in lpi (lines per inch)
     */
    setPrinterLpi(lpi: number): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_QUALITY.
     * @param quality a #GtkPrintQuality value
     */
    setQuality(quality: PrintQuality): void
    /**
     * Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
     * %GTK_PRINT_SETTINGS_RESOLUTION_X and
     * %GTK_PRINT_SETTINGS_RESOLUTION_Y.
     * @param resolution the resolution in dpi
     */
    setResolution(resolution: number): void
    /**
     * Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
     * %GTK_PRINT_SETTINGS_RESOLUTION_X and
     * %GTK_PRINT_SETTINGS_RESOLUTION_Y.
     * @param resolutionX the horizontal resolution in dpi
     * @param resolutionY the vertical resolution in dpi
     */
    setResolutionXy(resolutionX: number, resolutionY: number): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_REVERSE.
     * @param reverse whether to reverse the output
     */
    setReverse(reverse: boolean): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_SCALE.
     * @param scale the scale in percent
     */
    setScale(scale: number): void
    /**
     * Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
     * @param useColor whether to use color
     */
    setUseColor(useColor: boolean): void
    /**
     * This function saves the print settings from `settings` to `file_name`. If the
     * file could not be loaded then error is set to either a #GFileError or
     * #GKeyFileError.
     * @param fileName the file to save to
     */
    toFile(fileName: string): boolean
    /**
     * This function adds the print settings from `settings` to `key_file`.
     * @param keyFile the #GKeyFile to save the print settings to
     * @param groupName the group to add the settings to in `key_file,` or     %NULL to use the default "Print Settings"
     */
    toKeyFile(keyFile: GLib.KeyFile, groupName: string): void
    /**
     * Removes any value associated with `key`.
     * This has the same effect as setting the value to %NULL.
     * @param key a key
     */
    unset(key: string): void

    // Class property signals of Gtk-2.0.Gtk.PrintSettings

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class PrintSettings extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.PrintSettings

    static name: string

    // Constructors of Gtk-2.0.Gtk.PrintSettings

    constructor(config?: PrintSettings.ConstructorProperties) 
    /**
     * Creates a new #GtkPrintSettings object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkPrintSettings object.
     * @constructor 
     */
    static new(): PrintSettings
    /**
     * Reads the print settings from `file_name`. Returns a new #GtkPrintSettings
     * object with the restored settings, or %NULL if an error occurred. If the
     * file could not be loaded then error is set to either a #GFileError or
     * #GKeyFileError.  See gtk_print_settings_to_file().
     * @constructor 
     * @param fileName the filename to read the settings from
     */
    static newFromFile(fileName: string): PrintSettings
    /**
     * Reads the print settings from the group `group_name` in `key_file`.  Returns a
     * new #GtkPrintSettings object with the restored settings, or %NULL if an
     * error occurred. If the file could not be loaded then error is set to either
     * a #GFileError or #GKeyFileError.
     * @constructor 
     * @param keyFile the #GKeyFile to retrieve the settings from
     * @param groupName the name of the group to use, or %NULL to use     the default "Print Settings"
     */
    static newFromKeyFile(keyFile: GLib.KeyFile, groupName: string | null): PrintSettings
    _init(config?: PrintSettings.ConstructorProperties): void
}

export module Progress {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Progress

        activityMode?: boolean | null
        showText?: boolean | null
        textXalign?: number | null
        textYalign?: number | null
    }

}

export interface Progress extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Progress

    textXalign: number
    textYalign: number

    // Own fields of Gtk-2.0.Gtk.Progress

    widget: Widget
    adjustment: Adjustment
    offscreenPixmap: Gdk.Pixmap
    format: string
    xAlign: number
    yAlign: number
    showText: number
    activityMode: number
    useTextFormat: number

    // Owm methods of Gtk-2.0.Gtk.Progress

    configure(value: number, min: number, max: number): void
    getCurrentPercentage(): number
    getCurrentText(): string
    getPercentageFromValue(value: number): number
    getTextFromValue(value: number): string
    getValue(): number
    setActivityMode(activityMode: boolean): void
    setAdjustment(adjustment: Adjustment): void
    setFormatString(format: string): void
    setPercentage(percentage: number): void
    setShowText(showText: boolean): void
    setTextAlignment(xAlign: number, yAlign: number): void
    setValue(value: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Progress

    actModeEnter(): void
    paint(): void
    update(): void

    // Class property signals of Gtk-2.0.Gtk.Progress

    connect(sigName: "notify::text-xalign", callback: any): number
    on(sigName: "notify::text-xalign", callback: any): number
    once(sigName: "notify::text-xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-xalign", ...args: any[]): void
    connect(sigName: "notify::text-yalign", callback: any): number
    on(sigName: "notify::text-yalign", callback: any): number
    once(sigName: "notify::text-yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-yalign", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Progress extends Widget {

    // Own properties of Gtk-2.0.Gtk.Progress

    static name: string

    // Constructors of Gtk-2.0.Gtk.Progress

    constructor(config?: Progress.ConstructorProperties) 
    _init(config?: Progress.ConstructorProperties): void
}

export module ProgressBar {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Progress.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ProgressBar

        activityBlocks?: number | null
        activityStep?: number | null
        adjustment?: Adjustment | null
        barStyle?: ProgressBarStyle | null
        discreteBlocks?: number | null
        /**
         * The preferred place to ellipsize the string, if the progressbar does
         * not have enough room to display the entire string, specified as a
         * #PangoEllisizeMode.
         * 
         * Note that setting this property to a value other than
         * %PANGO_ELLIPSIZE_NONE has the side-effect that the progressbar requests
         * only enough space to display the ellipsis "...". Another means to set a
         * progressbar's width is gtk_widget_set_size_request().
         */
        ellipsize?: Pango.EllipsizeMode | null
        fraction?: number | null
        orientation?: ProgressBarOrientation | null
        pulseStep?: number | null
        text?: string | null
    }

}

export interface ProgressBar extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.ProgressBar

    adjustment: Adjustment
    discreteBlocks: number
    fraction: number
    pulseStep: number
    text: string

    // Own fields of Gtk-2.0.Gtk.ProgressBar

    progress: Progress
    barStyle: ProgressBarStyle
    orientation: ProgressBarOrientation
    blocks: number
    inBlock: number
    activityPos: number
    activityStep: number
    activityBlocks: number
    pulseFraction: number
    activityDir: number
    ellipsize: number
    dirty: number

    // Owm methods of Gtk-2.0.Gtk.ProgressBar

    /**
     * Returns the ellipsizing position of the progressbar.
     * See gtk_progress_bar_set_ellipsize().
     */
    getEllipsize(): Pango.EllipsizeMode
    /**
     * Returns the current fraction of the task that's been completed.
     */
    getFraction(): number
    /**
     * Retrieves the current progress bar orientation.
     */
    getOrientation(): ProgressBarOrientation
    /**
     * Retrieves the pulse step set with gtk_progress_bar_set_pulse_step()
     */
    getPulseStep(): number
    /**
     * Retrieves the text displayed superimposed on the progress bar,
     * if any, otherwise %NULL. The return value is a reference
     * to the text, not a copy of it, so will become invalid
     * if you change the text in the progress bar.
     */
    getText(): string
    /**
     * Indicates that some progress is made, but you don't know how much.
     * Causes the progress bar to enter "activity mode," where a block
     * bounces back and forth. Each call to gtk_progress_bar_pulse()
     * causes the block to move by a little bit (the amount of movement
     * per pulse is determined by gtk_progress_bar_set_pulse_step()).
     */
    pulse(): void
    setActivityBlocks(blocks: number): void
    setActivityStep(step: number): void
    setBarStyle(style: ProgressBarStyle): void
    setDiscreteBlocks(blocks: number): void
    /**
     * Sets the mode used to ellipsize (add an ellipsis: "...") the text
     * if there is not enough space to render the entire string.
     * @param mode a #PangoEllipsizeMode
     */
    setEllipsize(mode: Pango.EllipsizeMode): void
    /**
     * Causes the progress bar to "fill in" the given fraction
     * of the bar. The fraction should be between 0.0 and 1.0,
     * inclusive.
     * @param fraction fraction of the task that's been completed
     */
    setFraction(fraction: number): void
    /**
     * Causes the progress bar to switch to a different orientation
     * (left-to-right, right-to-left, top-to-bottom, or bottom-to-top).
     * @param orientation orientation of the progress bar
     */
    setOrientation(orientation: ProgressBarOrientation): void
    /**
     * Sets the fraction of total progress bar length to move the
     * bouncing block for each call to gtk_progress_bar_pulse().
     * @param fraction fraction between 0.0 and 1.0
     */
    setPulseStep(fraction: number): void
    /**
     * Causes the given `text` to appear superimposed on the progress bar.
     * @param text a UTF-8 string, or %NULL
     */
    setText(text: string | null): void
    update(percentage: number): void

    // Overloads of update

    update(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ProgressBar

    connect(sigName: "notify::adjustment", callback: any): number
    on(sigName: "notify::adjustment", callback: any): number
    once(sigName: "notify::adjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::adjustment", ...args: any[]): void
    connect(sigName: "notify::discrete-blocks", callback: any): number
    on(sigName: "notify::discrete-blocks", callback: any): number
    once(sigName: "notify::discrete-blocks", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::discrete-blocks", ...args: any[]): void
    connect(sigName: "notify::fraction", callback: any): number
    on(sigName: "notify::fraction", callback: any): number
    once(sigName: "notify::fraction", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fraction", ...args: any[]): void
    connect(sigName: "notify::pulse-step", callback: any): number
    on(sigName: "notify::pulse-step", callback: any): number
    once(sigName: "notify::pulse-step", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pulse-step", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::text-xalign", callback: any): number
    on(sigName: "notify::text-xalign", callback: any): number
    once(sigName: "notify::text-xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-xalign", ...args: any[]): void
    connect(sigName: "notify::text-yalign", callback: any): number
    on(sigName: "notify::text-yalign", callback: any): number
    once(sigName: "notify::text-yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text-yalign", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ProgressBar extends Progress {

    // Own properties of Gtk-2.0.Gtk.ProgressBar

    static name: string

    // Constructors of Gtk-2.0.Gtk.ProgressBar

    constructor(config?: ProgressBar.ConstructorProperties) 
    /**
     * Creates a new #GtkProgressBar.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkProgressBar.
     * @constructor 
     */
    static new(): ProgressBar
    /**
     * Creates a new #GtkProgressBar with an associated #GtkAdjustment.
     * @constructor 
     * @param adjustment 
     */
    static newWithAdjustment(adjustment: Adjustment | null): ProgressBar
    _init(config?: ProgressBar.ConstructorProperties): void
}

export module RadioAction {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (current: RadioAction): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, ToggleAction.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RadioAction

        /**
         * The value property of the currently active member of the group to which
         * this action belongs.
         */
        currentValue?: number | null
        /**
         * Sets a new group for a radio action.
         */
        group?: RadioAction | null
        /**
         * The value is an arbitrary integer which can be used as a
         * convenient way to determine which action in the group is
         * currently active in an ::activate or ::changed signal handler.
         * See gtk_radio_action_get_current_value() and #GtkRadioActionEntry
         * for convenient ways to get and set this property.
         */
        value?: number | null
    }

}

export interface RadioAction extends Buildable {

    // Own properties of Gtk-2.0.Gtk.RadioAction

    /**
     * The value property of the currently active member of the group to which
     * this action belongs.
     */
    currentValue: number
    /**
     * Sets a new group for a radio action.
     */
    group: RadioAction
    /**
     * The value is an arbitrary integer which can be used as a
     * convenient way to determine which action in the group is
     * currently active in an ::activate or ::changed signal handler.
     * See gtk_radio_action_get_current_value() and #GtkRadioActionEntry
     * for convenient ways to get and set this property.
     */
    value: number

    // Own fields of Gtk-2.0.Gtk.RadioAction

    parent: ToggleAction & Action

    // Owm methods of Gtk-2.0.Gtk.RadioAction

    /**
     * Obtains the value property of the currently active member of
     * the group to which `action` belongs.
     */
    getCurrentValue(): number
    /**
     * Returns the list representing the radio group for this object.
     * Note that the returned list is only valid until the next change
     * to the group.
     * 
     * A common way to set up a group of radio group is the following:
     * |[
     *   GSList *group = NULL;
     *   GtkRadioAction *action;
     *  
     *   while (/&ast; more actions to add &ast;/)
     *     {
     *        action = gtk_radio_action_new (...);
     *        
     *        gtk_radio_action_set_group (action, group);
     *        group = gtk_radio_action_get_group (action);
     *     }
     * ```
     * 
     */
    getGroup(): Action[]
    /**
     * Sets the currently active group member to the member with value
     * property `current_value`.
     * @param currentValue the new value
     */
    setCurrentValue(currentValue: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Returns the name of the action.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string

    // Own virtual methods of Gtk-2.0.Gtk.RadioAction

    changed(current: RadioAction): void

    // Own signals of Gtk-2.0.Gtk.RadioAction

    connect(sigName: "changed", callback: RadioAction.ChangedSignalCallback): number
    on(sigName: "changed", callback: RadioAction.ChangedSignalCallback): number
    once(sigName: "changed", callback: RadioAction.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.RadioAction

    connect(sigName: "notify::current-value", callback: any): number
    on(sigName: "notify::current-value", callback: any): number
    once(sigName: "notify::current-value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::current-value", ...args: any[]): void
    connect(sigName: "notify::group", callback: any): number
    on(sigName: "notify::group", callback: any): number
    once(sigName: "notify::group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::group", ...args: any[]): void
    connect(sigName: "notify::value", callback: any): number
    on(sigName: "notify::value", callback: any): number
    once(sigName: "notify::value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::draw-as-radio", callback: any): number
    on(sigName: "notify::draw-as-radio", callback: any): number
    once(sigName: "notify::draw-as-radio", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::draw-as-radio", ...args: any[]): void
    connect(sigName: "notify::action-group", callback: any): number
    on(sigName: "notify::action-group", callback: any): number
    once(sigName: "notify::action-group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action-group", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: any): number
    on(sigName: "notify::always-show-image", callback: any): number
    once(sigName: "notify::always-show-image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::hide-if-empty", callback: any): number
    on(sigName: "notify::hide-if-empty", callback: any): number
    once(sigName: "notify::hide-if-empty", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hide-if-empty", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::name", callback: any): number
    on(sigName: "notify::name", callback: any): number
    once(sigName: "notify::name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::short-label", callback: any): number
    on(sigName: "notify::short-label", callback: any): number
    once(sigName: "notify::short-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::short-label", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::tooltip", callback: any): number
    on(sigName: "notify::tooltip", callback: any): number
    once(sigName: "notify::tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-overflown", callback: any): number
    on(sigName: "notify::visible-overflown", callback: any): number
    once(sigName: "notify::visible-overflown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-overflown", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RadioAction extends ToggleAction {

    // Own properties of Gtk-2.0.Gtk.RadioAction

    static name: string

    // Constructors of Gtk-2.0.Gtk.RadioAction

    constructor(config?: RadioAction.ConstructorProperties) 
    /**
     * Creates a new #GtkRadioAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name A unique name for the action
     * @param label The label displayed in menu items and on buttons, or %NULL
     * @param tooltip A tooltip for this action, or %NULL
     * @param stockId The stock icon to display in widgets representing this   action, or %NULL
     * @param value The value which gtk_radio_action_get_current_value() should   return if this action is selected.
     */
    constructor(name: string, label: string | null, tooltip: string | null, stockId: string, value: number) 
    /**
     * Creates a new #GtkRadioAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name A unique name for the action
     * @param label The label displayed in menu items and on buttons, or %NULL
     * @param tooltip A tooltip for this action, or %NULL
     * @param stockId The stock icon to display in widgets representing this   action, or %NULL
     * @param value The value which gtk_radio_action_get_current_value() should   return if this action is selected.
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string, value: number): RadioAction

    // Overloads of new

    /**
     * Creates a new #GtkToggleAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name A unique name for the action
     * @param label The label displayed in menu items and on buttons, or %NULL
     * @param tooltip A tooltip for the action, or %NULL
     * @param stockId The stock icon to display in widgets representing the   action, or %NULL
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string): ToggleAction
    /**
     * Creates a new #GtkAction object. To add the action to a
     * #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * See <xref linkend="XML-UI"/> for information on allowed action
     * names.
     * @constructor 
     * @param name A unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string): Action
    _init(config?: RadioAction.ConstructorProperties): void
}

export module RadioButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `group-changed`
     */
    export interface GroupChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, CheckButton.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RadioButton

        group?: RadioButton | null
    }

}

export interface RadioButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.RadioButton

    checkButton: CheckButton
    group: object[]

    // Owm methods of Gtk-2.0.Gtk.RadioButton

    /**
     * Retrieves the group assigned to a radio button.
     */
    getGroup(): RadioButton[]
    /**
     * Creates a new #GtkRadioButton, adding it to the same group as
     * `radio_group_member`. As with gtk_radio_button_new(), a widget
     * should be packed into the radio button.
     */
    newFromWidget(): Widget
    /**
     * Sets a #GtkRadioButton's group. It should be noted that this does not change
     * the layout of your interface in any way, so if you are changing the group,
     * it is likely you will need to re-arrange the user interface to reflect these
     * changes.
     * @param group an existing radio     button group, such as one returned from gtk_radio_button_get_group().
     */
    setGroup(group: RadioButton[]): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.RadioButton

    groupChanged(): void

    // Own signals of Gtk-2.0.Gtk.RadioButton

    connect(sigName: "group-changed", callback: RadioButton.GroupChangedSignalCallback): number
    on(sigName: "group-changed", callback: RadioButton.GroupChangedSignalCallback): number
    once(sigName: "group-changed", callback: RadioButton.GroupChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "group-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.RadioButton

    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RadioButton extends CheckButton {

    // Own properties of Gtk-2.0.Gtk.RadioButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.RadioButton

    constructor(config?: RadioButton.ConstructorProperties) 
    /**
     * Creates a new #GtkRadioButton with a text label, adding it to
     * the same group as `radio_group_member`.
     * @constructor 
     * @param radioGroupMember widget to get radio group from or %NULL
     * @param label a text string to display next to the radio button.
     */
    static newWithLabelFromWidget(radioGroupMember: RadioButton | null, label: string): RadioButton
    /**
     * Creates a new #GtkRadioButton containing a label. The label
     * will be created using gtk_label_new_with_mnemonic(), so underscores
     * in `label` indicate the mnemonic for the button.
     * @constructor 
     * @param radioGroupMember widget to get radio group from or %NULL
     * @param label the text of the button, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonicFromWidget(radioGroupMember: RadioButton | null, label: string): RadioButton
    _init(config?: RadioButton.ConstructorProperties): void
}

export module RadioMenuItem {

    // Signal callback interfaces

    /**
     * Signal callback interface for `group-changed`
     */
    export interface GroupChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, CheckMenuItem.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RadioMenuItem

        /**
         * The radio menu item whose group this widget belongs to.
         */
        group?: RadioMenuItem | null
    }

}

export interface RadioMenuItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.RadioMenuItem

    checkMenuItem: CheckMenuItem
    group: object[]

    // Owm methods of Gtk-2.0.Gtk.RadioMenuItem

    /**
     * Creates a new #GtkRadioMenuItem adding it to the same group as `group`.
     */
    newFromWidget(): Widget
    /**
     * Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.
     * The new #GtkRadioMenuItem is added to the same group as `group`.
     * @param label the text for the label
     */
    newWithLabelFromWidget(label: string): Widget
    /**
     * Creates a new GtkRadioMenuItem containing a label. The label will be
     * created using gtk_label_new_with_mnemonic(), so underscores in label
     * indicate the mnemonic for the menu item.
     * 
     * The new #GtkRadioMenuItem is added to the same group as `group`.
     * @param label the text of the button, with an underscore in front of the         mnemonic character
     */
    newWithMnemonicFromWidget(label: string): Widget

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    deselect(): void

    // Overloads of deselect

    deselect(): void
    deselect(): void
    select(): void

    // Overloads of select

    select(): void
    select(): void
    /**
     * Set the accelerator path on `menu_item,` through which runtime changes of the
     * menu item's accelerator caused by the user can be identified and saved to
     * persistant storage (see gtk_accel_map_save() on this).
     * To setup a default accelerator for this menu item, call
     * gtk_accel_map_add_entry() with the same `accel_path`.
     * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
     * and gtk_menu_set_accel_path() for a more convenient variant of this function.
     * 
     * This function is basically a convenience wrapper that handles calling
     * gtk_widget_set_accel_path() with the appropriate accelerator group for
     * the menu item.
     * 
     * Note that you do need to set an accelerator on the parent menu with
     * gtk_menu_set_accel_group() for this to work.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath accelerator path, corresponding to this menu item's              functionality, or %NULL to unset the current path.
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.RadioMenuItem

    groupChanged(): void

    // Own signals of Gtk-2.0.Gtk.RadioMenuItem

    connect(sigName: "group-changed", callback: RadioMenuItem.GroupChangedSignalCallback): number
    on(sigName: "group-changed", callback: RadioMenuItem.GroupChangedSignalCallback): number
    once(sigName: "group-changed", callback: RadioMenuItem.GroupChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "group-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.RadioMenuItem

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::right-justified", callback: any): number
    on(sigName: "notify::right-justified", callback: any): number
    once(sigName: "notify::right-justified", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-justified", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RadioMenuItem extends CheckMenuItem {

    // Own properties of Gtk-2.0.Gtk.RadioMenuItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.RadioMenuItem

    constructor(config?: RadioMenuItem.ConstructorProperties) 
    /**
     * Creates a new #GtkRadioMenuItem whose child is a simple #GtkLabel.
     * @constructor 
     * @param group 
     * @param label the text for the label
     */
    static newWithLabel(group: RadioMenuItem[], label: string): RadioMenuItem

    // Overloads of newWithLabel

    static newWithLabel(label: string): CheckMenuItem
    _init(config?: RadioMenuItem.ConstructorProperties): void
}

export module RadioToolButton {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, ToggleToolButton.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RadioToolButton

        /**
         * Sets a new group for a radio tool button.
         */
        group?: RadioToolButton | null
    }

}

export interface RadioToolButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.RadioToolButton

    /**
     * Sets a new group for a radio tool button.
     */
    group: RadioToolButton

    // Own fields of Gtk-2.0.Gtk.RadioToolButton

    parent: ToggleToolButton & ToolButton & ToolItem & Bin & Widget & Widget

    // Owm methods of Gtk-2.0.Gtk.RadioToolButton

    /**
     * Creates a new #GtkRadioToolButton adding it to the same group as `gruup`
     */
    newFromWidget(): ToolItem
    /**
     * Creates a new #GtkRadioToolButton adding it to the same group as `group`.
     * The new #GtkRadioToolButton will contain an icon and label from the
     * stock item indicated by `stock_id`.
     * @param stockId the name of a stock item
     */
    newWithStockFromWidget(stockId: string): ToolItem

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the markup text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_markup().
     * @param markup markup text to be used as tooltip for `tool_item`
     */
    setTooltipMarkup(markup: string): void

    // Overloads of setTooltipMarkup

    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.RadioToolButton

    connect(sigName: "notify::group", callback: any): number
    on(sigName: "notify::group", callback: any): number
    once(sigName: "notify::group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::group", ...args: any[]): void
    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::icon-widget", callback: any): number
    on(sigName: "notify::icon-widget", callback: any): number
    once(sigName: "notify::icon-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-widget", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::label-widget", callback: any): number
    on(sigName: "notify::label-widget", callback: any): number
    once(sigName: "notify::label-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-widget", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RadioToolButton extends ToggleToolButton {

    // Own properties of Gtk-2.0.Gtk.RadioToolButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.RadioToolButton

    constructor(config?: RadioToolButton.ConstructorProperties) 
    _init(config?: RadioToolButton.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

export module Range {

    // Signal callback interfaces

    /**
     * Signal callback interface for `adjust-bounds`
     */
    export interface AdjustBoundsSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `change-value`
     */
    export interface ChangeValueSignalCallback {
        (scroll: ScrollType, value: number): boolean
    }

    /**
     * Signal callback interface for `move-slider`
     */
    export interface MoveSliderSignalCallback {
        (step: ScrollType): void
    }

    /**
     * Signal callback interface for `value-changed`
     */
    export interface ValueChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Range

        adjustment?: Adjustment | null
        /**
         * The fill level (e.g. prebuffering of a network stream).
         * See gtk_range_set_fill_level().
         */
        fillLevel?: number | null
        inverted?: boolean | null
        lowerStepperSensitivity?: SensitivityType | null
        /**
         * The restrict-to-fill-level property controls whether slider
         * movement is restricted to an upper boundary set by the
         * fill level. See gtk_range_set_restrict_to_fill_level().
         */
        restrictToFillLevel?: boolean | null
        /**
         * The number of digits to round the value to when
         * it changes, or -1. See #GtkRange::change-value.
         */
        roundDigits?: number | null
        /**
         * The show-fill-level property controls whether fill level indicator
         * graphics are displayed on the trough. See
         * gtk_range_set_show_fill_level().
         */
        showFillLevel?: boolean | null
        updatePolicy?: UpdateType | null
        upperStepperSensitivity?: SensitivityType | null
    }

}

export interface Range extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.Range

    /**
     * The fill level (e.g. prebuffering of a network stream).
     * See gtk_range_set_fill_level().
     */
    fillLevel: number
    lowerStepperSensitivity: SensitivityType
    /**
     * The restrict-to-fill-level property controls whether slider
     * movement is restricted to an upper boundary set by the
     * fill level. See gtk_range_set_restrict_to_fill_level().
     */
    restrictToFillLevel: boolean
    /**
     * The show-fill-level property controls whether fill level indicator
     * graphics are displayed on the trough. See
     * gtk_range_set_show_fill_level().
     */
    showFillLevel: boolean
    upperStepperSensitivity: SensitivityType

    // Own fields of Gtk-2.0.Gtk.Range

    widget: Widget
    adjustment: Adjustment
    updatePolicy: UpdateType
    inverted: number
    flippable: number
    hasStepperA: number
    hasStepperB: number
    hasStepperC: number
    hasStepperD: number
    needRecalc: number
    sliderSizeFixed: number
    minSliderSize: number
    orientation: Orientation
    rangeRect: Gdk.Rectangle
    sliderStart: number
    sliderEnd: number
    roundDigits: number

    // Owm methods of Gtk-2.0.Gtk.Range

    /**
     * Get the #GtkAdjustment which is the "model" object for #GtkRange.
     * See gtk_range_set_adjustment() for details.
     * The return value does not have a reference added, so should not
     * be unreferenced.
     */
    getAdjustment(): Adjustment
    /**
     * Gets the current position of the fill level indicator.
     */
    getFillLevel(): number
    /**
     * Gets the value set by gtk_range_set_flippable().
     */
    getFlippable(): boolean
    /**
     * Gets the value set by gtk_range_set_inverted().
     */
    getInverted(): boolean
    /**
     * Gets the sensitivity policy for the stepper that points to the
     * 'lower' end of the GtkRange's adjustment.
     */
    getLowerStepperSensitivity(): SensitivityType
    /**
     * This function is useful mainly for #GtkRange subclasses.
     * 
     * See gtk_range_set_min_slider_size().
     */
    getMinSliderSize(): number
    /**
     * This function returns the area that contains the range's trough
     * and its steppers, in widget->window coordinates.
     * 
     * This function is useful mainly for #GtkRange subclasses.
     */
    getRangeRect(): /* rangeRect */ Gdk.Rectangle
    /**
     * Gets whether the range is restricted to the fill level.
     */
    getRestrictToFillLevel(): boolean
    /**
     * Gets the number of digits to round the value to when
     * it changes. See #GtkRange::change-value.
     */
    getRoundDigits(): number
    /**
     * Gets whether the range displays the fill level graphically.
     */
    getShowFillLevel(): boolean
    /**
     * This function returns sliders range along the long dimension,
     * in widget->window coordinates.
     * 
     * This function is useful mainly for #GtkRange subclasses.
     */
    getSliderRange(): [ /* sliderStart */ number, /* sliderEnd */ number ]
    /**
     * This function is useful mainly for #GtkRange subclasses.
     * 
     * See gtk_range_set_slider_size_fixed().
     */
    getSliderSizeFixed(): boolean
    /**
     * Gets the update policy of `range`. See gtk_range_set_update_policy().
     */
    getUpdatePolicy(): UpdateType
    /**
     * Gets the sensitivity policy for the stepper that points to the
     * 'upper' end of the GtkRange's adjustment.
     */
    getUpperStepperSensitivity(): SensitivityType
    /**
     * Gets the current value of the range.
     */
    getValue(): number
    /**
     * Sets the adjustment to be used as the "model" object for this range
     * widget. The adjustment indicates the current range value, the
     * minimum and maximum range values, the step/page increments used
     * for keybindings and scrolling, and the page size. The page size
     * is normally 0 for #GtkScale and nonzero for #GtkScrollbar, and
     * indicates the size of the visible area of the widget being scrolled.
     * The page size affects the size of the scrollbar slider.
     * @param adjustment a #GtkAdjustment
     */
    setAdjustment(adjustment: Adjustment): void
    /**
     * Set the new position of the fill level indicator.
     * 
     * The "fill level" is probably best described by its most prominent
     * use case, which is an indicator for the amount of pre-buffering in
     * a streaming media player. In that use case, the value of the range
     * would indicate the current play position, and the fill level would
     * be the position up to which the file/stream has been downloaded.
     * 
     * This amount of prebuffering can be displayed on the range's trough
     * and is themeable separately from the trough. To enable fill level
     * display, use gtk_range_set_show_fill_level(). The range defaults
     * to not showing the fill level.
     * 
     * Additionally, it's possible to restrict the range's slider position
     * to values which are smaller than the fill level. This is controller
     * by gtk_range_set_restrict_to_fill_level() and is by default
     * enabled.
     * @param fillLevel the new position of the fill level indicator
     */
    setFillLevel(fillLevel: number): void
    /**
     * If a range is flippable, it will switch its direction if it is
     * horizontal and its direction is %GTK_TEXT_DIR_RTL.
     * 
     * See gtk_widget_get_direction().
     * @param flippable %TRUE to make the range flippable
     */
    setFlippable(flippable: boolean): void
    /**
     * Sets the step and page sizes for the range.
     * The step size is used when the user clicks the #GtkScrollbar
     * arrows or moves #GtkScale via arrow keys. The page size
     * is used for example when moving via Page Up or Page Down keys.
     * @param step step size
     * @param page page size
     */
    setIncrements(step: number, page: number): void
    /**
     * Ranges normally move from lower to higher values as the
     * slider moves from top to bottom or left to right. Inverted
     * ranges have higher values at the top or on the right rather than
     * on the bottom or left.
     * @param setting %TRUE to invert the range
     */
    setInverted(setting: boolean): void
    /**
     * Sets the sensitivity policy for the stepper that points to the
     * 'lower' end of the GtkRange's adjustment.
     * @param sensitivity the lower stepper's sensitivity policy.
     */
    setLowerStepperSensitivity(sensitivity: SensitivityType): void
    /**
     * Sets the minimum size of the range's slider.
     * 
     * This function is useful mainly for #GtkRange subclasses.
     * @param minSize The slider's minimum size
     */
    setMinSliderSize(minSize: boolean): void
    /**
     * Sets the allowable values in the #GtkRange, and clamps the range
     * value to be between `min` and `max`. (If the range has a non-zero
     * page size, it is clamped between `min` and `max` - page-size.)
     * @param min minimum range value
     * @param max maximum range value
     */
    setRange(min: number, max: number): void
    /**
     * Sets whether the slider is restricted to the fill level. See
     * gtk_range_set_fill_level() for a general description of the fill
     * level concept.
     * @param restrictToFillLevel Whether the fill level restricts slider movement.
     */
    setRestrictToFillLevel(restrictToFillLevel: boolean): void
    /**
     * Sets the number of digits to round the value to when
     * it changes. See #GtkRange::change-value.
     * @param roundDigits the precision in digits, or -1
     */
    setRoundDigits(roundDigits: number): void
    /**
     * Sets whether a graphical fill level is show on the trough. See
     * gtk_range_set_fill_level() for a general description of the fill
     * level concept.
     * @param showFillLevel Whether a fill level indicator graphics is shown.
     */
    setShowFillLevel(showFillLevel: boolean): void
    /**
     * Sets whether the range's slider has a fixed size, or a size that
     * depends on it's adjustment's page size.
     * 
     * This function is useful mainly for #GtkRange subclasses.
     * @param sizeFixed %TRUE to make the slider size constant
     */
    setSliderSizeFixed(sizeFixed: boolean): void
    /**
     * Sets the update policy for the range. #GTK_UPDATE_CONTINUOUS means that
     * anytime the range slider is moved, the range value will change and the
     * value_changed signal will be emitted. #GTK_UPDATE_DELAYED means that
     * the value will be updated after a brief timeout where no slider motion
     * occurs, so updates are spaced by a short time rather than
     * continuous. #GTK_UPDATE_DISCONTINUOUS means that the value will only
     * be updated when the user releases the button and ends the slider
     * drag operation.
     * @param policy update policy
     */
    setUpdatePolicy(policy: UpdateType): void
    /**
     * Sets the sensitivity policy for the stepper that points to the
     * 'upper' end of the GtkRange's adjustment.
     * @param sensitivity the upper stepper's sensitivity policy.
     */
    setUpperStepperSensitivity(sensitivity: SensitivityType): void
    /**
     * Sets the current value of the range; if the value is outside the
     * minimum or maximum range values, it will be clamped to fit inside
     * them. The range emits the #GtkRange::value-changed signal if the
     * value changes.
     * @param value new value of the range
     */
    setValue(value: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Range

    adjustBounds(newValue: number): void
    changeValue(scroll: ScrollType, newValue: number): boolean
    getRangeBorder(border: Border): void
    moveSlider(scroll: ScrollType): void
    valueChanged(): void

    // Own signals of Gtk-2.0.Gtk.Range

    connect(sigName: "adjust-bounds", callback: Range.AdjustBoundsSignalCallback): number
    on(sigName: "adjust-bounds", callback: Range.AdjustBoundsSignalCallback): number
    once(sigName: "adjust-bounds", callback: Range.AdjustBoundsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "adjust-bounds", ...args: any[]): void
    connect(sigName: "change-value", callback: Range.ChangeValueSignalCallback): number
    on(sigName: "change-value", callback: Range.ChangeValueSignalCallback): number
    once(sigName: "change-value", callback: Range.ChangeValueSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "change-value", value: number, ...args: any[]): void
    connect(sigName: "move-slider", callback: Range.MoveSliderSignalCallback): number
    on(sigName: "move-slider", callback: Range.MoveSliderSignalCallback): number
    once(sigName: "move-slider", callback: Range.MoveSliderSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-slider", ...args: any[]): void
    connect(sigName: "value-changed", callback: Range.ValueChangedSignalCallback): number
    on(sigName: "value-changed", callback: Range.ValueChangedSignalCallback): number
    once(sigName: "value-changed", callback: Range.ValueChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "value-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Range

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Range extends Widget {

    // Own properties of Gtk-2.0.Gtk.Range

    static name: string

    // Constructors of Gtk-2.0.Gtk.Range

    constructor(config?: Range.ConstructorProperties) 
    _init(config?: Range.ConstructorProperties): void
}

export module RcStyle {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface RcStyle {

    // Own fields of Gtk-2.0.Gtk.RcStyle

    parentInstance: GObject.Object
    name: string
    bgPixmapName: string[]
    fontDesc: Pango.FontDescription
    colorFlags: RcFlags[]
    fg: Gdk.Color[]
    bg: Gdk.Color[]
    text: Gdk.Color[]
    base: Gdk.Color[]
    xthickness: number
    ythickness: number

    // Owm methods of Gtk-2.0.Gtk.RcStyle

    /**
     * Makes a copy of the specified #GtkRcStyle. This function
     * will correctly copy an RC style that is a member of a class
     * derived from #GtkRcStyle.
     */
    copy(): RcStyle
    ref(): void

    // Overloads of ref

    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    unref(): void

    // Own virtual methods of Gtk-2.0.Gtk.RcStyle

    merge(src: RcStyle): void
    parse(settings: Settings, scanner: GLib.Scanner): number

    // Class property signals of Gtk-2.0.Gtk.RcStyle

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RcStyle extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.RcStyle

    static name: string

    // Constructors of Gtk-2.0.Gtk.RcStyle

    constructor(config?: RcStyle.ConstructorProperties) 
    constructor() 
    static new(): RcStyle
    _init(config?: RcStyle.ConstructorProperties): void
}

export module RecentAction {

    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, RecentChooser.ConstructorProperties, Action.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RecentAction

        showNumbers?: boolean | null
    }

}

export interface RecentAction extends Buildable, RecentChooser {

    // Own properties of Gtk-2.0.Gtk.RecentAction

    showNumbers: boolean

    // Own fields of Gtk-2.0.Gtk.RecentAction

    parentInstance: Action

    // Owm methods of Gtk-2.0.Gtk.RecentAction

    /**
     * Returns the value set by gtk_recent_chooser_menu_set_show_numbers().
     */
    getShowNumbers(): boolean
    /**
     * Sets whether a number should be added to the items shown by the
     * widgets representing `action`. The numbers are shown to provide
     * a unique character for a mnemonic to be used inside the menu item's
     * label. Only the first ten items get a number to avoid clashes.
     * @param showNumbers %TRUE if the shown items should be numbered
     */
    setShowNumbers(showNumbers: boolean): void

    // Conflicting methods

    /**
     * Returns the name of the action.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string

    // Class property signals of Gtk-2.0.Gtk.RecentAction

    connect(sigName: "notify::show-numbers", callback: any): number
    on(sigName: "notify::show-numbers", callback: any): number
    once(sigName: "notify::show-numbers", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-numbers", ...args: any[]): void
    connect(sigName: "notify::action-group", callback: any): number
    on(sigName: "notify::action-group", callback: any): number
    once(sigName: "notify::action-group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action-group", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: any): number
    on(sigName: "notify::always-show-image", callback: any): number
    once(sigName: "notify::always-show-image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::hide-if-empty", callback: any): number
    on(sigName: "notify::hide-if-empty", callback: any): number
    once(sigName: "notify::hide-if-empty", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hide-if-empty", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::name", callback: any): number
    on(sigName: "notify::name", callback: any): number
    once(sigName: "notify::name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::short-label", callback: any): number
    on(sigName: "notify::short-label", callback: any): number
    once(sigName: "notify::short-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::short-label", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::tooltip", callback: any): number
    on(sigName: "notify::tooltip", callback: any): number
    once(sigName: "notify::tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-overflown", callback: any): number
    on(sigName: "notify::visible-overflown", callback: any): number
    once(sigName: "notify::visible-overflown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-overflown", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::limit", callback: any): number
    on(sigName: "notify::limit", callback: any): number
    once(sigName: "notify::limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::limit", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::recent-manager", callback: any): number
    on(sigName: "notify::recent-manager", callback: any): number
    once(sigName: "notify::recent-manager", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::recent-manager", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-icons", callback: any): number
    on(sigName: "notify::show-icons", callback: any): number
    once(sigName: "notify::show-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-icons", ...args: any[]): void
    connect(sigName: "notify::show-not-found", callback: any): number
    on(sigName: "notify::show-not-found", callback: any): number
    once(sigName: "notify::show-not-found", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-not-found", ...args: any[]): void
    connect(sigName: "notify::show-private", callback: any): number
    on(sigName: "notify::show-private", callback: any): number
    once(sigName: "notify::show-private", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-private", ...args: any[]): void
    connect(sigName: "notify::show-tips", callback: any): number
    on(sigName: "notify::show-tips", callback: any): number
    once(sigName: "notify::show-tips", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-tips", ...args: any[]): void
    connect(sigName: "notify::sort-type", callback: any): number
    on(sigName: "notify::sort-type", callback: any): number
    once(sigName: "notify::sort-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sort-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentAction extends Action {

    // Own properties of Gtk-2.0.Gtk.RecentAction

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentAction

    constructor(config?: RecentAction.ConstructorProperties) 
    /**
     * Creates a new #GtkRecentAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name a unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     */
    constructor(name: string, label: string | null, tooltip: string | null, stockId: string) 
    /**
     * Creates a new #GtkRecentAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name a unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string): RecentAction
    /**
     * Creates a new #GtkRecentAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name a unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     * @param manager a #GtkRecentManager, or %NULL for using the default   #GtkRecentManager
     */
    static newForManager(name: string, label: string | null, tooltip: string | null, stockId: string, manager: RecentManager | null): RecentAction
    _init(config?: RecentAction.ConstructorProperties): void
}

export module RecentChooserDialog {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, RecentChooser.ConstructorProperties, Dialog.ConstructorProperties {
    }

}

export interface RecentChooserDialog extends Atk.ImplementorIface, Buildable, RecentChooser {

    // Conflicting properties

    hasFocus: any
    window: Window & Gdk.Window & Gdk.Window

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.RecentChooserDialog

    connect(sigName: "notify::has-separator", callback: any): number
    on(sigName: "notify::has-separator", callback: any): number
    once(sigName: "notify::has-separator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-separator", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::limit", callback: any): number
    on(sigName: "notify::limit", callback: any): number
    once(sigName: "notify::limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::limit", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::recent-manager", callback: any): number
    on(sigName: "notify::recent-manager", callback: any): number
    once(sigName: "notify::recent-manager", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::recent-manager", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-icons", callback: any): number
    on(sigName: "notify::show-icons", callback: any): number
    once(sigName: "notify::show-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-icons", ...args: any[]): void
    connect(sigName: "notify::show-not-found", callback: any): number
    on(sigName: "notify::show-not-found", callback: any): number
    once(sigName: "notify::show-not-found", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-not-found", ...args: any[]): void
    connect(sigName: "notify::show-private", callback: any): number
    on(sigName: "notify::show-private", callback: any): number
    once(sigName: "notify::show-private", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-private", ...args: any[]): void
    connect(sigName: "notify::show-tips", callback: any): number
    on(sigName: "notify::show-tips", callback: any): number
    once(sigName: "notify::show-tips", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-tips", ...args: any[]): void
    connect(sigName: "notify::sort-type", callback: any): number
    on(sigName: "notify::sort-type", callback: any): number
    once(sigName: "notify::sort-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sort-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentChooserDialog extends Dialog {

    // Own properties of Gtk-2.0.Gtk.RecentChooserDialog

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentChooserDialog

    constructor(config?: RecentChooserDialog.ConstructorProperties) 
    _init(config?: RecentChooserDialog.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

export module RecentChooserMenu {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, RecentChooser.ConstructorProperties, Menu.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RecentChooserMenu

        /**
         * Whether the first ten items in the menu should be prepended by
         * a number acting as a unique mnemonic.
         */
        showNumbers?: boolean | null
    }

}

export interface RecentChooserMenu extends Atk.ImplementorIface, Activatable, Buildable, RecentChooser {

    // Own properties of Gtk-2.0.Gtk.RecentChooserMenu

    /**
     * Whether the first ten items in the menu should be prepended by
     * a number acting as a unique mnemonic.
     */
    showNumbers: boolean

    // Owm methods of Gtk-2.0.Gtk.RecentChooserMenu

    /**
     * Returns the value set by gtk_recent_chooser_menu_set_show_numbers().
     */
    getShowNumbers(): boolean
    /**
     * Sets whether a number should be added to the items of `menu`.  The
     * numbers are shown to provide a unique character for a mnemonic to
     * be used inside ten menu item's label.  Only the first the items
     * get a number to avoid clashes.
     * @param showNumbers whether to show numbers
     */
    setShowNumbers(showNumbers: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets an accelerator path for this menu from which accelerator paths
     * for its immediate children, its menu items, can be constructed.
     * The main purpose of this function is to spare the programmer the
     * inconvenience of having to call gtk_menu_item_set_accel_path() on
     * each menu item that should support runtime user changable accelerators.
     * Instead, by just calling gtk_menu_set_accel_path() on their parent,
     * each menu item of this menu, that contains a label describing its purpose,
     * automatically gets an accel path assigned. For example, a menu containing
     * menu items "New" and "Exit", will, after
     * <literal>gtk_menu_set_accel_path (menu, "&lt;Gnumeric-Sheet&gt;/File");</literal>
     * has been called, assign its items the accel paths:
     * <literal>"&lt;Gnumeric-Sheet&gt;/File/New"</literal> and <literal>"&lt;Gnumeric-Sheet&gt;/File/Exit"</literal>.
     * Assigning accel paths to menu items then enables the user to change
     * their accelerators at runtime. More details about accelerator paths
     * and their default setups can be found at gtk_accel_map_add_entry().
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath a valid accelerator path
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.RecentChooserMenu

    connect(sigName: "notify::show-numbers", callback: any): number
    on(sigName: "notify::show-numbers", callback: any): number
    once(sigName: "notify::show-numbers", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-numbers", ...args: any[]): void
    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::attach-widget", callback: any): number
    on(sigName: "notify::attach-widget", callback: any): number
    once(sigName: "notify::attach-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attach-widget", ...args: any[]): void
    connect(sigName: "notify::monitor", callback: any): number
    on(sigName: "notify::monitor", callback: any): number
    once(sigName: "notify::monitor", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::monitor", ...args: any[]): void
    connect(sigName: "notify::reserve-toggle-size", callback: any): number
    on(sigName: "notify::reserve-toggle-size", callback: any): number
    once(sigName: "notify::reserve-toggle-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::reserve-toggle-size", ...args: any[]): void
    connect(sigName: "notify::tearoff-state", callback: any): number
    on(sigName: "notify::tearoff-state", callback: any): number
    once(sigName: "notify::tearoff-state", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-state", ...args: any[]): void
    connect(sigName: "notify::tearoff-title", callback: any): number
    on(sigName: "notify::tearoff-title", callback: any): number
    once(sigName: "notify::tearoff-title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tearoff-title", ...args: any[]): void
    connect(sigName: "notify::take-focus", callback: any): number
    on(sigName: "notify::take-focus", callback: any): number
    once(sigName: "notify::take-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::take-focus", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::limit", callback: any): number
    on(sigName: "notify::limit", callback: any): number
    once(sigName: "notify::limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::limit", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::recent-manager", callback: any): number
    on(sigName: "notify::recent-manager", callback: any): number
    once(sigName: "notify::recent-manager", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::recent-manager", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-icons", callback: any): number
    on(sigName: "notify::show-icons", callback: any): number
    once(sigName: "notify::show-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-icons", ...args: any[]): void
    connect(sigName: "notify::show-not-found", callback: any): number
    on(sigName: "notify::show-not-found", callback: any): number
    once(sigName: "notify::show-not-found", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-not-found", ...args: any[]): void
    connect(sigName: "notify::show-private", callback: any): number
    on(sigName: "notify::show-private", callback: any): number
    once(sigName: "notify::show-private", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-private", ...args: any[]): void
    connect(sigName: "notify::show-tips", callback: any): number
    on(sigName: "notify::show-tips", callback: any): number
    once(sigName: "notify::show-tips", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-tips", ...args: any[]): void
    connect(sigName: "notify::sort-type", callback: any): number
    on(sigName: "notify::sort-type", callback: any): number
    once(sigName: "notify::sort-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sort-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentChooserMenu extends Menu {

    // Own properties of Gtk-2.0.Gtk.RecentChooserMenu

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentChooserMenu

    constructor(config?: RecentChooserMenu.ConstructorProperties) 
    /**
     * Creates a new #GtkRecentChooserMenu widget.
     * 
     * This kind of widget shows the list of recently used resources as
     * a menu, each item as a menu item.  Each item inside the menu might
     * have an icon, representing its MIME type, and a number, for mnemonic
     * access.
     * 
     * This widget implements the #GtkRecentChooser interface.
     * 
     * This widget creates its own #GtkRecentManager object.  See the
     * gtk_recent_chooser_menu_new_for_manager() function to know how to create
     * a #GtkRecentChooserMenu widget bound to another #GtkRecentManager object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkRecentChooserMenu widget.
     * 
     * This kind of widget shows the list of recently used resources as
     * a menu, each item as a menu item.  Each item inside the menu might
     * have an icon, representing its MIME type, and a number, for mnemonic
     * access.
     * 
     * This widget implements the #GtkRecentChooser interface.
     * 
     * This widget creates its own #GtkRecentManager object.  See the
     * gtk_recent_chooser_menu_new_for_manager() function to know how to create
     * a #GtkRecentChooserMenu widget bound to another #GtkRecentManager object.
     * @constructor 
     */
    static new(): RecentChooserMenu
    /**
     * Creates a new #GtkRecentChooserMenu widget using `manager` as
     * the underlying recently used resources manager.
     * 
     * This is useful if you have implemented your own recent manager,
     * or if you have a customized instance of a #GtkRecentManager
     * object or if you wish to share a common #GtkRecentManager object
     * among multiple #GtkRecentChooser widgets.
     * @constructor 
     * @param manager a #GtkRecentManager
     */
    static newForManager(manager: RecentManager): RecentChooserMenu
    _init(config?: RecentChooserMenu.ConstructorProperties): void
}

export module RecentChooserWidget {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, RecentChooser.ConstructorProperties, VBox.ConstructorProperties {
    }

}

export interface RecentChooserWidget extends Atk.ImplementorIface, Buildable, Orientable, RecentChooser {

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.RecentChooserWidget

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: "notify::filter", callback: any): number
    on(sigName: "notify::filter", callback: any): number
    once(sigName: "notify::filter", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::limit", callback: any): number
    on(sigName: "notify::limit", callback: any): number
    once(sigName: "notify::limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::limit", ...args: any[]): void
    connect(sigName: "notify::local-only", callback: any): number
    on(sigName: "notify::local-only", callback: any): number
    once(sigName: "notify::local-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::local-only", ...args: any[]): void
    connect(sigName: "notify::recent-manager", callback: any): number
    on(sigName: "notify::recent-manager", callback: any): number
    once(sigName: "notify::recent-manager", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::recent-manager", ...args: any[]): void
    connect(sigName: "notify::select-multiple", callback: any): number
    on(sigName: "notify::select-multiple", callback: any): number
    once(sigName: "notify::select-multiple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::select-multiple", ...args: any[]): void
    connect(sigName: "notify::show-icons", callback: any): number
    on(sigName: "notify::show-icons", callback: any): number
    once(sigName: "notify::show-icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-icons", ...args: any[]): void
    connect(sigName: "notify::show-not-found", callback: any): number
    on(sigName: "notify::show-not-found", callback: any): number
    once(sigName: "notify::show-not-found", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-not-found", ...args: any[]): void
    connect(sigName: "notify::show-private", callback: any): number
    on(sigName: "notify::show-private", callback: any): number
    once(sigName: "notify::show-private", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-private", ...args: any[]): void
    connect(sigName: "notify::show-tips", callback: any): number
    on(sigName: "notify::show-tips", callback: any): number
    once(sigName: "notify::show-tips", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-tips", ...args: any[]): void
    connect(sigName: "notify::sort-type", callback: any): number
    on(sigName: "notify::sort-type", callback: any): number
    once(sigName: "notify::sort-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sort-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentChooserWidget extends VBox {

    // Own properties of Gtk-2.0.Gtk.RecentChooserWidget

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentChooserWidget

    constructor(config?: RecentChooserWidget.ConstructorProperties) 
    /**
     * Creates a new #GtkRecentChooserWidget object.  This is an embeddable widget
     * used to access the recently used resources list.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkRecentChooserWidget object.  This is an embeddable widget
     * used to access the recently used resources list.
     * @constructor 
     */
    static new(): RecentChooserWidget

    // Overloads of new

    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): VBox
    /**
     * Creates a new #GtkRecentChooserWidget with a specified recent manager.
     * 
     * This is useful if you have implemented your own recent manager, or if you
     * have a customized instance of a #GtkRecentManager object.
     * @constructor 
     * @param manager a #GtkRecentManager
     */
    static newForManager(manager: RecentManager): RecentChooserWidget
    _init(config?: RecentChooserWidget.ConstructorProperties): void
}

export module RecentFilter {

    // Constructor properties interface

    export interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

export interface RecentFilter {

    // Owm methods of Gtk-2.0.Gtk.RecentFilter

    /**
     * Adds a rule that allows resources based on their age - that is, the number
     * of days elapsed since they were last modified.
     * @param days number of days
     */
    addAge(days: number): void
    /**
     * Adds a rule that allows resources based on the name of the application
     * that has registered them.
     * @param application an application name
     */
    addApplication(application: string): void
    /**
     * Adds a rule to a filter that allows resources based on a custom callback
     * function. The bitfield `needed` which is passed in provides information
     * about what sorts of information that the filter function needs;
     * this allows GTK+ to avoid retrieving expensive information when
     * it isn't needed by the filter.
     * @param needed bitfield of flags indicating the information that the custom          filter function needs.
     * @param func callback function; if the function returns %TRUE, then   the file will be displayed.
     */
    addCustom(needed: RecentFilterFlags, func: RecentFilterFunc): void
    /**
     * Adds a rule that allows resources based on the name of the group
     * to which they belong
     * @param group a group name
     */
    addGroup(group: string): void
    /**
     * Adds a rule that allows resources based on their registered MIME type.
     * @param mimeType a MIME type
     */
    addMimeType(mimeType: string): void
    /**
     * Adds a rule that allows resources based on a pattern matching their
     * display name.
     * @param pattern a file pattern
     */
    addPattern(pattern: string): void
    /**
     * Adds a rule allowing image files in the formats supported
     * by GdkPixbuf.
     */
    addPixbufFormats(): void
    /**
     * Tests whether a file should be displayed according to `filter`.
     * The #GtkRecentFilterInfo structure `filter_info` should include
     * the fields returned from gtk_recent_filter_get_needed().
     * 
     * This function will not typically be used by applications; it
     * is intended principally for use in the implementation of
     * #GtkRecentChooser.
     * @param filterInfo a #GtkRecentFilterInfo structure containing information   about a recently used resource
     */
    filter(filterInfo: RecentFilterInfo): boolean
    /**
     * Gets the human-readable name for the filter.
     * See gtk_recent_filter_set_name().
     */
    getName(): string
    /**
     * Gets the fields that need to be filled in for the structure
     * passed to gtk_recent_filter_filter()
     * 
     * This function will not typically be used by applications; it
     * is intended principally for use in the implementation of
     * #GtkRecentChooser.
     */
    getNeeded(): RecentFilterFlags
    /**
     * Sets the human-readable name of the filter; this is the string
     * that will be displayed in the recently used resources selector
     * user interface if there is a selectable list of filters.
     * @param name then human readable name of `filter`
     */
    setName(name: string): void

    // Class property signals of Gtk-2.0.Gtk.RecentFilter

    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentFilter extends Object {

    // Own properties of Gtk-2.0.Gtk.RecentFilter

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentFilter

    constructor(config?: RecentFilter.ConstructorProperties) 
    /**
     * Creates a new #GtkRecentFilter with no rules added to it.
     * Such filter does not accept any recently used resources, so is not
     * particularly useful until you add rules with
     * gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),
     * gtk_recent_filter_add_application(), gtk_recent_filter_add_age().
     * To create a filter that accepts any recently used resource, use:
     * |[
     * GtkRecentFilter *filter = gtk_recent_filter_new ();
     * gtk_recent_filter_add_pattern (filter, "*");
     * ```
     * 
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkRecentFilter with no rules added to it.
     * Such filter does not accept any recently used resources, so is not
     * particularly useful until you add rules with
     * gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),
     * gtk_recent_filter_add_application(), gtk_recent_filter_add_age().
     * To create a filter that accepts any recently used resource, use:
     * |[
     * GtkRecentFilter *filter = gtk_recent_filter_new ();
     * gtk_recent_filter_add_pattern (filter, "*");
     * ```
     * 
     * @constructor 
     */
    static new(): RecentFilter
    _init(config?: RecentFilter.ConstructorProperties): void
}

export module RecentManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.RecentManager

        /**
         * The full path to the file to be used to store and read the recently
         * used resources list
         */
        filename?: string | null
        /**
         * The maximum number of items to be returned by the
         * gtk_recent_manager_get_items() function.
         */
        limit?: number | null
    }

}

export interface RecentManager {

    // Own properties of Gtk-2.0.Gtk.RecentManager

    /**
     * The full path to the file to be used to store and read the recently
     * used resources list
     */
    readonly filename: string
    /**
     * The maximum number of items to be returned by the
     * gtk_recent_manager_get_items() function.
     */
    limit: number
    /**
     * The size of the recently used resources list.
     */
    readonly size: number

    // Owm methods of Gtk-2.0.Gtk.RecentManager

    /**
     * Adds a new resource, pointed by `uri,` into the recently used
     * resources list, using the metadata specified inside the #GtkRecentData
     * structure passed in `recent_data`.
     * 
     * The passed URI will be used to identify this resource inside the
     * list.
     * 
     * In order to register the new recently used resource, metadata about
     * the resource must be passed as well as the URI; the metadata is
     * stored in a #GtkRecentData structure, which must contain the MIME
     * type of the resource pointed by the URI; the name of the application
     * that is registering the item, and a command line to be used when
     * launching the item.
     * 
     * Optionally, a #GtkRecentData structure might contain a UTF-8 string
     * to be used when viewing the item instead of the last component of the
     * URI; a short description of the item; whether the item should be
     * considered private - that is, should be displayed only by the
     * applications that have registered it.
     * @param uri a valid URI
     * @param recentData metadata of the resource
     */
    addFull(uri: string, recentData: RecentData): boolean
    /**
     * Adds a new resource, pointed by `uri,` into the recently used
     * resources list.
     * 
     * This function automatically retrieves some of the needed
     * metadata and setting other metadata to common default values; it
     * then feeds the data to gtk_recent_manager_add_full().
     * 
     * See gtk_recent_manager_add_full() if you want to explicitly
     * define the metadata for the resource pointed by `uri`.
     * @param uri a valid URI
     */
    addItem(uri: string): boolean
    /**
     * Gets the list of recently used resources.
     */
    getItems(): RecentInfo[]
    /**
     * Gets the maximum number of items that the gtk_recent_manager_get_items()
     * function should return.
     */
    getLimit(): number
    /**
     * Checks whether there is a recently used resource registered
     * with `uri` inside the recent manager.
     * @param uri a URI
     */
    hasItem(uri: string): boolean
    /**
     * Searches for a URI inside the recently used resources list, and
     * returns a structure containing informations about the resource
     * like its MIME type, or its display name.
     * @param uri a URI
     */
    lookupItem(uri: string): RecentInfo
    /**
     * Changes the location of a recently used resource from `uri` to `new_uri`.
     * 
     * Please note that this function will not affect the resource pointed
     * by the URIs, but only the URI used in the recently used resources list.
     * @param uri the URI of a recently used resource
     * @param newUri the new URI of the recently used resource, or %NULL to    remove the item pointed by `uri` in the list
     */
    moveItem(uri: string, newUri: string | null): boolean
    /**
     * Purges every item from the recently used resources list.
     */
    purgeItems(): number
    /**
     * Removes a resource pointed by `uri` from the recently used resources
     * list handled by a recent manager.
     * @param uri the URI of the item you wish to remove
     */
    removeItem(uri: string): boolean
    /**
     * Sets the maximum number of item that the gtk_recent_manager_get_items()
     * function should return.  If `limit` is set to -1, then return all the
     * items.
     * @param limit the maximum number of items to return, or -1.
     */
    setLimit(limit: number): void
    /**
     * Sets the screen for a recent manager; the screen is used to
     * track the user's currently configured recently used documents
     * storage.
     * @param screen a #GdkScreen
     */
    setScreen(screen: Gdk.Screen): void

    // Own virtual methods of Gtk-2.0.Gtk.RecentManager

    changed(): void

    // Own signals of Gtk-2.0.Gtk.RecentManager

    connect(sigName: "changed", callback: RecentManager.ChangedSignalCallback): number
    on(sigName: "changed", callback: RecentManager.ChangedSignalCallback): number
    once(sigName: "changed", callback: RecentManager.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.RecentManager

    connect(sigName: "notify::filename", callback: any): number
    on(sigName: "notify::filename", callback: any): number
    once(sigName: "notify::filename", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::filename", ...args: any[]): void
    connect(sigName: "notify::limit", callback: any): number
    on(sigName: "notify::limit", callback: any): number
    once(sigName: "notify::limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::limit", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class RecentManager extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.RecentManager

    static name: string

    // Constructors of Gtk-2.0.Gtk.RecentManager

    constructor(config?: RecentManager.ConstructorProperties) 
    /**
     * Creates a new recent manager object.  Recent manager objects are used to
     * handle the list of recently used resources.  A #GtkRecentManager object
     * monitors the recently used resources list, and emits the "changed" signal
     * each time something inside the list changes.
     * 
     * #GtkRecentManager objects are expensive: be sure to create them only when
     * needed. You should use gtk_recent_manager_get_default() instead.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new recent manager object.  Recent manager objects are used to
     * handle the list of recently used resources.  A #GtkRecentManager object
     * monitors the recently used resources list, and emits the "changed" signal
     * each time something inside the list changes.
     * 
     * #GtkRecentManager objects are expensive: be sure to create them only when
     * needed. You should use gtk_recent_manager_get_default() instead.
     * @constructor 
     */
    static new(): RecentManager
    _init(config?: RecentManager.ConstructorProperties): void
    /**
     * Gets a unique instance of #GtkRecentManager, that you can share
     * in your application without caring about memory management. The
     * returned instance will be freed when you application terminates.
     */
    static getDefault(): RecentManager
}

export module Ruler {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Widget.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Ruler

        lower?: number | null
        maxSize?: number | null
        /**
         * The metric used for the ruler.
         */
        metric?: MetricType | null
        position?: number | null
        upper?: number | null
    }

}

export interface Ruler extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.Ruler

    widget: Widget
    backingStore: Gdk.Pixmap
    nonGrExpGc: Gdk.GC
    metric: RulerMetric
    xsrc: number
    ysrc: number
    sliderSize: number
    lower: number
    upper: number
    position: number
    maxSize: number

    // Owm methods of Gtk-2.0.Gtk.Ruler

    // Has conflict: drawPos(): void
    // Has conflict: drawTicks(): void
    /**
     * Gets the units used for a #GtkRuler. See gtk_ruler_set_metric().
     */
    getMetric(): MetricType
    /**
     * Retrieves values indicating the range and current position of a #GtkRuler.
     * See gtk_ruler_set_range().
     * @param lower location to store lower limit of the ruler, or %NULL
     * @param upper location to store upper limit of the ruler, or %NULL
     * @param position location to store the current position of the mark on the ruler, or %NULL
     * @param maxSize location to store the maximum size of the ruler used when calculating            the space to leave for the text, or %NULL.
     */
    getRange(lower: number | null, upper: number | null, position: number | null, maxSize: number): void
    setMetric(metric: MetricType): void
    /**
     * This sets the range of the ruler.
     * @param lower the lower limit of the ruler
     * @param upper the upper limit of the ruler
     * @param position the mark on the ruler
     * @param maxSize the maximum size of the ruler used when calculating the space to leave for the text
     */
    setRange(lower: number, upper: number, position: number, maxSize: number): void

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Ruler

    drawPos(): void
    drawTicks(): void

    // Class property signals of Gtk-2.0.Gtk.Ruler

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Ruler extends Widget {

    // Own properties of Gtk-2.0.Gtk.Ruler

    static name: string

    // Constructors of Gtk-2.0.Gtk.Ruler

    constructor(config?: Ruler.ConstructorProperties) 
    _init(config?: Ruler.ConstructorProperties): void
}

export module Scale {

    // Signal callback interfaces

    /**
     * Signal callback interface for `format-value`
     */
    export interface FormatValueSignalCallback {
        (value: number): string
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Range.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Scale

        digits?: number | null
        drawValue?: boolean | null
        valuePos?: PositionType | null
    }

}

export interface Scale extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.Scale

    range: Range
    digits: number
    // Has conflict: drawValue: number
    valuePos: number

    // Owm methods of Gtk-2.0.Gtk.Scale

    /**
     * Adds a mark at `value`.
     * 
     * A mark is indicated visually by drawing a tick mark next to the scale,
     * and GTK+ makes it easy for the user to position the scale exactly at the
     * marks value.
     * 
     * If `markup` is not %NULL, text is shown next to the tick mark.
     * 
     * To remove marks from a scale, use gtk_scale_clear_marks().
     * @param value the value at which the mark is placed, must be between   the lower and upper limits of the scales' adjustment
     * @param position where to draw the mark. For a horizontal scale, #GTK_POS_TOP   is drawn above the scale, anything else below. For a vertical scale,   #GTK_POS_LEFT is drawn to the left of the scale, anything else to the   right.
     * @param markup Text to be shown at the mark, using <link linkend="PangoMarkupFormat">Pango markup</link>, or %NULL
     */
    addMark(value: number, position: PositionType, markup: string | null): void
    /**
     * Removes any marks that have been added with gtk_scale_add_mark().
     */
    clearMarks(): void
    /**
     * Gets the number of decimal places that are displayed in the value.
     */
    getDigits(): number
    /**
     * Returns whether the current value is displayed as a string
     * next to the slider.
     */
    getDrawValue(): boolean
    /**
     * Gets the #PangoLayout used to display the scale. The returned
     * object is owned by the scale so does not need to be freed by
     * the caller.
     */
    getLayout(): Pango.Layout
    // Has conflict: getLayoutOffsets(): [ /* x */ number, /* y */ number ]
    /**
     * Gets the position in which the current value is displayed.
     */
    getValuePos(): PositionType
    /**
     * Sets the number of decimal places that are displayed in the value. Also
     * causes the value of the adjustment to be rounded to this number of digits,
     * so the retrieved value matches the displayed one, if #GtkScale:draw-value is
     * %TRUE when the value changes. If you want to enforce rounding the value when
     * #GtkScale:draw-value is %FALSE, you can set #GtkRange:round-digits instead.
     * @param digits the number of decimal places to display,     e.g. use 1 to display 1.0, 2 to display 1.00, etc
     */
    setDigits(digits: number): void
    /**
     * Specifies whether the current value is displayed as a string next
     * to the slider.
     * @param drawValue %TRUE to draw the value
     */
    setDrawValue(drawValue: boolean): void
    /**
     * Sets the position in which the current value is displayed.
     * @param pos the position in which the current value is displayed
     */
    setValuePos(pos: PositionType): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Scale

    drawValue(): void
    formatValue(value: number): string
    /**
     * Obtains the coordinates where the scale will draw the
     * #PangoLayout representing the text in the scale. Remember
     * when using the #PangoLayout function you need to convert to
     * and from pixels using PANGO_PIXELS() or #PANGO_SCALE.
     * 
     * If the #GtkScale:draw-value property is %FALSE, the return
     * values are undefined.
     * @virtual 
     */
    getLayoutOffsets(): [ /* x */ number, /* y */ number ]

    // Own signals of Gtk-2.0.Gtk.Scale

    connect(sigName: "format-value", callback: Scale.FormatValueSignalCallback): number
    on(sigName: "format-value", callback: Scale.FormatValueSignalCallback): number
    once(sigName: "format-value", callback: Scale.FormatValueSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "format-value", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Scale

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Scale extends Range {

    // Own properties of Gtk-2.0.Gtk.Scale

    static name: string

    // Constructors of Gtk-2.0.Gtk.Scale

    constructor(config?: Scale.ConstructorProperties) 
    _init(config?: Scale.ConstructorProperties): void
}

export module ScaleButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `popdown`
     */
    export interface PopdownSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `popup`
     */
    export interface PopupSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `value-changed`
     */
    export interface ValueChangedSignalCallback {
        (value: number): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Button.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ScaleButton

        adjustment?: Adjustment | null
        /**
         * The names of the icons to be used by the scale button.
         * The first item in the array will be used in the button
         * when the current value is the lowest value, the second
         * item for the highest value. All the subsequent icons will
         * be used for all the other values, spread evenly over the
         * range of values.
         * 
         * If there's only one icon name in the `icons` array, it will
         * be used for all the values. If only two icon names are in
         * the `icons` array, the first one will be used for the bottom
         * 50% of the scale, and the second one for the top 50%.
         * 
         * It is recommended to use at least 3 icons so that the
         * #GtkScaleButton reflects the current value of the scale
         * better for the users.
         */
        icons?: string[] | null
        size?: IconSize | null
        value?: number | null
    }

}

export interface ScaleButton extends Atk.ImplementorIface, Activatable, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.ScaleButton

    adjustment: Adjustment
    /**
     * The names of the icons to be used by the scale button.
     * The first item in the array will be used in the button
     * when the current value is the lowest value, the second
     * item for the highest value. All the subsequent icons will
     * be used for all the other values, spread evenly over the
     * range of values.
     * 
     * If there's only one icon name in the `icons` array, it will
     * be used for all the values. If only two icon names are in
     * the `icons` array, the first one will be used for the bottom
     * 50% of the scale, and the second one for the top 50%.
     * 
     * It is recommended to use at least 3 icons so that the
     * #GtkScaleButton reflects the current value of the scale
     * better for the users.
     */
    icons: string[]
    size: IconSize
    value: number

    // Own fields of Gtk-2.0.Gtk.ScaleButton

    parent: Button & Widget
    plusButton: Widget
    minusButton: Widget

    // Owm methods of Gtk-2.0.Gtk.ScaleButton

    /**
     * Gets the #GtkAdjustment associated with the #GtkScaleButton's scale.
     * See gtk_range_get_adjustment() for details.
     */
    getAdjustment(): Adjustment
    /**
     * Retrieves the minus button of the #GtkScaleButton.
     */
    getMinusButton(): Widget
    /**
     * Gets the orientation of the #GtkScaleButton's popup window.
     */
    getOrientation(): Orientation
    /**
     * Retrieves the plus button of the #GtkScaleButton.
     */
    getPlusButton(): Widget
    /**
     * Retrieves the popup of the #GtkScaleButton.
     */
    getPopup(): Widget
    /**
     * Gets the current value of the scale button.
     */
    getValue(): number
    /**
     * Sets the #GtkAdjustment to be used as a model
     * for the #GtkScaleButton's scale.
     * See gtk_range_set_adjustment() for details.
     * @param adjustment a #GtkAdjustment
     */
    setAdjustment(adjustment: Adjustment): void
    /**
     * Sets the icons to be used by the scale button.
     * For details, see the #GtkScaleButton:icons property.
     * @param icons a %NULL-terminated array of icon names
     */
    setIcons(icons: string[]): void
    /**
     * Sets the orientation of the #GtkScaleButton's popup window.
     * @param orientation the new orientation
     */
    setOrientation(orientation: Orientation): void
    /**
     * Sets the current value of the scale; if the value is outside
     * the minimum or maximum range values, it will be clamped to fit
     * inside them. The scale button emits the #GtkScaleButton::value-changed
     * signal if the value changes.
     * @param value new value of the scale button
     */
    setValue(value: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ScaleButton

    valueChanged(value: number): void

    // Own signals of Gtk-2.0.Gtk.ScaleButton

    connect(sigName: "popdown", callback: ScaleButton.PopdownSignalCallback): number
    on(sigName: "popdown", callback: ScaleButton.PopdownSignalCallback): number
    once(sigName: "popdown", callback: ScaleButton.PopdownSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popdown", ...args: any[]): void
    connect(sigName: "popup", callback: ScaleButton.PopupSignalCallback): number
    on(sigName: "popup", callback: ScaleButton.PopupSignalCallback): number
    once(sigName: "popup", callback: ScaleButton.PopupSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popup", ...args: any[]): void
    connect(sigName: "value-changed", callback: ScaleButton.ValueChangedSignalCallback): number
    on(sigName: "value-changed", callback: ScaleButton.ValueChangedSignalCallback): number
    once(sigName: "value-changed", callback: ScaleButton.ValueChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "value-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ScaleButton

    connect(sigName: "notify::adjustment", callback: any): number
    on(sigName: "notify::adjustment", callback: any): number
    once(sigName: "notify::adjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::adjustment", ...args: any[]): void
    connect(sigName: "notify::icons", callback: any): number
    on(sigName: "notify::icons", callback: any): number
    once(sigName: "notify::icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icons", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::value", callback: any): number
    on(sigName: "notify::value", callback: any): number
    once(sigName: "notify::value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ScaleButton extends Button {

    // Own properties of Gtk-2.0.Gtk.ScaleButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.ScaleButton

    constructor(config?: ScaleButton.ConstructorProperties) 
    /**
     * Creates a #GtkScaleButton, with a range between `min` and `max,` with
     * a stepping of `step`.
     * @constructor 
     * @param size a stock icon size
     * @param min the minimum value of the scale (usually 0)
     * @param max the maximum value of the scale (usually 100)
     * @param step the stepping of value when a scroll-wheel event,        or up/down arrow event occurs (usually 2)
     * @param icons a %NULL-terminated         array of icon names, or %NULL if you want to set the list         later with gtk_scale_button_set_icons()
     */
    constructor(size: IconSize, min: number, max: number, step: number, icons: string[] | null) 
    /**
     * Creates a #GtkScaleButton, with a range between `min` and `max,` with
     * a stepping of `step`.
     * @constructor 
     * @param size a stock icon size
     * @param min the minimum value of the scale (usually 0)
     * @param max the maximum value of the scale (usually 100)
     * @param step the stepping of value when a scroll-wheel event,        or up/down arrow event occurs (usually 2)
     * @param icons a %NULL-terminated         array of icon names, or %NULL if you want to set the list         later with gtk_scale_button_set_icons()
     */
    static new(size: IconSize, min: number, max: number, step: number, icons: string[] | null): ScaleButton

    // Overloads of new

    static new(): Button
    _init(config?: ScaleButton.ConstructorProperties): void
}

export module Scrollbar {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Range.ConstructorProperties {
    }

}

export interface Scrollbar extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.Scrollbar

    range: Range

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Scrollbar

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Scrollbar extends Range {

    // Own properties of Gtk-2.0.Gtk.Scrollbar

    static name: string

    // Constructors of Gtk-2.0.Gtk.Scrollbar

    constructor(config?: Scrollbar.ConstructorProperties) 
    _init(config?: Scrollbar.ConstructorProperties): void
}

export module ScrolledWindow {

    // Signal callback interfaces

    /**
     * Signal callback interface for `move-focus-out`
     */
    export interface MoveFocusOutSignalCallback {
        (object: DirectionType): void
    }

    /**
     * Signal callback interface for `scroll-child`
     */
    export interface ScrollChildSignalCallback {
        (scroll: ScrollType, horizontal: boolean): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ScrolledWindow

        hadjustment?: Adjustment | null
        hscrollbarPolicy?: PolicyType | null
        shadowType?: ShadowType | null
        vadjustment?: Adjustment | null
        vscrollbarPolicy?: PolicyType | null
        windowPlacement?: CornerType | null
        /**
         * Whether "window-placement" should be used to determine the location
         * of the contents with respect to the scrollbars. Otherwise, the
         * "gtk-scrolled-window-placement" setting is used.
         */
        windowPlacementSet?: boolean | null
    }

}

export interface ScrolledWindow extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.ScrolledWindow

    hadjustment: Adjustment
    hscrollbarPolicy: PolicyType
    shadowType: ShadowType
    vadjustment: Adjustment
    vscrollbarPolicy: PolicyType
    windowPlacement: CornerType
    /**
     * Whether "window-placement" should be used to determine the location
     * of the contents with respect to the scrollbars. Otherwise, the
     * "gtk-scrolled-window-placement" setting is used.
     */
    windowPlacementSet: boolean

    // Own fields of Gtk-2.0.Gtk.ScrolledWindow

    container: any
    hscrollbar: Widget
    vscrollbar: Widget

    // Owm methods of Gtk-2.0.Gtk.ScrolledWindow

    /**
     * Used to add children without native scrolling capabilities. This
     * is simply a convenience function; it is equivalent to adding the
     * unscrollable child to a viewport, then adding the viewport to the
     * scrolled window. If a child has native scrolling, use
     * gtk_container_add() instead of this function.
     * 
     * The viewport scrolls the child by moving its #GdkWindow, and takes
     * the size of the child to be the size of its toplevel #GdkWindow.
     * This will be very wrong for most widgets that support native scrolling;
     * for example, if you add a widget such as #GtkTreeView with a viewport,
     * the whole widget will scroll, including the column headings. Thus,
     * widgets with native scrolling support should not be used with the
     * #GtkViewport proxy.
     * 
     * A widget supports scrolling natively if the
     * set_scroll_adjustments_signal field in #GtkWidgetClass is non-zero,
     * i.e. has been filled in with a valid signal identifier.
     * @param child the widget you want to scroll
     */
    addWithViewport(child: Widget): void
    /**
     * Returns the horizontal scrollbar's adjustment, used to connect the
     * horizontal scrollbar to the child widget's horizontal scroll
     * functionality.
     */
    getHadjustment(): Adjustment
    /**
     * Returns the horizontal scrollbar of `scrolled_window`.
     */
    getHscrollbar(): Widget
    /**
     * Gets the placement of the contents with respect to the scrollbars
     * for the scrolled window. See gtk_scrolled_window_set_placement().
     */
    getPlacement(): CornerType
    /**
     * Retrieves the current policy values for the horizontal and vertical
     * scrollbars. See gtk_scrolled_window_set_policy().
     */
    getPolicy(): [ /* hscrollbarPolicy */ PolicyType, /* vscrollbarPolicy */ PolicyType ]
    /**
     * Gets the shadow type of the scrolled window. See
     * gtk_scrolled_window_set_shadow_type().
     */
    getShadowType(): ShadowType
    /**
     * Returns the vertical scrollbar's adjustment, used to connect the
     * vertical scrollbar to the child widget's vertical scroll functionality.
     */
    getVadjustment(): Adjustment
    /**
     * Returns the vertical scrollbar of `scrolled_window`.
     */
    getVscrollbar(): Widget
    /**
     * Sets the #GtkAdjustment for the horizontal scrollbar.
     * @param hadjustment horizontal scroll adjustment
     */
    setHadjustment(hadjustment: Adjustment): void
    /**
     * Sets the placement of the contents with respect to the scrollbars
     * for the scrolled window.
     * 
     * The default is %GTK_CORNER_TOP_LEFT, meaning the child is
     * in the top left, with the scrollbars underneath and to the right.
     * Other values in #GtkCornerType are %GTK_CORNER_TOP_RIGHT,
     * %GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.
     * 
     * See also gtk_scrolled_window_get_placement() and
     * gtk_scrolled_window_unset_placement().
     * @param windowPlacement position of the child window
     */
    setPlacement(windowPlacement: CornerType): void
    /**
     * Sets the scrollbar policy for the horizontal and vertical scrollbars.
     * 
     * The policy determines when the scrollbar should appear; it is a value
     * from the #GtkPolicyType enumeration. If %GTK_POLICY_ALWAYS, the
     * scrollbar is always present; if %GTK_POLICY_NEVER, the scrollbar is
     * never present; if %GTK_POLICY_AUTOMATIC, the scrollbar is present only
     * if needed (that is, if the slider part of the bar would be smaller
     * than the trough - the display is larger than the page size).
     * @param hscrollbarPolicy policy for horizontal bar
     * @param vscrollbarPolicy policy for vertical bar
     */
    setPolicy(hscrollbarPolicy: PolicyType, vscrollbarPolicy: PolicyType): void
    /**
     * Changes the type of shadow drawn around the contents of
     * `scrolled_window`.
     * @param type kind of shadow to draw around scrolled window contents
     */
    setShadowType(type: ShadowType): void
    /**
     * Sets the #GtkAdjustment for the vertical scrollbar.
     * @param vadjustment vertical scroll adjustment
     */
    setVadjustment(vadjustment: Adjustment): void
    /**
     * Unsets the placement of the contents with respect to the scrollbars
     * for the scrolled window. If no window placement is set for a scrolled
     * window, it obeys the "gtk-scrolled-window-placement" XSETTING.
     * 
     * See also gtk_scrolled_window_set_placement() and
     * gtk_scrolled_window_get_placement().
     */
    unsetPlacement(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ScrolledWindow

    moveFocusOut(direction: DirectionType): void
    scrollChild(scroll: ScrollType, horizontal: boolean): boolean

    // Own signals of Gtk-2.0.Gtk.ScrolledWindow

    connect(sigName: "move-focus-out", callback: ScrolledWindow.MoveFocusOutSignalCallback): number
    on(sigName: "move-focus-out", callback: ScrolledWindow.MoveFocusOutSignalCallback): number
    once(sigName: "move-focus-out", callback: ScrolledWindow.MoveFocusOutSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-focus-out", ...args: any[]): void
    connect(sigName: "scroll-child", callback: ScrolledWindow.ScrollChildSignalCallback): number
    on(sigName: "scroll-child", callback: ScrolledWindow.ScrollChildSignalCallback): number
    once(sigName: "scroll-child", callback: ScrolledWindow.ScrollChildSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-child", horizontal: boolean, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ScrolledWindow

    connect(sigName: "notify::hadjustment", callback: any): number
    on(sigName: "notify::hadjustment", callback: any): number
    once(sigName: "notify::hadjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hadjustment", ...args: any[]): void
    connect(sigName: "notify::hscrollbar-policy", callback: any): number
    on(sigName: "notify::hscrollbar-policy", callback: any): number
    once(sigName: "notify::hscrollbar-policy", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hscrollbar-policy", ...args: any[]): void
    connect(sigName: "notify::shadow-type", callback: any): number
    on(sigName: "notify::shadow-type", callback: any): number
    once(sigName: "notify::shadow-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::shadow-type", ...args: any[]): void
    connect(sigName: "notify::vadjustment", callback: any): number
    on(sigName: "notify::vadjustment", callback: any): number
    once(sigName: "notify::vadjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::vadjustment", ...args: any[]): void
    connect(sigName: "notify::vscrollbar-policy", callback: any): number
    on(sigName: "notify::vscrollbar-policy", callback: any): number
    once(sigName: "notify::vscrollbar-policy", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::vscrollbar-policy", ...args: any[]): void
    connect(sigName: "notify::window-placement", callback: any): number
    on(sigName: "notify::window-placement", callback: any): number
    once(sigName: "notify::window-placement", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-placement", ...args: any[]): void
    connect(sigName: "notify::window-placement-set", callback: any): number
    on(sigName: "notify::window-placement-set", callback: any): number
    once(sigName: "notify::window-placement-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-placement-set", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ScrolledWindow extends Bin {

    // Own properties of Gtk-2.0.Gtk.ScrolledWindow

    static name: string

    // Constructors of Gtk-2.0.Gtk.ScrolledWindow

    constructor(config?: ScrolledWindow.ConstructorProperties) 
    /**
     * Creates a new scrolled window.
     * 
     * The two arguments are the scrolled window's adjustments; these will be
     * shared with the scrollbars and the child widget to keep the bars in sync
     * with the child. Usually you want to pass %NULL for the adjustments, which
     * will cause the scrolled window to create them for you.
     * @constructor 
     * @param hadjustment horizontal adjustment
     * @param vadjustment vertical adjustment
     */
    constructor(hadjustment: Adjustment | null, vadjustment: Adjustment | null) 
    /**
     * Creates a new scrolled window.
     * 
     * The two arguments are the scrolled window's adjustments; these will be
     * shared with the scrollbars and the child widget to keep the bars in sync
     * with the child. Usually you want to pass %NULL for the adjustments, which
     * will cause the scrolled window to create them for you.
     * @constructor 
     * @param hadjustment horizontal adjustment
     * @param vadjustment vertical adjustment
     */
    static new(hadjustment: Adjustment | null, vadjustment: Adjustment | null): ScrolledWindow
    _init(config?: ScrolledWindow.ConstructorProperties): void
}

export module Separator {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Widget.ConstructorProperties {
    }

}

export interface Separator extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.Separator

    widget: Widget

    // Conflicting methods

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Separator

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Separator extends Widget {

    // Own properties of Gtk-2.0.Gtk.Separator

    static name: string

    // Constructors of Gtk-2.0.Gtk.Separator

    constructor(config?: Separator.ConstructorProperties) 
    _init(config?: Separator.ConstructorProperties): void
}

export module SeparatorMenuItem {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, MenuItem.ConstructorProperties {
    }

}

export interface SeparatorMenuItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.SeparatorMenuItem

    menuItem: MenuItem

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    deselect(): void

    // Overloads of deselect

    deselect(): void
    deselect(): void
    select(): void

    // Overloads of select

    select(): void
    select(): void
    /**
     * Set the accelerator path on `menu_item,` through which runtime changes of the
     * menu item's accelerator caused by the user can be identified and saved to
     * persistant storage (see gtk_accel_map_save() on this).
     * To setup a default accelerator for this menu item, call
     * gtk_accel_map_add_entry() with the same `accel_path`.
     * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
     * and gtk_menu_set_accel_path() for a more convenient variant of this function.
     * 
     * This function is basically a convenience wrapper that handles calling
     * gtk_widget_set_accel_path() with the appropriate accelerator group for
     * the menu item.
     * 
     * Note that you do need to set an accelerator on the parent menu with
     * gtk_menu_set_accel_group() for this to work.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath accelerator path, corresponding to this menu item's              functionality, or %NULL to unset the current path.
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.SeparatorMenuItem

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::right-justified", callback: any): number
    on(sigName: "notify::right-justified", callback: any): number
    once(sigName: "notify::right-justified", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-justified", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class SeparatorMenuItem extends MenuItem {

    // Own properties of Gtk-2.0.Gtk.SeparatorMenuItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.SeparatorMenuItem

    constructor(config?: SeparatorMenuItem.ConstructorProperties) 
    constructor() 
    static new(): SeparatorMenuItem
    _init(config?: SeparatorMenuItem.ConstructorProperties): void
}

export module SeparatorToolItem {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, ToolItem.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.SeparatorToolItem

        draw?: boolean | null
    }

}

export interface SeparatorToolItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.SeparatorToolItem

    // Has conflict: draw: boolean

    // Own fields of Gtk-2.0.Gtk.SeparatorToolItem

    parent: ToolItem & Bin & Widget & Widget

    // Owm methods of Gtk-2.0.Gtk.SeparatorToolItem

    /**
     * Returns whether `item` is drawn as a line, or just blank.
     * See gtk_separator_tool_item_set_draw().
     */
    getDraw(): boolean
    /**
     * Whether `item` is drawn as a vertical line, or just blank.
     * Setting this to %FALSE along with gtk_tool_item_set_expand() is useful
     * to create an item that forces following items to the end of the toolbar.
     * @param draw whether `item` is drawn as a vertical line
     */
    setDraw(draw: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the markup text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_markup().
     * @param markup markup text to be used as tooltip for `tool_item`
     */
    setTooltipMarkup(markup: string): void

    // Overloads of setTooltipMarkup

    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.SeparatorToolItem

    connect(sigName: "notify::draw", callback: any): number
    on(sigName: "notify::draw", callback: any): number
    once(sigName: "notify::draw", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::draw", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class SeparatorToolItem extends ToolItem {

    // Own properties of Gtk-2.0.Gtk.SeparatorToolItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.SeparatorToolItem

    constructor(config?: SeparatorToolItem.ConstructorProperties) 
    /**
     * Create a new #GtkSeparatorToolItem
     * @constructor 
     */
    constructor() 
    /**
     * Create a new #GtkSeparatorToolItem
     * @constructor 
     */
    static new(): SeparatorToolItem
    _init(config?: SeparatorToolItem.ConstructorProperties): void
}

export module Settings {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Settings

        gtkAlternativeButtonOrder?: boolean | null
        /**
         * Controls the direction of the sort indicators in sorted list and tree
         * views. By default an arrow pointing down means the column is sorted
         * in ascending order. When set to %TRUE, this order will be inverted.
         */
        gtkAlternativeSortArrows?: boolean | null
        /**
         * Whether mnemonics should be automatically shown and hidden when the user
         * presses the mnemonic activator.
         */
        gtkAutoMnemonics?: boolean | null
        gtkButtonImages?: boolean | null
        gtkCanChangeAccels?: boolean | null
        gtkColorPalette?: string | null
        /**
         * A palette of named colors for use in themes. The format of the string is
         * <programlisting>
         * name1: color1
         * name2: color2
         * ...
         * </programlisting>
         * Color names must be acceptable as identifiers in the
         * <link linkend="gtk-Resource-Files">gtkrc</link> syntax, and
         * color specifications must be in the format accepted by
         * gdk_color_parse().
         * 
         * Note that due to the way the color tables from different sources are
         * merged, color specifications will be converted to hexadecimal form
         * when getting this property.
         * 
         * Starting with GTK+ 2.12, the entries can alternatively be separated
         * by ';' instead of newlines:
         * <programlisting>
         * name1: color1; name2: color2; ...
         * </programlisting>
         */
        gtkColorScheme?: string | null
        /**
         * Whether the cursor should blink.
         * 
         * Also see the #GtkSettings:gtk-cursor-blink-timeout setting,
         * which allows more flexible control over cursor blinking.
         */
        gtkCursorBlink?: boolean | null
        gtkCursorBlinkTime?: number | null
        /**
         * Time after which the cursor stops blinking, in seconds.
         * The timer is reset after each user interaction.
         * 
         * Setting this to zero has the same effect as setting
         * #GtkSettings:gtk-cursor-blink to %FALSE.
         */
        gtkCursorBlinkTimeout?: number | null
        gtkCursorThemeName?: string | null
        gtkCursorThemeSize?: number | null
        gtkDndDragThreshold?: number | null
        gtkDoubleClickDistance?: number | null
        gtkDoubleClickTime?: number | null
        /**
         * Whether menu items should have visible accelerators which can be
         * activated.
         */
        gtkEnableAccels?: boolean | null
        gtkEnableAnimations?: boolean | null
        /**
         * Whether to play any event sounds at all.
         * 
         * See the <ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec">Sound Theme spec</ulink>
         * for more information on event sounds and sound themes.
         * 
         * GTK+ itself does not support event sounds, you have to use a loadable
         * module like the one that comes with libcanberra.
         */
        gtkEnableEventSounds?: boolean | null
        /**
         * Whether to play event sounds as feedback to user input.
         * 
         * See the <ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec">Sound Theme spec</ulink>
         * for more information on event sounds and sound themes.
         * 
         * GTK+ itself does not support event sounds, you have to use a loadable
         * module like the one that comes with libcanberra.
         */
        gtkEnableInputFeedbackSounds?: boolean | null
        /**
         * Whether labels and menu items should have visible mnemonics which
         * can be activated.
         */
        gtkEnableMnemonics?: boolean | null
        /**
         * Whether tooltips should be shown on widgets.
         */
        gtkEnableTooltips?: boolean | null
        /**
         * How long to show the last input character in hidden
         * entries. This value is in milliseconds. 0 disables showing the
         * last char. 600 is a good value for enabling it.
         */
        gtkEntryPasswordHintTimeout?: number | null
        gtkEntrySelectOnFocus?: boolean | null
        /**
         * When %TRUE, keyboard navigation and other input-related errors
         * will cause a beep. Since the error bell is implemented using
         * gdk_window_beep(), the windowing system may offer ways to
         * configure the error bell in many ways, such as flashing the
         * window or similar visual effects.
         */
        gtkErrorBell?: boolean | null
        gtkFallbackIconTheme?: string | null
        gtkFileChooserBackend?: string | null
        gtkFontName?: string | null
        gtkFontconfigTimestamp?: number | null
        /**
         * A list of icon sizes. The list is separated by colons, and
         * item has the form:
         * 
         * <replaceable>size-name</replaceable> = <replaceable>width</replaceable> , <replaceable>height</replaceable>
         * 
         * E.g. "gtk-menu=16,16:gtk-button=20,20:gtk-dialog=48,48".
         * GTK+ itself use the following named icon sizes: gtk-menu,
         * gtk-button, gtk-small-toolbar, gtk-large-toolbar, gtk-dnd,
         * gtk-dialog. Applications can register their own named icon
         * sizes with gtk_icon_size_register().
         */
        gtkIconSizes?: string | null
        gtkIconThemeName?: string | null
        /**
         * Which IM (input method) module should be used by default. This is the
         * input method that will be used if the user has not explicitly chosen
         * another input method from the IM context menu.
         * This also can be a colon-separated list of input methods, which GTK+
         * will try in turn until it finds one available on the system.
         * 
         * See #GtkIMContext and see the #GtkSettings:gtk-show-input-method-menu property.
         */
        gtkImModule?: string | null
        gtkImPreeditStyle?: IMPreeditStyle | null
        gtkImStatusStyle?: IMStatusStyle | null
        gtkKeyThemeName?: string | null
        /**
         * When %TRUE, keyboard navigation should be able to reach all widgets
         * by using the cursor keys only. Tab, Shift etc. keys can't be expected
         * to be present on the used input device.
         */
        gtkKeynavCursorOnly?: boolean | null
        /**
         * When %TRUE, some widgets will wrap around when doing keyboard
         * navigation, such as menus, menubars and notebooks.
         */
        gtkKeynavWrapAround?: boolean | null
        gtkLabelSelectOnFocus?: boolean | null
        gtkMenuBarAccel?: string | null
        gtkMenuBarPopupDelay?: number | null
        gtkMenuImages?: boolean | null
        gtkMenuPopdownDelay?: number | null
        gtkMenuPopupDelay?: number | null
        gtkModules?: string | null
        /**
         * Whether a click in a #GtkRange trough should scroll to the click position or
         * scroll by a single page in the respective direction.
         */
        gtkPrimaryButtonWarpsSlider?: boolean | null
        /**
         * A comma-separated list of print backends to use in the print
         * dialog. Available print backends depend on the GTK+ installation,
         * and may include "file", "cups", "lpr" or "papi".
         */
        gtkPrintBackends?: string | null
        /**
         * A command to run for displaying the print preview. The command
         * should contain a %f placeholder, which will get replaced by
         * the path to the pdf file. The command may also contain a %s
         * placeholder, which will get replaced by the path to a file
         * containing the print settings in the format produced by
         * gtk_print_settings_to_file().
         * 
         * The preview application is responsible for removing the pdf file
         * and the print settings file when it is done.
         */
        gtkPrintPreviewCommand?: string | null
        /**
         * The number of recently used files that should be displayed by default by
         * #GtkRecentChooser implementations and by the #GtkFileChooser. A value of
         * -1 means every recently used file stored.
         */
        gtkRecentFilesLimit?: number | null
        /**
         * The maximum age, in days, of the items inside the recently used
         * resources list. Items older than this setting will be excised
         * from the list. If set to 0, the list will always be empty; if
         * set to -1, no item will be removed.
         */
        gtkRecentFilesMaxAge?: number | null
        /**
         * Where the contents of scrolled windows are located with respect to the
         * scrollbars, if not overridden by the scrolled window's own placement.
         */
        gtkScrolledWindowPlacement?: CornerType | null
        gtkShowInputMethodMenu?: boolean | null
        gtkShowUnicodeMenu?: boolean | null
        /**
         * The XDG sound theme to use for event sounds.
         * 
         * See the <ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec">Sound Theme spec</ulink>
         * for more information on event sounds and sound themes.
         * 
         * GTK+ itself does not support event sounds, you have to use a loadable
         * module like the one that comes with libcanberra.
         */
        gtkSoundThemeName?: string | null
        gtkSplitCursor?: boolean | null
        gtkThemeName?: string | null
        gtkTimeoutExpand?: number | null
        gtkTimeoutInitial?: number | null
        gtkTimeoutRepeat?: number | null
        gtkToolbarIconSize?: IconSize | null
        gtkToolbarStyle?: ToolbarStyle | null
        /**
         * Amount of time, in milliseconds, after which the browse mode
         * will be disabled.
         * 
         * See #GtkSettings:gtk-tooltip-browse-timeout for more information
         * about browse mode.
         */
        gtkTooltipBrowseModeTimeout?: number | null
        /**
         * Controls the time after which tooltips will appear when
         * browse mode is enabled, in milliseconds.
         * 
         * Browse mode is enabled when the mouse pointer moves off an object
         * where a tooltip was currently being displayed. If the mouse pointer
         * hits another object before the browse mode timeout expires (see
         * #GtkSettings:gtk-tooltip-browse-mode-timeout), it will take the
         * amount of milliseconds specified by this setting to popup the tooltip
         * for the new object.
         */
        gtkTooltipBrowseTimeout?: number | null
        /**
         * Time, in milliseconds, after which a tooltip could appear if the
         * cursor is hovering on top of a widget.
         */
        gtkTooltipTimeout?: number | null
        /**
         * When %TRUE, there are no motion notify events delivered on this screen,
         * and widgets can't use the pointer hovering them for any essential
         * functionality.
         */
        gtkTouchscreenMode?: boolean | null
        gtkXftAntialias?: number | null
        gtkXftDpi?: number | null
        gtkXftHinting?: number | null
        gtkXftHintstyle?: string | null
        gtkXftRgba?: string | null
    }

}

export interface Settings {

    // Own properties of Gtk-2.0.Gtk.Settings

    /**
     * Holds a hash table representation of the #GtkSettings:gtk-color-scheme
     * setting, mapping color names to #GdkColor<!-- -->s.
     */
    readonly colorHash: GLib.HashTable
    gtkAlternativeButtonOrder: boolean
    /**
     * Controls the direction of the sort indicators in sorted list and tree
     * views. By default an arrow pointing down means the column is sorted
     * in ascending order. When set to %TRUE, this order will be inverted.
     */
    gtkAlternativeSortArrows: boolean
    /**
     * Whether mnemonics should be automatically shown and hidden when the user
     * presses the mnemonic activator.
     */
    gtkAutoMnemonics: boolean
    gtkButtonImages: boolean
    gtkCanChangeAccels: boolean
    gtkColorPalette: string
    /**
     * A palette of named colors for use in themes. The format of the string is
     * <programlisting>
     * name1: color1
     * name2: color2
     * ...
     * </programlisting>
     * Color names must be acceptable as identifiers in the
     * <link linkend="gtk-Resource-Files">gtkrc</link> syntax, and
     * color specifications must be in the format accepted by
     * gdk_color_parse().
     * 
     * Note that due to the way the color tables from different sources are
     * merged, color specifications will be converted to hexadecimal form
     * when getting this property.
     * 
     * Starting with GTK+ 2.12, the entries can alternatively be separated
     * by ';' instead of newlines:
     * <programlisting>
     * name1: color1; name2: color2; ...
     * </programlisting>
     */
    gtkColorScheme: string
    /**
     * Whether the cursor should blink.
     * 
     * Also see the #GtkSettings:gtk-cursor-blink-timeout setting,
     * which allows more flexible control over cursor blinking.
     */
    gtkCursorBlink: boolean
    gtkCursorBlinkTime: number
    /**
     * Time after which the cursor stops blinking, in seconds.
     * The timer is reset after each user interaction.
     * 
     * Setting this to zero has the same effect as setting
     * #GtkSettings:gtk-cursor-blink to %FALSE.
     */
    gtkCursorBlinkTimeout: number
    gtkCursorThemeName: string
    gtkCursorThemeSize: number
    gtkDndDragThreshold: number
    gtkDoubleClickDistance: number
    gtkDoubleClickTime: number
    /**
     * Whether menu items should have visible accelerators which can be
     * activated.
     */
    gtkEnableAccels: boolean
    gtkEnableAnimations: boolean
    /**
     * Whether to play any event sounds at all.
     * 
     * See the <ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec">Sound Theme spec</ulink>
     * for more information on event sounds and sound themes.
     * 
     * GTK+ itself does not support event sounds, you have to use a loadable
     * module like the one that comes with libcanberra.
     */
    gtkEnableEventSounds: boolean
    /**
     * Whether to play event sounds as feedback to user input.
     * 
     * See the <ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec">Sound Theme spec</ulink>
     * for more information on event sounds and sound themes.
     * 
     * GTK+ itself does not support event sounds, you have to use a loadable
     * module like the one that comes with libcanberra.
     */
    gtkEnableInputFeedbackSounds: boolean
    /**
     * Whether labels and menu items should have visible mnemonics which
     * can be activated.
     */
    gtkEnableMnemonics: boolean
    /**
     * Whether tooltips should be shown on widgets.
     */
    gtkEnableTooltips: boolean
    /**
     * How long to show the last input character in hidden
     * entries. This value is in milliseconds. 0 disables showing the
     * last char. 600 is a good value for enabling it.
     */
    gtkEntryPasswordHintTimeout: number
    gtkEntrySelectOnFocus: boolean
    /**
     * When %TRUE, keyboard navigation and other input-related errors
     * will cause a beep. Since the error bell is implemented using
     * gdk_window_beep(), the windowing system may offer ways to
     * configure the error bell in many ways, such as flashing the
     * window or similar visual effects.
     */
    gtkErrorBell: boolean
    gtkFallbackIconTheme: string
    gtkFileChooserBackend: string
    gtkFontName: string
    gtkFontconfigTimestamp: number
    /**
     * A list of icon sizes. The list is separated by colons, and
     * item has the form:
     * 
     * <replaceable>size-name</replaceable> = <replaceable>width</replaceable> , <replaceable>height</replaceable>
     * 
     * E.g. "gtk-menu=16,16:gtk-button=20,20:gtk-dialog=48,48".
     * GTK+ itself use the following named icon sizes: gtk-menu,
     * gtk-button, gtk-small-toolbar, gtk-large-toolbar, gtk-dnd,
     * gtk-dialog. Applications can register their own named icon
     * sizes with gtk_icon_size_register().
     */
    gtkIconSizes: string
    gtkIconThemeName: string
    /**
     * Which IM (input method) module should be used by default. This is the
     * input method that will be used if the user has not explicitly chosen
     * another input method from the IM context menu.
     * This also can be a colon-separated list of input methods, which GTK+
     * will try in turn until it finds one available on the system.
     * 
     * See #GtkIMContext and see the #GtkSettings:gtk-show-input-method-menu property.
     */
    gtkImModule: string
    gtkImPreeditStyle: IMPreeditStyle
    gtkImStatusStyle: IMStatusStyle
    gtkKeyThemeName: string
    /**
     * When %TRUE, keyboard navigation should be able to reach all widgets
     * by using the cursor keys only. Tab, Shift etc. keys can't be expected
     * to be present on the used input device.
     */
    gtkKeynavCursorOnly: boolean
    /**
     * When %TRUE, some widgets will wrap around when doing keyboard
     * navigation, such as menus, menubars and notebooks.
     */
    gtkKeynavWrapAround: boolean
    gtkLabelSelectOnFocus: boolean
    gtkMenuBarAccel: string
    gtkMenuBarPopupDelay: number
    gtkMenuImages: boolean
    gtkMenuPopdownDelay: number
    gtkMenuPopupDelay: number
    gtkModules: string
    /**
     * Whether a click in a #GtkRange trough should scroll to the click position or
     * scroll by a single page in the respective direction.
     */
    gtkPrimaryButtonWarpsSlider: boolean
    /**
     * A comma-separated list of print backends to use in the print
     * dialog. Available print backends depend on the GTK+ installation,
     * and may include "file", "cups", "lpr" or "papi".
     */
    gtkPrintBackends: string
    /**
     * A command to run for displaying the print preview. The command
     * should contain a %f placeholder, which will get replaced by
     * the path to the pdf file. The command may also contain a %s
     * placeholder, which will get replaced by the path to a file
     * containing the print settings in the format produced by
     * gtk_print_settings_to_file().
     * 
     * The preview application is responsible for removing the pdf file
     * and the print settings file when it is done.
     */
    gtkPrintPreviewCommand: string
    /**
     * The number of recently used files that should be displayed by default by
     * #GtkRecentChooser implementations and by the #GtkFileChooser. A value of
     * -1 means every recently used file stored.
     */
    gtkRecentFilesLimit: number
    /**
     * The maximum age, in days, of the items inside the recently used
     * resources list. Items older than this setting will be excised
     * from the list. If set to 0, the list will always be empty; if
     * set to -1, no item will be removed.
     */
    gtkRecentFilesMaxAge: number
    /**
     * Where the contents of scrolled windows are located with respect to the
     * scrollbars, if not overridden by the scrolled window's own placement.
     */
    gtkScrolledWindowPlacement: CornerType
    gtkShowInputMethodMenu: boolean
    gtkShowUnicodeMenu: boolean
    /**
     * The XDG sound theme to use for event sounds.
     * 
     * See the <ulink url="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec">Sound Theme spec</ulink>
     * for more information on event sounds and sound themes.
     * 
     * GTK+ itself does not support event sounds, you have to use a loadable
     * module like the one that comes with libcanberra.
     */
    gtkSoundThemeName: string
    gtkSplitCursor: boolean
    gtkThemeName: string
    gtkTimeoutExpand: number
    gtkTimeoutInitial: number
    gtkTimeoutRepeat: number
    gtkToolbarIconSize: IconSize
    gtkToolbarStyle: ToolbarStyle
    /**
     * Amount of time, in milliseconds, after which the browse mode
     * will be disabled.
     * 
     * See #GtkSettings:gtk-tooltip-browse-timeout for more information
     * about browse mode.
     */
    gtkTooltipBrowseModeTimeout: number
    /**
     * Controls the time after which tooltips will appear when
     * browse mode is enabled, in milliseconds.
     * 
     * Browse mode is enabled when the mouse pointer moves off an object
     * where a tooltip was currently being displayed. If the mouse pointer
     * hits another object before the browse mode timeout expires (see
     * #GtkSettings:gtk-tooltip-browse-mode-timeout), it will take the
     * amount of milliseconds specified by this setting to popup the tooltip
     * for the new object.
     */
    gtkTooltipBrowseTimeout: number
    /**
     * Time, in milliseconds, after which a tooltip could appear if the
     * cursor is hovering on top of a widget.
     */
    gtkTooltipTimeout: number
    /**
     * When %TRUE, there are no motion notify events delivered on this screen,
     * and widgets can't use the pointer hovering them for any essential
     * functionality.
     */
    gtkTouchscreenMode: boolean
    gtkXftAntialias: number
    gtkXftDpi: number
    gtkXftHinting: number
    gtkXftHintstyle: string
    gtkXftRgba: string

    // Own fields of Gtk-2.0.Gtk.Settings

    parentInstance: GObject.Object
    queuedSettings: GLib.Data
    propertyValues: SettingsPropertyValue
    rcContext: RcContext
    screen: Gdk.Screen

    // Owm methods of Gtk-2.0.Gtk.Settings

    setDoubleProperty(name: string, vDouble: number, origin: string): void
    setLongProperty(name: string, vLong: number, origin: string): void
    setPropertyValue(name: string, svalue: SettingsValue): void
    setStringProperty(name: string, vString: string, origin: string): void

    // Class property signals of Gtk-2.0.Gtk.Settings

    connect(sigName: "notify::color-hash", callback: any): number
    on(sigName: "notify::color-hash", callback: any): number
    once(sigName: "notify::color-hash", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::color-hash", ...args: any[]): void
    connect(sigName: "notify::gtk-alternative-button-order", callback: any): number
    on(sigName: "notify::gtk-alternative-button-order", callback: any): number
    once(sigName: "notify::gtk-alternative-button-order", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-alternative-button-order", ...args: any[]): void
    connect(sigName: "notify::gtk-alternative-sort-arrows", callback: any): number
    on(sigName: "notify::gtk-alternative-sort-arrows", callback: any): number
    once(sigName: "notify::gtk-alternative-sort-arrows", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-alternative-sort-arrows", ...args: any[]): void
    connect(sigName: "notify::gtk-auto-mnemonics", callback: any): number
    on(sigName: "notify::gtk-auto-mnemonics", callback: any): number
    once(sigName: "notify::gtk-auto-mnemonics", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-auto-mnemonics", ...args: any[]): void
    connect(sigName: "notify::gtk-button-images", callback: any): number
    on(sigName: "notify::gtk-button-images", callback: any): number
    once(sigName: "notify::gtk-button-images", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-button-images", ...args: any[]): void
    connect(sigName: "notify::gtk-can-change-accels", callback: any): number
    on(sigName: "notify::gtk-can-change-accels", callback: any): number
    once(sigName: "notify::gtk-can-change-accels", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-can-change-accels", ...args: any[]): void
    connect(sigName: "notify::gtk-color-palette", callback: any): number
    on(sigName: "notify::gtk-color-palette", callback: any): number
    once(sigName: "notify::gtk-color-palette", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-color-palette", ...args: any[]): void
    connect(sigName: "notify::gtk-color-scheme", callback: any): number
    on(sigName: "notify::gtk-color-scheme", callback: any): number
    once(sigName: "notify::gtk-color-scheme", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-color-scheme", ...args: any[]): void
    connect(sigName: "notify::gtk-cursor-blink", callback: any): number
    on(sigName: "notify::gtk-cursor-blink", callback: any): number
    once(sigName: "notify::gtk-cursor-blink", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-cursor-blink", ...args: any[]): void
    connect(sigName: "notify::gtk-cursor-blink-time", callback: any): number
    on(sigName: "notify::gtk-cursor-blink-time", callback: any): number
    once(sigName: "notify::gtk-cursor-blink-time", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-cursor-blink-time", ...args: any[]): void
    connect(sigName: "notify::gtk-cursor-blink-timeout", callback: any): number
    on(sigName: "notify::gtk-cursor-blink-timeout", callback: any): number
    once(sigName: "notify::gtk-cursor-blink-timeout", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-cursor-blink-timeout", ...args: any[]): void
    connect(sigName: "notify::gtk-cursor-theme-name", callback: any): number
    on(sigName: "notify::gtk-cursor-theme-name", callback: any): number
    once(sigName: "notify::gtk-cursor-theme-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-cursor-theme-name", ...args: any[]): void
    connect(sigName: "notify::gtk-cursor-theme-size", callback: any): number
    on(sigName: "notify::gtk-cursor-theme-size", callback: any): number
    once(sigName: "notify::gtk-cursor-theme-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-cursor-theme-size", ...args: any[]): void
    connect(sigName: "notify::gtk-dnd-drag-threshold", callback: any): number
    on(sigName: "notify::gtk-dnd-drag-threshold", callback: any): number
    once(sigName: "notify::gtk-dnd-drag-threshold", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-dnd-drag-threshold", ...args: any[]): void
    connect(sigName: "notify::gtk-double-click-distance", callback: any): number
    on(sigName: "notify::gtk-double-click-distance", callback: any): number
    once(sigName: "notify::gtk-double-click-distance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-double-click-distance", ...args: any[]): void
    connect(sigName: "notify::gtk-double-click-time", callback: any): number
    on(sigName: "notify::gtk-double-click-time", callback: any): number
    once(sigName: "notify::gtk-double-click-time", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-double-click-time", ...args: any[]): void
    connect(sigName: "notify::gtk-enable-accels", callback: any): number
    on(sigName: "notify::gtk-enable-accels", callback: any): number
    once(sigName: "notify::gtk-enable-accels", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-enable-accels", ...args: any[]): void
    connect(sigName: "notify::gtk-enable-animations", callback: any): number
    on(sigName: "notify::gtk-enable-animations", callback: any): number
    once(sigName: "notify::gtk-enable-animations", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-enable-animations", ...args: any[]): void
    connect(sigName: "notify::gtk-enable-event-sounds", callback: any): number
    on(sigName: "notify::gtk-enable-event-sounds", callback: any): number
    once(sigName: "notify::gtk-enable-event-sounds", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-enable-event-sounds", ...args: any[]): void
    connect(sigName: "notify::gtk-enable-input-feedback-sounds", callback: any): number
    on(sigName: "notify::gtk-enable-input-feedback-sounds", callback: any): number
    once(sigName: "notify::gtk-enable-input-feedback-sounds", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-enable-input-feedback-sounds", ...args: any[]): void
    connect(sigName: "notify::gtk-enable-mnemonics", callback: any): number
    on(sigName: "notify::gtk-enable-mnemonics", callback: any): number
    once(sigName: "notify::gtk-enable-mnemonics", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-enable-mnemonics", ...args: any[]): void
    connect(sigName: "notify::gtk-enable-tooltips", callback: any): number
    on(sigName: "notify::gtk-enable-tooltips", callback: any): number
    once(sigName: "notify::gtk-enable-tooltips", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-enable-tooltips", ...args: any[]): void
    connect(sigName: "notify::gtk-entry-password-hint-timeout", callback: any): number
    on(sigName: "notify::gtk-entry-password-hint-timeout", callback: any): number
    once(sigName: "notify::gtk-entry-password-hint-timeout", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-entry-password-hint-timeout", ...args: any[]): void
    connect(sigName: "notify::gtk-entry-select-on-focus", callback: any): number
    on(sigName: "notify::gtk-entry-select-on-focus", callback: any): number
    once(sigName: "notify::gtk-entry-select-on-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-entry-select-on-focus", ...args: any[]): void
    connect(sigName: "notify::gtk-error-bell", callback: any): number
    on(sigName: "notify::gtk-error-bell", callback: any): number
    once(sigName: "notify::gtk-error-bell", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-error-bell", ...args: any[]): void
    connect(sigName: "notify::gtk-fallback-icon-theme", callback: any): number
    on(sigName: "notify::gtk-fallback-icon-theme", callback: any): number
    once(sigName: "notify::gtk-fallback-icon-theme", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-fallback-icon-theme", ...args: any[]): void
    connect(sigName: "notify::gtk-file-chooser-backend", callback: any): number
    on(sigName: "notify::gtk-file-chooser-backend", callback: any): number
    once(sigName: "notify::gtk-file-chooser-backend", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-file-chooser-backend", ...args: any[]): void
    connect(sigName: "notify::gtk-font-name", callback: any): number
    on(sigName: "notify::gtk-font-name", callback: any): number
    once(sigName: "notify::gtk-font-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-font-name", ...args: any[]): void
    connect(sigName: "notify::gtk-fontconfig-timestamp", callback: any): number
    on(sigName: "notify::gtk-fontconfig-timestamp", callback: any): number
    once(sigName: "notify::gtk-fontconfig-timestamp", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-fontconfig-timestamp", ...args: any[]): void
    connect(sigName: "notify::gtk-icon-sizes", callback: any): number
    on(sigName: "notify::gtk-icon-sizes", callback: any): number
    once(sigName: "notify::gtk-icon-sizes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-icon-sizes", ...args: any[]): void
    connect(sigName: "notify::gtk-icon-theme-name", callback: any): number
    on(sigName: "notify::gtk-icon-theme-name", callback: any): number
    once(sigName: "notify::gtk-icon-theme-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-icon-theme-name", ...args: any[]): void
    connect(sigName: "notify::gtk-im-module", callback: any): number
    on(sigName: "notify::gtk-im-module", callback: any): number
    once(sigName: "notify::gtk-im-module", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-im-module", ...args: any[]): void
    connect(sigName: "notify::gtk-im-preedit-style", callback: any): number
    on(sigName: "notify::gtk-im-preedit-style", callback: any): number
    once(sigName: "notify::gtk-im-preedit-style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-im-preedit-style", ...args: any[]): void
    connect(sigName: "notify::gtk-im-status-style", callback: any): number
    on(sigName: "notify::gtk-im-status-style", callback: any): number
    once(sigName: "notify::gtk-im-status-style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-im-status-style", ...args: any[]): void
    connect(sigName: "notify::gtk-key-theme-name", callback: any): number
    on(sigName: "notify::gtk-key-theme-name", callback: any): number
    once(sigName: "notify::gtk-key-theme-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-key-theme-name", ...args: any[]): void
    connect(sigName: "notify::gtk-keynav-cursor-only", callback: any): number
    on(sigName: "notify::gtk-keynav-cursor-only", callback: any): number
    once(sigName: "notify::gtk-keynav-cursor-only", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-keynav-cursor-only", ...args: any[]): void
    connect(sigName: "notify::gtk-keynav-wrap-around", callback: any): number
    on(sigName: "notify::gtk-keynav-wrap-around", callback: any): number
    once(sigName: "notify::gtk-keynav-wrap-around", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-keynav-wrap-around", ...args: any[]): void
    connect(sigName: "notify::gtk-label-select-on-focus", callback: any): number
    on(sigName: "notify::gtk-label-select-on-focus", callback: any): number
    once(sigName: "notify::gtk-label-select-on-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-label-select-on-focus", ...args: any[]): void
    connect(sigName: "notify::gtk-menu-bar-accel", callback: any): number
    on(sigName: "notify::gtk-menu-bar-accel", callback: any): number
    once(sigName: "notify::gtk-menu-bar-accel", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-menu-bar-accel", ...args: any[]): void
    connect(sigName: "notify::gtk-menu-bar-popup-delay", callback: any): number
    on(sigName: "notify::gtk-menu-bar-popup-delay", callback: any): number
    once(sigName: "notify::gtk-menu-bar-popup-delay", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-menu-bar-popup-delay", ...args: any[]): void
    connect(sigName: "notify::gtk-menu-images", callback: any): number
    on(sigName: "notify::gtk-menu-images", callback: any): number
    once(sigName: "notify::gtk-menu-images", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-menu-images", ...args: any[]): void
    connect(sigName: "notify::gtk-menu-popdown-delay", callback: any): number
    on(sigName: "notify::gtk-menu-popdown-delay", callback: any): number
    once(sigName: "notify::gtk-menu-popdown-delay", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-menu-popdown-delay", ...args: any[]): void
    connect(sigName: "notify::gtk-menu-popup-delay", callback: any): number
    on(sigName: "notify::gtk-menu-popup-delay", callback: any): number
    once(sigName: "notify::gtk-menu-popup-delay", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-menu-popup-delay", ...args: any[]): void
    connect(sigName: "notify::gtk-modules", callback: any): number
    on(sigName: "notify::gtk-modules", callback: any): number
    once(sigName: "notify::gtk-modules", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-modules", ...args: any[]): void
    connect(sigName: "notify::gtk-primary-button-warps-slider", callback: any): number
    on(sigName: "notify::gtk-primary-button-warps-slider", callback: any): number
    once(sigName: "notify::gtk-primary-button-warps-slider", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-primary-button-warps-slider", ...args: any[]): void
    connect(sigName: "notify::gtk-print-backends", callback: any): number
    on(sigName: "notify::gtk-print-backends", callback: any): number
    once(sigName: "notify::gtk-print-backends", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-print-backends", ...args: any[]): void
    connect(sigName: "notify::gtk-print-preview-command", callback: any): number
    on(sigName: "notify::gtk-print-preview-command", callback: any): number
    once(sigName: "notify::gtk-print-preview-command", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-print-preview-command", ...args: any[]): void
    connect(sigName: "notify::gtk-recent-files-limit", callback: any): number
    on(sigName: "notify::gtk-recent-files-limit", callback: any): number
    once(sigName: "notify::gtk-recent-files-limit", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-recent-files-limit", ...args: any[]): void
    connect(sigName: "notify::gtk-recent-files-max-age", callback: any): number
    on(sigName: "notify::gtk-recent-files-max-age", callback: any): number
    once(sigName: "notify::gtk-recent-files-max-age", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-recent-files-max-age", ...args: any[]): void
    connect(sigName: "notify::gtk-scrolled-window-placement", callback: any): number
    on(sigName: "notify::gtk-scrolled-window-placement", callback: any): number
    once(sigName: "notify::gtk-scrolled-window-placement", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-scrolled-window-placement", ...args: any[]): void
    connect(sigName: "notify::gtk-show-input-method-menu", callback: any): number
    on(sigName: "notify::gtk-show-input-method-menu", callback: any): number
    once(sigName: "notify::gtk-show-input-method-menu", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-show-input-method-menu", ...args: any[]): void
    connect(sigName: "notify::gtk-show-unicode-menu", callback: any): number
    on(sigName: "notify::gtk-show-unicode-menu", callback: any): number
    once(sigName: "notify::gtk-show-unicode-menu", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-show-unicode-menu", ...args: any[]): void
    connect(sigName: "notify::gtk-sound-theme-name", callback: any): number
    on(sigName: "notify::gtk-sound-theme-name", callback: any): number
    once(sigName: "notify::gtk-sound-theme-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-sound-theme-name", ...args: any[]): void
    connect(sigName: "notify::gtk-split-cursor", callback: any): number
    on(sigName: "notify::gtk-split-cursor", callback: any): number
    once(sigName: "notify::gtk-split-cursor", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-split-cursor", ...args: any[]): void
    connect(sigName: "notify::gtk-theme-name", callback: any): number
    on(sigName: "notify::gtk-theme-name", callback: any): number
    once(sigName: "notify::gtk-theme-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-theme-name", ...args: any[]): void
    connect(sigName: "notify::gtk-timeout-expand", callback: any): number
    on(sigName: "notify::gtk-timeout-expand", callback: any): number
    once(sigName: "notify::gtk-timeout-expand", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-timeout-expand", ...args: any[]): void
    connect(sigName: "notify::gtk-timeout-initial", callback: any): number
    on(sigName: "notify::gtk-timeout-initial", callback: any): number
    once(sigName: "notify::gtk-timeout-initial", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-timeout-initial", ...args: any[]): void
    connect(sigName: "notify::gtk-timeout-repeat", callback: any): number
    on(sigName: "notify::gtk-timeout-repeat", callback: any): number
    once(sigName: "notify::gtk-timeout-repeat", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-timeout-repeat", ...args: any[]): void
    connect(sigName: "notify::gtk-toolbar-icon-size", callback: any): number
    on(sigName: "notify::gtk-toolbar-icon-size", callback: any): number
    once(sigName: "notify::gtk-toolbar-icon-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-toolbar-icon-size", ...args: any[]): void
    connect(sigName: "notify::gtk-toolbar-style", callback: any): number
    on(sigName: "notify::gtk-toolbar-style", callback: any): number
    once(sigName: "notify::gtk-toolbar-style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-toolbar-style", ...args: any[]): void
    connect(sigName: "notify::gtk-tooltip-browse-mode-timeout", callback: any): number
    on(sigName: "notify::gtk-tooltip-browse-mode-timeout", callback: any): number
    once(sigName: "notify::gtk-tooltip-browse-mode-timeout", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-tooltip-browse-mode-timeout", ...args: any[]): void
    connect(sigName: "notify::gtk-tooltip-browse-timeout", callback: any): number
    on(sigName: "notify::gtk-tooltip-browse-timeout", callback: any): number
    once(sigName: "notify::gtk-tooltip-browse-timeout", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-tooltip-browse-timeout", ...args: any[]): void
    connect(sigName: "notify::gtk-tooltip-timeout", callback: any): number
    on(sigName: "notify::gtk-tooltip-timeout", callback: any): number
    once(sigName: "notify::gtk-tooltip-timeout", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-tooltip-timeout", ...args: any[]): void
    connect(sigName: "notify::gtk-touchscreen-mode", callback: any): number
    on(sigName: "notify::gtk-touchscreen-mode", callback: any): number
    once(sigName: "notify::gtk-touchscreen-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-touchscreen-mode", ...args: any[]): void
    connect(sigName: "notify::gtk-xft-antialias", callback: any): number
    on(sigName: "notify::gtk-xft-antialias", callback: any): number
    once(sigName: "notify::gtk-xft-antialias", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-xft-antialias", ...args: any[]): void
    connect(sigName: "notify::gtk-xft-dpi", callback: any): number
    on(sigName: "notify::gtk-xft-dpi", callback: any): number
    once(sigName: "notify::gtk-xft-dpi", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-xft-dpi", ...args: any[]): void
    connect(sigName: "notify::gtk-xft-hinting", callback: any): number
    on(sigName: "notify::gtk-xft-hinting", callback: any): number
    once(sigName: "notify::gtk-xft-hinting", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-xft-hinting", ...args: any[]): void
    connect(sigName: "notify::gtk-xft-hintstyle", callback: any): number
    on(sigName: "notify::gtk-xft-hintstyle", callback: any): number
    once(sigName: "notify::gtk-xft-hintstyle", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-xft-hintstyle", ...args: any[]): void
    connect(sigName: "notify::gtk-xft-rgba", callback: any): number
    on(sigName: "notify::gtk-xft-rgba", callback: any): number
    once(sigName: "notify::gtk-xft-rgba", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gtk-xft-rgba", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Settings extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Settings

    static name: string

    // Constructors of Gtk-2.0.Gtk.Settings

    constructor(config?: Settings.ConstructorProperties) 
    _init(config?: Settings.ConstructorProperties): void
    /**
     * Gets the #GtkSettings object for the default GDK screen, creating
     * it if necessary. See gtk_settings_get_for_screen().
     */
    static getDefault(): Settings
    /**
     * Gets the #GtkSettings object for `screen,` creating it if necessary.
     * @param screen a #GdkScreen.
     */
    static getForScreen(screen: Gdk.Screen): Settings
    static installProperty(pspec: GObject.ParamSpec): void
}

export module SizeGroup {

    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.SizeGroup

        /**
         * If %TRUE, unmapped widgets are ignored when determining
         * the size of the group.
         */
        ignoreHidden?: boolean | null
        mode?: SizeGroupMode | null
    }

}

export interface SizeGroup extends Buildable {

    // Own properties of Gtk-2.0.Gtk.SizeGroup

    /**
     * If %TRUE, unmapped widgets are ignored when determining
     * the size of the group.
     */
    ignoreHidden: boolean
    mode: SizeGroupMode

    // Own fields of Gtk-2.0.Gtk.SizeGroup

    parentInstance: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.SizeGroup

    /**
     * Adds a widget to a #GtkSizeGroup. In the future, the requisition
     * of the widget will be determined as the maximum of its requisition
     * and the requisition of the other widgets in the size group.
     * Whether this applies horizontally, vertically, or in both directions
     * depends on the mode of the size group. See gtk_size_group_set_mode().
     * 
     * When the widget is destroyed or no longer referenced elsewhere, it will
     * be removed from the size group.
     * @param widget the #GtkWidget to add
     */
    addWidget(widget: Widget): void
    /**
     * Returns if invisible widgets are ignored when calculating the size.
     */
    getIgnoreHidden(): boolean
    /**
     * Gets the current mode of the size group. See gtk_size_group_set_mode().
     */
    getMode(): SizeGroupMode
    /**
     * Returns the list of widgets associated with `size_group`.
     */
    getWidgets(): Widget[]
    /**
     * Removes a widget from a #GtkSizeGroup.
     * @param widget the #GtkWidget to remove
     */
    removeWidget(widget: Widget): void
    /**
     * Sets whether unmapped widgets should be ignored when
     * calculating the size.
     * @param ignoreHidden whether unmapped widgets should be ignored   when calculating the size
     */
    setIgnoreHidden(ignoreHidden: boolean): void
    /**
     * Sets the #GtkSizeGroupMode of the size group. The mode of the size
     * group determines whether the widgets in the size group should
     * all have the same horizontal requisition (%GTK_SIZE_GROUP_MODE_HORIZONTAL)
     * all have the same vertical requisition (%GTK_SIZE_GROUP_MODE_VERTICAL),
     * or should all have the same requisition in both directions
     * (%GTK_SIZE_GROUP_MODE_BOTH).
     * @param mode the mode to set for the size group.
     */
    setMode(mode: SizeGroupMode): void

    // Class property signals of Gtk-2.0.Gtk.SizeGroup

    connect(sigName: "notify::ignore-hidden", callback: any): number
    on(sigName: "notify::ignore-hidden", callback: any): number
    once(sigName: "notify::ignore-hidden", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ignore-hidden", ...args: any[]): void
    connect(sigName: "notify::mode", callback: any): number
    on(sigName: "notify::mode", callback: any): number
    once(sigName: "notify::mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mode", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class SizeGroup extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.SizeGroup

    static name: string

    // Constructors of Gtk-2.0.Gtk.SizeGroup

    constructor(config?: SizeGroup.ConstructorProperties) 
    /**
     * Create a new #GtkSizeGroup.
     * @constructor 
     * @param mode the mode for the new size group.
     */
    constructor(mode: SizeGroupMode) 
    /**
     * Create a new #GtkSizeGroup.
     * @constructor 
     * @param mode the mode for the new size group.
     */
    static new(mode: SizeGroupMode): SizeGroup
    _init(config?: SizeGroup.ConstructorProperties): void
}

export module Socket {

    // Signal callback interfaces

    /**
     * Signal callback interface for `plug-added`
     */
    export interface PlugAddedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `plug-removed`
     */
    export interface PlugRemovedSignalCallback {
        (): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {
    }

}

export interface Socket extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Socket

    container: Container
    requestWidth: number
    requestHeight: number
    currentWidth: number
    currentHeight: number
    plugWindow: Gdk.Window
    plugWidget: Widget
    xembedVersion: number
    sameApp: number
    focusIn: number
    haveSize: number
    needMap: number
    isMapped: number
    active: number
    accelGroup: AccelGroup
    toplevel: Widget

    // Owm methods of Gtk-2.0.Gtk.Socket

    /**
     * Adds an XEMBED client, such as a #GtkPlug, to the #GtkSocket.  The
     * client may be in the same process or in a different process.
     * 
     * To embed a #GtkPlug in a #GtkSocket, you can either create the
     * #GtkPlug with <literal>gtk_plug_new (0)</literal>, call
     * gtk_plug_get_id() to get the window ID of the plug, and then pass that to the
     * gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the
     * window ID for the socket, and call gtk_plug_new() passing in that
     * ID.
     * 
     * The #GtkSocket must have already be added into a toplevel window
     *  before you can make this call.
     * @param windowId the window ID of a client participating in the XEMBED protocol.
     */
    addId(windowId: Gdk.NativeWindow): void
    /**
     * Gets the window ID of a #GtkSocket widget, which can then
     * be used to create a client embedded inside the socket, for
     * instance with gtk_plug_new().
     * 
     * The #GtkSocket must have already be added into a toplevel window
     * before you can make this call.
     */
    getId(): Gdk.NativeWindow
    /**
     * Retrieves the window of the plug. Use this to check if the plug has
     * been created inside of the socket.
     */
    getPlugWindow(): Gdk.Window
    /**
     * Reparents a pre-existing toplevel window into a #GtkSocket. This is
     * meant to embed clients that do not know about embedding into a
     * #GtkSocket, however doing so is inherently unreliable, and using
     * this function is not recommended.
     * 
     * The #GtkSocket must have already be added into a toplevel window
     *  before you can make this call.
     * @param wid the window ID of an existing toplevel window.
     */
    steal(wid: Gdk.NativeWindow): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Socket

    plugAdded(): void
    plugRemoved(): boolean

    // Own signals of Gtk-2.0.Gtk.Socket

    connect(sigName: "plug-added", callback: Socket.PlugAddedSignalCallback): number
    on(sigName: "plug-added", callback: Socket.PlugAddedSignalCallback): number
    once(sigName: "plug-added", callback: Socket.PlugAddedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "plug-added", ...args: any[]): void
    connect(sigName: "plug-removed", callback: Socket.PlugRemovedSignalCallback): number
    on(sigName: "plug-removed", callback: Socket.PlugRemovedSignalCallback): number
    once(sigName: "plug-removed", callback: Socket.PlugRemovedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "plug-removed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Socket

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * Together with #GtkPlug, #GtkSocket provides the ability
 * to embed widgets from one process into another process
 * in a fashion that is transparent to the user. One
 * process creates a #GtkSocket widget and passes
 * that widget's window ID to the other process,
 * which then creates a #GtkPlug with that window ID.
 * Any widgets contained in the #GtkPlug then will appear
 * inside the first application's window.
 * 
 * The socket's window ID is obtained by using
 * gtk_socket_get_id(). Before using this function,
 * the socket must have been realized, and for hence,
 * have been added to its parent.
 * 
 * <example>
 * <title>Obtaining the window ID of a socket.</title>
 * <programlisting>
 * GtkWidget *socket = gtk_socket_new (<!-- -->);
 * gtk_widget_show (socket);
 * gtk_container_add (GTK_CONTAINER (parent), socket);
 * 
 * /<!---->* The following call is only necessary if one of
 *  * the ancestors of the socket is not yet visible.
 *  *<!---->/
 * gtk_widget_realize (socket);
 * g_print ("The ID of the sockets window is %#x\n",
 *          gtk_socket_get_id (socket));
 * </programlisting>
 * </example>
 * 
 * Note that if you pass the window ID of the socket to another
 * process that will create a plug in the socket, you
 * must make sure that the socket widget is not destroyed
 * until that plug is created. Violating this rule will
 * cause unpredictable consequences, the most likely
 * consequence being that the plug will appear as a
 * separate toplevel window. You can check if the plug
 * has been created by using gtk_socket_get_plug_window(). If
 * it returns a non-%NULL value, then the plug has been
 * successfully created inside of the socket.
 * 
 * When GTK+ is notified that the embedded window has been
 * destroyed, then it will destroy the socket as well. You
 * should always, therefore, be prepared for your sockets
 * to be destroyed at any time when the main event loop
 * is running. To prevent this from happening, you can
 * connect to the #GtkSocket::plug-removed signal.
 * 
 * The communication between a #GtkSocket and a #GtkPlug follows the
 * <ulink url="http://www.freedesktop.org/Standards/xembed-spec">XEmbed</ulink>
 * protocol. This protocol has also been implemented in other toolkits, e.g.
 * <application>Qt</application>, allowing the same level of integration
 * when embedding a <application>Qt</application> widget in GTK or vice versa.
 * 
 * A socket can also be used to swallow arbitrary
 * pre-existing top-level windows using gtk_socket_steal(),
 * though the integration when this is done will not be as close
 * as between a #GtkPlug and a #GtkSocket.
 * 
 * <note>
 * The #GtkPlug and #GtkSocket widgets are currently not available
 * on all platforms supported by GTK+.
 * </note>
 * @class 
 */
export class Socket extends Container {

    // Own properties of Gtk-2.0.Gtk.Socket

    static name: string

    // Constructors of Gtk-2.0.Gtk.Socket

    constructor(config?: Socket.ConstructorProperties) 
    /**
     * Create a new empty #GtkSocket.
     * @constructor 
     */
    constructor() 
    /**
     * Create a new empty #GtkSocket.
     * @constructor 
     */
    static new(): Socket
    _init(config?: Socket.ConstructorProperties): void
}

export module SpinButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `change-value`
     */
    export interface ChangeValueSignalCallback {
        (object: ScrollType): void
    }

    /**
     * Signal callback interface for `input`
     */
    export interface InputSignalCallback {
        (object: object | null): number
    }

    /**
     * Signal callback interface for `output`
     */
    export interface OutputSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `value-changed`
     */
    export interface ValueChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `wrapped`
     */
    export interface WrappedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, CellEditable.ConstructorProperties, Editable.ConstructorProperties, Entry.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.SpinButton

        adjustment?: Adjustment | null
        climbRate?: number | null
        digits?: number | null
        numeric?: boolean | null
        snapToTicks?: boolean | null
        updatePolicy?: SpinButtonUpdatePolicy | null
        value?: number | null
        wrap?: boolean | null
    }

}

export interface SpinButton extends Atk.ImplementorIface, Buildable, CellEditable, Editable {

    // Own properties of Gtk-2.0.Gtk.SpinButton

    value: number

    // Conflicting properties

    visible: any

    // Own fields of Gtk-2.0.Gtk.SpinButton

    entry: Entry
    adjustment: Adjustment
    panel: Gdk.Window
    timer: number
    climbRate: number
    timerStep: number
    updatePolicy: SpinButtonUpdatePolicy
    inChild: number
    clickChild: number
    button: number
    needTimer: number
    timerCalls: number
    digits: number
    numeric: number
    wrap: number
    snapToTicks: number

    // Owm methods of Gtk-2.0.Gtk.SpinButton

    /**
     * Changes the properties of an existing spin button. The adjustment, climb rate,
     * and number of decimal places are all changed accordingly, after this function call.
     * @param adjustment a #GtkAdjustment.
     * @param climbRate the new climb rate.
     * @param digits the number of decimal places to display in the spin button.
     */
    configure(adjustment: Adjustment | null, climbRate: number, digits: number): void
    /**
     * Get the adjustment associated with a #GtkSpinButton
     */
    getAdjustment(): Adjustment
    /**
     * Fetches the precision of `spin_button`. See gtk_spin_button_set_digits().
     */
    getDigits(): number
    /**
     * Gets the current step and page the increments used by `spin_button`. See
     * gtk_spin_button_set_increments().
     */
    getIncrements(): [ /* step */ number, /* page */ number ]
    /**
     * Returns whether non-numeric text can be typed into the spin button.
     * See gtk_spin_button_set_numeric().
     */
    getNumeric(): boolean
    /**
     * Gets the range allowed for `spin_button`. See
     * gtk_spin_button_set_range().
     */
    getRange(): [ /* min */ number, /* max */ number ]
    /**
     * Returns whether the values are corrected to the nearest step. See
     * gtk_spin_button_set_snap_to_ticks().
     */
    getSnapToTicks(): boolean
    /**
     * Gets the update behavior of a spin button. See
     * gtk_spin_button_set_update_policy().
     */
    getUpdatePolicy(): SpinButtonUpdatePolicy
    /**
     * Get the value in the `spin_button`.
     */
    getValue(): number
    /**
     * Get the value `spin_button` represented as an integer.
     */
    getValueAsInt(): number
    /**
     * Returns whether the spin button's value wraps around to the
     * opposite limit when the upper or lower limit of the range is
     * exceeded. See gtk_spin_button_set_wrap().
     */
    getWrap(): boolean
    /**
     * Replaces the #GtkAdjustment associated with `spin_button`.
     * @param adjustment a #GtkAdjustment to replace the existing adjustment
     */
    setAdjustment(adjustment: Adjustment): void
    /**
     * Set the precision to be displayed by `spin_button`. Up to 20 digit precision
     * is allowed.
     * @param digits the number of digits after the decimal point to be displayed for the spin button's value
     */
    setDigits(digits: number): void
    /**
     * Sets the step and page increments for spin_button.  This affects how
     * quickly the value changes when the spin button's arrows are activated.
     * @param step increment applied for a button 1 press.
     * @param page increment applied for a button 2 press.
     */
    setIncrements(step: number, page: number): void
    /**
     * Sets the flag that determines if non-numeric text can be typed into
     * the spin button.
     * @param numeric flag indicating if only numeric entry is allowed.
     */
    setNumeric(numeric: boolean): void
    /**
     * Sets the minimum and maximum allowable values for `spin_button`
     * @param min minimum allowable value
     * @param max maximum allowable value
     */
    setRange(min: number, max: number): void
    /**
     * Sets the policy as to whether values are corrected to the nearest step
     * increment when a spin button is activated after providing an invalid value.
     * @param snapToTicks a flag indicating if invalid values should be corrected.
     */
    setSnapToTicks(snapToTicks: boolean): void
    /**
     * Sets the update behavior of a spin button. This determines whether the
     * spin button is always updated or only when a valid value is set.
     * @param policy a #GtkSpinButtonUpdatePolicy value
     */
    setUpdatePolicy(policy: SpinButtonUpdatePolicy): void
    /**
     * Set the value of `spin_button`.
     * @param value the new value
     */
    setValue(value: number): void
    /**
     * Sets the flag that determines if a spin button value wraps around to the
     * opposite limit when the upper or lower limit of the range is exceeded.
     * @param wrap a flag indicating if wrapping behavior is performed.
     */
    setWrap(wrap: boolean): void
    /**
     * Increment or decrement a spin button's value in a specified direction
     * by a specified amount.
     * @param direction a #GtkSpinType indicating the direction to spin.
     * @param increment step increment to apply in the specified direction.
     */
    spin(direction: SpinType, increment: number): void
    /**
     * Manually force an update of the spin button.
     */
    update(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void
    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    copyClipboard(): void

    // Overloads of copyClipboard

    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    cutClipboard(): void

    // Overloads of cutClipboard

    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void
    pasteClipboard(): void

    // Overloads of pasteClipboard

    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void

    // Own virtual methods of Gtk-2.0.Gtk.SpinButton

    changeValue(scroll: ScrollType): void
    input(newValue: number): number
    output(): number
    valueChanged(): void
    wrapped(): void

    // Own signals of Gtk-2.0.Gtk.SpinButton

    connect(sigName: "change-value", callback: SpinButton.ChangeValueSignalCallback): number
    on(sigName: "change-value", callback: SpinButton.ChangeValueSignalCallback): number
    once(sigName: "change-value", callback: SpinButton.ChangeValueSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "change-value", ...args: any[]): void
    connect(sigName: "input", callback: SpinButton.InputSignalCallback): number
    on(sigName: "input", callback: SpinButton.InputSignalCallback): number
    once(sigName: "input", callback: SpinButton.InputSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "input", ...args: any[]): void
    connect(sigName: "output", callback: SpinButton.OutputSignalCallback): number
    on(sigName: "output", callback: SpinButton.OutputSignalCallback): number
    once(sigName: "output", callback: SpinButton.OutputSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "output", ...args: any[]): void
    connect(sigName: "value-changed", callback: SpinButton.ValueChangedSignalCallback): number
    on(sigName: "value-changed", callback: SpinButton.ValueChangedSignalCallback): number
    once(sigName: "value-changed", callback: SpinButton.ValueChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "value-changed", ...args: any[]): void
    connect(sigName: "wrapped", callback: SpinButton.WrappedSignalCallback): number
    on(sigName: "wrapped", callback: SpinButton.WrappedSignalCallback): number
    once(sigName: "wrapped", callback: SpinButton.WrappedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "wrapped", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.SpinButton

    connect(sigName: "notify::value", callback: any): number
    on(sigName: "notify::value", callback: any): number
    once(sigName: "notify::value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::activates-default", callback: any): number
    on(sigName: "notify::activates-default", callback: any): number
    once(sigName: "notify::activates-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::activates-default", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: any): number
    on(sigName: "notify::buffer", callback: any): number
    once(sigName: "notify::buffer", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::caps-lock-warning", callback: any): number
    on(sigName: "notify::caps-lock-warning", callback: any): number
    once(sigName: "notify::caps-lock-warning", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::caps-lock-warning", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: any): number
    on(sigName: "notify::cursor-position", callback: any): number
    once(sigName: "notify::cursor-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: any): number
    on(sigName: "notify::has-frame", callback: any): number
    once(sigName: "notify::has-frame", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: any): number
    on(sigName: "notify::im-module", callback: any): number
    once(sigName: "notify::im-module", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::inner-border", callback: any): number
    on(sigName: "notify::inner-border", callback: any): number
    once(sigName: "notify::inner-border", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::inner-border", ...args: any[]): void
    connect(sigName: "notify::invisible-char", callback: any): number
    on(sigName: "notify::invisible-char", callback: any): number
    once(sigName: "notify::invisible-char", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::invisible-char", ...args: any[]): void
    connect(sigName: "notify::invisible-char-set", callback: any): number
    on(sigName: "notify::invisible-char-set", callback: any): number
    once(sigName: "notify::invisible-char-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::invisible-char-set", ...args: any[]): void
    connect(sigName: "notify::max-length", callback: any): number
    on(sigName: "notify::max-length", callback: any): number
    once(sigName: "notify::max-length", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-length", ...args: any[]): void
    connect(sigName: "notify::primary-icon-activatable", callback: any): number
    on(sigName: "notify::primary-icon-activatable", callback: any): number
    once(sigName: "notify::primary-icon-activatable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::primary-icon-gicon", callback: any): number
    on(sigName: "notify::primary-icon-gicon", callback: any): number
    once(sigName: "notify::primary-icon-gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::primary-icon-name", callback: any): number
    on(sigName: "notify::primary-icon-name", callback: any): number
    once(sigName: "notify::primary-icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-name", ...args: any[]): void
    connect(sigName: "notify::primary-icon-pixbuf", callback: any): number
    on(sigName: "notify::primary-icon-pixbuf", callback: any): number
    once(sigName: "notify::primary-icon-pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::primary-icon-sensitive", callback: any): number
    on(sigName: "notify::primary-icon-sensitive", callback: any): number
    once(sigName: "notify::primary-icon-sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::primary-icon-stock", callback: any): number
    on(sigName: "notify::primary-icon-stock", callback: any): number
    once(sigName: "notify::primary-icon-stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::primary-icon-storage-type", callback: any): number
    on(sigName: "notify::primary-icon-storage-type", callback: any): number
    once(sigName: "notify::primary-icon-storage-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-markup", callback: any): number
    on(sigName: "notify::primary-icon-tooltip-markup", callback: any): number
    once(sigName: "notify::primary-icon-tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-text", callback: any): number
    on(sigName: "notify::primary-icon-tooltip-text", callback: any): number
    once(sigName: "notify::primary-icon-tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::primary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::progress-fraction", callback: any): number
    on(sigName: "notify::progress-fraction", callback: any): number
    once(sigName: "notify::progress-fraction", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::progress-fraction", ...args: any[]): void
    connect(sigName: "notify::progress-pulse-step", callback: any): number
    on(sigName: "notify::progress-pulse-step", callback: any): number
    once(sigName: "notify::progress-pulse-step", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::progress-pulse-step", ...args: any[]): void
    connect(sigName: "notify::scroll-offset", callback: any): number
    on(sigName: "notify::scroll-offset", callback: any): number
    once(sigName: "notify::scroll-offset", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scroll-offset", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-activatable", callback: any): number
    on(sigName: "notify::secondary-icon-activatable", callback: any): number
    once(sigName: "notify::secondary-icon-activatable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-gicon", callback: any): number
    on(sigName: "notify::secondary-icon-gicon", callback: any): number
    once(sigName: "notify::secondary-icon-gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-name", callback: any): number
    on(sigName: "notify::secondary-icon-name", callback: any): number
    once(sigName: "notify::secondary-icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-name", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-pixbuf", callback: any): number
    on(sigName: "notify::secondary-icon-pixbuf", callback: any): number
    once(sigName: "notify::secondary-icon-pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-sensitive", callback: any): number
    on(sigName: "notify::secondary-icon-sensitive", callback: any): number
    once(sigName: "notify::secondary-icon-sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-stock", callback: any): number
    on(sigName: "notify::secondary-icon-stock", callback: any): number
    once(sigName: "notify::secondary-icon-stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-storage-type", callback: any): number
    on(sigName: "notify::secondary-icon-storage-type", callback: any): number
    once(sigName: "notify::secondary-icon-storage-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-markup", callback: any): number
    on(sigName: "notify::secondary-icon-tooltip-markup", callback: any): number
    once(sigName: "notify::secondary-icon-tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-text", callback: any): number
    on(sigName: "notify::secondary-icon-tooltip-text", callback: any): number
    once(sigName: "notify::secondary-icon-tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::secondary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: any): number
    on(sigName: "notify::selection-bound", callback: any): number
    once(sigName: "notify::selection-bound", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::shadow-type", callback: any): number
    on(sigName: "notify::shadow-type", callback: any): number
    once(sigName: "notify::shadow-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::shadow-type", ...args: any[]): void
    connect(sigName: "notify::truncate-multiline", callback: any): number
    on(sigName: "notify::truncate-multiline", callback: any): number
    once(sigName: "notify::truncate-multiline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::truncate-multiline", ...args: any[]): void
    connect(sigName: "notify::visibility", callback: any): number
    on(sigName: "notify::visibility", callback: any): number
    once(sigName: "notify::visibility", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visibility", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: any): number
    on(sigName: "notify::editing-canceled", callback: any): number
    once(sigName: "notify::editing-canceled", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class SpinButton extends Entry {

    // Own properties of Gtk-2.0.Gtk.SpinButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.SpinButton

    constructor(config?: SpinButton.ConstructorProperties) 
    constructor(adjustment: Adjustment, climbRate: number, digits: number) 
    static new(adjustment: Adjustment, climbRate: number, digits: number): SpinButton

    // Overloads of new

    /**
     * Creates a new entry.
     * @constructor 
     */
    static new(): Entry
    /**
     * This is a convenience constructor that allows creation of a numeric
     * #GtkSpinButton without manually creating an adjustment. The value is
     * initially set to the minimum value and a page increment of 10 * `step`
     * is the default. The precision of the spin button is equivalent to the
     * precision of `step`.
     * 
     * Note that the way in which the precision is derived works best if `step`
     * is a power of ten. If the resulting precision is not suitable for your
     * needs, use gtk_spin_button_set_digits() to correct it.
     * @constructor 
     * @param min Minimum allowable value
     * @param max Maximum allowable value
     * @param step Increment added or subtracted by spinning the widget
     */
    static newWithRange(min: number, max: number, step: number): SpinButton
    _init(config?: SpinButton.ConstructorProperties): void
}

export module Spinner {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, DrawingArea.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Spinner

        active?: boolean | null
    }

}

export interface Spinner extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Spinner

    active: boolean

    // Own fields of Gtk-2.0.Gtk.Spinner

    parent: DrawingArea & Widget
    priv: SpinnerPrivate

    // Owm methods of Gtk-2.0.Gtk.Spinner

    /**
     * Starts the animation of the spinner.
     */
    start(): void
    /**
     * Stops the animation of the spinner.
     */
    stop(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Spinner

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A GtkSpinner widget displays an icon-size spinning animation.
 * It is often used as an alternative to a #GtkProgressBar for
 * displaying indefinite activity, instead of actual progress.
 * 
 * To start the animation, use gtk_spinner_start(), to stop it
 * use gtk_spinner_stop().
 * @class 
 */
export class Spinner extends DrawingArea {

    // Own properties of Gtk-2.0.Gtk.Spinner

    static name: string

    // Constructors of Gtk-2.0.Gtk.Spinner

    constructor(config?: Spinner.ConstructorProperties) 
    /**
     * Returns a new spinner widget. Not yet started.
     * @constructor 
     */
    constructor() 
    /**
     * Returns a new spinner widget. Not yet started.
     * @constructor 
     */
    static new(): Spinner
    _init(config?: Spinner.ConstructorProperties): void
}

export module StatusIcon {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    export interface ActivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `button-press-event`
     */
    export interface ButtonPressEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `button-release-event`
     */
    export interface ButtonReleaseEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `popup-menu`
     */
    export interface PopupMenuSignalCallback {
        (button: number, activateTime: number): void
    }

    /**
     * Signal callback interface for `query-tooltip`
     */
    export interface QueryTooltipSignalCallback {
        (x: number, y: number, keyboardMode: boolean, tooltip: Tooltip): boolean
    }

    /**
     * Signal callback interface for `scroll-event`
     */
    export interface ScrollEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `size-changed`
     */
    export interface SizeChangedSignalCallback {
        (size: number): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.StatusIcon

        /**
         * Whether or not the status icon is blinking.
         */
        blinking?: boolean | null
        file?: string | null
        /**
         * The #GIcon displayed in the #GtkStatusIcon. For themed icons,
         * the image will be updated automatically if the theme changes.
         */
        gicon?: Gio.Icon | null
        /**
         * Enables or disables the emission of #GtkStatusIcon::query-tooltip on
         * `status_icon`.  A value of %TRUE indicates that `status_icon` can have a
         * tooltip, in this case the status icon will be queried using
         * #GtkStatusIcon::query-tooltip to determine whether it will provide a
         * tooltip or not.
         * 
         * Note that setting this property to %TRUE for the first time will change
         * the event masks of the windows of this status icon to include leave-notify
         * and motion-notify events. This will not be undone when the property is set
         * to %FALSE again.
         * 
         * Whether this property is respected is platform dependent.
         * For plain text tooltips, use #GtkStatusIcon:tooltip-text in preference.
         */
        hasTooltip?: boolean | null
        iconName?: string | null
        pixbuf?: GdkPixbuf.Pixbuf | null
        screen?: Gdk.Screen | null
        stock?: string | null
        /**
         * The title of this tray icon. This should be a short, human-readable,
         * localized string describing the tray icon. It may be used by tools
         * like screen readers to render the tray icon.
         */
        title?: string | null
        /**
         * Sets the text of tooltip to be the given string, which is marked up
         * with the <link linkend="PangoMarkupFormat">Pango text markup
         * language</link>. Also see gtk_tooltip_set_markup().
         * 
         * This is a convenience property which will take care of getting the
         * tooltip shown if the given string is not %NULL.
         * #GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
         * the default handler for the #GtkStatusIcon::query-tooltip signal
         * will take care of displaying the tooltip.
         * 
         * On some platforms, embedded markup will be ignored.
         */
        tooltipMarkup?: string | null
        /**
         * Sets the text of tooltip to be the given string.
         * 
         * Also see gtk_tooltip_set_text().
         * 
         * This is a convenience property which will take care of getting the
         * tooltip shown if the given string is not %NULL.
         * #GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
         * the default handler for the #GtkStatusIcon::query-tooltip signal
         * will take care of displaying the tooltip.
         * 
         * Note that some platforms have limitations on the length of tooltips
         * that they allow on status icons, e.g. Windows only shows the first
         * 64 characters.
         */
        tooltipText?: string | null
        visible?: boolean | null
    }

}

export interface StatusIcon {

    // Own properties of Gtk-2.0.Gtk.StatusIcon

    /**
     * Whether or not the status icon is blinking.
     */
    blinking: boolean
    /**
     * %TRUE if the statusicon is embedded in a notification area.
     */
    readonly embedded: boolean
    file: string
    /**
     * The #GIcon displayed in the #GtkStatusIcon. For themed icons,
     * the image will be updated automatically if the theme changes.
     */
    gicon: Gio.Icon
    /**
     * Enables or disables the emission of #GtkStatusIcon::query-tooltip on
     * `status_icon`.  A value of %TRUE indicates that `status_icon` can have a
     * tooltip, in this case the status icon will be queried using
     * #GtkStatusIcon::query-tooltip to determine whether it will provide a
     * tooltip or not.
     * 
     * Note that setting this property to %TRUE for the first time will change
     * the event masks of the windows of this status icon to include leave-notify
     * and motion-notify events. This will not be undone when the property is set
     * to %FALSE again.
     * 
     * Whether this property is respected is platform dependent.
     * For plain text tooltips, use #GtkStatusIcon:tooltip-text in preference.
     */
    hasTooltip: boolean
    iconName: string
    /**
     * The orientation of the tray in which the statusicon
     * is embedded.
     */
    readonly orientation: Orientation
    pixbuf: GdkPixbuf.Pixbuf
    screen: Gdk.Screen
    readonly size: number
    stock: string
    readonly storageType: ImageType
    /**
     * The title of this tray icon. This should be a short, human-readable,
     * localized string describing the tray icon. It may be used by tools
     * like screen readers to render the tray icon.
     */
    title: string
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with the <link linkend="PangoMarkupFormat">Pango text markup
     * language</link>. Also see gtk_tooltip_set_markup().
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL.
     * #GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
     * the default handler for the #GtkStatusIcon::query-tooltip signal
     * will take care of displaying the tooltip.
     * 
     * On some platforms, embedded markup will be ignored.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see gtk_tooltip_set_text().
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL.
     * #GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
     * the default handler for the #GtkStatusIcon::query-tooltip signal
     * will take care of displaying the tooltip.
     * 
     * Note that some platforms have limitations on the length of tooltips
     * that they allow on status icons, e.g. Windows only shows the first
     * 64 characters.
     */
    tooltipText: string
    visible: boolean

    // Own fields of Gtk-2.0.Gtk.StatusIcon

    parentInstance: GObject.Object
    priv: StatusIconPrivate

    // Owm methods of Gtk-2.0.Gtk.StatusIcon

    /**
     * Returns whether the icon is blinking, see
     * gtk_status_icon_set_blinking().
     */
    getBlinking(): boolean
    /**
     * Obtains information about the location of the status icon
     * on screen. This information can be used to e.g. position
     * popups like notification bubbles.
     * 
     * See gtk_status_icon_position_menu() for a more convenient
     * alternative for positioning menus.
     * 
     * Note that some platforms do not allow GTK+ to provide
     * this information, and even on platforms that do allow it,
     * the information is not reliable unless the status icon
     * is embedded in a notification area, see
     * gtk_status_icon_is_embedded().
     */
    getGeometry(): [ /* returnType */ boolean, /* screen */ Gdk.Screen, /* area */ Gdk.Rectangle, /* orientation */ Orientation ]
    /**
     * Retrieves the #GIcon being displayed by the #GtkStatusIcon.
     * The storage type of the status icon must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_GICON (see gtk_status_icon_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned #GIcon.
     * 
     * If this function fails, `icon` is left unchanged;
     */
    getGicon(): Gio.Icon
    /**
     * Returns the current value of the has-tooltip property.
     * See #GtkStatusIcon:has-tooltip for more information.
     */
    getHasTooltip(): boolean
    /**
     * Gets the name of the icon being displayed by the #GtkStatusIcon.
     * The storage type of the status icon must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()).
     * The returned string is owned by the #GtkStatusIcon and should not
     * be freed or modified.
     */
    getIconName(): string
    /**
     * Gets the #GdkPixbuf being displayed by the #GtkStatusIcon.
     * The storage type of the status icon must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_PIXBUF (see gtk_status_icon_get_storage_type()).
     * The caller of this function does not own a reference to the
     * returned pixbuf.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Returns the #GdkScreen associated with `status_icon`.
     */
    getScreen(): Gdk.Screen
    /**
     * Gets the size in pixels that is available for the image.
     * Stock icons and named icons adapt their size automatically
     * if the size of the notification area changes. For other
     * storage types, the size-changed signal can be used to
     * react to size changes.
     * 
     * Note that the returned size is only meaningful while the
     * status icon is embedded (see gtk_status_icon_is_embedded()).
     */
    getSize(): number
    /**
     * Gets the id of the stock icon being displayed by the #GtkStatusIcon.
     * The storage type of the status icon must be %GTK_IMAGE_EMPTY or
     * %GTK_IMAGE_STOCK (see gtk_status_icon_get_storage_type()).
     * The returned string is owned by the #GtkStatusIcon and should not
     * be freed or modified.
     */
    getStock(): string
    /**
     * Gets the type of representation being used by the #GtkStatusIcon
     * to store image data. If the #GtkStatusIcon has no image data,
     * the return value will be %GTK_IMAGE_EMPTY.
     */
    getStorageType(): ImageType
    /**
     * Gets the title of this tray icon. See gtk_status_icon_set_title().
     */
    getTitle(): string
    /**
     * Gets the contents of the tooltip for `status_icon`.
     */
    getTooltipMarkup(): string
    /**
     * Gets the contents of the tooltip for `status_icon`.
     */
    getTooltipText(): string
    /**
     * Returns whether the status icon is visible or not.
     * Note that being visible does not guarantee that
     * the user can actually see the icon, see also
     * gtk_status_icon_is_embedded().
     */
    getVisible(): boolean
    /**
     * This function is only useful on the X11/freedesktop.org platform.
     * It returns a window ID for the widget in the underlying
     * status icon implementation.  This is useful for the Galago
     * notification service, which can send a window ID in the protocol
     * in order for the server to position notification windows
     * pointing to a status icon reliably.
     * 
     * This function is not intended for other use cases which are
     * more likely to be met by one of the non-X11 specific methods, such
     * as gtk_status_icon_position_menu().
     */
    getX11WindowId(): number
    /**
     * Returns whether the status icon is embedded in a notification
     * area.
     */
    isEmbedded(): boolean
    /**
     * Makes the status icon start or stop blinking.
     * Note that blinking user interface elements may be problematic
     * for some users, and thus may be turned off, in which case
     * this setting has no effect.
     * @param blinking %TRUE to turn blinking on, %FALSE to turn it off
     */
    setBlinking(blinking: boolean): void
    /**
     * Makes `status_icon` display the file `filename`.
     * See gtk_status_icon_new_from_file() for details.
     * @param filename a filename
     */
    setFromFile(filename: string): void
    /**
     * Makes `status_icon` display the #GIcon.
     * See gtk_status_icon_new_from_gicon() for details.
     * @param icon a GIcon
     */
    setFromGicon(icon: Gio.Icon): void
    /**
     * Makes `status_icon` display the icon named `icon_name` from the
     * current icon theme.
     * See gtk_status_icon_new_from_icon_name() for details.
     * @param iconName an icon name
     */
    setFromIconName(iconName: string): void
    /**
     * Makes `status_icon` display `pixbuf`.
     * See gtk_status_icon_new_from_pixbuf() for details.
     * @param pixbuf a #GdkPixbuf or %NULL
     */
    setFromPixbuf(pixbuf: GdkPixbuf.Pixbuf | null): void
    /**
     * Makes `status_icon` display the stock icon with the id `stock_id`.
     * See gtk_status_icon_new_from_stock() for details.
     * @param stockId a stock icon id
     */
    setFromStock(stockId: string): void
    /**
     * Sets the has-tooltip property on `status_icon` to `has_tooltip`.
     * See #GtkStatusIcon:has-tooltip for more information.
     * @param hasTooltip whether or not `status_icon` has a tooltip
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets the name of this tray icon.
     * This should be a string identifying this icon. It is may be
     * used for sorting the icons in the tray and will not be shown to
     * the user.
     * @param name the name
     */
    setName(name: string): void
    /**
     * Sets the #GdkScreen where `status_icon` is displayed; if
     * the icon is already mapped, it will be unmapped, and
     * then remapped on the new screen.
     * @param screen a #GdkScreen
     */
    setScreen(screen: Gdk.Screen): void
    /**
     * Sets the title of this tray icon.
     * This should be a short, human-readable, localized string
     * describing the tray icon. It may be used by tools like screen
     * readers to render the tray icon.
     * @param title the title
     */
    setTitle(title: string): void
    /**
     * Sets the tooltip of the status icon.
     * @param tooltipText the tooltip text, or %NULL
     */
    setTooltip(tooltipText: string | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting #GtkStatusIcon:has-tooltip to %TRUE
     * and of the default handler for the #GtkStatusIcon::query-tooltip signal.
     * 
     * See also the #GtkStatusIcon:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `status_icon,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * This function will take care of setting #GtkStatusIcon:has-tooltip to
     * %TRUE and of the default handler for the #GtkStatusIcon::query-tooltip
     * signal.
     * 
     * See also the #GtkStatusIcon:tooltip-text property and
     * gtk_tooltip_set_text().
     * @param text the contents of the tooltip for `status_icon`
     */
    setTooltipText(text: string): void
    /**
     * Shows or hides a status icon.
     * @param visible %TRUE to show the status icon, %FALSE to hide it
     */
    setVisible(visible: boolean): void

    // Own virtual methods of Gtk-2.0.Gtk.StatusIcon

    activate(): void
    buttonPressEvent(event: Gdk.EventButton): boolean
    buttonReleaseEvent(event: Gdk.EventButton): boolean
    popupMenu(button: number, activateTime: number): void
    queryTooltip(x: number, y: number, keyboardMode: boolean, tooltip: Tooltip): boolean
    scrollEvent(event: Gdk.EventScroll): boolean
    sizeChanged(size: number): boolean

    // Own signals of Gtk-2.0.Gtk.StatusIcon

    connect(sigName: "activate", callback: StatusIcon.ActivateSignalCallback): number
    on(sigName: "activate", callback: StatusIcon.ActivateSignalCallback): number
    once(sigName: "activate", callback: StatusIcon.ActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "button-press-event", callback: StatusIcon.ButtonPressEventSignalCallback): number
    on(sigName: "button-press-event", callback: StatusIcon.ButtonPressEventSignalCallback): number
    once(sigName: "button-press-event", callback: StatusIcon.ButtonPressEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "button-press-event", ...args: any[]): void
    connect(sigName: "button-release-event", callback: StatusIcon.ButtonReleaseEventSignalCallback): number
    on(sigName: "button-release-event", callback: StatusIcon.ButtonReleaseEventSignalCallback): number
    once(sigName: "button-release-event", callback: StatusIcon.ButtonReleaseEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "button-release-event", ...args: any[]): void
    connect(sigName: "popup-menu", callback: StatusIcon.PopupMenuSignalCallback): number
    on(sigName: "popup-menu", callback: StatusIcon.PopupMenuSignalCallback): number
    once(sigName: "popup-menu", callback: StatusIcon.PopupMenuSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popup-menu", activateTime: number, ...args: any[]): void
    connect(sigName: "query-tooltip", callback: StatusIcon.QueryTooltipSignalCallback): number
    on(sigName: "query-tooltip", callback: StatusIcon.QueryTooltipSignalCallback): number
    once(sigName: "query-tooltip", callback: StatusIcon.QueryTooltipSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "query-tooltip", y: number, keyboardMode: boolean, tooltip: Tooltip, ...args: any[]): void
    connect(sigName: "scroll-event", callback: StatusIcon.ScrollEventSignalCallback): number
    on(sigName: "scroll-event", callback: StatusIcon.ScrollEventSignalCallback): number
    once(sigName: "scroll-event", callback: StatusIcon.ScrollEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-event", ...args: any[]): void
    connect(sigName: "size-changed", callback: StatusIcon.SizeChangedSignalCallback): number
    on(sigName: "size-changed", callback: StatusIcon.SizeChangedSignalCallback): number
    once(sigName: "size-changed", callback: StatusIcon.SizeChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "size-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.StatusIcon

    connect(sigName: "notify::blinking", callback: any): number
    on(sigName: "notify::blinking", callback: any): number
    once(sigName: "notify::blinking", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::blinking", ...args: any[]): void
    connect(sigName: "notify::embedded", callback: any): number
    on(sigName: "notify::embedded", callback: any): number
    once(sigName: "notify::embedded", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::embedded", ...args: any[]): void
    connect(sigName: "notify::file", callback: any): number
    on(sigName: "notify::file", callback: any): number
    once(sigName: "notify::file", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: "notify::pixbuf", callback: any): number
    on(sigName: "notify::pixbuf", callback: any): number
    once(sigName: "notify::pixbuf", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixbuf", ...args: any[]): void
    connect(sigName: "notify::screen", callback: any): number
    on(sigName: "notify::screen", callback: any): number
    once(sigName: "notify::screen", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::screen", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::stock", callback: any): number
    on(sigName: "notify::stock", callback: any): number
    once(sigName: "notify::stock", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock", ...args: any[]): void
    connect(sigName: "notify::storage-type", callback: any): number
    on(sigName: "notify::storage-type", callback: any): number
    once(sigName: "notify::storage-type", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::storage-type", ...args: any[]): void
    connect(sigName: "notify::title", callback: any): number
    on(sigName: "notify::title", callback: any): number
    once(sigName: "notify::title", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class StatusIcon extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.StatusIcon

    static name: string

    // Constructors of Gtk-2.0.Gtk.StatusIcon

    constructor(config?: StatusIcon.ConstructorProperties) 
    /**
     * Creates an empty status icon object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates an empty status icon object.
     * @constructor 
     */
    static new(): StatusIcon
    /**
     * Creates a status icon displaying the file `filename`.
     * 
     * The image will be scaled down to fit in the available
     * space in the notification area, if necessary.
     * @constructor 
     * @param filename a filename
     */
    static newFromFile(filename: string): StatusIcon
    /**
     * Creates a status icon displaying a #GIcon. If the icon is a
     * themed icon, it will be updated when the theme changes.
     * @constructor 
     * @param icon a #GIcon
     */
    static newFromGicon(icon: Gio.Icon): StatusIcon
    /**
     * Creates a status icon displaying an icon from the current icon theme.
     * If the current icon theme is changed, the icon will be updated
     * appropriately.
     * @constructor 
     * @param iconName an icon name
     */
    static newFromIconName(iconName: string): StatusIcon
    /**
     * Creates a status icon displaying `pixbuf`.
     * 
     * The image will be scaled down to fit in the available
     * space in the notification area, if necessary.
     * @constructor 
     * @param pixbuf a #GdkPixbuf
     */
    static newFromPixbuf(pixbuf: GdkPixbuf.Pixbuf): StatusIcon
    /**
     * Creates a status icon displaying a stock icon. Sample stock icon
     * names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. You can register your
     * own stock icon names, see gtk_icon_factory_add_default() and
     * gtk_icon_factory_add().
     * @constructor 
     * @param stockId a stock icon id
     */
    static newFromStock(stockId: string): StatusIcon
    _init(config?: StatusIcon.ConstructorProperties): void
    /**
     * Menu positioning function to use with gtk_menu_popup()
     * to position `menu` aligned to the status icon `user_data`.
     * @param menu the #GtkMenu
     * @param x return location for the x position
     * @param y return location for the y position
     * @param pushIn whether the first menu item should be offset (pushed in) to be           aligned with the menu popup position (only useful for GtkOptionMenu).
     * @param userData the status icon to position the menu on
     */
    static positionMenu(menu: Menu, x: number, y: number, pushIn: boolean, userData: object | null): void
}

export module Statusbar {

    // Signal callback interfaces

    /**
     * Signal callback interface for `text-popped`
     */
    export interface TextPoppedSignalCallback {
        (contextId: number, text: string): void
    }

    /**
     * Signal callback interface for `text-pushed`
     */
    export interface TextPushedSignalCallback {
        (contextId: number, text: string): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, HBox.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Statusbar

        /**
         * Whether the statusbar has a grip for resizing the toplevel window.
         */
        hasResizeGrip?: boolean | null
    }

}

export interface Statusbar extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.Statusbar

    parentWidget: HBox
    frame: Widget
    label: Widget
    messages: object[]
    keys: object[]
    seqContextId: number
    seqMessageId: number
    gripWindow: Gdk.Window
    hasResizeGrip: number

    // Owm methods of Gtk-2.0.Gtk.Statusbar

    /**
     * Returns a new context identifier, given a description
     * of the actual context. Note that the description is
     * <emphasis>not</emphasis> shown in the UI.
     * @param contextDescription textual description of what context                       the new message is being used in
     */
    getContextId(contextDescription: string): number
    /**
     * Returns whether the statusbar has a resize grip.
     */
    getHasResizeGrip(): boolean
    /**
     * Retrieves the box containing the label widget.
     */
    getMessageArea(): Widget
    /**
     * Removes the first message in the #GtkStatusBar's stack
     * with the given context id.
     * 
     * Note that this may not change the displayed message, if
     * the message at the top of the stack has a different
     * context id.
     * @param contextId a context identifier
     */
    pop(contextId: number): void
    /**
     * Pushes a new message onto a statusbar's stack.
     * @param contextId the message's context id, as returned by              gtk_statusbar_get_context_id()
     * @param text the message to add to the statusbar
     */
    push(contextId: number, text: string): number
    /**
     * Forces the removal of a message from a statusbar's stack.
     * The exact `context_id` and `message_id` must be specified.
     * @param contextId a context identifier
     * @param messageId a message identifier, as returned by gtk_statusbar_push()
     */
    remove(contextId: number, messageId: number): void

    // Overloads of remove

    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it while it's not inside
     * a container, using g_object_ref(). If you don't want to use `widget`
     * again it's usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Widget): void
    /**
     * Forces the removal of all messages from a statusbar's
     * stack with the exact `context_id`.
     * @param contextId a context identifier
     */
    removeAll(contextId: number): void
    /**
     * Sets whether the statusbar has a resize grip.
     * %TRUE by default.
     * @param setting %TRUE to have a resize grip
     */
    setHasResizeGrip(setting: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Statusbar

    textPopped(contextId: number, text: string): void
    textPushed(contextId: number, text: string): void

    // Own signals of Gtk-2.0.Gtk.Statusbar

    connect(sigName: "text-popped", callback: Statusbar.TextPoppedSignalCallback): number
    on(sigName: "text-popped", callback: Statusbar.TextPoppedSignalCallback): number
    once(sigName: "text-popped", callback: Statusbar.TextPoppedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "text-popped", text: string, ...args: any[]): void
    connect(sigName: "text-pushed", callback: Statusbar.TextPushedSignalCallback): number
    on(sigName: "text-pushed", callback: Statusbar.TextPushedSignalCallback): number
    once(sigName: "text-pushed", callback: Statusbar.TextPushedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "text-pushed", text: string, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Statusbar

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Statusbar extends HBox {

    // Own properties of Gtk-2.0.Gtk.Statusbar

    static name: string

    // Constructors of Gtk-2.0.Gtk.Statusbar

    constructor(config?: Statusbar.ConstructorProperties) 
    /**
     * Creates a new #GtkStatusbar ready for messages.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkStatusbar ready for messages.
     * @constructor 
     */
    static new(): Statusbar

    // Overloads of new

    /**
     * Creates a new #GtkHBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): HBox
    _init(config?: Statusbar.ConstructorProperties): void
}

export module Style {

    // Signal callback interfaces

    /**
     * Signal callback interface for `realize`
     */
    export interface RealizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unrealize`
     */
    export interface UnrealizeSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface Style {

    // Own fields of Gtk-2.0.Gtk.Style

    parentInstance: GObject.Object
    fg: Gdk.Color[]
    bg: Gdk.Color[]
    light: Gdk.Color[]
    dark: Gdk.Color[]
    mid: Gdk.Color[]
    text: Gdk.Color[]
    base: Gdk.Color[]
    textAa: Gdk.Color[]
    black: Gdk.Color
    white: Gdk.Color
    fontDesc: Pango.FontDescription
    xthickness: number
    ythickness: number
    fgGc: Gdk.GC[]
    bgGc: Gdk.GC[]
    lightGc: Gdk.GC[]
    darkGc: Gdk.GC[]
    midGc: Gdk.GC[]
    textGc: Gdk.GC[]
    baseGc: Gdk.GC[]
    textAaGc: Gdk.GC[]
    blackGc: Gdk.GC
    whiteGc: Gdk.GC
    bgPixmap: Gdk.Pixmap[]

    // Owm methods of Gtk-2.0.Gtk.Style

    applyDefaultBackground(window: Gdk.Window, setBg: boolean, stateType: StateType, area: Gdk.Rectangle | null, x: number, y: number, width: number, height: number): void
    // Has conflict: copy(): Style
    /**
     * Detaches a style from a window. If the style is not attached
     * to any windows anymore, it is unrealized. See gtk_style_attach().
     */
    detach(): void
    /**
     * Gets the #GdkFont to use for the given style. This is
     * meant only as a replacement for direct access to `style->`font
     * and should not be used in new code. New code should
     * use `style->`font_desc instead.
     */
    getFont(): Gdk.Font
    /**
     * Queries the value of a style property corresponding to a
     * widget class is in the given style.
     * @param widgetType the #GType of a descendant of #GtkWidget
     * @param propertyName the name of the style property to get
     * @param value a #GValue where the value of the property being     queried will be stored
     */
    getStyleProperty(widgetType: GObject.GType, propertyName: string, value: any): void
    /**
     * Looks up `color_name` in the style's logical color mappings,
     * filling in `color` and returning %TRUE if found, otherwise
     * returning %FALSE. Do not cache the found mapping, because
     * it depends on the #GtkStyle and might change when a theme
     * switch occurs.
     * @param colorName the name of the logical color to look up
     */
    lookupColor(colorName: string): [ /* returnType */ boolean, /* color */ Gdk.Color ]
    /**
     * Looks up `stock_id` in the icon factories associated with `style`
     * and the default icon factory, returning an icon set if found,
     * otherwise %NULL.
     * @param stockId an icon name
     */
    lookupIconSet(stockId: string): IconSet
    // Has conflict: renderIcon(source: IconSource, direction: TextDirection, state: StateType, size: number, widget: Widget | null, detail: string | null): GdkPixbuf.Pixbuf
    // Has conflict: setBackground(window: Gdk.Window, stateType: StateType): void
    /**
     * Sets the #GdkFont to use for a given style. This is
     * meant only as a replacement for direct access to style->font
     * and should not be used in new code. New code should
     * use style->font_desc instead.
     * @param font a #GdkFont, or %NULL to use the #GdkFont corresponding   to style->font_desc.
     */
    setFont(font: Gdk.Font | null): void
    /**
     * Decrease the reference count of `style`.
     */
    unref(): void

    // Own virtual methods of Gtk-2.0.Gtk.Style

    copy(src: Style): void
    drawArrow(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, arrowType: ArrowType, fill: boolean, x: number, y: number, width: number, height: number): void
    drawBox(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawBoxGap(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number): void
    drawCheck(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawDiamond(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawExpander(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, expanderStyle: ExpanderStyle): void
    drawExtension(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, gapSide: PositionType): void
    drawFlatBox(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawFocus(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawHandle(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, orientation: Orientation): void
    drawHline(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x1: number, x2: number, y: number): void
    drawLayout(window: Gdk.Window, stateType: StateType, useText: boolean, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, layout: Pango.Layout): void
    drawOption(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawPolygon(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, point: Gdk.Point, npoints: number, fill: boolean): void
    drawResizeGrip(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, edge: Gdk.WindowEdge, x: number, y: number, width: number, height: number): void
    drawShadow(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawShadowGap(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number): void
    drawSlider(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, orientation: Orientation): void
    drawSpinner(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, step: number, x: number, y: number, width: number, height: number): void
    drawString(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, string: string): void
    drawTab(window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number): void
    drawVline(window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, y1: number, y2: number, x: number): void
    initFromRc(rcStyle: RcStyle): void
    realize(): void
    /**
     * Renders the icon specified by `source` at the given `size`
     * according to the given parameters and returns the result in a
     * pixbuf.
     * @virtual 
     * @param source the #GtkIconSource specifying the icon to render
     * @param direction a text direction
     * @param state a state
     * @param size the size to render the icon at. A size of     (GtkIconSize)-1 means render at the size of the source and     don't scale.
     * @param widget the widget
     * @param detail a style detail
     */
    renderIcon(source: IconSource, direction: TextDirection, state: StateType, size: number, widget: Widget | null, detail: string | null): GdkPixbuf.Pixbuf
    /**
     * Sets the background of `window` to the background color or pixmap
     * specified by `style` for the given state.
     * @virtual 
     * @param window a #GdkWindow
     * @param stateType a state
     */
    setBackground(window: Gdk.Window, stateType: StateType): void
    unrealize(): void

    // Own signals of Gtk-2.0.Gtk.Style

    connect(sigName: "realize", callback: Style.RealizeSignalCallback): number
    on(sigName: "realize", callback: Style.RealizeSignalCallback): number
    once(sigName: "realize", callback: Style.RealizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "realize", ...args: any[]): void
    connect(sigName: "unrealize", callback: Style.UnrealizeSignalCallback): number
    on(sigName: "unrealize", callback: Style.UnrealizeSignalCallback): number
    once(sigName: "unrealize", callback: Style.UnrealizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unrealize", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Style

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Style extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Style

    static name: string

    // Constructors of Gtk-2.0.Gtk.Style

    constructor(config?: Style.ConstructorProperties) 
    /**
     * Creates a new #GtkStyle.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkStyle.
     * @constructor 
     */
    static new(): Style
    _init(config?: Style.ConstructorProperties): void
}

export module Table {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Table

        columnSpacing?: number | null
        homogeneous?: boolean | null
        nColumns?: number | null
        nRows?: number | null
        rowSpacing?: number | null
    }

}

export interface Table extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Table

    nColumns: number
    nRows: number

    // Own fields of Gtk-2.0.Gtk.Table

    container: Container
    children: object[]
    rows: TableRowCol
    cols: TableRowCol
    nrows: number
    ncols: number
    columnSpacing: number
    rowSpacing: number
    homogeneous: number

    // Owm methods of Gtk-2.0.Gtk.Table

    attach(child: Widget, leftAttach: number, rightAttach: number, topAttach: number, bottomAttach: number, xoptions: AttachOptions, yoptions: AttachOptions, xpadding: number, ypadding: number): void
    attachDefaults(widget: Widget, leftAttach: number, rightAttach: number, topAttach: number, bottomAttach: number): void
    /**
     * Gets the amount of space between column `col,` and
     * column `col` + 1. See gtk_table_set_col_spacing().
     * @param column a column in the table, 0 indicates the first column
     */
    getColSpacing(column: number): number
    /**
     * Gets the default column spacing for the table. This is
     * the spacing that will be used for newly added columns.
     * (See gtk_table_set_col_spacings())
     */
    getDefaultColSpacing(): number
    /**
     * Gets the default row spacing for the table. This is
     * the spacing that will be used for newly added rows.
     * (See gtk_table_set_row_spacings())
     */
    getDefaultRowSpacing(): number
    /**
     * Returns whether the table cells are all constrained to the same
     * width and height. (See gtk_table_set_homogenous ())
     */
    getHomogeneous(): boolean
    /**
     * Gets the amount of space between row `row,` and
     * row `row` + 1. See gtk_table_set_row_spacing().
     * @param row a row in the table, 0 indicates the first row
     */
    getRowSpacing(row: number): number
    /**
     * Returns the number of rows and columns in the table.
     */
    getSize(): [ /* rows */ number, /* columns */ number ]
    resize(rows: number, columns: number): void
    setColSpacing(column: number, spacing: number): void
    setColSpacings(spacing: number): void
    setHomogeneous(homogeneous: boolean): void
    setRowSpacing(row: number, spacing: number): void
    setRowSpacings(spacing: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.Table

    connect(sigName: "notify::n-columns", callback: any): number
    on(sigName: "notify::n-columns", callback: any): number
    once(sigName: "notify::n-columns", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::n-columns", ...args: any[]): void
    connect(sigName: "notify::n-rows", callback: any): number
    on(sigName: "notify::n-rows", callback: any): number
    once(sigName: "notify::n-rows", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::n-rows", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Table extends Container {

    // Own properties of Gtk-2.0.Gtk.Table

    static name: string

    // Constructors of Gtk-2.0.Gtk.Table

    constructor(config?: Table.ConstructorProperties) 
    constructor(rows: number, columns: number, homogeneous: boolean) 
    static new(rows: number, columns: number, homogeneous: boolean): Table
    _init(config?: Table.ConstructorProperties): void
}

export module TearoffMenuItem {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, MenuItem.ConstructorProperties {
    }

}

export interface TearoffMenuItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.TearoffMenuItem

    menuItem: MenuItem
    tornOff: number

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    deselect(): void

    // Overloads of deselect

    deselect(): void
    deselect(): void
    select(): void

    // Overloads of select

    select(): void
    select(): void
    /**
     * Set the accelerator path on `menu_item,` through which runtime changes of the
     * menu item's accelerator caused by the user can be identified and saved to
     * persistant storage (see gtk_accel_map_save() on this).
     * To setup a default accelerator for this menu item, call
     * gtk_accel_map_add_entry() with the same `accel_path`.
     * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
     * and gtk_menu_set_accel_path() for a more convenient variant of this function.
     * 
     * This function is basically a convenience wrapper that handles calling
     * gtk_widget_set_accel_path() with the appropriate accelerator group for
     * the menu item.
     * 
     * Note that you do need to set an accelerator on the parent menu with
     * gtk_menu_set_accel_group() for this to work.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath accelerator path, corresponding to this menu item's              functionality, or %NULL to unset the current path.
     */
    setAccelPath(accelPath: string | null): void

    // Overloads of setAccelPath

    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.TearoffMenuItem

    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::right-justified", callback: any): number
    on(sigName: "notify::right-justified", callback: any): number
    once(sigName: "notify::right-justified", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-justified", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TearoffMenuItem extends MenuItem {

    // Own properties of Gtk-2.0.Gtk.TearoffMenuItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.TearoffMenuItem

    constructor(config?: TearoffMenuItem.ConstructorProperties) 
    constructor() 
    static new(): TearoffMenuItem
    _init(config?: TearoffMenuItem.ConstructorProperties): void
}

export module TextBuffer {

    // Signal callback interfaces

    /**
     * Signal callback interface for `apply-tag`
     */
    export interface ApplyTagSignalCallback {
        (tag: TextTag, start: TextIter, end: TextIter): void
    }

    /**
     * Signal callback interface for `begin-user-action`
     */
    export interface BeginUserActionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `delete-range`
     */
    export interface DeleteRangeSignalCallback {
        (start: TextIter, end: TextIter): void
    }

    /**
     * Signal callback interface for `end-user-action`
     */
    export interface EndUserActionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `insert-child-anchor`
     */
    export interface InsertChildAnchorSignalCallback {
        (location: TextIter, anchor: TextChildAnchor): void
    }

    /**
     * Signal callback interface for `insert-pixbuf`
     */
    export interface InsertPixbufSignalCallback {
        (location: TextIter, pixbuf: GdkPixbuf.Pixbuf): void
    }

    /**
     * Signal callback interface for `insert-text`
     */
    export interface InsertTextSignalCallback {
        (location: TextIter, text: string, len: number): void
    }

    /**
     * Signal callback interface for `mark-deleted`
     */
    export interface MarkDeletedSignalCallback {
        (mark: TextMark): void
    }

    /**
     * Signal callback interface for `mark-set`
     */
    export interface MarkSetSignalCallback {
        (location: TextIter, mark: TextMark): void
    }

    /**
     * Signal callback interface for `modified-changed`
     */
    export interface ModifiedChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `paste-done`
     */
    export interface PasteDoneSignalCallback {
        (object: Clipboard): void
    }

    /**
     * Signal callback interface for `remove-tag`
     */
    export interface RemoveTagSignalCallback {
        (tag: TextTag, start: TextIter, end: TextIter): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TextBuffer

        tagTable?: TextTagTable | null
        /**
         * The text content of the buffer. Without child widgets and images,
         * see gtk_text_buffer_get_text() for more information.
         */
        text?: string | null
    }

}

export interface TextBuffer {

    // Own properties of Gtk-2.0.Gtk.TextBuffer

    /**
     * The list of targets this buffer supports for clipboard copying
     * and as DND source.
     */
    readonly copyTargetList: TargetList
    /**
     * The position of the insert mark (as offset from the beginning
     * of the buffer). It is useful for getting notified when the
     * cursor moves.
     */
    readonly cursorPosition: number
    /**
     * The list of targets this buffer supports for clipboard pasting
     * and as DND destination.
     */
    readonly pasteTargetList: TargetList
    /**
     * The text content of the buffer. Without child widgets and images,
     * see gtk_text_buffer_get_text() for more information.
     */
    text: string

    // Own fields of Gtk-2.0.Gtk.TextBuffer

    parentInstance: GObject.Object
    tagTable: TextTagTable
    btree: TextBTree
    clipboardContentsBuffers: object[]
    selectionClipboards: object[]
    logAttrCache: TextLogAttrCache
    userActionCount: number
    modified: number
    hasSelection: number

    // Owm methods of Gtk-2.0.Gtk.TextBuffer

    /**
     * Adds the mark at position `where`. The mark must not be added to
     * another buffer, and if its name is not %NULL then there must not
     * be another mark in the buffer with the same name.
     * 
     * Emits the "mark-set" signal as notification of the mark's initial
     * placement.
     * @param mark the mark to add
     * @param where location to place mark
     */
    addMark(mark: TextMark, where: TextIter): void
    /**
     * Adds `clipboard` to the list of clipboards in which the selection
     * contents of `buffer` are available. In most cases, `clipboard` will be
     * the #GtkClipboard of type %GDK_SELECTION_PRIMARY for a view of `buffer`.
     * @param clipboard a #GtkClipboard
     */
    addSelectionClipboard(clipboard: Clipboard): void
    // Has conflict: applyTag(tag: TextTag, start: TextIter, end: TextIter): void
    /**
     * Calls gtk_text_tag_table_lookup() on the buffer's tag table to
     * get a #GtkTextTag, then calls gtk_text_buffer_apply_tag().
     * @param name name of a named #GtkTextTag
     * @param start one bound of range to be tagged
     * @param end other bound of range to be tagged
     */
    applyTagByName(name: string, start: TextIter, end: TextIter): void
    /**
     * Performs the appropriate action as if the user hit the delete
     * key with the cursor at the position specified by `iter`. In the
     * normal case a single character will be deleted, but when
     * combining accents are involved, more than one character can
     * be deleted, and when precomposed character and accent combinations
     * are involved, less than one character will be deleted.
     * 
     * Because the buffer is modified, all outstanding iterators become
     * invalid after calling this function; however, the `iter` will be
     * re-initialized to point to the location where text was deleted.
     * @param iter a position in `buffer`
     * @param interactive whether the deletion is caused by user interaction
     * @param defaultEditable whether the buffer is editable by default
     */
    backspace(iter: TextIter, interactive: boolean, defaultEditable: boolean): boolean
    // Has conflict: beginUserAction(): void
    /**
     * Copies the currently-selected text to a clipboard.
     * @param clipboard the #GtkClipboard object to copy to
     */
    copyClipboard(clipboard: Clipboard): void
    /**
     * This is a convenience function which simply creates a child anchor
     * with gtk_text_child_anchor_new() and inserts it into the buffer
     * with gtk_text_buffer_insert_child_anchor(). The new anchor is
     * owned by the buffer; no reference count is returned to
     * the caller of gtk_text_buffer_create_child_anchor().
     * @param iter location in the buffer
     */
    createChildAnchor(iter: TextIter): TextChildAnchor
    /**
     * Creates a mark at position `where`. If `mark_name` is %NULL, the mark
     * is anonymous; otherwise, the mark can be retrieved by name using
     * gtk_text_buffer_get_mark(). If a mark has left gravity, and text is
     * inserted at the mark's current location, the mark will be moved to
     * the left of the newly-inserted text. If the mark has right gravity
     * (`left_gravity` = %FALSE), the mark will end up on the right of
     * newly-inserted text. The standard left-to-right cursor is a mark
     * with right gravity (when you type, the cursor stays on the right
     * side of the text you're typing).
     * 
     * The caller of this function does <emphasis>not</emphasis> own a
     * reference to the returned #GtkTextMark, so you can ignore the
     * return value if you like. Marks are owned by the buffer and go
     * away when the buffer does.
     * 
     * Emits the "mark-set" signal as notification of the mark's initial
     * placement.
     * @param markName name for mark, or %NULL
     * @param where location to place mark
     * @param leftGravity whether the mark has left gravity
     */
    createMark(markName: string | null, where: TextIter, leftGravity: boolean): TextMark
    /**
     * Copies the currently-selected text to a clipboard, then deletes
     * said text if it's editable.
     * @param clipboard the #GtkClipboard object to cut to
     * @param defaultEditable default editability of the buffer
     */
    cutClipboard(clipboard: Clipboard, defaultEditable: boolean): void
    /**
     * Deletes text between `start` and `end`. The order of `start` and `end`
     * is not actually relevant; gtk_text_buffer_delete() will reorder
     * them. This function actually emits the "delete-range" signal, and
     * the default handler of that signal deletes the text. Because the
     * buffer is modified, all outstanding iterators become invalid after
     * calling this function; however, the `start` and `end` will be
     * re-initialized to point to the location where text was deleted.
     * @param start a position in `buffer`
     * @param end another position in `buffer`
     */
    delete(start: TextIter, end: TextIter): void
    /**
     * Deletes all <emphasis>editable</emphasis> text in the given range.
     * Calls gtk_text_buffer_delete() for each editable sub-range of
     * [`start,``end)`. `start` and `end` are revalidated to point to
     * the location of the last deleted range, or left untouched if
     * no text was deleted.
     * @param startIter start of range to delete
     * @param endIter end of range
     * @param defaultEditable whether the buffer is editable by default
     */
    deleteInteractive(startIter: TextIter, endIter: TextIter, defaultEditable: boolean): boolean
    /**
     * Deletes `mark,` so that it's no longer located anywhere in the
     * buffer. Removes the reference the buffer holds to the mark, so if
     * you haven't called g_object_ref() on the mark, it will be freed. Even
     * if the mark isn't freed, most operations on `mark` become
     * invalid, until it gets added to a buffer again with
     * gtk_text_buffer_add_mark(). Use gtk_text_mark_get_deleted() to
     * find out if a mark has been removed from its buffer.
     * The "mark-deleted" signal will be emitted as notification after
     * the mark is deleted.
     * @param mark a #GtkTextMark in `buffer`
     */
    deleteMark(mark: TextMark): void
    /**
     * Deletes the mark named `name;` the mark must exist. See
     * gtk_text_buffer_delete_mark() for details.
     * @param name name of a mark in `buffer`
     */
    deleteMarkByName(name: string): void
    /**
     * Deletes the range between the "insert" and "selection_bound" marks,
     * that is, the currently-selected text. If `interactive` is %TRUE,
     * the editability of the selection will be considered (users can't delete
     * uneditable text).
     * @param interactive whether the deletion is caused by user interaction
     * @param defaultEditable whether the buffer is editable by default
     */
    deleteSelection(interactive: boolean, defaultEditable: boolean): boolean
    /**
     * This function deserializes rich text in format `format` and inserts
     * it at `iter`.
     * 
     * `format<`!-- -->s to be used must be registered using
     * gtk_text_buffer_register_deserialize_format() or
     * gtk_text_buffer_register_deserialize_tagset() beforehand.
     * @param contentBuffer the #GtkTextBuffer to deserialize into
     * @param format the rich text format to use for deserializing
     * @param iter insertion point for the deserialized text
     * @param data data to deserialize
     */
    deserialize(contentBuffer: TextBuffer, format: Gdk.Atom, iter: TextIter, data: Uint8Array): boolean
    /**
     * This functions returns the value set with
     * gtk_text_buffer_deserialize_set_can_create_tags()
     * @param format a #GdkAtom representing a registered rich text format
     */
    deserializeGetCanCreateTags(format: Gdk.Atom): boolean
    /**
     * Use this function to allow a rich text deserialization function to
     * create new tags in the receiving buffer. Note that using this
     * function is almost always a bad idea, because the rich text
     * functions you register should know how to map the rich text format
     * they handler to your text buffers set of tags.
     * 
     * The ability of creating new (arbitrary!) tags in the receiving buffer
     * is meant for special rich text formats like the internal one that
     * is registered using gtk_text_buffer_register_deserialize_tagset(),
     * because that format is essentially a dump of the internal structure
     * of the source buffer, including its tag names.
     * 
     * You should allow creation of tags only if you know what you are
     * doing, e.g. if you defined a tagset name for your application
     * suite's text buffers and you know that it's fine to receive new
     * tags from these buffers, because you know that your application can
     * handle the newly created tags.
     * @param format a #GdkAtom representing a registered rich text format
     * @param canCreateTags whether deserializing this format may create tags
     */
    deserializeSetCanCreateTags(format: Gdk.Atom, canCreateTags: boolean): void
    // Has conflict: endUserAction(): void
    /**
     * Retrieves the first and last iterators in the buffer, i.e. the
     * entire buffer lies within the range [`start,``end)`.
     */
    getBounds(): [ /* start */ TextIter, /* end */ TextIter ]
    /**
     * Gets the number of characters in the buffer; note that characters
     * and bytes are not the same, you can't e.g. expect the contents of
     * the buffer in string form to be this many bytes long. The character
     * count is cached, so this function is very fast.
     */
    getCharCount(): number
    /**
     * This function returns the list of targets this text buffer can
     * provide for copying and as DND source. The targets in the list are
     * added with %info values from the #GtkTextBufferTargetInfo enum,
     * using gtk_target_list_add_rich_text_targets() and
     * gtk_target_list_add_text_targets().
     */
    getCopyTargetList(): TargetList
    /**
     * This function returns the rich text deserialize formats registered
     * with `buffer` using gtk_text_buffer_register_deserialize_format() or
     * gtk_text_buffer_register_deserialize_tagset()
     */
    getDeserializeFormats(): Gdk.Atom[]
    /**
     * Initializes `iter` with the "end iterator," one past the last valid
     * character in the text buffer. If dereferenced with
     * gtk_text_iter_get_char(), the end iterator has a character value of
     * 0. The entire buffer lies in the range from the first position in
     * the buffer (call gtk_text_buffer_get_start_iter() to get
     * character position 0) to the end iterator.
     */
    getEndIter(): /* iter */ TextIter
    /**
     * Indicates whether the buffer has some text currently selected.
     */
    getHasSelection(): boolean
    /**
     * Returns the mark that represents the cursor (insertion point).
     * Equivalent to calling gtk_text_buffer_get_mark() to get the mark
     * named "insert", but very slightly more efficient, and involves less
     * typing.
     */
    getInsert(): TextMark
    /**
     * Obtains the location of `anchor` within `buffer`.
     * @param anchor a child anchor that appears in `buffer`
     */
    getIterAtChildAnchor(anchor: TextChildAnchor): /* iter */ TextIter
    /**
     * Initializes `iter` to the start of the given line.
     * @param lineNumber line number counting from 0
     */
    getIterAtLine(lineNumber: number): /* iter */ TextIter
    /**
     * Obtains an iterator pointing to `byte_index` within the given line.
     * `byte_index` must be the start of a UTF-8 character, and must not be
     * beyond the end of the line.  Note <emphasis>bytes</emphasis>, not
     * characters; UTF-8 may encode one character as multiple bytes.
     * @param lineNumber line number counting from 0
     * @param byteIndex byte index from start of line
     */
    getIterAtLineIndex(lineNumber: number, byteIndex: number): /* iter */ TextIter
    /**
     * Obtains an iterator pointing to `char_offset` within the given
     * line. The `char_offset` must exist, offsets off the end of the line
     * are not allowed. Note <emphasis>characters</emphasis>, not bytes;
     * UTF-8 may encode one character as multiple bytes.
     * @param lineNumber line number counting from 0
     * @param charOffset char offset from start of line
     */
    getIterAtLineOffset(lineNumber: number, charOffset: number): /* iter */ TextIter
    /**
     * Initializes `iter` with the current position of `mark`.
     * @param mark a #GtkTextMark in `buffer`
     */
    getIterAtMark(mark: TextMark): /* iter */ TextIter
    /**
     * Initializes `iter` to a position `char_offset` chars from the start
     * of the entire buffer. If `char_offset` is -1 or greater than the number
     * of characters in the buffer, `iter` is initialized to the end iterator,
     * the iterator one past the last valid character in the buffer.
     * @param charOffset char offset from start of buffer, counting from 0, or -1
     */
    getIterAtOffset(charOffset: number): /* iter */ TextIter
    /**
     * Obtains the number of lines in the buffer. This value is cached, so
     * the function is very fast.
     */
    getLineCount(): number
    /**
     * Returns the mark named `name` in buffer `buffer,` or %NULL if no such
     * mark exists in the buffer.
     * @param name a mark name
     */
    getMark(name: string): TextMark
    /**
     * Indicates whether the buffer has been modified since the last call
     * to gtk_text_buffer_set_modified() set the modification flag to
     * %FALSE. Used for example to enable a "save" function in a text
     * editor.
     */
    getModified(): boolean
    /**
     * This function returns the list of targets this text buffer supports
     * for pasting and as DND destination. The targets in the list are
     * added with %info values from the #GtkTextBufferTargetInfo enum,
     * using gtk_target_list_add_rich_text_targets() and
     * gtk_target_list_add_text_targets().
     */
    getPasteTargetList(): TargetList
    /**
     * Returns the mark that represents the selection bound.  Equivalent
     * to calling gtk_text_buffer_get_mark() to get the mark named
     * "selection_bound", but very slightly more efficient, and involves
     * less typing.
     * 
     * The currently-selected text in `buffer` is the region between the
     * "selection_bound" and "insert" marks. If "selection_bound" and
     * "insert" are in the same place, then there is no current selection.
     * gtk_text_buffer_get_selection_bounds() is another convenient function
     * for handling the selection, if you just want to know whether there's a
     * selection and what its bounds are.
     */
    getSelectionBound(): TextMark
    /**
     * Returns %TRUE if some text is selected; places the bounds
     * of the selection in `start` and `end` (if the selection has length 0,
     * then `start` and `end` are filled in with the same value).
     * `start` and `end` will be in ascending order. If `start` and `end` are
     * NULL, then they are not filled in, but the return value still indicates
     * whether text is selected.
     */
    getSelectionBounds(): [ /* returnType */ boolean, /* start */ TextIter, /* end */ TextIter ]
    /**
     * This function returns the rich text serialize formats registered
     * with `buffer` using gtk_text_buffer_register_serialize_format() or
     * gtk_text_buffer_register_serialize_tagset()
     */
    getSerializeFormats(): Gdk.Atom[]
    /**
     * Returns the text in the range [`start,``end)`. Excludes undisplayed
     * text (text marked with tags that set the invisibility attribute) if
     * `include_hidden_chars` is %FALSE. The returned string includes a
     * 0xFFFC character whenever the buffer contains
     * embedded images, so byte and character indexes into
     * the returned string <emphasis>do</emphasis> correspond to byte
     * and character indexes into the buffer. Contrast with
     * gtk_text_buffer_get_text(). Note that 0xFFFC can occur in normal
     * text as well, so it is not a reliable indicator that a pixbuf or
     * widget is in the buffer.
     * @param start start of a range
     * @param end end of a range
     * @param includeHiddenChars whether to include invisible text
     */
    getSlice(start: TextIter, end: TextIter, includeHiddenChars: boolean): string
    /**
     * Initialized `iter` with the first position in the text buffer. This
     * is the same as using gtk_text_buffer_get_iter_at_offset() to get
     * the iter at character offset 0.
     */
    getStartIter(): /* iter */ TextIter
    /**
     * Get the #GtkTextTagTable associated with this buffer.
     */
    getTagTable(): TextTagTable
    /**
     * Returns the text in the range [`start,``end)`. Excludes undisplayed
     * text (text marked with tags that set the invisibility attribute) if
     * `include_hidden_chars` is %FALSE. Does not include characters
     * representing embedded images, so byte and character indexes into
     * the returned string do <emphasis>not</emphasis> correspond to byte
     * and character indexes into the buffer. Contrast with
     * gtk_text_buffer_get_slice().
     * @param start start of a range
     * @param end end of a range
     * @param includeHiddenChars whether to include invisible text
     */
    getText(start: TextIter, end: TextIter, includeHiddenChars: boolean): string
    /**
     * Inserts `len` bytes of `text` at position `iter`.  If `len` is -1,
     * `text` must be nul-terminated and will be inserted in its
     * entirety. Emits the "insert-text" signal; insertion actually occurs
     * in the default handler for the signal. `iter` is invalidated when
     * insertion occurs (because the buffer contents change), but the
     * default signal handler revalidates it to point to the end of the
     * inserted text.
     * @param iter a position in the buffer
     * @param text text in UTF-8 format
     * @param len length of text in bytes, or -1
     */
    insert(iter: TextIter, text: string, len: number): void
    /**
     * Simply calls gtk_text_buffer_insert(), using the current
     * cursor position as the insertion point.
     * @param text text in UTF-8 format
     * @param len length of text, in bytes
     */
    insertAtCursor(text: string, len: number): void
    // Has conflict: insertChildAnchor(iter: TextIter, anchor: TextChildAnchor): void
    /**
     * Like gtk_text_buffer_insert(), but the insertion will not occur if
     * `iter` is at a non-editable location in the buffer. Usually you
     * want to prevent insertions at ineditable locations if the insertion
     * results from a user action (is interactive).
     * 
     * `default_editable` indicates the editability of text that doesn't
     * have a tag affecting editability applied to it. Typically the
     * result of gtk_text_view_get_editable() is appropriate here.
     * @param iter a position in `buffer`
     * @param text some UTF-8 text
     * @param len length of text in bytes, or -1
     * @param defaultEditable default editability of buffer
     */
    insertInteractive(iter: TextIter, text: string, len: number, defaultEditable: boolean): boolean
    /**
     * Calls gtk_text_buffer_insert_interactive() at the cursor
     * position.
     * 
     * `default_editable` indicates the editability of text that doesn't
     * have a tag affecting editability applied to it. Typically the
     * result of gtk_text_view_get_editable() is appropriate here.
     * @param text text in UTF-8 format
     * @param len length of text in bytes, or -1
     * @param defaultEditable default editability of buffer
     */
    insertInteractiveAtCursor(text: string, len: number, defaultEditable: boolean): boolean
    // Has conflict: insertPixbuf(iter: TextIter, pixbuf: GdkPixbuf.Pixbuf): void
    /**
     * Copies text, tags, and pixbufs between `start` and `end` (the order
     * of `start` and `end` doesn't matter) and inserts the copy at `iter`.
     * Used instead of simply getting/inserting text because it preserves
     * images and tags. If `start` and `end` are in a different buffer from
     * `buffer,` the two buffers must share the same tag table.
     * 
     * Implemented via emissions of the insert_text and apply_tag signals,
     * so expect those.
     * @param iter a position in `buffer`
     * @param start a position in a #GtkTextBuffer
     * @param end another position in the same buffer as `start`
     */
    insertRange(iter: TextIter, start: TextIter, end: TextIter): void
    /**
     * Same as gtk_text_buffer_insert_range(), but does nothing if the
     * insertion point isn't editable. The `default_editable` parameter
     * indicates whether the text is editable at `iter` if no tags
     * enclosing `iter` affect editability. Typically the result of
     * gtk_text_view_get_editable() is appropriate here.
     * @param iter a position in `buffer`
     * @param start a position in a #GtkTextBuffer
     * @param end another position in the same buffer as `start`
     * @param defaultEditable default editability of the buffer
     */
    insertRangeInteractive(iter: TextIter, start: TextIter, end: TextIter, defaultEditable: boolean): boolean
    /**
     * Moves `mark` to the new location `where`. Emits the "mark-set" signal
     * as notification of the move.
     * @param mark a #GtkTextMark
     * @param where new location for `mark` in `buffer`
     */
    moveMark(mark: TextMark, where: TextIter): void
    /**
     * Moves the mark named `name` (which must exist) to location `where`.
     * See gtk_text_buffer_move_mark() for details.
     * @param name name of a mark
     * @param where new location for mark
     */
    moveMarkByName(name: string, where: TextIter): void
    /**
     * Pastes the contents of a clipboard at the insertion point, or
     * at `override_location`. (Note: pasting is asynchronous, that is,
     * we'll ask for the paste data and return, and at some point later
     * after the main loop runs, the paste data will be inserted.)
     * @param clipboard the #GtkClipboard to paste from
     * @param overrideLocation location to insert pasted text, or %NULL for                     at the cursor
     * @param defaultEditable whether the buffer is editable by default
     */
    pasteClipboard(clipboard: Clipboard, overrideLocation: TextIter | null, defaultEditable: boolean): void
    /**
     * This function moves the "insert" and "selection_bound" marks
     * simultaneously.  If you move them to the same place in two steps
     * with gtk_text_buffer_move_mark(), you will temporarily select a
     * region in between their old and new locations, which can be pretty
     * inefficient since the temporarily-selected region will force stuff
     * to be recalculated. This function moves them as a unit, which can
     * be optimized.
     * @param where where to put the cursor
     */
    placeCursor(where: TextIter): void
    /**
     * This function registers a rich text deserialization `function` along with
     * its `mime_type` with the passed `buffer`.
     * @param mimeType the format's mime-type
     * @param function_ the deserialize function to register
     */
    registerDeserializeFormat(mimeType: string, function_: TextBufferDeserializeFunc): Gdk.Atom
    /**
     * This function registers GTK+'s internal rich text serialization
     * format with the passed `buffer`. See
     * gtk_text_buffer_register_serialize_tagset() for details.
     * @param tagsetName an optional tagset name, on %NULL
     */
    registerDeserializeTagset(tagsetName: string | null): Gdk.Atom
    /**
     * This function registers a rich text serialization `function` along with
     * its `mime_type` with the passed `buffer`.
     * @param mimeType the format's mime-type
     * @param function_ the serialize function to register
     */
    registerSerializeFormat(mimeType: string, function_: TextBufferSerializeFunc): Gdk.Atom
    /**
     * This function registers GTK+'s internal rich text serialization
     * format with the passed `buffer`. The internal format does not comply
     * to any standard rich text format and only works between #GtkTextBuffer
     * instances. It is capable of serializing all of a text buffer's tags
     * and embedded pixbufs.
     * 
     * This function is just a wrapper around
     * gtk_text_buffer_register_serialize_format(). The mime type used
     * for registering is "application/x-gtk-text-buffer-rich-text", or
     * "application/x-gtk-text-buffer-rich-text;format=`tagset_name"` if a
     * `tagset_name` was passed.
     * 
     * The `tagset_name` can be used to restrict the transfer of rich text
     * to buffers with compatible sets of tags, in order to avoid unknown
     * tags from being pasted. It is probably the common case to pass an
     * identifier != %NULL here, since the %NULL tagset requires the
     * receiving buffer to deal with with pasting of arbitrary tags.
     * @param tagsetName an optional tagset name, on %NULL
     */
    registerSerializeTagset(tagsetName: string | null): Gdk.Atom
    /**
     * Removes all tags in the range between `start` and `end`.  Be careful
     * with this function; it could remove tags added in code unrelated to
     * the code you're currently writing. That is, using this function is
     * probably a bad idea if you have two or more unrelated code sections
     * that add tags.
     * @param start one bound of range to be untagged
     * @param end other bound of range to be untagged
     */
    removeAllTags(start: TextIter, end: TextIter): void
    /**
     * Removes a #GtkClipboard added with
     * gtk_text_buffer_add_selection_clipboard().
     * @param clipboard a #GtkClipboard added to `buffer` by             gtk_text_buffer_add_selection_clipboard()
     */
    removeSelectionClipboard(clipboard: Clipboard): void
    // Has conflict: removeTag(tag: TextTag, start: TextIter, end: TextIter): void
    /**
     * Calls gtk_text_tag_table_lookup() on the buffer's tag table to
     * get a #GtkTextTag, then calls gtk_text_buffer_remove_tag().
     * @param name name of a #GtkTextTag
     * @param start one bound of range to be untagged
     * @param end other bound of range to be untagged
     */
    removeTagByName(name: string, start: TextIter, end: TextIter): void
    /**
     * This function moves the "insert" and "selection_bound" marks
     * simultaneously.  If you move them in two steps
     * with gtk_text_buffer_move_mark(), you will temporarily select a
     * region in between their old and new locations, which can be pretty
     * inefficient since the temporarily-selected region will force stuff
     * to be recalculated. This function moves them as a unit, which can
     * be optimized.
     * @param ins where to put the "insert" mark
     * @param bound where to put the "selection_bound" mark
     */
    selectRange(ins: TextIter, bound: TextIter): void
    /**
     * This function serializes the portion of text between `start`
     * and `end` in the rich text format represented by `format`.
     * 
     * `format<`!-- -->s to be used must be registered using
     * gtk_text_buffer_register_serialize_format() or
     * gtk_text_buffer_register_serialize_tagset() beforehand.
     * @param contentBuffer the #GtkTextBuffer to serialize
     * @param format the rich text format to use for serializing
     * @param start start of block of text to serialize
     * @param end end of block of test to serialize
     */
    serialize(contentBuffer: TextBuffer, format: Gdk.Atom, start: TextIter, end: TextIter): Uint8Array
    /**
     * Used to keep track of whether the buffer has been modified since the
     * last time it was saved. Whenever the buffer is saved to disk, call
     * gtk_text_buffer_set_modified (`buffer,` FALSE). When the buffer is modified,
     * it will automatically toggled on the modified bit again. When the modified
     * bit flips, the buffer emits a "modified-changed" signal.
     * @param setting modification flag setting
     */
    setModified(setting: boolean): void
    /**
     * Deletes current contents of `buffer,` and inserts `text` instead. If
     * `len` is -1, `text` must be nul-terminated. `text` must be valid UTF-8.
     * @param text UTF-8 text to insert
     * @param len length of `text` in bytes
     */
    setText(text: string, len: number): void
    /**
     * This function unregisters a rich text format that was previously
     * registered using gtk_text_buffer_register_deserialize_format() or
     * gtk_text_buffer_register_deserialize_tagset().
     * @param format a #GdkAtom representing a registered rich text format.
     */
    unregisterDeserializeFormat(format: Gdk.Atom): void
    /**
     * This function unregisters a rich text format that was previously
     * registered using gtk_text_buffer_register_serialize_format() or
     * gtk_text_buffer_register_serialize_tagset()
     * @param format a #GdkAtom representing a registered rich text format.
     */
    unregisterSerializeFormat(format: Gdk.Atom): void

    // Own virtual methods of Gtk-2.0.Gtk.TextBuffer

    /**
     * Emits the "apply-tag" signal on `buffer`. The default
     * handler for the signal applies `tag` to the given range.
     * `start` and `end` do not have to be in order.
     * @virtual 
     * @param tag a #GtkTextTag
     * @param startChar 
     * @param endChar 
     */
    applyTag(tag: TextTag, startChar: TextIter, endChar: TextIter): void
    /**
     * Called to indicate that the buffer operations between here and a
     * call to gtk_text_buffer_end_user_action() are part of a single
     * user-visible operation. The operations between
     * gtk_text_buffer_begin_user_action() and
     * gtk_text_buffer_end_user_action() can then be grouped when creating
     * an undo stack. #GtkTextBuffer maintains a count of calls to
     * gtk_text_buffer_begin_user_action() that have not been closed with
     * a call to gtk_text_buffer_end_user_action(), and emits the
     * "begin-user-action" and "end-user-action" signals only for the
     * outermost pair of calls. This allows you to build user actions
     * from other user actions.
     * 
     * The "interactive" buffer mutation functions, such as
     * gtk_text_buffer_insert_interactive(), automatically call begin/end
     * user action around the buffer operations they perform, so there's
     * no need to add extra calls if you user action consists solely of a
     * single call to one of those functions.
     * @virtual 
     */
    beginUserAction(): void
    changed(): void
    deleteRange(start: TextIter, end: TextIter): void
    /**
     * Should be paired with a call to gtk_text_buffer_begin_user_action().
     * See that function for a full explanation.
     * @virtual 
     */
    endUserAction(): void
    /**
     * Inserts a child widget anchor into the text buffer at `iter`. The
     * anchor will be counted as one character in character counts, and
     * when obtaining the buffer contents as a string, will be represented
     * by the Unicode "object replacement character" 0xFFFC. Note that the
     * "slice" variants for obtaining portions of the buffer as a string
     * include this character for child anchors, but the "text" variants do
     * not. E.g. see gtk_text_buffer_get_slice() and
     * gtk_text_buffer_get_text(). Consider
     * gtk_text_buffer_create_child_anchor() as a more convenient
     * alternative to this function. The buffer will add a reference to
     * the anchor, so you can unref it after insertion.
     * @virtual 
     * @param pos 
     * @param anchor a #GtkTextChildAnchor
     */
    insertChildAnchor(pos: TextIter, anchor: TextChildAnchor): void
    /**
     * Inserts an image into the text buffer at `iter`. The image will be
     * counted as one character in character counts, and when obtaining
     * the buffer contents as a string, will be represented by the Unicode
     * "object replacement character" 0xFFFC. Note that the "slice"
     * variants for obtaining portions of the buffer as a string include
     * this character for pixbufs, but the "text" variants do
     * not. e.g. see gtk_text_buffer_get_slice() and
     * gtk_text_buffer_get_text().
     * @virtual 
     * @param pos 
     * @param pixbuf a #GdkPixbuf
     */
    insertPixbuf(pos: TextIter, pixbuf: GdkPixbuf.Pixbuf): void
    insertText(pos: TextIter, text: string, length: number): void
    markDeleted(mark: TextMark): void
    markSet(location: TextIter, mark: TextMark): void
    modifiedChanged(): void
    pasteDone(clipboard: Clipboard): void
    /**
     * Emits the "remove-tag" signal. The default handler for the signal
     * removes all occurrences of `tag` from the given range. `start` and
     * `end` don't have to be in order.
     * @virtual 
     * @param tag a #GtkTextTag
     * @param startChar 
     * @param endChar 
     */
    removeTag(tag: TextTag, startChar: TextIter, endChar: TextIter): void

    // Own signals of Gtk-2.0.Gtk.TextBuffer

    connect(sigName: "apply-tag", callback: TextBuffer.ApplyTagSignalCallback): number
    on(sigName: "apply-tag", callback: TextBuffer.ApplyTagSignalCallback): number
    once(sigName: "apply-tag", callback: TextBuffer.ApplyTagSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "apply-tag", start: TextIter, end: TextIter, ...args: any[]): void
    connect(sigName: "begin-user-action", callback: TextBuffer.BeginUserActionSignalCallback): number
    on(sigName: "begin-user-action", callback: TextBuffer.BeginUserActionSignalCallback): number
    once(sigName: "begin-user-action", callback: TextBuffer.BeginUserActionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "begin-user-action", ...args: any[]): void
    connect(sigName: "changed", callback: TextBuffer.ChangedSignalCallback): number
    on(sigName: "changed", callback: TextBuffer.ChangedSignalCallback): number
    once(sigName: "changed", callback: TextBuffer.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void
    connect(sigName: "delete-range", callback: TextBuffer.DeleteRangeSignalCallback): number
    on(sigName: "delete-range", callback: TextBuffer.DeleteRangeSignalCallback): number
    once(sigName: "delete-range", callback: TextBuffer.DeleteRangeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "delete-range", end: TextIter, ...args: any[]): void
    connect(sigName: "end-user-action", callback: TextBuffer.EndUserActionSignalCallback): number
    on(sigName: "end-user-action", callback: TextBuffer.EndUserActionSignalCallback): number
    once(sigName: "end-user-action", callback: TextBuffer.EndUserActionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "end-user-action", ...args: any[]): void
    connect(sigName: "insert-child-anchor", callback: TextBuffer.InsertChildAnchorSignalCallback): number
    on(sigName: "insert-child-anchor", callback: TextBuffer.InsertChildAnchorSignalCallback): number
    once(sigName: "insert-child-anchor", callback: TextBuffer.InsertChildAnchorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-child-anchor", anchor: TextChildAnchor, ...args: any[]): void
    connect(sigName: "insert-pixbuf", callback: TextBuffer.InsertPixbufSignalCallback): number
    on(sigName: "insert-pixbuf", callback: TextBuffer.InsertPixbufSignalCallback): number
    once(sigName: "insert-pixbuf", callback: TextBuffer.InsertPixbufSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-pixbuf", pixbuf: GdkPixbuf.Pixbuf, ...args: any[]): void
    connect(sigName: "insert-text", callback: TextBuffer.InsertTextSignalCallback): number
    on(sigName: "insert-text", callback: TextBuffer.InsertTextSignalCallback): number
    once(sigName: "insert-text", callback: TextBuffer.InsertTextSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-text", text: string, len: number, ...args: any[]): void
    connect(sigName: "mark-deleted", callback: TextBuffer.MarkDeletedSignalCallback): number
    on(sigName: "mark-deleted", callback: TextBuffer.MarkDeletedSignalCallback): number
    once(sigName: "mark-deleted", callback: TextBuffer.MarkDeletedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "mark-deleted", ...args: any[]): void
    connect(sigName: "mark-set", callback: TextBuffer.MarkSetSignalCallback): number
    on(sigName: "mark-set", callback: TextBuffer.MarkSetSignalCallback): number
    once(sigName: "mark-set", callback: TextBuffer.MarkSetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "mark-set", mark: TextMark, ...args: any[]): void
    connect(sigName: "modified-changed", callback: TextBuffer.ModifiedChangedSignalCallback): number
    on(sigName: "modified-changed", callback: TextBuffer.ModifiedChangedSignalCallback): number
    once(sigName: "modified-changed", callback: TextBuffer.ModifiedChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "modified-changed", ...args: any[]): void
    connect(sigName: "paste-done", callback: TextBuffer.PasteDoneSignalCallback): number
    on(sigName: "paste-done", callback: TextBuffer.PasteDoneSignalCallback): number
    once(sigName: "paste-done", callback: TextBuffer.PasteDoneSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "paste-done", ...args: any[]): void
    connect(sigName: "remove-tag", callback: TextBuffer.RemoveTagSignalCallback): number
    on(sigName: "remove-tag", callback: TextBuffer.RemoveTagSignalCallback): number
    once(sigName: "remove-tag", callback: TextBuffer.RemoveTagSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "remove-tag", start: TextIter, end: TextIter, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TextBuffer

    connect(sigName: "notify::copy-target-list", callback: any): number
    on(sigName: "notify::copy-target-list", callback: any): number
    once(sigName: "notify::copy-target-list", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::copy-target-list", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: any): number
    on(sigName: "notify::cursor-position", callback: any): number
    once(sigName: "notify::cursor-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::paste-target-list", callback: any): number
    on(sigName: "notify::paste-target-list", callback: any): number
    once(sigName: "notify::paste-target-list", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::paste-target-list", ...args: any[]): void
    connect(sigName: "notify::text", callback: any): number
    on(sigName: "notify::text", callback: any): number
    once(sigName: "notify::text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TextBuffer extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TextBuffer

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextBuffer

    constructor(config?: TextBuffer.ConstructorProperties) 
    /**
     * Creates a new text buffer.
     * @constructor 
     * @param table a tag table, or %NULL to create a new one
     */
    constructor(table: TextTagTable | null) 
    /**
     * Creates a new text buffer.
     * @constructor 
     * @param table a tag table, or %NULL to create a new one
     */
    static new(table: TextTagTable | null): TextBuffer
    _init(config?: TextBuffer.ConstructorProperties): void
}

export module TextChildAnchor {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface TextChildAnchor {

    // Own fields of Gtk-2.0.Gtk.TextChildAnchor

    parentInstance: GObject.Object
    segment: object

    // Owm methods of Gtk-2.0.Gtk.TextChildAnchor

    /**
     * Determines whether a child anchor has been deleted from
     * the buffer. Keep in mind that the child anchor will be
     * unreferenced when removed from the buffer, so you need to
     * hold your own reference (with g_object_ref()) if you plan
     * to use this function &mdash; otherwise all deleted child anchors
     * will also be finalized.
     */
    getDeleted(): boolean
    /**
     * Gets a list of all widgets anchored at this child anchor.
     * The returned list should be freed with g_list_free().
     */
    getWidgets(): Widget[]
    queueResize(layout: TextLayout): void
    registerChild(child: Widget, layout: TextLayout): void
    unregisterChild(child: Widget): void

    // Class property signals of Gtk-2.0.Gtk.TextChildAnchor

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TextChildAnchor extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TextChildAnchor

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextChildAnchor

    constructor(config?: TextChildAnchor.ConstructorProperties) 
    /**
     * Creates a new #GtkTextChildAnchor. Usually you would then insert
     * it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
     * To perform the creation and insertion in one step, use the
     * convenience function gtk_text_buffer_create_child_anchor().
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkTextChildAnchor. Usually you would then insert
     * it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
     * To perform the creation and insertion in one step, use the
     * convenience function gtk_text_buffer_create_child_anchor().
     * @constructor 
     */
    static new(): TextChildAnchor
    _init(config?: TextChildAnchor.ConstructorProperties): void
}

export module TextLayout {

    // Signal callback interfaces

    /**
     * Signal callback interface for `allocate-child`
     */
    export interface AllocateChildSignalCallback {
        (object: Object, p0: number, p1: number): void
    }

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (object: number, p0: number, p1: number): void
    }

    /**
     * Signal callback interface for `invalidated`
     */
    export interface InvalidatedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface TextLayout {

    // Own fields of Gtk-2.0.Gtk.TextLayout

    parentInstance: GObject.Object
    screenWidth: number
    width: number
    height: number
    buffer: TextBuffer
    defaultStyle: TextAttributes
    ltrContext: Pango.Context
    rtlContext: Pango.Context
    oneStyleCache: TextAttributes
    oneDisplayCache: TextLineDisplay
    wrapLoopCount: number
    cursorVisible: number
    cursorDirection: number
    keyboardDirection: number
    preeditString: string
    preeditAttrs: Pango.AttrList
    preeditLen: number
    preeditCursor: number
    overwriteMode: number

    // Owm methods of Gtk-2.0.Gtk.TextLayout

    // Has conflict: changed(y: number, oldHeight: number, newHeight: number): void
    /**
     * If the iterator is not fully in the range `top` <= y < `bottom,`
     * then, if possible, move it the minimum distance so that the
     * iterator in this range.
     * @param iter a #GtkTextIter
     * @param top the top of the range
     * @param bottom the bottom the range
     */
    clampIterToVrange(iter: TextIter, top: number, bottom: number): boolean
    cursorsChanged(y: number, oldHeight: number, newHeight: number): void
    defaultStyleChanged(): void
    // Has conflict: freeLineData(line: TextLine, lineData: TextLineData): void
    freeLineDisplay(display: TextLineDisplay): void
    /**
     * Given an iterator within a text layout, determine the positions of the
     * strong and weak cursors if the insertion point is at that
     * iterator. The position of each cursor is stored as a zero-width
     * rectangle. The strong cursor location is the location where
     * characters of the directionality equal to the base direction of the
     * paragraph are inserted.  The weak cursor location is the location
     * where characters of the directionality opposite to the base
     * direction of the paragraph are inserted.
     * @param iter a #GtkTextIter
     * @param strongPos location to store the strong cursor position (may be %NULL)
     * @param weakPos location to store the weak cursor position (may be %NULL)
     */
    getCursorLocations(iter: TextIter, strongPos: Gdk.Rectangle | null, weakPos: Gdk.Rectangle | null): void
    /**
     * Returns whether the insertion cursor will be shown.
     */
    getCursorVisible(): boolean
    getIterAtLine(iter: TextIter, line: TextLine, byteOffset: number): void
    getIterAtPixel(iter: TextIter, x: number, y: number): void
    getIterAtPosition(iter: TextIter, trailing: number, x: number, y: number): void
    getIterLocation(iter: TextIter, rect: Gdk.Rectangle): void
    /**
     * Get the iter at the beginning of the line which is displayed
     * at the given y.
     * @param targetIter the iterator in which the result is stored
     * @param y the y positition
     * @param lineTop location to store the y coordinate of the            top of the line. (Can by %NULL)
     */
    getLineAtY(targetIter: TextIter, y: number, lineTop: number): void
    /**
     * Find the range of y coordinates for the paragraph containing
     * the given iter.
     * @param iter a #GtkTextIter
     * @param y location to store the top of the paragraph in pixels,          or %NULL. `height`  location to store the height of the paragraph in pixels,          or %NULL.
     * @param height 
     */
    getLineYrange(iter: TextIter, y: number, height: number): void
    getLines(topY: number, bottomY: number, firstLineY: number): TextLine[]
    getSize(width: number, height: number): void
    // Has conflict: invalidate(start: TextIter, end: TextIter): void
    // Has conflict: invalidateCursors(start: TextIter, end: TextIter): void
    /**
     * Check if there are any invalid regions in a #GtkTextLayout's buffer
     */
    isValid(): boolean
    /**
     * Tests whether an iterator is at the start of a display line.
     * @param iter iterator to test
     */
    iterStartsLine(iter: TextIter): boolean
    /**
     * Move to the beginning or end of a display line.
     * @param iter 
     * @param direction if negative, move to beginning of line, otherwise                move to end of line.
     */
    moveIterToLineEnd(iter: TextIter, direction: number): boolean
    /**
     * Move the iterator to the beginning of the next line. The
     * lines of a wrapped paragraph are treated as distinct for
     * this operation.
     * @param iter a #GtkTextIter
     */
    moveIterToNextLine(iter: TextIter): boolean
    /**
     * Move the iterator to the beginning of the previous line. The lines
     * of a wrapped paragraph are treated as distinct for this operation.
     * @param iter a #GtkTextIter
     */
    moveIterToPreviousLine(iter: TextIter): boolean
    /**
     * Keeping the iterator on the same line of the layout, move it to the
     * specified X coordinate. The lines of a wrapped paragraph are
     * treated as distinct for this operation.
     * @param iter a #GtkTextIter
     * @param x X coordinate
     */
    moveIterToX(iter: TextIter, x: number): void
    /**
     * Move the iterator a given number of characters visually, treating
     * it as the strong cursor position. If `count` is positive, then the
     * new strong cursor position will be `count` positions to the right of
     * the old cursor position. If `count` is negative then the new strong
     * cursor position will be `count` positions to the left of the old
     * cursor position.
     * 
     * In the presence of bidirection text, the correspondence
     * between logical and visual order will depend on the direction
     * of the current run, and there may be jumps when the cursor
     * is moved off of the end of a run.
     * @param iter a #GtkTextIter
     * @param count number of characters to move (negative moves left, positive moves right)
     */
    moveIterVisually(iter: TextIter, count: number): boolean
    setBuffer(buffer: TextBuffer | null): void
    setContexts(ltrContext: Pango.Context, rtlContext: Pango.Context): void
    /**
     * Sets which text directions (left-to-right and/or right-to-left) for
     * which cursors will be drawn for the insertion point. The visual
     * point at which new text is inserted depends on whether the new
     * text is right-to-left or left-to-right, so it may be desired to
     * make the drawn position of the cursor depend on the keyboard state.
     * @param direction the new direction(s) for which to draw cursors.             %GTK_TEXT_DIR_NONE means draw cursors for both             left-to-right insertion and right-to-left insertion.             (The two cursors will be visually distinguished.)
     */
    setCursorDirection(direction: TextDirection): void
    /**
     * Sets whether the insertion cursor should be shown. Generally,
     * widgets using #GtkTextLayout will hide the cursor when the
     * widget does not have the input focus.
     * @param cursorVisible If %FALSE, then the insertion cursor will not   be shown, even if the text is editable.
     */
    setCursorVisible(cursorVisible: boolean): void
    setDefaultStyle(values: TextAttributes): void
    /**
     * Sets the keyboard direction; this is used as for the bidirectional
     * base direction for the line with the cursor if the line contains
     * only neutral characters.
     * @param keyboardDir the current direction of the keyboard.
     */
    setKeyboardDirection(keyboardDir: TextDirection): void
    /**
     * Sets overwrite mode
     * @param overwrite overwrite mode
     */
    setOverwriteMode(overwrite: boolean): void
    /**
     * Set the preedit string and attributes. The preedit string is a
     * string showing text that is currently being edited and not
     * yet committed into the buffer.
     * @param preeditString a string to display at the insertion point
     * @param preeditAttrs a #PangoAttrList of attributes that apply to `preedit_string`
     * @param cursorPos position of cursor within preedit string in chars
     */
    setPreeditString(preeditString: string, preeditAttrs: Pango.AttrList, cursorPos: number): void
    setScreenWidth(width: number): void
    spew(): void
    /**
     * Validate regions of a #GtkTextLayout. The ::changed signal will
     * be emitted for each region validated.
     * @param maxPixels the maximum number of pixels to validate. (No more              than one paragraph beyond this limit will be validated)
     */
    validate(maxPixels: number): void
    /**
     * Ensure that a region of a #GtkTextLayout is valid. The ::changed
     * signal will be emitted if any lines are validated.
     * @param anchorLine 
     * @param y0 offset from the top of the line pointed to by `anchor` at       which to begin validation. (The offset here is in pixels       after validation.)
     * @param y1 offset from the top of the line pointed to by `anchor` at       which to end validation. (The offset here is in pixels       after validation.)
     */
    validateYrange(anchorLine: TextIter, y0: number, y1: number): void
    wrapLoopEnd(): void
    wrapLoopStart(): void

    // Own virtual methods of Gtk-2.0.Gtk.TextLayout

    allocateChild(child: Widget, x: number, y: number): void
    changed(y: number, oldHeight: number, newHeight: number): void
    freeLineData(line: TextLine, lineData: TextLineData): void
    getLogAttrs(line: TextLine, attrs: Pango.LogAttr, nAttrs: number): void
    invalidate(start: TextIter, end: TextIter): void
    invalidateCursors(start: TextIter, end: TextIter): void
    invalidated(): void

    // Own signals of Gtk-2.0.Gtk.TextLayout

    connect(sigName: "allocate-child", callback: TextLayout.AllocateChildSignalCallback): number
    on(sigName: "allocate-child", callback: TextLayout.AllocateChildSignalCallback): number
    once(sigName: "allocate-child", callback: TextLayout.AllocateChildSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "allocate-child", p0: number, p1: number, ...args: any[]): void
    connect(sigName: "changed", callback: TextLayout.ChangedSignalCallback): number
    on(sigName: "changed", callback: TextLayout.ChangedSignalCallback): number
    once(sigName: "changed", callback: TextLayout.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", p0: number, p1: number, ...args: any[]): void
    connect(sigName: "invalidated", callback: TextLayout.InvalidatedSignalCallback): number
    on(sigName: "invalidated", callback: TextLayout.InvalidatedSignalCallback): number
    once(sigName: "invalidated", callback: TextLayout.InvalidatedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "invalidated", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TextLayout

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TextLayout extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TextLayout

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextLayout

    constructor(config?: TextLayout.ConstructorProperties) 
    constructor() 
    static new(): TextLayout
    _init(config?: TextLayout.ConstructorProperties): void
}

export module TextMark {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TextMark

        leftGravity?: boolean | null
        name?: string | null
    }

}

export interface TextMark {

    // Own properties of Gtk-2.0.Gtk.TextMark

    readonly leftGravity: boolean
    readonly name: string

    // Own fields of Gtk-2.0.Gtk.TextMark

    parentInstance: GObject.Object
    segment: object

    // Owm methods of Gtk-2.0.Gtk.TextMark

    /**
     * Gets the buffer this mark is located inside,
     * or %NULL if the mark is deleted.
     */
    getBuffer(): TextBuffer
    /**
     * Returns %TRUE if the mark has been removed from its buffer
     * with gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark()
     * for a way to add it to a buffer again.
     */
    getDeleted(): boolean
    /**
     * Determines whether the mark has left gravity.
     */
    getLeftGravity(): boolean
    /**
     * Returns the mark name; returns NULL for anonymous marks.
     */
    getName(): string
    /**
     * Returns %TRUE if the mark is visible (i.e. a cursor is displayed
     * for it).
     */
    getVisible(): boolean
    /**
     * Sets the visibility of `mark;` the insertion point is normally
     * visible, i.e. you can see it as a vertical bar. Also, the text
     * widget uses a visible mark to indicate where a drop will occur when
     * dragging-and-dropping text. Most other marks are not visible.
     * Marks are not visible by default.
     * @param setting visibility of mark
     */
    setVisible(setting: boolean): void

    // Class property signals of Gtk-2.0.Gtk.TextMark

    connect(sigName: "notify::left-gravity", callback: any): number
    on(sigName: "notify::left-gravity", callback: any): number
    once(sigName: "notify::left-gravity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::left-gravity", ...args: any[]): void
    connect(sigName: "notify::name", callback: any): number
    on(sigName: "notify::name", callback: any): number
    once(sigName: "notify::name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TextMark extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TextMark

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextMark

    constructor(config?: TextMark.ConstructorProperties) 
    /**
     * Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().
     * If `name` is %NULL, the mark is anonymous; otherwise, the mark can be
     * retrieved by name using gtk_text_buffer_get_mark(). If a mark has left
     * gravity, and text is inserted at the mark's current location, the mark
     * will be moved to the left of the newly-inserted text. If the mark has
     * right gravity (`left_gravity` = %FALSE), the mark will end up on the
     * right of newly-inserted text. The standard left-to-right cursor is a
     * mark with right gravity (when you type, the cursor stays on the right
     * side of the text you're typing).
     * @constructor 
     * @param name mark name or %NULL
     * @param leftGravity whether the mark should have left gravity
     */
    constructor(name: string | null, leftGravity: boolean) 
    /**
     * Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().
     * If `name` is %NULL, the mark is anonymous; otherwise, the mark can be
     * retrieved by name using gtk_text_buffer_get_mark(). If a mark has left
     * gravity, and text is inserted at the mark's current location, the mark
     * will be moved to the left of the newly-inserted text. If the mark has
     * right gravity (`left_gravity` = %FALSE), the mark will end up on the
     * right of newly-inserted text. The standard left-to-right cursor is a
     * mark with right gravity (when you type, the cursor stays on the right
     * side of the text you're typing).
     * @constructor 
     * @param name mark name or %NULL
     * @param leftGravity whether the mark should have left gravity
     */
    static new(name: string | null, leftGravity: boolean): TextMark
    _init(config?: TextMark.ConstructorProperties): void
}

export module TextTag {

    // Signal callback interfaces

    /**
     * Signal callback interface for `event`
     */
    export interface EventSignalCallback {
        (object: GObject.Object, event: Gdk.Event, iter: TextIter): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TextTag

        /**
         * Whether the margins accumulate or override each other.
         * 
         * When set to %TRUE the margins of this tag are added to the margins
         * of any other non-accumulative margins present. When set to %FALSE
         * the margins override one another (the default).
         */
        accumulativeMargin?: boolean | null
        background?: string | null
        backgroundFullHeight?: boolean | null
        backgroundFullHeightSet?: boolean | null
        backgroundGdk?: Gdk.Color | null
        backgroundSet?: boolean | null
        backgroundStipple?: Gdk.Pixmap | null
        backgroundStippleSet?: boolean | null
        direction?: TextDirection | null
        editable?: boolean | null
        editableSet?: boolean | null
        family?: string | null
        familySet?: boolean | null
        /**
         * Font description as string, e.g. \"Sans Italic 12\".
         * 
         * Note that the initial value of this property depends on
         * the internals of #PangoFontDescription.
         */
        font?: string | null
        fontDesc?: Pango.FontDescription | null
        foreground?: string | null
        foregroundGdk?: Gdk.Color | null
        foregroundSet?: boolean | null
        foregroundStipple?: Gdk.Pixmap | null
        foregroundStippleSet?: boolean | null
        indent?: number | null
        indentSet?: boolean | null
        /**
         * Whether this text is hidden.
         * 
         * Note that there may still be problems with the support for invisible
         * text, in particular when navigating programmatically inside a buffer
         * containing invisible segments.
         */
        invisible?: boolean | null
        invisibleSet?: boolean | null
        justification?: Justification | null
        justificationSet?: boolean | null
        /**
         * The language this text is in, as an ISO code. Pango can use this as a
         * hint when rendering the text. If not set, an appropriate default will be
         * used.
         * 
         * Note that the initial value of this property depends on the current
         * locale, see also gtk_get_default_language().
         */
        language?: string | null
        languageSet?: boolean | null
        leftMargin?: number | null
        leftMarginSet?: boolean | null
        name?: string | null
        /**
         * The paragraph background color as a string.
         */
        paragraphBackground?: string | null
        /**
         * The paragraph background color as a as a (possibly unallocated)
         * #GdkColor.
         */
        paragraphBackgroundGdk?: Gdk.Color | null
        paragraphBackgroundSet?: boolean | null
        pixelsAboveLines?: number | null
        pixelsAboveLinesSet?: boolean | null
        pixelsBelowLines?: number | null
        pixelsBelowLinesSet?: boolean | null
        pixelsInsideWrap?: number | null
        pixelsInsideWrapSet?: boolean | null
        rightMargin?: number | null
        rightMarginSet?: boolean | null
        rise?: number | null
        riseSet?: boolean | null
        scale?: number | null
        scaleSet?: boolean | null
        size?: number | null
        sizePoints?: number | null
        sizeSet?: boolean | null
        stretch?: Pango.Stretch | null
        stretchSet?: boolean | null
        strikethrough?: boolean | null
        strikethroughSet?: boolean | null
        style?: Pango.Style | null
        styleSet?: boolean | null
        tabs?: Pango.TabArray | null
        tabsSet?: boolean | null
        underline?: Pango.Underline | null
        underlineSet?: boolean | null
        variant?: Pango.Variant | null
        variantSet?: boolean | null
        weight?: number | null
        weightSet?: boolean | null
        wrapMode?: WrapMode | null
        wrapModeSet?: boolean | null
    }

}

export interface TextTag {

    // Own properties of Gtk-2.0.Gtk.TextTag

    background: string
    backgroundFullHeight: boolean
    backgroundFullHeightSet: boolean
    backgroundGdk: Gdk.Color
    backgroundSet: boolean
    backgroundStipple: Gdk.Pixmap
    backgroundStippleSet: boolean
    direction: TextDirection
    editable: boolean
    family: string
    familySet: boolean
    /**
     * Font description as string, e.g. \"Sans Italic 12\".
     * 
     * Note that the initial value of this property depends on
     * the internals of #PangoFontDescription.
     */
    font: string
    fontDesc: Pango.FontDescription
    foreground: string
    foregroundGdk: Gdk.Color
    foregroundSet: boolean
    foregroundStipple: Gdk.Pixmap
    foregroundStippleSet: boolean
    indent: number
    /**
     * Whether this text is hidden.
     * 
     * Note that there may still be problems with the support for invisible
     * text, in particular when navigating programmatically inside a buffer
     * containing invisible segments.
     */
    invisible: boolean
    justification: Justification
    /**
     * The language this text is in, as an ISO code. Pango can use this as a
     * hint when rendering the text. If not set, an appropriate default will be
     * used.
     * 
     * Note that the initial value of this property depends on the current
     * locale, see also gtk_get_default_language().
     */
    language: string
    leftMargin: number
    /**
     * The paragraph background color as a string.
     */
    paragraphBackground: string
    /**
     * The paragraph background color as a as a (possibly unallocated)
     * #GdkColor.
     */
    paragraphBackgroundGdk: Gdk.Color
    paragraphBackgroundSet: boolean
    pixelsAboveLines: number
    pixelsBelowLines: number
    pixelsInsideWrap: number
    rightMargin: number
    rise: number
    scale: number
    size: number
    sizePoints: number
    sizeSet: boolean
    stretch: Pango.Stretch
    stretchSet: boolean
    strikethrough: boolean
    style: Pango.Style
    styleSet: boolean
    tabs: Pango.TabArray
    underline: Pango.Underline
    variant: Pango.Variant
    variantSet: boolean
    weight: number
    weightSet: boolean
    wrapMode: WrapMode

    // Own fields of Gtk-2.0.Gtk.TextTag

    parentInstance: GObject.Object
    table: TextTagTable
    name: string
    priority: number
    values: TextAttributes
    bgColorSet: number
    bgStippleSet: number
    fgColorSet: number
    scaleSet: number
    fgStippleSet: number
    justificationSet: number
    leftMarginSet: number
    indentSet: number
    riseSet: number
    strikethroughSet: number
    rightMarginSet: number
    pixelsAboveLinesSet: number
    pixelsBelowLinesSet: number
    pixelsInsideWrapSet: number
    tabsSet: number
    underlineSet: number
    wrapModeSet: number
    bgFullHeightSet: number
    invisibleSet: number
    editableSet: number
    languageSet: number
    pgBgColorSet: number
    accumulativeMargin: number
    pad1: number

    // Owm methods of Gtk-2.0.Gtk.TextTag

    // Has conflict: event(eventObject: GObject.Object, event: Gdk.Event, iter: TextIter): boolean
    /**
     * Get the tag priority.
     */
    getPriority(): number
    /**
     * Sets the priority of a #GtkTextTag. Valid priorities are
     * start at 0 and go to one less than gtk_text_tag_table_get_size().
     * Each tag in a table has a unique priority; setting the priority
     * of one tag shifts the priorities of all the other tags in the
     * table to maintain a unique priority for each tag. Higher priority
     * tags "win" if two tags both set the same text attribute. When adding
     * a tag to a tag table, it will be assigned the highest priority in
     * the table by default; so normally the precedence of a set of tags
     * is the order in which they were added to the table, or created with
     * gtk_text_buffer_create_tag(), which adds the tag to the buffer's table
     * automatically.
     * @param priority the new priority
     */
    setPriority(priority: number): void

    // Own virtual methods of Gtk-2.0.Gtk.TextTag

    /**
     * Emits the "event" signal on the #GtkTextTag.
     * @virtual 
     * @param eventObject object that received the event, such as a widget
     * @param event the event
     * @param iter location where the event was received
     */
    event(eventObject: GObject.Object, event: Gdk.Event, iter: TextIter): boolean

    // Own signals of Gtk-2.0.Gtk.TextTag

    connect(sigName: "event", callback: TextTag.EventSignalCallback): number
    on(sigName: "event", callback: TextTag.EventSignalCallback): number
    once(sigName: "event", callback: TextTag.EventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "event", event: Gdk.Event, iter: TextIter, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TextTag

    connect(sigName: "notify::background", callback: any): number
    on(sigName: "notify::background", callback: any): number
    once(sigName: "notify::background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::background-full-height", callback: any): number
    on(sigName: "notify::background-full-height", callback: any): number
    once(sigName: "notify::background-full-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-full-height", ...args: any[]): void
    connect(sigName: "notify::background-full-height-set", callback: any): number
    on(sigName: "notify::background-full-height-set", callback: any): number
    once(sigName: "notify::background-full-height-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-full-height-set", ...args: any[]): void
    connect(sigName: "notify::background-gdk", callback: any): number
    on(sigName: "notify::background-gdk", callback: any): number
    once(sigName: "notify::background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-gdk", ...args: any[]): void
    connect(sigName: "notify::background-set", callback: any): number
    on(sigName: "notify::background-set", callback: any): number
    once(sigName: "notify::background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-set", ...args: any[]): void
    connect(sigName: "notify::background-stipple", callback: any): number
    on(sigName: "notify::background-stipple", callback: any): number
    once(sigName: "notify::background-stipple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-stipple", ...args: any[]): void
    connect(sigName: "notify::background-stipple-set", callback: any): number
    on(sigName: "notify::background-stipple-set", callback: any): number
    once(sigName: "notify::background-stipple-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::background-stipple-set", ...args: any[]): void
    connect(sigName: "notify::direction", callback: any): number
    on(sigName: "notify::direction", callback: any): number
    once(sigName: "notify::direction", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::direction", ...args: any[]): void
    connect(sigName: "notify::editable", callback: any): number
    on(sigName: "notify::editable", callback: any): number
    once(sigName: "notify::editable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::family", callback: any): number
    on(sigName: "notify::family", callback: any): number
    once(sigName: "notify::family", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family", ...args: any[]): void
    connect(sigName: "notify::family-set", callback: any): number
    on(sigName: "notify::family-set", callback: any): number
    once(sigName: "notify::family-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::family-set", ...args: any[]): void
    connect(sigName: "notify::font", callback: any): number
    on(sigName: "notify::font", callback: any): number
    once(sigName: "notify::font", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: any): number
    on(sigName: "notify::font-desc", callback: any): number
    once(sigName: "notify::font-desc", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::foreground", callback: any): number
    on(sigName: "notify::foreground", callback: any): number
    once(sigName: "notify::foreground", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground", ...args: any[]): void
    connect(sigName: "notify::foreground-gdk", callback: any): number
    on(sigName: "notify::foreground-gdk", callback: any): number
    once(sigName: "notify::foreground-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-gdk", ...args: any[]): void
    connect(sigName: "notify::foreground-set", callback: any): number
    on(sigName: "notify::foreground-set", callback: any): number
    once(sigName: "notify::foreground-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-set", ...args: any[]): void
    connect(sigName: "notify::foreground-stipple", callback: any): number
    on(sigName: "notify::foreground-stipple", callback: any): number
    once(sigName: "notify::foreground-stipple", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-stipple", ...args: any[]): void
    connect(sigName: "notify::foreground-stipple-set", callback: any): number
    on(sigName: "notify::foreground-stipple-set", callback: any): number
    once(sigName: "notify::foreground-stipple-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::foreground-stipple-set", ...args: any[]): void
    connect(sigName: "notify::indent", callback: any): number
    on(sigName: "notify::indent", callback: any): number
    once(sigName: "notify::indent", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::invisible", callback: any): number
    on(sigName: "notify::invisible", callback: any): number
    once(sigName: "notify::invisible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::invisible", ...args: any[]): void
    connect(sigName: "notify::justification", callback: any): number
    on(sigName: "notify::justification", callback: any): number
    once(sigName: "notify::justification", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::justification", ...args: any[]): void
    connect(sigName: "notify::language", callback: any): number
    on(sigName: "notify::language", callback: any): number
    once(sigName: "notify::language", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::left-margin", callback: any): number
    on(sigName: "notify::left-margin", callback: any): number
    once(sigName: "notify::left-margin", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::left-margin", ...args: any[]): void
    connect(sigName: "notify::paragraph-background", callback: any): number
    on(sigName: "notify::paragraph-background", callback: any): number
    once(sigName: "notify::paragraph-background", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::paragraph-background", ...args: any[]): void
    connect(sigName: "notify::paragraph-background-gdk", callback: any): number
    on(sigName: "notify::paragraph-background-gdk", callback: any): number
    once(sigName: "notify::paragraph-background-gdk", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::paragraph-background-gdk", ...args: any[]): void
    connect(sigName: "notify::paragraph-background-set", callback: any): number
    on(sigName: "notify::paragraph-background-set", callback: any): number
    once(sigName: "notify::paragraph-background-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::paragraph-background-set", ...args: any[]): void
    connect(sigName: "notify::pixels-above-lines", callback: any): number
    on(sigName: "notify::pixels-above-lines", callback: any): number
    once(sigName: "notify::pixels-above-lines", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixels-above-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-below-lines", callback: any): number
    on(sigName: "notify::pixels-below-lines", callback: any): number
    once(sigName: "notify::pixels-below-lines", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixels-below-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-inside-wrap", callback: any): number
    on(sigName: "notify::pixels-inside-wrap", callback: any): number
    once(sigName: "notify::pixels-inside-wrap", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pixels-inside-wrap", ...args: any[]): void
    connect(sigName: "notify::right-margin", callback: any): number
    on(sigName: "notify::right-margin", callback: any): number
    once(sigName: "notify::right-margin", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::right-margin", ...args: any[]): void
    connect(sigName: "notify::rise", callback: any): number
    on(sigName: "notify::rise", callback: any): number
    once(sigName: "notify::rise", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rise", ...args: any[]): void
    connect(sigName: "notify::scale", callback: any): number
    on(sigName: "notify::scale", callback: any): number
    once(sigName: "notify::scale", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::scale", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::size-points", callback: any): number
    on(sigName: "notify::size-points", callback: any): number
    once(sigName: "notify::size-points", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-points", ...args: any[]): void
    connect(sigName: "notify::size-set", callback: any): number
    on(sigName: "notify::size-set", callback: any): number
    once(sigName: "notify::size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size-set", ...args: any[]): void
    connect(sigName: "notify::stretch", callback: any): number
    on(sigName: "notify::stretch", callback: any): number
    once(sigName: "notify::stretch", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch", ...args: any[]): void
    connect(sigName: "notify::stretch-set", callback: any): number
    on(sigName: "notify::stretch-set", callback: any): number
    once(sigName: "notify::stretch-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stretch-set", ...args: any[]): void
    connect(sigName: "notify::strikethrough", callback: any): number
    on(sigName: "notify::strikethrough", callback: any): number
    once(sigName: "notify::strikethrough", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::strikethrough", ...args: any[]): void
    connect(sigName: "notify::style", callback: any): number
    on(sigName: "notify::style", callback: any): number
    once(sigName: "notify::style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::style-set", callback: any): number
    on(sigName: "notify::style-set", callback: any): number
    once(sigName: "notify::style-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::style-set", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: any): number
    on(sigName: "notify::tabs", callback: any): number
    once(sigName: "notify::tabs", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::underline", callback: any): number
    on(sigName: "notify::underline", callback: any): number
    once(sigName: "notify::underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::underline", ...args: any[]): void
    connect(sigName: "notify::variant", callback: any): number
    on(sigName: "notify::variant", callback: any): number
    once(sigName: "notify::variant", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant", ...args: any[]): void
    connect(sigName: "notify::variant-set", callback: any): number
    on(sigName: "notify::variant-set", callback: any): number
    once(sigName: "notify::variant-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::variant-set", ...args: any[]): void
    connect(sigName: "notify::weight", callback: any): number
    on(sigName: "notify::weight", callback: any): number
    once(sigName: "notify::weight", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight", ...args: any[]): void
    connect(sigName: "notify::weight-set", callback: any): number
    on(sigName: "notify::weight-set", callback: any): number
    once(sigName: "notify::weight-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::weight-set", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TextTag extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TextTag

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextTag

    constructor(config?: TextTag.ConstructorProperties) 
    /**
     * Creates a #GtkTextTag. Configure the tag using object arguments,
     * i.e. using g_object_set().
     * @constructor 
     * @param name tag name, or %NULL
     */
    constructor(name: string | null) 
    /**
     * Creates a #GtkTextTag. Configure the tag using object arguments,
     * i.e. using g_object_set().
     * @constructor 
     * @param name tag name, or %NULL
     */
    static new(name: string | null): TextTag
    _init(config?: TextTag.ConstructorProperties): void
}

export module TextTagTable {

    // Signal callback interfaces

    /**
     * Signal callback interface for `tag-added`
     */
    export interface TagAddedSignalCallback {
        (object: TextTag): void
    }

    /**
     * Signal callback interface for `tag-changed`
     */
    export interface TagChangedSignalCallback {
        (object: TextTag, p0: boolean): void
    }

    /**
     * Signal callback interface for `tag-removed`
     */
    export interface TagRemovedSignalCallback {
        (object: TextTag): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

export interface TextTagTable extends Buildable {

    // Own fields of Gtk-2.0.Gtk.TextTagTable

    parentInstance: GObject.Object
    hash: GLib.HashTable
    anonymous: object[]
    anonCount: number
    buffers: object[]

    // Owm methods of Gtk-2.0.Gtk.TextTagTable

    /**
     * Add a tag to the table. The tag is assigned the highest priority
     * in the table.
     * 
     * `tag` must not be in a tag table already, and may not have
     * the same name as an already-added tag.
     * @param tag a #GtkTextTag
     */
    add(tag: TextTag): void
    /**
     * Calls `func` on each tag in `table,` with user data `data`.
     * Note that the table may not be modified while iterating
     * over it (you can't add/remove tags).
     * @param func a function to call on each tag
     */
    foreach(func: TextTagTableForeach): void
    /**
     * Returns the size of the table (number of tags)
     */
    getSize(): number
    /**
     * Look up a named tag.
     * @param name name of a tag
     */
    lookup(name: string): TextTag
    /**
     * Remove a tag from the table. This will remove the table's
     * reference to the tag, so be careful - the tag will end
     * up destroyed if you don't have a reference to it.
     * @param tag a #GtkTextTag
     */
    remove(tag: TextTag): void

    // Own virtual methods of Gtk-2.0.Gtk.TextTagTable

    tagAdded(tag: TextTag): void
    tagChanged(tag: TextTag, sizeChanged: boolean): void
    tagRemoved(tag: TextTag): void

    // Own signals of Gtk-2.0.Gtk.TextTagTable

    connect(sigName: "tag-added", callback: TextTagTable.TagAddedSignalCallback): number
    on(sigName: "tag-added", callback: TextTagTable.TagAddedSignalCallback): number
    once(sigName: "tag-added", callback: TextTagTable.TagAddedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "tag-added", ...args: any[]): void
    connect(sigName: "tag-changed", callback: TextTagTable.TagChangedSignalCallback): number
    on(sigName: "tag-changed", callback: TextTagTable.TagChangedSignalCallback): number
    once(sigName: "tag-changed", callback: TextTagTable.TagChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "tag-changed", p0: boolean, ...args: any[]): void
    connect(sigName: "tag-removed", callback: TextTagTable.TagRemovedSignalCallback): number
    on(sigName: "tag-removed", callback: TextTagTable.TagRemovedSignalCallback): number
    once(sigName: "tag-removed", callback: TextTagTable.TagRemovedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "tag-removed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TextTagTable

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * You may wish to begin by reading the <link linkend="TextWidget">text widget
 * conceptual overview</link> which gives an overview of all the objects and data
 * types related to the text widget and how they work together.
 * 
 * <refsect2 id="GtkTextTagTable-BUILDER-UI">
 * <title>GtkTextTagTables as GtkBuildable</title>
 * <para>
 * The GtkTextTagTable implementation of the GtkBuildable interface
 * supports adding tags by specifying "tag" as the "type"
 * attribute of a &lt;child&gt; element.
 * </para>
 * <example>
 * <title>A UI definition fragment specifying tags</title>
 * <programlisting><![CDATA[
 * <object class="GtkTextTagTable">
 *  <child type="tag">
 *    <object class="GtkTextTag"/>
 *  </child>
 * </object>
 * ]]></programlisting>
 * </example>
 * </refsect2>
 * @class 
 */
export class TextTagTable extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TextTagTable

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextTagTable

    constructor(config?: TextTagTable.ConstructorProperties) 
    /**
     * Creates a new #GtkTextTagTable. The table contains no tags by
     * default.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkTextTagTable. The table contains no tags by
     * default.
     * @constructor 
     */
    static new(): TextTagTable
    _init(config?: TextTagTable.ConstructorProperties): void
}

export module TextView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `backspace`
     */
    export interface BackspaceSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `copy-clipboard`
     */
    export interface CopyClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cut-clipboard`
     */
    export interface CutClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `delete-from-cursor`
     */
    export interface DeleteFromCursorSignalCallback {
        (type: DeleteType, count: number): void
    }

    /**
     * Signal callback interface for `insert-at-cursor`
     */
    export interface InsertAtCursorSignalCallback {
        (string: string): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    export interface MoveCursorSignalCallback {
        (step: MovementStep, count: number, extendSelection: boolean): void
    }

    /**
     * Signal callback interface for `move-viewport`
     */
    export interface MoveViewportSignalCallback {
        (step: ScrollStep, count: number): void
    }

    /**
     * Signal callback interface for `page-horizontally`
     */
    export interface PageHorizontallySignalCallback {
        (count: number, extendSelection: boolean): void
    }

    /**
     * Signal callback interface for `paste-clipboard`
     */
    export interface PasteClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `populate-popup`
     */
    export interface PopulatePopupSignalCallback {
        (menu: Menu): void
    }

    /**
     * Signal callback interface for `preedit-changed`
     */
    export interface PreeditChangedSignalCallback {
        (preedit: string): void
    }

    /**
     * Signal callback interface for `select-all`
     */
    export interface SelectAllSignalCallback {
        (select: boolean): void
    }

    /**
     * Signal callback interface for `set-anchor`
     */
    export interface SetAnchorSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (object: Adjustment, p0: Adjustment): void
    }

    /**
     * Signal callback interface for `toggle-cursor-visible`
     */
    export interface ToggleCursorVisibleSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-overwrite`
     */
    export interface ToggleOverwriteSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TextView

        acceptsTab?: boolean | null
        buffer?: TextBuffer | null
        cursorVisible?: boolean | null
        editable?: boolean | null
        /**
         * Which IM (input method) module should be used for this entry.
         * See #GtkIMContext.
         * 
         * Setting this to a non-%NULL value overrides the
         * system-wide IM module setting. See the GtkSettings
         * #GtkSettings:gtk-im-module property.
         */
        imModule?: string | null
        indent?: number | null
        justification?: Justification | null
        leftMargin?: number | null
        overwrite?: boolean | null
        pixelsAboveLines?: number | null
        pixelsBelowLines?: number | null
        pixelsInsideWrap?: number | null
        rightMargin?: number | null
        tabs?: Pango.TabArray | null
        wrapMode?: WrapMode | null
    }

}

export interface TextView extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.TextView

    /**
     * Which IM (input method) module should be used for this entry.
     * See #GtkIMContext.
     * 
     * Setting this to a non-%NULL value overrides the
     * system-wide IM module setting. See the GtkSettings
     * #GtkSettings:gtk-im-module property.
     */
    imModule: string
    justification: Justification
    overwrite: boolean

    // Own fields of Gtk-2.0.Gtk.TextView

    parentInstance: any
    layout: object
    buffer: TextBuffer
    selectionDragHandler: number
    scrollTimeout: number
    pixelsAboveLines: number
    pixelsBelowLines: number
    pixelsInsideWrap: number
    wrapMode: WrapMode
    justify: Justification
    leftMargin: number
    rightMargin: number
    indent: number
    tabs: Pango.TabArray
    editable: number
    overwriteMode: number
    cursorVisible: number
    needImReset: number
    acceptsTab: number
    widthChanged: number
    onscreenValidated: number
    mouseCursorObscured: number
    textWindow: TextWindow
    leftWindow: TextWindow
    rightWindow: TextWindow
    topWindow: TextWindow
    bottomWindow: TextWindow
    hadjustment: Adjustment
    vadjustment: Adjustment
    xoffset: number
    yoffset: number
    width: number
    height: number
    virtualCursorX: number
    virtualCursorY: number
    firstParaMark: TextMark
    firstParaPixels: number
    dndMark: TextMark
    blinkTimeout: number
    firstValidateIdle: number
    incrementalValidateIdle: number
    imContext: IMContext
    // Has conflict: popupMenu: Widget
    dragStartX: number
    dragStartY: number
    children: object[]
    pendingScroll: TextPendingScroll
    pendingPlaceCursorButton: number

    // Owm methods of Gtk-2.0.Gtk.TextView

    /**
     * Adds a child widget in the text buffer, at the given `anchor`.
     * @param child a #GtkWidget
     * @param anchor a #GtkTextChildAnchor in the #GtkTextBuffer for `text_view`
     */
    addChildAtAnchor(child: Widget, anchor: TextChildAnchor): void
    /**
     * Adds a child at fixed coordinates in one of the text widget's
     * windows. The window must have nonzero size (see
     * gtk_text_view_set_border_window_size()). Note that the child
     * coordinates are given relative to the #GdkWindow in question, and
     * that these coordinates have no sane relationship to scrolling. When
     * placing a child in #GTK_TEXT_WINDOW_WIDGET, scrolling is
     * irrelevant, the child floats above all scrollable areas. But when
     * placing a child in one of the scrollable windows (border windows or
     * text window), you'll need to compute the child's correct position
     * in buffer coordinates any time scrolling occurs or buffer changes
     * occur, and then call gtk_text_view_move_child() to update the
     * child's position. Unfortunately there's no good way to detect that
     * scrolling has occurred, using the current API; a possible hack
     * would be to update all child positions when the scroll adjustments
     * change or the text buffer changes. See bug 64518 on
     * bugzilla.gnome.org for status of fixing this issue.
     * @param child a #GtkWidget
     * @param whichWindow which window the child should appear in
     * @param xpos X position of child in window coordinates
     * @param ypos Y position of child in window coordinates
     */
    addChildInWindow(child: Widget, whichWindow: TextWindowType, xpos: number, ypos: number): void
    /**
     * Moves the given `iter` backward by one display (wrapped) line.
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view's width; paragraphs are the same in all
     * views, since they depend on the contents of the #GtkTextBuffer.
     * @param iter a #GtkTextIter
     */
    backwardDisplayLine(iter: TextIter): boolean
    /**
     * Moves the given `iter` backward to the next display line start.
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view's width; paragraphs are the same in all
     * views, since they depend on the contents of the #GtkTextBuffer.
     * @param iter a #GtkTextIter
     */
    backwardDisplayLineStart(iter: TextIter): boolean
    /**
     * Converts coordinate (`buffer_x,` `buffer_y)` to coordinates for the window
     * `win,` and stores the result in (`window_x,` `window_y)`.
     * 
     * Note that you can't convert coordinates for a nonexisting window (see
     * gtk_text_view_set_border_window_size()).
     * @param win a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
     * @param bufferX buffer x coordinate
     * @param bufferY buffer y coordinate
     */
    bufferToWindowCoords(win: TextWindowType, bufferX: number, bufferY: number): [ /* windowX */ number, /* windowY */ number ]
    /**
     * Moves the given `iter` forward by one display (wrapped) line.
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view's width; paragraphs are the same in all
     * views, since they depend on the contents of the #GtkTextBuffer.
     * @param iter a #GtkTextIter
     */
    forwardDisplayLine(iter: TextIter): boolean
    /**
     * Moves the given `iter` forward to the next display line end.
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view's width; paragraphs are the same in all
     * views, since they depend on the contents of the #GtkTextBuffer.
     * @param iter a #GtkTextIter
     */
    forwardDisplayLineEnd(iter: TextIter): boolean
    /**
     * Returns whether pressing the Tab key inserts a tab characters.
     * gtk_text_view_set_accepts_tab().
     */
    getAcceptsTab(): boolean
    /**
     * Gets the width of the specified border window. See
     * gtk_text_view_set_border_window_size().
     * @param type window to return size from
     */
    getBorderWindowSize(type: TextWindowType): number
    /**
     * Returns the #GtkTextBuffer being displayed by this text view.
     * The reference count on the buffer is not incremented; the caller
     * of this function won't own a new reference.
     */
    getBuffer(): TextBuffer
    /**
     * Find out whether the cursor is being displayed.
     */
    getCursorVisible(): boolean
    /**
     * Obtains a copy of the default text attributes. These are the
     * attributes used for text unless a tag overrides them.
     * You'd typically pass the default attributes in to
     * gtk_text_iter_get_attributes() in order to get the
     * attributes in effect at a given text position.
     * 
     * The return value is a copy owned by the caller of this function,
     * and should be freed.
     */
    getDefaultAttributes(): TextAttributes
    /**
     * Returns the default editability of the #GtkTextView. Tags in the
     * buffer may override this setting for some ranges of text.
     */
    getEditable(): boolean
    /**
     * Gets the horizontal-scrolling #GtkAdjustment.
     */
    getHadjustment(): Adjustment
    /**
     * Gets the default indentation of paragraphs in `text_view`.
     * Tags in the view's buffer may override the default.
     * The indentation may be negative.
     */
    getIndent(): number
    /**
     * Retrieves the iterator at buffer coordinates `x` and `y`. Buffer
     * coordinates are coordinates for the entire buffer, not just the
     * currently-displayed portion.  If you have coordinates from an
     * event, you have to convert those to buffer coordinates with
     * gtk_text_view_window_to_buffer_coords().
     * @param x x position, in buffer coordinates
     * @param y y position, in buffer coordinates
     */
    getIterAtLocation(x: number, y: number): /* iter */ TextIter
    /**
     * Retrieves the iterator pointing to the character at buffer
     * coordinates `x` and `y`. Buffer coordinates are coordinates for
     * the entire buffer, not just the currently-displayed portion.
     * If you have coordinates from an event, you have to convert
     * those to buffer coordinates with
     * gtk_text_view_window_to_buffer_coords().
     * 
     * Note that this is different from gtk_text_view_get_iter_at_location(),
     * which returns cursor locations, i.e. positions <emphasis>between</emphasis>
     * characters.
     * @param x x position, in buffer coordinates
     * @param y y position, in buffer coordinates
     */
    getIterAtPosition(x: number, y: number): [ /* iter */ TextIter, /* trailing */ number ]
    /**
     * Gets a rectangle which roughly contains the character at `iter`.
     * The rectangle position is in buffer coordinates; use
     * gtk_text_view_buffer_to_window_coords() to convert these
     * coordinates to coordinates for one of the windows in the text view.
     * @param iter a #GtkTextIter
     */
    getIterLocation(iter: TextIter): /* location */ Gdk.Rectangle
    /**
     * Gets the default justification of paragraphs in `text_view`.
     * Tags in the buffer may override the default.
     */
    getJustification(): Justification
    /**
     * Gets the default left margin size of paragraphs in the `text_view`.
     * Tags in the buffer may override the default.
     */
    getLeftMargin(): number
    /**
     * Gets the #GtkTextIter at the start of the line containing
     * the coordinate `y`. `y` is in buffer coordinates, convert from
     * window coordinates with gtk_text_view_window_to_buffer_coords().
     * If non-%NULL, `line_top` will be filled with the coordinate of the top
     * edge of the line.
     * @param y a y coordinate
     */
    getLineAtY(y: number): [ /* targetIter */ TextIter, /* lineTop */ number ]
    /**
     * Gets the y coordinate of the top of the line containing `iter,`
     * and the height of the line. The coordinate is a buffer coordinate;
     * convert to window coordinates with gtk_text_view_buffer_to_window_coords().
     * @param iter a #GtkTextIter
     */
    getLineYrange(iter: TextIter): [ /* y */ number, /* height */ number ]
    /**
     * Returns whether the #GtkTextView is in overwrite mode or not.
     */
    getOverwrite(): boolean
    /**
     * Gets the default number of pixels to put above paragraphs.
     */
    getPixelsAboveLines(): number
    /**
     * Gets the value set by gtk_text_view_set_pixels_below_lines().
     */
    getPixelsBelowLines(): number
    /**
     * Gets the value set by gtk_text_view_set_pixels_inside_wrap().
     */
    getPixelsInsideWrap(): number
    /**
     * Gets the default right margin for text in `text_view`. Tags
     * in the buffer may override the default.
     */
    getRightMargin(): number
    /**
     * Gets the default tabs for `text_view`. Tags in the buffer may
     * override the defaults. The returned array will be %NULL if
     * "standard" (8-space) tabs are used. Free the return value
     * with pango_tab_array_free().
     */
    getTabs(): Pango.TabArray
    /**
     * Gets the vertical-scrolling #GtkAdjustment.
     */
    getVadjustment(): Adjustment
    /**
     * Fills `visible_rect` with the currently-visible
     * region of the buffer, in buffer coordinates. Convert to window coordinates
     * with gtk_text_view_buffer_to_window_coords().
     */
    getVisibleRect(): /* visibleRect */ Gdk.Rectangle
    /**
     * Retrieves the #GdkWindow corresponding to an area of the text view;
     * possible windows include the overall widget window, child windows
     * on the left, right, top, bottom, and the window that displays the
     * text buffer. Windows are %NULL and nonexistent if their width or
     * height is 0, and are nonexistent before the widget has been
     * realized.
     * @param win window to get
     */
    getWindow(win: TextWindowType): Gdk.Window

    // Overloads of getWindow

    /**
     * Returns the widget's window if it is realized, %NULL otherwise
     */
    getWindow(): Gdk.Window
    /**
     * Usually used to find out which window an event corresponds to.
     * If you connect to an event signal on `text_view,` this function
     * should be called on <literal>event-&gt;window</literal> to
     * see which window it was.
     * @param window a window type
     */
    getWindowType(window: Gdk.Window): TextWindowType
    /**
     * Gets the line wrapping for the view.
     */
    getWrapMode(): WrapMode
    /**
     * Allow the #GtkTextView input method to internally handle key press
     * and release events. If this function returns %TRUE, then no further
     * processing should be done for this key event. See
     * gtk_im_context_filter_keypress().
     * 
     * Note that you are expected to call this function from your handler
     * when overriding key event handling. This is needed in the case when
     * you need to insert your own key handling between the input method
     * and the default key event handling of the #GtkTextView.
     * 
     * |[
     * static gboolean
     * gtk_foo_bar_key_press_event (GtkWidget   *widget,
     *                              GdkEventKey *event)
     * {
     *   if ((key->keyval == GDK_Return || key->keyval == GDK_KP_Enter))
     *     {
     *       if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (view), event))
     *         return TRUE;
     *     }
     * 
     *     /&ast; Do some stuff &ast;/
     * 
     *   return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
     * }
     * ```
     * 
     * @param event the key event
     */
    imContextFilterKeypress(event: Gdk.EventKey): boolean
    /**
     * Updates the position of a child, as for gtk_text_view_add_child_in_window().
     * @param child child widget already added to the text view
     * @param xpos new X position in window coordinates
     * @param ypos new Y position in window coordinates
     */
    moveChild(child: Widget, xpos: number, ypos: number): void
    /**
     * Moves a mark within the buffer so that it's
     * located within the currently-visible text area.
     * @param mark a #GtkTextMark
     */
    moveMarkOnscreen(mark: TextMark): boolean
    /**
     * Move the iterator a given number of characters visually, treating
     * it as the strong cursor position. If `count` is positive, then the
     * new strong cursor position will be `count` positions to the right of
     * the old cursor position. If `count` is negative then the new strong
     * cursor position will be `count` positions to the left of the old
     * cursor position.
     * 
     * In the presence of bi-directional text, the correspondence
     * between logical and visual order will depend on the direction
     * of the current run, and there may be jumps when the cursor
     * is moved off of the end of a run.
     * @param iter a #GtkTextIter
     * @param count number of characters to move (negative moves left,    positive moves right)
     */
    moveVisually(iter: TextIter, count: number): boolean
    /**
     * Moves the cursor to the currently visible region of the
     * buffer, it it isn't there already.
     */
    placeCursorOnscreen(): boolean
    /**
     * Reset the input method context of the text view if needed.
     * 
     * This can be necessary in the case where modifying the buffer
     * would confuse on-going input method behavior.
     */
    resetImContext(): void
    /**
     * Scrolls `text_view` the minimum distance such that `mark` is contained
     * within the visible area of the widget.
     * @param mark a mark in the buffer for `text_view`
     */
    scrollMarkOnscreen(mark: TextMark): void
    /**
     * Scrolls `text_view` so that `iter` is on the screen in the position
     * indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
     * left or top, 1.0 indicates right or bottom, 0.5 means center.
     * If `use_align` is %FALSE, the text scrolls the minimal distance to
     * get the mark onscreen, possibly not scrolling at all. The effective
     * screen for purposes of this function is reduced by a margin of size
     * `within_margin`.
     * 
     * Note that this function uses the currently-computed height of the
     * lines in the text buffer. Line heights are computed in an idle
     * handler; so this function may not have the desired effect if it's
     * called before the height computations. To avoid oddness, consider
     * using gtk_text_view_scroll_to_mark() which saves a point to be
     * scrolled to after line validation.
     * @param iter a #GtkTextIter
     * @param withinMargin margin as a [0.0,0.5) fraction of screen size
     * @param useAlign whether to use alignment arguments (if %FALSE,    just get the mark onscreen)
     * @param xalign horizontal alignment of mark within visible area
     * @param yalign vertical alignment of mark within visible area
     */
    scrollToIter(iter: TextIter, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): boolean
    /**
     * Scrolls `text_view` so that `mark` is on the screen in the position
     * indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
     * left or top, 1.0 indicates right or bottom, 0.5 means center.
     * If `use_align` is %FALSE, the text scrolls the minimal distance to
     * get the mark onscreen, possibly not scrolling at all. The effective
     * screen for purposes of this function is reduced by a margin of size
     * `within_margin`.
     * @param mark a #GtkTextMark
     * @param withinMargin margin as a [0.0,0.5) fraction of screen size
     * @param useAlign whether to use alignment arguments (if %FALSE, just    get the mark onscreen)
     * @param xalign horizontal alignment of mark within visible area
     * @param yalign vertical alignment of mark within visible area
     */
    scrollToMark(mark: TextMark, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): void
    /**
     * Sets the behavior of the text widget when the Tab key is pressed.
     * If `accepts_tab` is %TRUE, a tab character is inserted. If `accepts_tab`
     * is %FALSE the keyboard focus is moved to the next widget in the focus
     * chain.
     * @param acceptsTab %TRUE if pressing the Tab key should insert a tab    character, %FALSE, if pressing the Tab key should move the    keyboard focus.
     */
    setAcceptsTab(acceptsTab: boolean): void
    /**
     * Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
     * or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
     * Automatically destroys the corresponding window if the size is set
     * to 0, and creates the window if the size is set to non-zero.  This
     * function can only be used for the "border windows," it doesn't work
     * with #GTK_TEXT_WINDOW_WIDGET, #GTK_TEXT_WINDOW_TEXT, or
     * #GTK_TEXT_WINDOW_PRIVATE.
     * @param type window to affect
     * @param size width or height of the window
     */
    setBorderWindowSize(type: TextWindowType, size: number): void
    /**
     * Sets `buffer` as the buffer being displayed by `text_view`. The previous
     * buffer displayed by the text view is unreferenced, and a reference is
     * added to `buffer`. If you owned a reference to `buffer` before passing it
     * to this function, you must remove that reference yourself; #GtkTextView
     * will not "adopt" it.
     * @param buffer a #GtkTextBuffer
     */
    setBuffer(buffer: TextBuffer | null): void
    /**
     * Toggles whether the insertion point is displayed. A buffer with no editable
     * text probably shouldn't have a visible cursor, so you may want to turn
     * the cursor off.
     * @param setting whether to show the insertion cursor
     */
    setCursorVisible(setting: boolean): void
    /**
     * Sets the default editability of the #GtkTextView. You can override
     * this default setting with tags in the buffer, using the "editable"
     * attribute of tags.
     * @param setting whether it's editable
     */
    setEditable(setting: boolean): void
    /**
     * Sets the default indentation for paragraphs in `text_view`.
     * Tags in the buffer may override the default.
     * @param indent indentation in pixels
     */
    setIndent(indent: number): void
    /**
     * Sets the default justification of text in `text_view`.
     * Tags in the view's buffer may override the default.
     * @param justification justification
     */
    setJustification(justification: Justification): void
    /**
     * Sets the default left margin for text in `text_view`.
     * Tags in the buffer may override the default.
     * @param leftMargin left margin in pixels
     */
    setLeftMargin(leftMargin: number): void
    /**
     * Changes the #GtkTextView overwrite mode.
     * @param overwrite %TRUE to turn on overwrite mode, %FALSE to turn it off
     */
    setOverwrite(overwrite: boolean): void
    /**
     * Sets the default number of blank pixels above paragraphs in `text_view`.
     * Tags in the buffer for `text_view` may override the defaults.
     * @param pixelsAboveLines pixels above paragraphs
     */
    setPixelsAboveLines(pixelsAboveLines: number): void
    /**
     * Sets the default number of pixels of blank space
     * to put below paragraphs in `text_view`. May be overridden
     * by tags applied to `text_view'`s buffer.
     * @param pixelsBelowLines pixels below paragraphs
     */
    setPixelsBelowLines(pixelsBelowLines: number): void
    /**
     * Sets the default number of pixels of blank space to leave between
     * display/wrapped lines within a paragraph. May be overridden by
     * tags in `text_view'`s buffer.
     * @param pixelsInsideWrap default number of pixels between wrapped lines
     */
    setPixelsInsideWrap(pixelsInsideWrap: number): void
    /**
     * Sets the default right margin for text in the text view.
     * Tags in the buffer may override the default.
     * @param rightMargin right margin in pixels
     */
    setRightMargin(rightMargin: number): void
    /**
     * Sets the default tab stops for paragraphs in `text_view`.
     * Tags in the buffer may override the default.
     * @param tabs tabs as a #PangoTabArray
     */
    setTabs(tabs: Pango.TabArray): void
    /**
     * Sets the line wrapping for the view.
     * @param wrapMode a #GtkWrapMode
     */
    setWrapMode(wrapMode: WrapMode): void
    /**
     * Determines whether `iter` is at the start of a display line.
     * See gtk_text_view_forward_display_line() for an explanation of
     * display lines vs. paragraphs.
     * @param iter a #GtkTextIter
     */
    startsDisplayLine(iter: TextIter): boolean
    /**
     * Converts coordinates on the window identified by `win` to buffer
     * coordinates, storing the result in (`buffer_x,``buffer_y)`.
     * 
     * Note that you can't convert coordinates for a nonexisting window (see
     * gtk_text_view_set_border_window_size()).
     * @param win a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
     * @param windowX window x coordinate
     * @param windowY window y coordinate
     */
    windowToBufferCoords(win: TextWindowType, windowX: number, windowY: number): [ /* bufferX */ number, /* bufferY */ number ]

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.TextView

    backspace(): void
    copyClipboard(): void
    cutClipboard(): void
    deleteFromCursor(type: DeleteType, count: number): void
    insertAtCursor(str: string): void
    moveCursor(step: MovementStep, count: number, extendSelection: boolean): void
    moveFocus(direction: DirectionType): void
    pageHorizontally(count: number, extendSelection: boolean): void
    pasteClipboard(): void
    populatePopup(menu: Menu): void
    setAnchor(): void
    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean
    toggleOverwrite(): void

    // Own signals of Gtk-2.0.Gtk.TextView

    connect(sigName: "backspace", callback: TextView.BackspaceSignalCallback): number
    on(sigName: "backspace", callback: TextView.BackspaceSignalCallback): number
    once(sigName: "backspace", callback: TextView.BackspaceSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "backspace", ...args: any[]): void
    connect(sigName: "copy-clipboard", callback: TextView.CopyClipboardSignalCallback): number
    on(sigName: "copy-clipboard", callback: TextView.CopyClipboardSignalCallback): number
    once(sigName: "copy-clipboard", callback: TextView.CopyClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "copy-clipboard", ...args: any[]): void
    connect(sigName: "cut-clipboard", callback: TextView.CutClipboardSignalCallback): number
    on(sigName: "cut-clipboard", callback: TextView.CutClipboardSignalCallback): number
    once(sigName: "cut-clipboard", callback: TextView.CutClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cut-clipboard", ...args: any[]): void
    connect(sigName: "delete-from-cursor", callback: TextView.DeleteFromCursorSignalCallback): number
    on(sigName: "delete-from-cursor", callback: TextView.DeleteFromCursorSignalCallback): number
    once(sigName: "delete-from-cursor", callback: TextView.DeleteFromCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "delete-from-cursor", count: number, ...args: any[]): void
    connect(sigName: "insert-at-cursor", callback: TextView.InsertAtCursorSignalCallback): number
    on(sigName: "insert-at-cursor", callback: TextView.InsertAtCursorSignalCallback): number
    once(sigName: "insert-at-cursor", callback: TextView.InsertAtCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "insert-at-cursor", ...args: any[]): void
    connect(sigName: "move-cursor", callback: TextView.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: TextView.MoveCursorSignalCallback): number
    once(sigName: "move-cursor", callback: TextView.MoveCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-cursor", count: number, extendSelection: boolean, ...args: any[]): void
    connect(sigName: "move-viewport", callback: TextView.MoveViewportSignalCallback): number
    on(sigName: "move-viewport", callback: TextView.MoveViewportSignalCallback): number
    once(sigName: "move-viewport", callback: TextView.MoveViewportSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-viewport", count: number, ...args: any[]): void
    connect(sigName: "page-horizontally", callback: TextView.PageHorizontallySignalCallback): number
    on(sigName: "page-horizontally", callback: TextView.PageHorizontallySignalCallback): number
    once(sigName: "page-horizontally", callback: TextView.PageHorizontallySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "page-horizontally", extendSelection: boolean, ...args: any[]): void
    connect(sigName: "paste-clipboard", callback: TextView.PasteClipboardSignalCallback): number
    on(sigName: "paste-clipboard", callback: TextView.PasteClipboardSignalCallback): number
    once(sigName: "paste-clipboard", callback: TextView.PasteClipboardSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "paste-clipboard", ...args: any[]): void
    connect(sigName: "populate-popup", callback: TextView.PopulatePopupSignalCallback): number
    on(sigName: "populate-popup", callback: TextView.PopulatePopupSignalCallback): number
    once(sigName: "populate-popup", callback: TextView.PopulatePopupSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "populate-popup", ...args: any[]): void
    connect(sigName: "preedit-changed", callback: TextView.PreeditChangedSignalCallback): number
    on(sigName: "preedit-changed", callback: TextView.PreeditChangedSignalCallback): number
    once(sigName: "preedit-changed", callback: TextView.PreeditChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "preedit-changed", ...args: any[]): void
    connect(sigName: "select-all", callback: TextView.SelectAllSignalCallback): number
    on(sigName: "select-all", callback: TextView.SelectAllSignalCallback): number
    once(sigName: "select-all", callback: TextView.SelectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-all", ...args: any[]): void
    connect(sigName: "set-anchor", callback: TextView.SetAnchorSignalCallback): number
    on(sigName: "set-anchor", callback: TextView.SetAnchorSignalCallback): number
    once(sigName: "set-anchor", callback: TextView.SetAnchorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-anchor", ...args: any[]): void
    connect(sigName: "set-scroll-adjustments", callback: TextView.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: TextView.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: TextView.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", p0: Adjustment, ...args: any[]): void
    connect(sigName: "toggle-cursor-visible", callback: TextView.ToggleCursorVisibleSignalCallback): number
    on(sigName: "toggle-cursor-visible", callback: TextView.ToggleCursorVisibleSignalCallback): number
    once(sigName: "toggle-cursor-visible", callback: TextView.ToggleCursorVisibleSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-cursor-visible", ...args: any[]): void
    connect(sigName: "toggle-overwrite", callback: TextView.ToggleOverwriteSignalCallback): number
    on(sigName: "toggle-overwrite", callback: TextView.ToggleOverwriteSignalCallback): number
    once(sigName: "toggle-overwrite", callback: TextView.ToggleOverwriteSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-overwrite", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TextView

    connect(sigName: "notify::im-module", callback: any): number
    on(sigName: "notify::im-module", callback: any): number
    once(sigName: "notify::im-module", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::justification", callback: any): number
    on(sigName: "notify::justification", callback: any): number
    once(sigName: "notify::justification", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::justification", ...args: any[]): void
    connect(sigName: "notify::overwrite", callback: any): number
    on(sigName: "notify::overwrite", callback: any): number
    once(sigName: "notify::overwrite", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::overwrite", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TextView extends Container {

    // Own properties of Gtk-2.0.Gtk.TextView

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextView

    constructor(config?: TextView.ConstructorProperties) 
    /**
     * Creates a new #GtkTextView. If you don't call gtk_text_view_set_buffer()
     * before using the text view, an empty default buffer will be created
     * for you. Get the buffer with gtk_text_view_get_buffer(). If you want
     * to specify your own buffer, consider gtk_text_view_new_with_buffer().
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkTextView. If you don't call gtk_text_view_set_buffer()
     * before using the text view, an empty default buffer will be created
     * for you. Get the buffer with gtk_text_view_get_buffer(). If you want
     * to specify your own buffer, consider gtk_text_view_new_with_buffer().
     * @constructor 
     */
    static new(): TextView
    /**
     * Creates a new #GtkTextView widget displaying the buffer
     * `buffer`. One buffer can be shared among many widgets.
     * `buffer` may be %NULL to create a default buffer, in which case
     * this function is equivalent to gtk_text_view_new(). The
     * text view adds its own reference count to the buffer; it does not
     * take over an existing reference.
     * @constructor 
     * @param buffer a #GtkTextBuffer
     */
    static newWithBuffer(buffer: TextBuffer): TextView
    _init(config?: TextView.ConstructorProperties): void
}

export module TipsQuery {

    // Signal callback interfaces

    /**
     * Signal callback interface for `start-query`
     */
    export interface StartQuerySignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `stop-query`
     */
    export interface StopQuerySignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `widget-entered`
     */
    export interface WidgetEnteredSignalCallback {
        (object: Widget, p0: string, p1: string): void
    }

    /**
     * Signal callback interface for `widget-selected`
     */
    export interface WidgetSelectedSignalCallback {
        (object: Widget, p0: string, p1: string, p2: Gdk.Event): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Label.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TipsQuery

        caller?: Widget | null
        emitAlways?: boolean | null
        labelInactive?: string | null
        labelNoTip?: string | null
    }

}

export interface TipsQuery extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.TipsQuery

    label: any
    emitAlways: number
    inQuery: number
    labelInactive: string
    labelNoTip: string
    caller: Widget
    lastCrossed: Widget
    queryCursor: Gdk.Cursor

    // Owm methods of Gtk-2.0.Gtk.TipsQuery

    setCaller(caller: Widget): void
    setLabels(labelInactive: string, labelNoTip: string): void
    // Has conflict: startQuery(): void
    // Has conflict: stopQuery(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.TipsQuery

    startQuery(): void
    stopQuery(): void
    widgetEntered(widget: Widget, tipText: string, tipPrivate: string): void
    widgetSelected(widget: Widget, tipText: string, tipPrivate: string, event: Gdk.EventButton): number

    // Own signals of Gtk-2.0.Gtk.TipsQuery

    connect(sigName: "start-query", callback: TipsQuery.StartQuerySignalCallback): number
    on(sigName: "start-query", callback: TipsQuery.StartQuerySignalCallback): number
    once(sigName: "start-query", callback: TipsQuery.StartQuerySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "start-query", ...args: any[]): void
    connect(sigName: "stop-query", callback: TipsQuery.StopQuerySignalCallback): number
    on(sigName: "stop-query", callback: TipsQuery.StopQuerySignalCallback): number
    once(sigName: "stop-query", callback: TipsQuery.StopQuerySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "stop-query", ...args: any[]): void
    connect(sigName: "widget-entered", callback: TipsQuery.WidgetEnteredSignalCallback): number
    on(sigName: "widget-entered", callback: TipsQuery.WidgetEnteredSignalCallback): number
    once(sigName: "widget-entered", callback: TipsQuery.WidgetEnteredSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "widget-entered", p0: string, p1: string, ...args: any[]): void
    connect(sigName: "widget-selected", callback: TipsQuery.WidgetSelectedSignalCallback): number
    on(sigName: "widget-selected", callback: TipsQuery.WidgetSelectedSignalCallback): number
    once(sigName: "widget-selected", callback: TipsQuery.WidgetSelectedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "widget-selected", p0: string, p1: string, p2: Gdk.Event, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TipsQuery

    connect(sigName: "notify::angle", callback: any): number
    on(sigName: "notify::angle", callback: any): number
    once(sigName: "notify::angle", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::angle", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: any): number
    on(sigName: "notify::attributes", callback: any): number
    once(sigName: "notify::attributes", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: any): number
    on(sigName: "notify::cursor-position", callback: any): number
    once(sigName: "notify::cursor-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::justify", callback: any): number
    on(sigName: "notify::justify", callback: any): number
    once(sigName: "notify::justify", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::justify", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::max-width-chars", callback: any): number
    on(sigName: "notify::max-width-chars", callback: any): number
    once(sigName: "notify::max-width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-width-chars", ...args: any[]): void
    connect(sigName: "notify::mnemonic-keyval", callback: any): number
    on(sigName: "notify::mnemonic-keyval", callback: any): number
    once(sigName: "notify::mnemonic-keyval", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonic-keyval", ...args: any[]): void
    connect(sigName: "notify::mnemonic-widget", callback: any): number
    on(sigName: "notify::mnemonic-widget", callback: any): number
    once(sigName: "notify::mnemonic-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonic-widget", ...args: any[]): void
    connect(sigName: "notify::pattern", callback: any): number
    on(sigName: "notify::pattern", callback: any): number
    once(sigName: "notify::pattern", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::pattern", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: any): number
    on(sigName: "notify::selectable", callback: any): number
    once(sigName: "notify::selectable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: any): number
    on(sigName: "notify::selection-bound", callback: any): number
    once(sigName: "notify::selection-bound", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::single-line-mode", callback: any): number
    on(sigName: "notify::single-line-mode", callback: any): number
    once(sigName: "notify::single-line-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::single-line-mode", ...args: any[]): void
    connect(sigName: "notify::track-visited-links", callback: any): number
    on(sigName: "notify::track-visited-links", callback: any): number
    once(sigName: "notify::track-visited-links", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::track-visited-links", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: any): number
    on(sigName: "notify::use-markup", callback: any): number
    once(sigName: "notify::use-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: any): number
    on(sigName: "notify::width-chars", callback: any): number
    once(sigName: "notify::width-chars", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::wrap", callback: any): number
    on(sigName: "notify::wrap", callback: any): number
    once(sigName: "notify::wrap", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: any): number
    on(sigName: "notify::wrap-mode", callback: any): number
    once(sigName: "notify::wrap-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TipsQuery extends Label {

    // Own properties of Gtk-2.0.Gtk.TipsQuery

    static name: string

    // Constructors of Gtk-2.0.Gtk.TipsQuery

    constructor(config?: TipsQuery.ConstructorProperties) 
    constructor() 
    static new(): TipsQuery

    // Overloads of new

    /**
     * Creates a new label with the given text inside it. You can
     * pass %NULL to get an empty label widget.
     * @constructor 
     * @param str The text of the label
     */
    static new(str: string): Label
    _init(config?: TipsQuery.ConstructorProperties): void
}

export module ToggleAction {

    // Signal callback interfaces

    /**
     * Signal callback interface for `toggled`
     */
    export interface ToggledSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, Action.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToggleAction

        /**
         * If the toggle action should be active in or not.
         */
        active?: boolean | null
        /**
         * Whether the proxies for this action look like radio action proxies.
         * 
         * This is an appearance property and thus only applies if
         * #GtkActivatable:use-action-appearance is %TRUE.
         */
        drawAsRadio?: boolean | null
    }

}

export interface ToggleAction extends Buildable {

    // Own properties of Gtk-2.0.Gtk.ToggleAction

    /**
     * If the toggle action should be active in or not.
     */
    active: boolean
    /**
     * Whether the proxies for this action look like radio action proxies.
     * 
     * This is an appearance property and thus only applies if
     * #GtkActivatable:use-action-appearance is %TRUE.
     */
    drawAsRadio: boolean

    // Own fields of Gtk-2.0.Gtk.ToggleAction

    parent: Action

    // Owm methods of Gtk-2.0.Gtk.ToggleAction

    /**
     * Returns the checked state of the toggle action.
     */
    getActive(): boolean
    /**
     * Returns whether the action should have proxies like a radio action.
     */
    getDrawAsRadio(): boolean
    /**
     * Sets the checked state on the toggle action.
     * @param isActive whether the action should be checked or not
     */
    setActive(isActive: boolean): void
    /**
     * Sets whether the action should have proxies like a radio action.
     * @param drawAsRadio whether the action should have proxies like a radio    action
     */
    setDrawAsRadio(drawAsRadio: boolean): void
    // Has conflict: toggled(): void

    // Conflicting methods

    /**
     * Returns the name of the action.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string

    // Own virtual methods of Gtk-2.0.Gtk.ToggleAction

    /**
     * Emits the "toggled" signal on the toggle action.
     * @virtual 
     */
    toggled(): void

    // Own signals of Gtk-2.0.Gtk.ToggleAction

    connect(sigName: "toggled", callback: ToggleAction.ToggledSignalCallback): number
    on(sigName: "toggled", callback: ToggleAction.ToggledSignalCallback): number
    once(sigName: "toggled", callback: ToggleAction.ToggledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggled", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ToggleAction

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::draw-as-radio", callback: any): number
    on(sigName: "notify::draw-as-radio", callback: any): number
    once(sigName: "notify::draw-as-radio", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::draw-as-radio", ...args: any[]): void
    connect(sigName: "notify::action-group", callback: any): number
    on(sigName: "notify::action-group", callback: any): number
    once(sigName: "notify::action-group", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::action-group", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: any): number
    on(sigName: "notify::always-show-image", callback: any): number
    once(sigName: "notify::always-show-image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::gicon", callback: any): number
    on(sigName: "notify::gicon", callback: any): number
    once(sigName: "notify::gicon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::gicon", ...args: any[]): void
    connect(sigName: "notify::hide-if-empty", callback: any): number
    on(sigName: "notify::hide-if-empty", callback: any): number
    once(sigName: "notify::hide-if-empty", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hide-if-empty", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::name", callback: any): number
    on(sigName: "notify::name", callback: any): number
    once(sigName: "notify::name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::short-label", callback: any): number
    on(sigName: "notify::short-label", callback: any): number
    once(sigName: "notify::short-label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::short-label", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::tooltip", callback: any): number
    on(sigName: "notify::tooltip", callback: any): number
    once(sigName: "notify::tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-overflown", callback: any): number
    on(sigName: "notify::visible-overflown", callback: any): number
    once(sigName: "notify::visible-overflown", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-overflown", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ToggleAction extends Action {

    // Own properties of Gtk-2.0.Gtk.ToggleAction

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToggleAction

    constructor(config?: ToggleAction.ConstructorProperties) 
    /**
     * Creates a new #GtkToggleAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name A unique name for the action
     * @param label The label displayed in menu items and on buttons, or %NULL
     * @param tooltip A tooltip for the action, or %NULL
     * @param stockId The stock icon to display in widgets representing the   action, or %NULL
     */
    constructor(name: string, label: string | null, tooltip: string | null, stockId: string) 
    /**
     * Creates a new #GtkToggleAction object. To add the action to
     * a #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * @constructor 
     * @param name A unique name for the action
     * @param label The label displayed in menu items and on buttons, or %NULL
     * @param tooltip A tooltip for the action, or %NULL
     * @param stockId The stock icon to display in widgets representing the   action, or %NULL
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string): ToggleAction

    // Overloads of new

    /**
     * Creates a new #GtkAction object. To add the action to a
     * #GtkActionGroup and set the accelerator for the action,
     * call gtk_action_group_add_action_with_accel().
     * See <xref linkend="XML-UI"/> for information on allowed action
     * names.
     * @constructor 
     * @param name A unique name for the action
     * @param label the label displayed in menu items and on buttons, or %NULL
     * @param tooltip a tooltip for the action, or %NULL
     * @param stockId the stock icon to display in widgets representing the   action, or %NULL
     */
    static new(name: string, label: string | null, tooltip: string | null, stockId: string): Action
    _init(config?: ToggleAction.ConstructorProperties): void
}

export module ToggleButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `toggled`
     */
    export interface ToggledSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Button.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToggleButton

        active?: boolean | null
        drawIndicator?: boolean | null
        inconsistent?: boolean | null
    }

}

export interface ToggleButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own fields of Gtk-2.0.Gtk.ToggleButton

    button: Button
    active: number
    // Has conflict: drawIndicator: number
    inconsistent: number

    // Owm methods of Gtk-2.0.Gtk.ToggleButton

    getActive(): boolean
    /**
     * Gets the value set by gtk_toggle_button_set_inconsistent().
     */
    getInconsistent(): boolean
    /**
     * Retrieves whether the button is displayed as a separate indicator
     * and label. See gtk_toggle_button_set_mode().
     */
    getMode(): boolean
    setActive(isActive: boolean): void
    /**
     * If the user has selected a range of elements (such as some text or
     * spreadsheet cells) that are affected by a toggle button, and the
     * current values in that range are inconsistent, you may want to
     * display the toggle in an "in between" state. This function turns on
     * "in between" display.  Normally you would turn off the inconsistent
     * state again if the user toggles the toggle button. This has to be
     * done manually, gtk_toggle_button_set_inconsistent() only affects
     * visual appearance, it doesn't affect the semantics of the button.
     * @param setting %TRUE if state is inconsistent
     */
    setInconsistent(setting: boolean): void
    /**
     * Sets whether the button is displayed as a separate indicator and label.
     * You can call this function on a checkbutton or a radiobutton with
     * `draw_indicator` = %FALSE to make the button look like a normal button
     * 
     * This function only affects instances of classes like #GtkCheckButton
     * and #GtkRadioButton that derive from #GtkToggleButton,
     * not instances of #GtkToggleButton itself.
     * @param drawIndicator if %TRUE, draw the button as a separate indicator and label; if %FALSE, draw the button like a normal button
     */
    setMode(drawIndicator: boolean): void
    // Has conflict: toggled(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ToggleButton

    toggled(): void

    // Own signals of Gtk-2.0.Gtk.ToggleButton

    connect(sigName: "toggled", callback: ToggleButton.ToggledSignalCallback): number
    on(sigName: "toggled", callback: ToggleButton.ToggledSignalCallback): number
    once(sigName: "toggled", callback: ToggleButton.ToggledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggled", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ToggleButton

    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ToggleButton extends Button {

    // Own properties of Gtk-2.0.Gtk.ToggleButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToggleButton

    constructor(config?: ToggleButton.ConstructorProperties) 
    constructor() 
    static new(): ToggleButton
    static newWithLabel(label: string): ToggleButton
    /**
     * Creates a new #GtkToggleButton containing a label. The label
     * will be created using gtk_label_new_with_mnemonic(), so underscores
     * in `label` indicate the mnemonic for the button.
     * @constructor 
     * @param label the text of the button, with an underscore in front of the         mnemonic character
     */
    static newWithMnemonic(label: string): ToggleButton
    _init(config?: ToggleButton.ConstructorProperties): void
}

export module ToggleToolButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `toggled`
     */
    export interface ToggledSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, ToolButton.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToggleToolButton

        /**
         * If the toggle tool button should be pressed in or not.
         */
        active?: boolean | null
    }

}

export interface ToggleToolButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.ToggleToolButton

    /**
     * If the toggle tool button should be pressed in or not.
     */
    active: boolean

    // Own fields of Gtk-2.0.Gtk.ToggleToolButton

    parent: ToolButton & ToolItem & Bin & Widget & Widget

    // Owm methods of Gtk-2.0.Gtk.ToggleToolButton

    /**
     * Queries a #GtkToggleToolButton and returns its current state.
     * Returns %TRUE if the toggle button is pressed in and %FALSE if it is raised.
     */
    getActive(): boolean
    /**
     * Sets the status of the toggle tool button. Set to %TRUE if you
     * want the GtkToggleButton to be 'pressed in', and %FALSE to raise it.
     * This action causes the toggled signal to be emitted.
     * @param isActive whether `button` should be active
     */
    setActive(isActive: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the markup text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_markup().
     * @param markup markup text to be used as tooltip for `tool_item`
     */
    setTooltipMarkup(markup: string): void

    // Overloads of setTooltipMarkup

    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ToggleToolButton

    toggled(): void

    // Own signals of Gtk-2.0.Gtk.ToggleToolButton

    connect(sigName: "toggled", callback: ToggleToolButton.ToggledSignalCallback): number
    on(sigName: "toggled", callback: ToggleToolButton.ToggledSignalCallback): number
    once(sigName: "toggled", callback: ToggleToolButton.ToggledSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggled", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ToggleToolButton

    connect(sigName: "notify::active", callback: any): number
    on(sigName: "notify::active", callback: any): number
    once(sigName: "notify::active", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::icon-widget", callback: any): number
    on(sigName: "notify::icon-widget", callback: any): number
    once(sigName: "notify::icon-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-widget", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::label-widget", callback: any): number
    on(sigName: "notify::label-widget", callback: any): number
    once(sigName: "notify::label-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-widget", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ToggleToolButton extends ToolButton {

    // Own properties of Gtk-2.0.Gtk.ToggleToolButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToggleToolButton

    constructor(config?: ToggleToolButton.ConstructorProperties) 
    /**
     * Returns a new #GtkToggleToolButton
     * @constructor 
     */
    constructor() 
    /**
     * Returns a new #GtkToggleToolButton
     * @constructor 
     */
    static new(): ToggleToolButton

    // Overloads of new

    /**
     * Creates a new %GtkToolButton using `icon_widget` as icon and `label` as
     * label.
     * @constructor 
     * @param iconWidget a #GtkMisc widget that will be used as icon widget, or %NULL
     * @param label a string that will be used as label, or %NULL
     */
    static new(iconWidget: Widget | null, label: string | null): ToolButton
    /**
     * Creates a new #GtkToolItem
     * @constructor 
     */
    static new(): ToolItem
    /**
     * Creates a new #GtkToggleToolButton containing the image and text from a
     * stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
     * and #GTK_STOCK_APPLY.
     * 
     * It is an error if `stock_id` is not a name of a stock item.
     * @constructor 
     * @param stockId the name of the stock item
     */
    static newFromStock(stockId: string): ToggleToolButton
    _init(config?: ToggleToolButton.ConstructorProperties): void
}

export module ToolButton {

    // Signal callback interfaces

    /**
     * Signal callback interface for `clicked`
     */
    export interface ClickedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, ToolItem.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToolButton

        /**
         * The name of the themed icon displayed on the item.
         * This property only has an effect if not overridden by "label",
         * "icon_widget" or "stock_id" properties.
         */
        iconName?: string | null
        iconWidget?: Widget | null
        label?: string | null
        labelWidget?: Widget | null
        stockId?: string | null
        useUnderline?: boolean | null
    }

}

export interface ToolButton extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.ToolButton

    /**
     * The name of the themed icon displayed on the item.
     * This property only has an effect if not overridden by "label",
     * "icon_widget" or "stock_id" properties.
     */
    iconName: string
    iconWidget: Widget
    label: string
    labelWidget: Widget
    stockId: string
    useUnderline: boolean

    // Own fields of Gtk-2.0.Gtk.ToolButton

    parent: ToolItem & Bin & Widget & Widget

    // Owm methods of Gtk-2.0.Gtk.ToolButton

    /**
     * Returns the name of the themed icon for the tool button,
     * see gtk_tool_button_set_icon_name().
     */
    getIconName(): string
    /**
     * Return the widget used as icon widget on `button`.
     * See gtk_tool_button_set_icon_widget().
     */
    getIconWidget(): Widget
    /**
     * Returns the label used by the tool button, or %NULL if the tool button
     * doesn't have a label. or uses a the label from a stock item. The returned
     * string is owned by GTK+, and must not be modified or freed.
     */
    getLabel(): string
    /**
     * Returns the widget used as label on `button`.
     * See gtk_tool_button_set_label_widget().
     */
    getLabelWidget(): Widget
    /**
     * Returns the name of the stock item. See gtk_tool_button_set_stock_id().
     * The returned string is owned by GTK+ and must not be freed or modifed.
     */
    getStockId(): string
    /**
     * Returns whether underscores in the label property are used as mnemonics
     * on menu items on the overflow menu. See gtk_tool_button_set_use_underline().
     */
    getUseUnderline(): boolean
    /**
     * Sets the icon for the tool button from a named themed icon.
     * See the docs for #GtkIconTheme for more details.
     * The "icon_name" property only has an effect if not
     * overridden by non-%NULL "label", "icon_widget" and "stock_id"
     * properties.
     * @param iconName the name of the themed icon
     */
    setIconName(iconName: string | null): void
    /**
     * Sets `icon` as the widget used as icon on `button`. If `icon_widget` is
     * %NULL the icon is determined by the "stock_id" property. If the
     * "stock_id" property is also %NULL, `button` will not have an icon.
     * @param iconWidget the widget used as icon, or %NULL
     */
    setIconWidget(iconWidget: Widget | null): void
    /**
     * Sets `label` as the label used for the tool button. The "label" property
     * only has an effect if not overridden by a non-%NULL "label_widget" property.
     * If both the "label_widget" and "label" properties are %NULL, the label
     * is determined by the "stock_id" property. If the "stock_id" property is also
     * %NULL, `button` will not have a label.
     * @param label a string that will be used as label, or %NULL.
     */
    setLabel(label: string | null): void
    /**
     * Sets `label_widget` as the widget that will be used as the label
     * for `button`. If `label_widget` is %NULL the "label" property is used
     * as label. If "label" is also %NULL, the label in the stock item
     * determined by the "stock_id" property is used as label. If
     * "stock_id" is also %NULL, `button` does not have a label.
     * @param labelWidget the widget used as label, or %NULL
     */
    setLabelWidget(labelWidget: Widget | null): void
    /**
     * Sets the name of the stock item. See gtk_tool_button_new_from_stock().
     * The stock_id property only has an effect if not
     * overridden by non-%NULL "label" and "icon_widget" properties.
     * @param stockId a name of a stock item, or %NULL
     */
    setStockId(stockId: string | null): void
    /**
     * If set, an underline in the label property indicates that the next character
     * should be used for the mnemonic accelerator key in the overflow menu. For
     * example, if the label property is "_Open" and `use_underline` is %TRUE,
     * the label on the tool button will be "Open" and the item on the overflow
     * menu will have an underlined 'O'.
     * 
     * Labels shown on tool buttons never have mnemonics on them; this property
     * only affects the menu item on the overflow menu.
     * @param useUnderline whether the button label has the form "_Open"
     */
    setUseUnderline(useUnderline: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the markup text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_markup().
     * @param markup markup text to be used as tooltip for `tool_item`
     */
    setTooltipMarkup(markup: string): void

    // Overloads of setTooltipMarkup

    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ToolButton

    clicked(): void

    // Own signals of Gtk-2.0.Gtk.ToolButton

    connect(sigName: "clicked", callback: ToolButton.ClickedSignalCallback): number
    on(sigName: "clicked", callback: ToolButton.ClickedSignalCallback): number
    once(sigName: "clicked", callback: ToolButton.ClickedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "clicked", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ToolButton

    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::icon-widget", callback: any): number
    on(sigName: "notify::icon-widget", callback: any): number
    once(sigName: "notify::icon-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-widget", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::label-widget", callback: any): number
    on(sigName: "notify::label-widget", callback: any): number
    once(sigName: "notify::label-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-widget", ...args: any[]): void
    connect(sigName: "notify::stock-id", callback: any): number
    on(sigName: "notify::stock-id", callback: any): number
    once(sigName: "notify::stock-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::stock-id", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: any): number
    on(sigName: "notify::use-underline", callback: any): number
    once(sigName: "notify::use-underline", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class ToolButton extends ToolItem {

    // Own properties of Gtk-2.0.Gtk.ToolButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToolButton

    constructor(config?: ToolButton.ConstructorProperties) 
    /**
     * Creates a new %GtkToolButton using `icon_widget` as icon and `label` as
     * label.
     * @constructor 
     * @param iconWidget a #GtkMisc widget that will be used as icon widget, or %NULL
     * @param label a string that will be used as label, or %NULL
     */
    constructor(iconWidget: Widget | null, label: string | null) 
    /**
     * Creates a new %GtkToolButton using `icon_widget` as icon and `label` as
     * label.
     * @constructor 
     * @param iconWidget a #GtkMisc widget that will be used as icon widget, or %NULL
     * @param label a string that will be used as label, or %NULL
     */
    static new(iconWidget: Widget | null, label: string | null): ToolButton

    // Overloads of new

    /**
     * Creates a new #GtkToolItem
     * @constructor 
     */
    static new(): ToolItem
    /**
     * Creates a new #GtkToolButton containing the image and text from a
     * stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
     * and #GTK_STOCK_APPLY.
     * 
     * It is an error if `stock_id` is not a name of a stock item.
     * @constructor 
     * @param stockId the name of the stock item
     */
    static newFromStock(stockId: string): ToolButton
    _init(config?: ToolButton.ConstructorProperties): void
}

export module ToolItem {

    // Signal callback interfaces

    /**
     * Signal callback interface for `create-menu-proxy`
     */
    export interface CreateMenuProxySignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `set-tooltip`
     */
    export interface SetTooltipSignalCallback {
        (tooltips: Tooltips, tipText: string, tipPrivate: string): boolean
    }

    /**
     * Signal callback interface for `toolbar-reconfigured`
     */
    export interface ToolbarReconfiguredSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToolItem

        isImportant?: boolean | null
        visibleHorizontal?: boolean | null
        visibleVertical?: boolean | null
    }

}

export interface ToolItem extends Atk.ImplementorIface, Activatable, Buildable {

    // Own properties of Gtk-2.0.Gtk.ToolItem

    isImportant: boolean
    visibleHorizontal: boolean
    visibleVertical: boolean

    // Own fields of Gtk-2.0.Gtk.ToolItem

    parent: Bin & Widget

    // Owm methods of Gtk-2.0.Gtk.ToolItem

    /**
     * Returns the ellipsize mode used for `tool_item`. Custom subclasses of
     * #GtkToolItem should call this function to find out how text should
     * be ellipsized.
     */
    getEllipsizeMode(): Pango.EllipsizeMode
    /**
     * Returns whether `tool_item` is allocated extra space.
     * See gtk_tool_item_set_expand().
     */
    getExpand(): boolean
    /**
     * Returns whether `tool_item` is the same size as other homogeneous
     * items. See gtk_tool_item_set_homogeneous().
     */
    getHomogeneous(): boolean
    /**
     * Returns the icon size used for `tool_item`. Custom subclasses of
     * #GtkToolItem should call this function to find out what size icons
     * they should use.
     */
    getIconSize(): number
    /**
     * Returns whether `tool_item` is considered important. See
     * gtk_tool_item_set_is_important()
     */
    getIsImportant(): boolean
    /**
     * Returns the orientation used for `tool_item`. Custom subclasses of
     * #GtkToolItem should call this function to find out what size icons
     * they should use.
     */
    getOrientation(): Orientation
    /**
     * If `menu_item_id` matches the string passed to
     * gtk_tool_item_set_proxy_menu_item() return the corresponding #GtkMenuItem.
     * 
     * Custom subclasses of #GtkToolItem should use this function to
     * update their menu item when the #GtkToolItem changes. That the
     * `menu_item_id<`!-- -->s must match ensures that a #GtkToolItem
     * will not inadvertently change a menu item that they did not create.
     * @param menuItemId a string used to identify the menu item
     */
    getProxyMenuItem(menuItemId: string): Widget
    /**
     * Returns the relief style of `tool_item`. See gtk_button_set_relief_style().
     * Custom subclasses of #GtkToolItem should call this function in the handler
     * of the #GtkToolItem::toolbar_reconfigured signal to find out the
     * relief style of buttons.
     */
    getReliefStyle(): ReliefStyle
    /**
     * Returns the text alignment used for `tool_item`. Custom subclasses of
     * #GtkToolItem should call this function to find out how text should
     * be aligned.
     */
    getTextAlignment(): number
    /**
     * Returns the text orientation used for `tool_item`. Custom subclasses of
     * #GtkToolItem should call this function to find out how text should
     * be orientated.
     */
    getTextOrientation(): Orientation
    /**
     * Returns the size group used for labels in `tool_item`.
     * Custom subclasses of #GtkToolItem should call this function
     * and use the size group for labels.
     */
    getTextSizeGroup(): SizeGroup
    /**
     * Returns the toolbar style used for `tool_item`. Custom subclasses of
     * #GtkToolItem should call this function in the handler of the
     * GtkToolItem::toolbar_reconfigured signal to find out in what style
     * the toolbar is displayed and change themselves accordingly
     * 
     * Possibilities are:
     * <itemizedlist>
     * <listitem> GTK_TOOLBAR_BOTH, meaning the tool item should show
     * both an icon and a label, stacked vertically </listitem>
     * <listitem> GTK_TOOLBAR_ICONS, meaning the toolbar shows
     * only icons </listitem>
     * <listitem> GTK_TOOLBAR_TEXT, meaning the tool item should only
     * show text</listitem>
     * <listitem> GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show
     * both an icon and a label, arranged horizontally (however, note the
     * #GtkToolButton::has_text_horizontally that makes tool buttons not
     * show labels when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ.
     * </listitem>
     * </itemizedlist>
     */
    getToolbarStyle(): ToolbarStyle
    /**
     * Returns whether `tool_item` has a drag window. See
     * gtk_tool_item_set_use_drag_window().
     */
    getUseDragWindow(): boolean
    /**
     * Returns whether the `tool_item` is visible on toolbars that are
     * docked horizontally.
     */
    getVisibleHorizontal(): boolean
    /**
     * Returns whether `tool_item` is visible when the toolbar is docked vertically.
     * See gtk_tool_item_set_visible_vertical().
     */
    getVisibleVertical(): boolean
    /**
     * Calling this function signals to the toolbar that the
     * overflow menu item for `tool_item` has changed. If the
     * overflow menu is visible when this function it called,
     * the menu will be rebuilt.
     * 
     * The function must be called when the tool item changes what it
     * will do in response to the #GtkToolItem::create-menu-proxy signal.
     */
    rebuildMenu(): void
    /**
     * Returns the #GtkMenuItem that was last set by
     * gtk_tool_item_set_proxy_menu_item(), ie. the #GtkMenuItem
     * that is going to appear in the overflow menu.
     */
    retrieveProxyMenuItem(): Widget
    /**
     * Sets whether `tool_item` is allocated extra space when there
     * is more room on the toolbar then needed for the items. The
     * effect is that the item gets bigger when the toolbar gets bigger
     * and smaller when the toolbar gets smaller.
     * @param expand Whether `tool_item` is allocated extra space
     */
    setExpand(expand: boolean): void
    /**
     * Sets whether `tool_item` is to be allocated the same size as other
     * homogeneous items. The effect is that all homogeneous items will have
     * the same width as the widest of the items.
     * @param homogeneous whether `tool_item` is the same size as other homogeneous items
     */
    setHomogeneous(homogeneous: boolean): void
    /**
     * Sets whether `tool_item` should be considered important. The #GtkToolButton
     * class uses this property to determine whether to show or hide its label
     * when the toolbar style is %GTK_TOOLBAR_BOTH_HORIZ. The result is that
     * only tool buttons with the "is_important" property set have labels, an
     * effect known as "priority text"
     * @param isImportant whether the tool item should be considered important
     */
    setIsImportant(isImportant: boolean): void
    /**
     * Sets the #GtkMenuItem used in the toolbar overflow menu. The
     * `menu_item_id` is used to identify the caller of this function and
     * should also be used with gtk_tool_item_get_proxy_menu_item().
     * 
     * See also #GtkToolItem::create-menu-proxy.
     * @param menuItemId a string used to identify `menu_item`
     * @param menuItem a #GtkMenuItem to be used in the overflow menu
     */
    setProxyMenuItem(menuItemId: string, menuItem: Widget): void
    // Has conflict: setTooltip(tooltips: Tooltips, tipText: string | null, tipPrivate: string | null): void
    /**
     * Sets the markup text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_markup().
     * @param markup markup text to be used as tooltip for `tool_item`
     */
    setTooltipMarkup(markup: string): void

    // Overloads of setTooltipMarkup

    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets the text to be displayed as tooltip on the item.
     * See gtk_widget_set_tooltip_text().
     * @param text text to be used as tooltip for `tool_item`
     */
    setTooltipText(text: string): void
    /**
     * Sets whether `tool_item` has a drag window. When %TRUE the
     * toolitem can be used as a drag source through gtk_drag_source_set().
     * When `tool_item` has a drag window it will intercept all events,
     * even those that would otherwise be sent to a child of `tool_item`.
     * @param useDragWindow Whether `tool_item` has a drag window.
     */
    setUseDragWindow(useDragWindow: boolean): void
    /**
     * Sets whether `tool_item` is visible when the toolbar is docked horizontally.
     * @param visibleHorizontal Whether `tool_item` is visible when in horizontal mode
     */
    setVisibleHorizontal(visibleHorizontal: boolean): void
    /**
     * Sets whether `tool_item` is visible when the toolbar is docked
     * vertically. Some tool items, such as text entries, are too wide to be
     * useful on a vertically docked toolbar. If `visible_vertical` is %FALSE
     * `tool_item` will not appear on toolbars that are docked vertically.
     * @param visibleVertical whether `tool_item` is visible when the toolbar is in vertical mode
     */
    setVisibleVertical(visibleVertical: boolean): void
    // Has conflict: toolbarReconfigured(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.ToolItem

    createMenuProxy(): boolean
    setTooltip(tooltips: Tooltips, tipText: string, tipPrivate: string): boolean
    /**
     * Emits the signal #GtkToolItem::toolbar_reconfigured on `tool_item`.
     * #GtkToolbar and other #GtkToolShell implementations use this function
     * to notify children, when some aspect of their configuration changes.
     * @virtual 
     */
    toolbarReconfigured(): void

    // Own signals of Gtk-2.0.Gtk.ToolItem

    connect(sigName: "create-menu-proxy", callback: ToolItem.CreateMenuProxySignalCallback): number
    on(sigName: "create-menu-proxy", callback: ToolItem.CreateMenuProxySignalCallback): number
    once(sigName: "create-menu-proxy", callback: ToolItem.CreateMenuProxySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "create-menu-proxy", ...args: any[]): void
    connect(sigName: "set-tooltip", callback: ToolItem.SetTooltipSignalCallback): number
    on(sigName: "set-tooltip", callback: ToolItem.SetTooltipSignalCallback): number
    once(sigName: "set-tooltip", callback: ToolItem.SetTooltipSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-tooltip", tipText: string, tipPrivate: string, ...args: any[]): void
    connect(sigName: "toolbar-reconfigured", callback: ToolItem.ToolbarReconfiguredSignalCallback): number
    on(sigName: "toolbar-reconfigured", callback: ToolItem.ToolbarReconfiguredSignalCallback): number
    once(sigName: "toolbar-reconfigured", callback: ToolItem.ToolbarReconfiguredSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toolbar-reconfigured", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ToolItem

    connect(sigName: "notify::is-important", callback: any): number
    on(sigName: "notify::is-important", callback: any): number
    once(sigName: "notify::is-important", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-important", ...args: any[]): void
    connect(sigName: "notify::visible-horizontal", callback: any): number
    on(sigName: "notify::visible-horizontal", callback: any): number
    once(sigName: "notify::visible-horizontal", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-horizontal", ...args: any[]): void
    connect(sigName: "notify::visible-vertical", callback: any): number
    on(sigName: "notify::visible-vertical", callback: any): number
    once(sigName: "notify::visible-vertical", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible-vertical", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkToolItem<!-- -->s are widgets that can appear on a toolbar. To
 * create a toolbar item that contain something else than a button, use
 * gtk_tool_item_new(). Use gtk_container_add() to add a child
 * widget to the tool item.
 * 
 * For toolbar items that contain buttons, see the #GtkToolButton,
 * #GtkToggleToolButton and #GtkRadioToolButton classes.
 * 
 * See the #GtkToolbar class for a description of the toolbar widget, and
 * #GtkToolShell for a description of the tool shell interface.
 * @class 
 */
export class ToolItem extends Bin {

    // Own properties of Gtk-2.0.Gtk.ToolItem

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToolItem

    constructor(config?: ToolItem.ConstructorProperties) 
    /**
     * Creates a new #GtkToolItem
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkToolItem
     * @constructor 
     */
    static new(): ToolItem
    _init(config?: ToolItem.ConstructorProperties): void
}

export module ToolItemGroup {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, ToolShell.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToolItemGroup

        collapsed?: boolean | null
        ellipsize?: Pango.EllipsizeMode | null
        headerRelief?: ReliefStyle | null
        label?: string | null
        labelWidget?: Widget | null
    }

}

export interface ToolItemGroup extends Atk.ImplementorIface, Buildable, ToolShell {

    // Own properties of Gtk-2.0.Gtk.ToolItemGroup

    collapsed: boolean
    ellipsize: Pango.EllipsizeMode
    headerRelief: ReliefStyle
    label: string
    labelWidget: Widget

    // Own fields of Gtk-2.0.Gtk.ToolItemGroup

    parentInstance: any
    priv: ToolItemGroupPrivate

    // Owm methods of Gtk-2.0.Gtk.ToolItemGroup

    /**
     * Gets whether `group` is collapsed or expanded.
     */
    getCollapsed(): boolean
    /**
     * Gets the tool item at position (x, y).
     * @param x the x position
     * @param y the y position
     */
    getDropItem(x: number, y: number): ToolItem
    /**
     * Gets the ellipsization mode of `group`.
     */
    getEllipsize(): Pango.EllipsizeMode
    /**
     * Gets the relief mode of the header button of `group`.
     */
    getHeaderRelief(): ReliefStyle
    /**
     * Gets the position of `item` in `group` as index.
     * @param item a #GtkToolItem
     */
    getItemPosition(item: ToolItem): number
    /**
     * Gets the label of `group`.
     */
    getLabel(): string
    /**
     * Gets the label widget of `group`.
     * See gtk_tool_item_group_set_label_widget().
     */
    getLabelWidget(): Widget
    /**
     * Gets the number of tool items in `group`.
     */
    getNItems(): number
    /**
     * Gets the tool item at `index` in group.
     * @param index the index
     */
    getNthItem(index: number): ToolItem
    /**
     * Inserts `item` at `position` in the list of children of `group`.
     * @param item the #GtkToolItem to insert into `group`
     * @param position the position of `item` in `group,` starting with 0.     The position -1 means end of list.
     */
    insert(item: ToolItem, position: number): void
    /**
     * Sets whether the `group` should be collapsed or expanded.
     * @param collapsed whether the `group` should be collapsed or expanded
     */
    setCollapsed(collapsed: boolean): void
    /**
     * Sets the ellipsization mode which should be used by labels in `group`.
     * @param ellipsize the #PangoEllipsizeMode labels in `group` should use
     */
    setEllipsize(ellipsize: Pango.EllipsizeMode): void
    /**
     * Set the button relief of the group header.
     * See gtk_button_set_relief() for details.
     * @param style the #GtkReliefStyle
     */
    setHeaderRelief(style: ReliefStyle): void
    /**
     * Sets the position of `item` in the list of children of `group`.
     * @param item the #GtkToolItem to move to a new position, should     be a child of `group`.
     * @param position the new position of `item` in `group,` starting with 0.     The position -1 means end of list.
     */
    setItemPosition(item: ToolItem, position: number): void
    /**
     * Sets the label of the tool item group. The label is displayed in the header
     * of the group.
     * @param label the new human-readable label of of the group
     */
    setLabel(label: string): void
    /**
     * Sets the label of the tool item group.
     * The label widget is displayed in the header of the group, in place
     * of the usual label.
     * @param labelWidget the widget to be displayed in place of the usual label
     */
    setLabelWidget(labelWidget: Widget): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Retrieves whether the tool shell has text, icons, or both. Tool items must
     * not call this function directly, but rely on gtk_tool_item_get_style()
     * instead.
     * @virtual 
     */
    getStyle(): ToolbarStyle

    // Overloads of getStyle

    /**
     * Simply an accessor function that returns `widget->`style.
     */
    getStyle(): Style
    /**
     * Simply an accessor function that returns `widget->`style.
     */
    getStyle(): Style
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.ToolItemGroup

    connect(sigName: "notify::collapsed", callback: any): number
    on(sigName: "notify::collapsed", callback: any): number
    once(sigName: "notify::collapsed", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::collapsed", ...args: any[]): void
    connect(sigName: "notify::ellipsize", callback: any): number
    on(sigName: "notify::ellipsize", callback: any): number
    once(sigName: "notify::ellipsize", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ellipsize", ...args: any[]): void
    connect(sigName: "notify::header-relief", callback: any): number
    on(sigName: "notify::header-relief", callback: any): number
    once(sigName: "notify::header-relief", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::header-relief", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::label-widget", callback: any): number
    on(sigName: "notify::label-widget", callback: any): number
    once(sigName: "notify::label-widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label-widget", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A #GtkToolItemGroup is used together with #GtkToolPalette to add
 * #GtkToolItem<!-- -->s to a palette like container with different
 * categories and drag and drop support.
 * @class 
 */
export class ToolItemGroup extends Container {

    // Own properties of Gtk-2.0.Gtk.ToolItemGroup

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToolItemGroup

    constructor(config?: ToolItemGroup.ConstructorProperties) 
    /**
     * Creates a new tool item group with label `label`.
     * @constructor 
     * @param label the label of the new group
     */
    constructor(label: string) 
    /**
     * Creates a new tool item group with label `label`.
     * @constructor 
     * @param label the label of the new group
     */
    static new(label: string): ToolItemGroup
    _init(config?: ToolItemGroup.ConstructorProperties): void
}

export module ToolPalette {

    // Signal callback interfaces

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (hadjustment: Adjustment, vadjustment: Adjustment): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.ToolPalette

        /**
         * The size of the icons in a tool palette is normally determined by
         * the #GtkSettings:toolbar-icon-size setting. When this property is set,
         * it overrides the setting.
         * 
         * This should only be used for special-purpose tool palettes, normal
         * application tool palettes should respect the user preferences for the
         * size of icons.
         */
        iconSize?: IconSize | null
        /**
         * Is %TRUE if the #GtkToolPalette:icon-size property has been set.
         */
        iconSizeSet?: boolean | null
        /**
         * The style of items in the tool palette.
         */
        toolbarStyle?: ToolbarStyle | null
    }

}

export interface ToolPalette extends Atk.ImplementorIface, Buildable, Orientable {

    // Own properties of Gtk-2.0.Gtk.ToolPalette

    /**
     * The size of the icons in a tool palette is normally determined by
     * the #GtkSettings:toolbar-icon-size setting. When this property is set,
     * it overrides the setting.
     * 
     * This should only be used for special-purpose tool palettes, normal
     * application tool palettes should respect the user preferences for the
     * size of icons.
     */
    iconSize: IconSize
    /**
     * Is %TRUE if the #GtkToolPalette:icon-size property has been set.
     */
    iconSizeSet: boolean
    /**
     * The style of items in the tool palette.
     */
    toolbarStyle: ToolbarStyle

    // Own fields of Gtk-2.0.Gtk.ToolPalette

    parentInstance: any
    priv: ToolPalettePrivate

    // Owm methods of Gtk-2.0.Gtk.ToolPalette

    /**
     * Sets `palette` as drag source (see gtk_tool_palette_set_drag_source())
     * and sets `widget` as a drag destination for drags from `palette`.
     * See gtk_drag_dest_set().
     * @param widget a #GtkWidget which should be a drag destination for `palette`
     * @param flags the flags that specify what actions GTK+ should take for drops     on that widget
     * @param targets the #GtkToolPaletteDragTarget<!-- -->s which the widget     should support
     * @param actions the #GdkDragAction<!-- -->s which the widget should suppport
     */
    addDragDest(widget: Widget, flags: DestDefaults, targets: ToolPaletteDragTargets, actions: Gdk.DragAction): void
    /**
     * Get the dragged item from the selection.
     * This could be a #GtkToolItem or a #GtkToolItemGroup.
     * @param selection a #GtkSelectionData
     */
    getDragItem(selection: SelectionData): Widget
    /**
     * Gets the group at position (x, y).
     * @param x the x position
     * @param y the y position
     */
    getDropGroup(x: number, y: number): ToolItemGroup
    /**
     * Gets the item at position (x, y).
     * See gtk_tool_palette_get_drop_group().
     * @param x the x position
     * @param y the y position
     */
    getDropItem(x: number, y: number): ToolItem
    /**
     * Gets whether `group` is exclusive or not.
     * See gtk_tool_palette_set_exclusive().
     * @param group a #GtkToolItemGroup which is a child of palette
     */
    getExclusive(group: ToolItemGroup): boolean
    /**
     * Gets whether group should be given extra space.
     * See gtk_tool_palette_set_expand().
     * @param group a #GtkToolItemGroup which is a child of palette
     */
    getExpand(group: ToolItemGroup): boolean
    /**
     * Gets the position of `group` in `palette` as index.
     * See gtk_tool_palette_set_group_position().
     * @param group a #GtkToolItemGroup
     */
    getGroupPosition(group: ToolItemGroup): number
    /**
     * Gets the horizontal adjustment of the tool palette.
     */
    getHadjustment(): Adjustment
    /**
     * Gets the size of icons in the tool palette.
     * See gtk_tool_palette_set_icon_size().
     */
    getIconSize(): number
    /**
     * Gets the style (icons, text or both) of items in the tool palette.
     */
    getStyle(): ToolbarStyle

    // Overloads of getStyle

    /**
     * Simply an accessor function that returns `widget->`style.
     */
    getStyle(): Style
    /**
     * Gets the vertical adjustment of the tool palette.
     */
    getVadjustment(): Adjustment
    /**
     * Sets the tool palette as a drag source.
     * Enables all groups and items in the tool palette as drag sources
     * on button 1 and button 3 press with copy and move actions.
     * See gtk_drag_source_set().
     * @param targets the #GtkToolPaletteDragTarget<!-- -->s     which the widget should support
     */
    setDragSource(targets: ToolPaletteDragTargets): void
    /**
     * Sets whether the group should be exclusive or not.
     * If an exclusive group is expanded all other groups are collapsed.
     * @param group a #GtkToolItemGroup which is a child of palette
     * @param exclusive whether the group should be exclusive or not
     */
    setExclusive(group: ToolItemGroup, exclusive: boolean): void
    /**
     * Sets whether the group should be given extra space.
     * @param group a #GtkToolItemGroup which is a child of palette
     * @param expand whether the group should be given extra space
     */
    setExpand(group: ToolItemGroup, expand: boolean): void
    /**
     * Sets the position of the group as an index of the tool palette.
     * If position is 0 the group will become the first child, if position is
     * -1 it will become the last child.
     * @param group a #GtkToolItemGroup which is a child of palette
     * @param position a new index for group
     */
    setGroupPosition(group: ToolItemGroup, position: number): void
    /**
     * Sets the size of icons in the tool palette.
     * @param iconSize the #GtkIconSize that icons in the tool     palette shall have
     */
    setIconSize(iconSize: number): void
    /**
     * Sets the style (text, icons or both) of items in the tool palette.
     * @param style the #GtkToolbarStyle that items in the tool palette shall have
     */
    setStyle(style: ToolbarStyle): void

    // Overloads of setStyle

    /**
     * Sets the #GtkStyle for a widget (`widget->`style). You probably don't
     * want to use this function; it interacts badly with themes, because
     * themes work by replacing the #GtkStyle. Instead, use
     * gtk_widget_modify_style().
     * @param style a #GtkStyle, or %NULL to remove the effect of a previous         gtk_widget_set_style() and go back to the default style
     */
    setStyle(style: Style | null): void
    /**
     * Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size(),
     * so that user preferences will be used to determine the icon size.
     */
    unsetIconSize(): void
    /**
     * Unsets a toolbar style set with gtk_tool_palette_set_style(),
     * so that user preferences will be used to determine the toolbar style.
     */
    unsetStyle(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own signals of Gtk-2.0.Gtk.ToolPalette

    connect(sigName: "set-scroll-adjustments", callback: ToolPalette.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: ToolPalette.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: ToolPalette.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", vadjustment: Adjustment, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.ToolPalette

    connect(sigName: "notify::icon-size", callback: any): number
    on(sigName: "notify::icon-size", callback: any): number
    once(sigName: "notify::icon-size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-size", ...args: any[]): void
    connect(sigName: "notify::icon-size-set", callback: any): number
    on(sigName: "notify::icon-size-set", callback: any): number
    once(sigName: "notify::icon-size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-size-set", ...args: any[]): void
    connect(sigName: "notify::toolbar-style", callback: any): number
    on(sigName: "notify::toolbar-style", callback: any): number
    once(sigName: "notify::toolbar-style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::toolbar-style", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A #GtkToolPalette allows you to add #GtkToolItem<!-- -->s to a palette-like
 * container with different categories and drag and drop support.
 * 
 * A #GtkToolPalette is created with a call to gtk_tool_palette_new().
 * 
 * #GtkToolItem<!-- -->s cannot be added directly to a #GtkToolPalette -
 * instead they are added to a #GtkToolItemGroup which can than be added
 * to a #GtkToolPalette. To add a #GtkToolItemGroup to a #GtkToolPalette,
 * use gtk_container_add().
 * 
 * |[
 * GtkWidget *palette, *group;
 * GtkToolItem *item;
 * 
 * palette = gtk_tool_palette_new ();
 * group = gtk_tool_item_group_new (_("Test Category"));
 * gtk_container_add (GTK_CONTAINER (palette), group);
 * 
 * item = gtk_tool_button_new_from_stock (GTK_STOCK_OK);
 * gtk_tool_item_group_insert (GTK_TOOL_ITEM_GROUP (group), item, -1);
 * ```
 * 
 * 
 * The easiest way to use drag and drop with #GtkToolPalette is to call
 * gtk_tool_palette_add_drag_dest() with the desired drag source `palette`
 * and the desired drag target `widget`. Then gtk_tool_palette_get_drag_item()
 * can be used to get the dragged item in the #GtkWidget::drag-data-received
 * signal handler of the drag target.
 * 
 * |[
 * static void
 * passive_canvas_drag_data_received (GtkWidget        *widget,
 *                                    GdkDragContext   *context,
 *                                    gint              x,
 *                                    gint              y,
 *                                    GtkSelectionData *selection,
 *                                    guint             info,
 *                                    guint             time,
 *                                    gpointer          data)
 * {
 *   GtkWidget *palette;
 *   GtkWidget *item;
 * 
 *   /<!-- -->* Get the dragged item *<!-- -->/
 *   palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),
 *                                      GTK_TYPE_TOOL_PALETTE);
 *   if (palette != NULL)
 *     item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),
 *                                            selection);
 * 
 *   /<!-- -->* Do something with item *<!-- -->/
 * }
 * 
 * GtkWidget *target, palette;
 * 
 * palette = gtk_tool_palette_new ();
 * target = gtk_drawing_area_new ();
 * 
 * g_signal_connect (G_OBJECT (target), "drag-data-received",
 *                   G_CALLBACK (passive_canvas_drag_data_received), NULL);
 * gtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,
 *                                 GTK_DEST_DEFAULT_ALL,
 *                                 GTK_TOOL_PALETTE_DRAG_ITEMS,
 *                                 GDK_ACTION_COPY);
 * ```
 * 
 * @class 
 */
export class ToolPalette extends Container {

    // Own properties of Gtk-2.0.Gtk.ToolPalette

    static name: string

    // Constructors of Gtk-2.0.Gtk.ToolPalette

    constructor(config?: ToolPalette.ConstructorProperties) 
    /**
     * Creates a new tool palette.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new tool palette.
     * @constructor 
     */
    static new(): ToolPalette
    _init(config?: ToolPalette.ConstructorProperties): void
    /**
     * Get the target entry for a dragged #GtkToolItemGroup.
     */
    static getDragTargetGroup(): TargetEntry
    /**
     * Gets the target entry for a dragged #GtkToolItem.
     */
    static getDragTargetItem(): TargetEntry
}

export module Toolbar {

    // Signal callback interfaces

    /**
     * Signal callback interface for `focus-home-or-end`
     */
    export interface FocusHomeOrEndSignalCallback {
        (focusHome: boolean): boolean
    }

    /**
     * Signal callback interface for `orientation-changed`
     */
    export interface OrientationChangedSignalCallback {
        (orientation: Orientation): void
    }

    /**
     * Signal callback interface for `popup-context-menu`
     */
    export interface PopupContextMenuSignalCallback {
        (x: number, y: number, button: number): boolean
    }

    /**
     * Signal callback interface for `style-changed`
     */
    export interface StyleChangedSignalCallback {
        (style: ToolbarStyle): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, ToolShell.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Toolbar

        /**
         * The size of the icons in a toolbar is normally determined by
         * the toolbar-icon-size setting. When this property is set, it
         * overrides the setting.
         * 
         * This should only be used for special-purpose toolbars, normal
         * application toolbars should respect the user preferences for the
         * size of icons.
         */
        iconSize?: number | null
        /**
         * Is %TRUE if the icon-size property has been set.
         */
        iconSizeSet?: boolean | null
        showArrow?: boolean | null
        toolbarStyle?: ToolbarStyle | null
        /**
         * If the tooltips of the toolbar should be active or not.
         */
        tooltips?: boolean | null
    }

}

export interface Toolbar extends Atk.ImplementorIface, Buildable, Orientable, ToolShell {

    // Own properties of Gtk-2.0.Gtk.Toolbar

    /**
     * Is %TRUE if the icon-size property has been set.
     */
    iconSizeSet: boolean
    showArrow: boolean
    toolbarStyle: ToolbarStyle

    // Own fields of Gtk-2.0.Gtk.Toolbar

    container: Container
    numChildren: number
    children: object[]
    orientation: Orientation
    style: any
    iconSize: IconSize
    tooltips: Tooltips

    // Owm methods of Gtk-2.0.Gtk.Toolbar

    /**
     * Adds a new space to the end of the toolbar.
     */
    appendSpace(): void
    /**
     * Adds a widget to the end of the given toolbar.
     * @param widget a #GtkWidget to add to the toolbar.
     * @param tooltipText the element's tooltip.
     * @param tooltipPrivateText used for context-sensitive help about this toolbar element.
     */
    appendWidget(widget: Widget, tooltipText: string | null, tooltipPrivateText: string | null): void
    /**
     * Returns the position corresponding to the indicated point on
     * `toolbar`. This is useful when dragging items to the toolbar:
     * this function returns the position a new item should be
     * inserted.
     * 
     * `x` and `y` are in `toolbar` coordinates.
     * @param x x coordinate of a point on the toolbar
     * @param y y coordinate of a point on the toolbar
     */
    getDropIndex(x: number, y: number): number
    /**
     * Retrieves the icon size for the toolbar. See gtk_toolbar_set_icon_size().
     */
    getIconSize(): number

    // Overloads of getIconSize

    getIconSize(): IconSize
    /**
     * Returns the position of `item` on the toolbar, starting from 0.
     * It is an error if `item` is not a child of the toolbar.
     * @param item a #GtkToolItem that is a child of `toolbar`
     */
    getItemIndex(item: ToolItem): number
    /**
     * Returns the number of items on the toolbar.
     */
    getNItems(): number
    /**
     * Returns the `n<`!-- -->'th item on `toolbar,` or %NULL if the
     * toolbar does not contain an `n<`!-- -->'th item.
     * @param n A position on the toolbar
     */
    getNthItem(n: number): ToolItem
    /**
     * Retrieves the current orientation of the toolbar. See
     * gtk_toolbar_set_orientation().
     */
    getOrientation(): Orientation

    // Overloads of getOrientation

    /**
     * Retrieves the orientation of the `orientable`.
     */
    getOrientation(): Orientation
    /**
     * Retrieves the current orientation for the tool shell. Tool items must not
     * call this function directly, but rely on gtk_tool_item_get_orientation()
     * instead.
     * @virtual 
     */
    getOrientation(): Orientation
    /**
     * Returns the relief style of buttons on `toolbar`. See
     * gtk_button_set_relief().
     */
    getReliefStyle(): ReliefStyle

    // Overloads of getReliefStyle

    /**
     * Returns the relief style of buttons on `shell`. Tool items must not call this
     * function directly, but rely on gtk_tool_item_get_relief_style() instead.
     * @virtual 
     */
    getReliefStyle(): ReliefStyle
    /**
     * Returns whether the toolbar has an overflow menu.
     * See gtk_toolbar_set_show_arrow().
     */
    getShowArrow(): boolean
    /**
     * Retrieves whether the toolbar has text, icons, or both . See
     * gtk_toolbar_set_style().
     */
    getStyle(): ToolbarStyle

    // Overloads of getStyle

    /**
     * Retrieves whether the tool shell has text, icons, or both. Tool items must
     * not call this function directly, but rely on gtk_tool_item_get_style()
     * instead.
     * @virtual 
     */
    getStyle(): ToolbarStyle
    /**
     * Simply an accessor function that returns `widget->`style.
     */
    getStyle(): Style
    /**
     * Retrieves whether tooltips are enabled. See
     * gtk_toolbar_set_tooltips().
     */
    getTooltips(): boolean
    /**
     * Insert a #GtkToolItem into the toolbar at position `pos`. If `pos` is
     * 0 the item is prepended to the start of the toolbar. If `pos` is
     * negative, the item is appended to the end of the toolbar.
     * @param item a #GtkToolItem
     * @param pos the position of the new item
     */
    insert(item: ToolItem, pos: number): void
    /**
     * Inserts a new space in the toolbar at the specified position.
     * @param position the number of widgets after which a space should be inserted.
     */
    insertSpace(position: number): void
    /**
     * Inserts a widget in the toolbar at the given position.
     * @param widget a #GtkWidget to add to the toolbar.
     * @param tooltipText the element's tooltip.
     * @param tooltipPrivateText used for context-sensitive help about this toolbar element.
     * @param position the number of widgets to insert this widget after.
     */
    insertWidget(widget: Widget, tooltipText: string | null, tooltipPrivateText: string | null, position: number): void
    /**
     * Adds a new space to the beginning of the toolbar.
     */
    prependSpace(): void
    /**
     * Adds a widget to the beginning of the given toolbar.
     * @param widget a #GtkWidget to add to the toolbar.
     * @param tooltipText the element's tooltip.
     * @param tooltipPrivateText used for context-sensitive help about this toolbar element.
     */
    prependWidget(widget: Widget, tooltipText: string | null, tooltipPrivateText: string | null): void
    /**
     * Removes a space from the specified position.
     * @param position the index of the space to remove.
     */
    removeSpace(position: number): void
    /**
     * Highlights `toolbar` to give an idea of what it would look like
     * if `item` was added to `toolbar` at the position indicated by `index_`.
     * If `item` is %NULL, highlighting is turned off. In that case `index_`
     * is ignored.
     * 
     * The `tool_item` passed to this function must not be part of any widget
     * hierarchy. When an item is set as drop highlight item it can not
     * added to any widget hierarchy or used as highlight item for another
     * toolbar.
     * @param toolItem a #GtkToolItem, or %NULL to turn of highlighting
     * @param index a position on `toolbar`
     */
    setDropHighlightItem(toolItem: ToolItem | null, index: number): void
    /**
     * This function sets the size of stock icons in the toolbar. You
     * can call it both before you add the icons and after they've been
     * added. The size you set will override user preferences for the default
     * icon size.
     * 
     * This should only be used for special-purpose toolbars, normal
     * application toolbars should respect the user preferences for the
     * size of icons.
     * @param iconSize The #GtkIconSize that stock icons in the     toolbar shall have.
     */
    setIconSize(iconSize: number): void
    /**
     * Sets whether a toolbar should appear horizontally or vertically.
     * @param orientation a new #GtkOrientation.
     */
    setOrientation(orientation: Orientation): void
    /**
     * Sets whether to show an overflow menu when `toolbar` isn’t allocated enough
     * size to show all of its items. If %TRUE, items which can’t fit in `toolbar,`
     * and which have a proxy menu item set by gtk_tool_item_set_proxy_menu_item()
     * or #GtkToolItem::create-menu-proxy, will be available in an overflow menu,
     * which can be opened by an added arrow button. If %FALSE, `toolbar` will
     * request enough size to fit all of its child items without any overflow.
     * @param showArrow Whether to show an overflow menu
     */
    setShowArrow(showArrow: boolean): void
    /**
     * Alters the view of `toolbar` to display either icons only, text only, or both.
     * @param style the new style for `toolbar`.
     */
    setStyle(style: ToolbarStyle): void

    // Overloads of setStyle

    /**
     * Sets the #GtkStyle for a widget (`widget->`style). You probably don't
     * want to use this function; it interacts badly with themes, because
     * themes work by replacing the #GtkStyle. Instead, use
     * gtk_widget_modify_style().
     * @param style a #GtkStyle, or %NULL to remove the effect of a previous         gtk_widget_set_style() and go back to the default style
     */
    setStyle(style: Style | null): void
    /**
     * Sets if the tooltips of a toolbar should be active or not.
     * @param enable set to %FALSE to disable the tooltips, or %TRUE to enable them.
     */
    setTooltips(enable: boolean): void
    /**
     * Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that
     * user preferences will be used to determine the icon size.
     */
    unsetIconSize(): void
    /**
     * Unsets a toolbar style set with gtk_toolbar_set_style(), so that
     * user preferences will be used to determine the toolbar style.
     */
    unsetStyle(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Toolbar

    orientationChanged(orientation: Orientation): void
    popupContextMenu(x: number, y: number, buttonNumber: number): boolean
    styleChanged(style: ToolbarStyle): void

    // Own signals of Gtk-2.0.Gtk.Toolbar

    connect(sigName: "focus-home-or-end", callback: Toolbar.FocusHomeOrEndSignalCallback): number
    on(sigName: "focus-home-or-end", callback: Toolbar.FocusHomeOrEndSignalCallback): number
    once(sigName: "focus-home-or-end", callback: Toolbar.FocusHomeOrEndSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "focus-home-or-end", ...args: any[]): void
    connect(sigName: "orientation-changed", callback: Toolbar.OrientationChangedSignalCallback): number
    on(sigName: "orientation-changed", callback: Toolbar.OrientationChangedSignalCallback): number
    once(sigName: "orientation-changed", callback: Toolbar.OrientationChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "orientation-changed", ...args: any[]): void
    connect(sigName: "popup-context-menu", callback: Toolbar.PopupContextMenuSignalCallback): number
    on(sigName: "popup-context-menu", callback: Toolbar.PopupContextMenuSignalCallback): number
    once(sigName: "popup-context-menu", callback: Toolbar.PopupContextMenuSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popup-context-menu", y: number, button: number, ...args: any[]): void
    connect(sigName: "style-changed", callback: Toolbar.StyleChangedSignalCallback): number
    on(sigName: "style-changed", callback: Toolbar.StyleChangedSignalCallback): number
    once(sigName: "style-changed", callback: Toolbar.StyleChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "style-changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Toolbar

    connect(sigName: "notify::icon-size-set", callback: any): number
    on(sigName: "notify::icon-size-set", callback: any): number
    once(sigName: "notify::icon-size-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-size-set", ...args: any[]): void
    connect(sigName: "notify::show-arrow", callback: any): number
    on(sigName: "notify::show-arrow", callback: any): number
    once(sigName: "notify::show-arrow", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-arrow", ...args: any[]): void
    connect(sigName: "notify::toolbar-style", callback: any): number
    on(sigName: "notify::toolbar-style", callback: any): number
    once(sigName: "notify::toolbar-style", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::toolbar-style", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Toolbar extends Container {

    // Own properties of Gtk-2.0.Gtk.Toolbar

    static name: string

    // Constructors of Gtk-2.0.Gtk.Toolbar

    constructor(config?: Toolbar.ConstructorProperties) 
    /**
     * Creates a new toolbar.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new toolbar.
     * @constructor 
     */
    static new(): Toolbar
    _init(config?: Toolbar.ConstructorProperties): void
}

export module Tooltip {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface Tooltip {

    // Owm methods of Gtk-2.0.Gtk.Tooltip

    /**
     * Replaces the widget packed into the tooltip with
     * `custom_widget`. `custom_widget` does not get destroyed when the tooltip goes
     * away.
     * By default a box with a #GtkImage and #GtkLabel is embedded in
     * the tooltip, which can be configured using gtk_tooltip_set_markup()
     * and gtk_tooltip_set_icon().
     * @param customWidget a #GtkWidget, or %NULL to unset the old custom widget.
     */
    setCustom(customWidget: Widget | null): void
    /**
     * Sets the icon of the tooltip (which is in front of the text) to be
     * `pixbuf`.  If `pixbuf` is %NULL, the image will be hidden.
     * @param pixbuf a #GdkPixbuf, or %NULL
     */
    setIcon(pixbuf: GdkPixbuf.Pixbuf | null): void
    /**
     * Sets the icon of the tooltip (which is in front of the text)
     * to be the icon indicated by `gicon` with the size indicated
     * by `size`. If `gicon` is %NULL, the image will be hidden.
     * @param gicon a #GIcon representing the icon, or %NULL
     * @param size a stock icon size
     */
    setIconFromGicon(gicon: Gio.Icon | null, size: number): void
    /**
     * Sets the icon of the tooltip (which is in front of the text) to be
     * the icon indicated by `icon_name` with the size indicated
     * by `size`.  If `icon_name` is %NULL, the image will be hidden.
     * @param iconName an icon name, or %NULL
     * @param size a stock icon size
     */
    setIconFromIconName(iconName: string | null, size: number): void
    /**
     * Sets the icon of the tooltip (which is in front of the text) to be
     * the stock item indicated by `stock_id` with the size indicated
     * by `size`.  If `stock_id` is %NULL, the image will be hidden.
     * @param stockId a stock id, or %NULL
     * @param size a stock icon size
     */
    setIconFromStock(stockId: string | null, size: number): void
    /**
     * Sets the text of the tooltip to be `markup,` which is marked up
     * with the <link
     * linkend="PangoMarkupFormat">Pango text markup language</link>.
     * If `markup` is %NULL, the label will be hidden.
     * @param markup a markup string (see <link linkend="PangoMarkupFormat">Pango markup format</link>) or %NULL
     */
    setMarkup(markup: string | null): void
    /**
     * Sets the text of the tooltip to be `text`. If `text` is %NULL, the label
     * will be hidden. See also gtk_tooltip_set_markup().
     * @param text a text string or %NULL
     */
    setText(text: string | null): void
    /**
     * Sets the area of the widget, where the contents of this tooltip apply,
     * to be `rect` (in widget coordinates).  This is especially useful for
     * properly setting tooltips on #GtkTreeView rows and cells, #GtkIconViews,
     * etc.
     * 
     * For setting tooltips on #GtkTreeView, please refer to the convenience
     * functions for this: gtk_tree_view_set_tooltip_row() and
     * gtk_tree_view_set_tooltip_cell().
     * @param rect a #GdkRectangle
     */
    setTipArea(rect: Gdk.Rectangle): void

    // Class property signals of Gtk-2.0.Gtk.Tooltip

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Tooltip extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.Tooltip

    static name: string

    // Constructors of Gtk-2.0.Gtk.Tooltip

    constructor(config?: Tooltip.ConstructorProperties) 
    _init(config?: Tooltip.ConstructorProperties): void
    /**
     * Triggers a new tooltip query on `display,` in order to update the current
     * visible tooltip, or to show/hide the current tooltip.  This function is
     * useful to call when, for example, the state of the widget changed by a
     * key press.
     * @param display a #GdkDisplay
     */
    static triggerTooltipQuery(display: Gdk.Display): void
}

export module Tooltips {

    // Constructor properties interface

    export interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

export interface Tooltips {

    // Own fields of Gtk-2.0.Gtk.Tooltips

    parentInstance: any

    // Owm methods of Gtk-2.0.Gtk.Tooltips

    disable(): void
    enable(): void
    forceWindow(): void
    setDelay(delay: number): void
    /**
     * Adds a tooltip containing the message `tip_text` to the specified #GtkWidget.
     * @param widget the #GtkWidget you wish to associate the tip with.
     * @param tipText a string containing the tip itself.
     * @param tipPrivate a string of any further information that may be useful if the user gets stuck.
     */
    setTip(widget: Widget, tipText: string | null, tipPrivate: string | null): void

    // Class property signals of Gtk-2.0.Gtk.Tooltips

    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Tooltips extends Object {

    // Own properties of Gtk-2.0.Gtk.Tooltips

    static name: string

    // Constructors of Gtk-2.0.Gtk.Tooltips

    constructor(config?: Tooltips.ConstructorProperties) 
    constructor() 
    static new(): Tooltips
    _init(config?: Tooltips.ConstructorProperties): void
    /**
     * Determines the tooltips and the widget they belong to from the window in
     * which they are displayed.
     * 
     * This function is mostly intended for use by accessibility technologies;
     * applications should have little use for it.
     * @param tipWindow a #GtkWindow
     * @param tooltips the return location for the tooltips which are displayed    in `tip_window,` or %NULL
     * @param currentWidget the return location for the widget whose tooltips    are displayed, or %NULL
     */
    static getInfoFromTipWindow(tipWindow: Window, tooltips: Tooltips, currentWidget: Widget): boolean
}

export module TreeModelFilter {

    // Constructor properties interface

    export interface ConstructorProperties extends TreeDragSource.ConstructorProperties, TreeModel.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TreeModelFilter

        childModel?: TreeModel | null
        virtualRoot?: TreePath | null
    }

}

export interface TreeModelFilter extends TreeDragSource, TreeModel {

    // Own properties of Gtk-2.0.Gtk.TreeModelFilter

    readonly childModel: TreeModel
    readonly virtualRoot: TreePath

    // Own fields of Gtk-2.0.Gtk.TreeModelFilter

    parent: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.TreeModelFilter

    /**
     * This function should almost never be called. It clears the `filter`
     * of any cached iterators that haven't been reffed with
     * gtk_tree_model_ref_node(). This might be useful if the child model
     * being filtered is static (and doesn't change often) and there has been
     * a lot of unreffed access to nodes. As a side effect of this function,
     * all unreffed iters will be invalid.
     */
    clearCache(): void
    /**
     * Sets `filter_iter` to point to the row in `filter` that corresponds to the
     * row pointed at by `child_iter`.  If `filter_iter` was not set, %FALSE is
     * returned.
     * @param childIter A valid #GtkTreeIter pointing to a row on the child model.
     */
    convertChildIterToIter(childIter: TreeIter): [ /* returnType */ boolean, /* filterIter */ TreeIter ]
    /**
     * Converts `child_path` to a path relative to `filter`. That is, `child_path`
     * points to a path in the child model. The rerturned path will point to the
     * same row in the filtered model. If `child_path` isn't a valid path on the
     * child model or points to a row which is not visible in `filter,` then %NULL
     * is returned.
     * @param childPath A #GtkTreePath to convert.
     */
    convertChildPathToPath(childPath: TreePath): TreePath
    /**
     * Sets `child_iter` to point to the row pointed to by `filter_iter`.
     * @param filterIter A valid #GtkTreeIter pointing to a row on `filter`.
     */
    convertIterToChildIter(filterIter: TreeIter): /* childIter */ TreeIter
    /**
     * Converts `filter_path` to a path on the child model of `filter`. That is,
     * `filter_path` points to a location in `filter`. The returned path will
     * point to the same location in the model not being filtered. If `filter_path`
     * does not point to a location in the child model, %NULL is returned.
     * @param filterPath A #GtkTreePath to convert.
     */
    convertPathToChildPath(filterPath: TreePath): TreePath
    /**
     * Returns a pointer to the child model of `filter`.
     */
    getModel(): TreeModel
    /**
     * Emits ::row_changed for each row in the child model, which causes
     * the filter to re-evaluate whether a row is visible or not.
     */
    refilter(): void
    /**
     * With the `n_columns` and `types` parameters, you give an array of column
     * types for this model (which will be exposed to the parent model/view).
     * The `func,` `data` and `destroy` parameters are for specifying the modify
     * function. The modify function will get called for <emphasis>each</emphasis>
     * data access, the goal of the modify function is to return the data which
     * should be displayed at the location specified using the parameters of the
     * modify function.
     * @param types The #GType<!-- -->s of the columns.
     * @param func A #GtkTreeModelFilterModifyFunc
     */
    setModifyFunc(types: GObject.GType[], func: TreeModelFilterModifyFunc): void
    /**
     * Sets `column` of the child_model to be the column where `filter` should
     * look for visibility information. `columns` should be a column of type
     * %G_TYPE_BOOLEAN, where %TRUE means that a row is visible, and %FALSE
     * if not.
     * @param column A #gint which is the column containing the visible information.
     */
    setVisibleColumn(column: number): void
    /**
     * Sets the visible function used when filtering the `filter` to be `func`. The
     * function should return %TRUE if the given row should be visible and
     * %FALSE otherwise.
     * 
     * If the condition calculated by the function changes over time (e.g. because
     * it depends on some global parameters), you must call
     * gtk_tree_model_filter_refilter() to keep the visibility information of
     * the model uptodate.
     * 
     * Note that `func` is called whenever a row is inserted, when it may still be
     * empty. The visible function should therefore take special care of empty
     * rows, like in the example below.
     * 
     * <informalexample><programlisting>
     * static gboolean
     * visible_func (GtkTreeModel *model,
     *               GtkTreeIter  *iter,
     *               gpointer      data)
     * {
     *   /&ast; Visible if row is non-empty and first column is "HI" &ast;/
     *   gchar *str;
     *   gboolean visible = FALSE;
     * 
     *   gtk_tree_model_get (model, iter, 0, &str, -1);
     *   if (str && strcmp (str, "HI") == 0)
     *     visible = TRUE;
     *   g_free (str);
     * 
     *   return visible;
     * }
     * </programlisting></informalexample>
     * @param func A #GtkTreeModelFilterVisibleFunc, the visible function.
     */
    setVisibleFunc(func: TreeModelFilterVisibleFunc): void

    // Class property signals of Gtk-2.0.Gtk.TreeModelFilter

    connect(sigName: "notify::child-model", callback: any): number
    on(sigName: "notify::child-model", callback: any): number
    once(sigName: "notify::child-model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child-model", ...args: any[]): void
    connect(sigName: "notify::virtual-root", callback: any): number
    on(sigName: "notify::virtual-root", callback: any): number
    once(sigName: "notify::virtual-root", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::virtual-root", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeModelFilter extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeModelFilter

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeModelFilter

    constructor(config?: TreeModelFilter.ConstructorProperties) 
    _init(config?: TreeModelFilter.ConstructorProperties): void
}

export module TreeModelSort {

    // Constructor properties interface

    export interface ConstructorProperties extends TreeDragSource.ConstructorProperties, TreeModel.ConstructorProperties, TreeSortable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TreeModelSort

        model?: TreeModel | null
    }

}

export interface TreeModelSort extends TreeDragSource, TreeModel, TreeSortable {

    // Own properties of Gtk-2.0.Gtk.TreeModelSort

    readonly model: TreeModel

    // Own fields of Gtk-2.0.Gtk.TreeModelSort

    parent: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.TreeModelSort

    /**
     * This function should almost never be called.  It clears the `tree_model_sort`
     * of any cached iterators that haven't been reffed with
     * gtk_tree_model_ref_node().  This might be useful if the child model being
     * sorted is static (and doesn't change often) and there has been a lot of
     * unreffed access to nodes.  As a side effect of this function, all unreffed
     * iters will be invalid.
     */
    clearCache(): void
    /**
     * Sets `sort_iter` to point to the row in `tree_model_sort` that corresponds to
     * the row pointed at by `child_iter`.  If `sort_iter` was not set, %FALSE
     * is returned.  Note: a boolean is only returned since 2.14.
     * @param childIter A valid #GtkTreeIter pointing to a row on the child model
     */
    convertChildIterToIter(childIter: TreeIter): [ /* returnType */ boolean, /* sortIter */ TreeIter ]
    /**
     * Converts `child_path` to a path relative to `tree_model_sort`.  That is,
     * `child_path` points to a path in the child model.  The returned path will
     * point to the same row in the sorted model.  If `child_path` isn't a valid
     * path on the child model, then %NULL is returned.
     * @param childPath A #GtkTreePath to convert
     */
    convertChildPathToPath(childPath: TreePath): TreePath
    /**
     * Sets `child_iter` to point to the row pointed to by `sorted_iter`.
     * @param sortedIter A valid #GtkTreeIter pointing to a row on `tree_model_sort`.
     */
    convertIterToChildIter(sortedIter: TreeIter): /* childIter */ TreeIter
    /**
     * Converts `sorted_path` to a path on the child model of `tree_model_sort`.
     * That is, `sorted_path` points to a location in `tree_model_sort`.  The
     * returned path will point to the same location in the model not being
     * sorted.  If `sorted_path` does not point to a location in the child model,
     * %NULL is returned.
     * @param sortedPath A #GtkTreePath to convert
     */
    convertPathToChildPath(sortedPath: TreePath): TreePath
    /**
     * Returns the model the #GtkTreeModelSort is sorting.
     */
    getModel(): TreeModel
    /**
     * <warning><para>
     * This function is slow. Only use it for debugging and/or testing purposes.
     * </para></warning>
     * 
     * Checks if the given iter is a valid iter for this #GtkTreeModelSort.
     * @param iter A #GtkTreeIter.
     */
    iterIsValid(iter: TreeIter): boolean
    /**
     * This resets the default sort function to be in the 'unsorted' state.  That
     * is, it is in the same order as the child model. It will re-sort the model
     * to be in the same order as the child model only if the #GtkTreeModelSort
     * is in 'unsorted' state.
     */
    resetDefaultSortFunc(): void

    // Class property signals of Gtk-2.0.Gtk.TreeModelSort

    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeModelSort extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeModelSort

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeModelSort

    constructor(config?: TreeModelSort.ConstructorProperties) 
    _init(config?: TreeModelSort.ConstructorProperties): void
}

export module TreeSelection {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    export interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface TreeSelection {

    // Own fields of Gtk-2.0.Gtk.TreeSelection

    parent: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.TreeSelection

    /**
     * Returns the number of rows that have been selected in `tree`.
     */
    countSelectedRows(): number
    /**
     * Gets the selection mode for `selection`. See
     * gtk_tree_selection_set_mode().
     */
    getMode(): SelectionMode
    /**
     * Sets `iter` to the currently selected node if `selection` is set to
     * #GTK_SELECTION_SINGLE or #GTK_SELECTION_BROWSE.  `iter` may be NULL if you
     * just want to test if `selection` has any selected nodes.  `model` is filled
     * with the current model as a convenience.  This function will not work if you
     * use `selection` is #GTK_SELECTION_MULTIPLE.
     */
    getSelected(): [ /* returnType */ boolean, /* model */ TreeModel, /* iter */ TreeIter ]
    /**
     * Creates a list of path of all selected rows. Additionally, if you are
     * planning on modifying the model after calling this function, you may
     * want to convert the returned list into a list of #GtkTreeRowReference<!-- -->s.
     * To do this, you can use gtk_tree_row_reference_new().
     * 
     * To free the return value, use:
     * |[
     * g_list_foreach (list, (GFunc) gtk_tree_path_free, NULL);
     * g_list_free (list);
     * ```
     * 
     */
    getSelectedRows(): [ /* returnType */ TreePath[], /* model */ TreeModel ]
    /**
     * Returns the tree view associated with `selection`.
     */
    getTreeView(): TreeView
    /**
     * Returns %TRUE if the row at `iter` is currently selected.
     * @param iter A valid #GtkTreeIter
     */
    iterIsSelected(iter: TreeIter): boolean
    /**
     * Returns %TRUE if the row pointed to by `path` is currently selected.  If `path`
     * does not point to a valid location, %FALSE is returned
     * @param path A #GtkTreePath to check selection on.
     */
    pathIsSelected(path: TreePath): boolean
    /**
     * Selects all the nodes. `selection` must be set to #GTK_SELECTION_MULTIPLE
     * mode.
     */
    selectAll(): void
    /**
     * Selects the specified iterator.
     * @param iter The #GtkTreeIter to be selected.
     */
    selectIter(iter: TreeIter): void
    /**
     * Select the row at `path`.
     * @param path The #GtkTreePath to be selected.
     */
    selectPath(path: TreePath): void
    /**
     * Selects a range of nodes, determined by `start_path` and `end_path` inclusive.
     * `selection` must be set to #GTK_SELECTION_MULTIPLE mode.
     * @param startPath The initial node of the range.
     * @param endPath The final node of the range.
     */
    selectRange(startPath: TreePath, endPath: TreePath): void
    /**
     * Calls a function for each selected node. Note that you cannot modify
     * the tree or selection from within this function. As a result,
     * gtk_tree_selection_get_selected_rows() might be more useful.
     * @param func The function to call for each selected node.
     */
    selectedForeach(func: TreeSelectionForeachFunc): void
    /**
     * Sets the selection mode of the `selection`.  If the previous type was
     * #GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
     * previously selected.
     * @param type The selection mode
     */
    setMode(type: SelectionMode): void
    /**
     * Sets the selection function.  If set, this function is called before any node
     * is selected or unselected, giving some control over which nodes are selected.
     * The select function should return %TRUE if the state of the node may be toggled,
     * and %FALSE if the state of the node should be left unchanged.
     * @param func The selection function.
     */
    setSelectFunction(func: TreeSelectionFunc): void
    /**
     * Unselects all the nodes.
     */
    unselectAll(): void
    /**
     * Unselects the specified iterator.
     * @param iter The #GtkTreeIter to be unselected.
     */
    unselectIter(iter: TreeIter): void
    /**
     * Unselects the row at `path`.
     * @param path The #GtkTreePath to be unselected.
     */
    unselectPath(path: TreePath): void
    /**
     * Unselects a range of nodes, determined by `start_path` and `end_path`
     * inclusive.
     * @param startPath The initial node of the range.
     * @param endPath The initial node of the range.
     */
    unselectRange(startPath: TreePath, endPath: TreePath): void

    // Own virtual methods of Gtk-2.0.Gtk.TreeSelection

    changed(): void

    // Own signals of Gtk-2.0.Gtk.TreeSelection

    connect(sigName: "changed", callback: TreeSelection.ChangedSignalCallback): number
    on(sigName: "changed", callback: TreeSelection.ChangedSignalCallback): number
    once(sigName: "changed", callback: TreeSelection.ChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TreeSelection

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeSelection extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeSelection

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeSelection

    constructor(config?: TreeSelection.ConstructorProperties) 
    _init(config?: TreeSelection.ConstructorProperties): void
}

export module TreeStore {

    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, TreeDragDest.ConstructorProperties, TreeDragSource.ConstructorProperties, TreeModel.ConstructorProperties, TreeSortable.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

export interface TreeStore extends Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable {

    // Own fields of Gtk-2.0.Gtk.TreeStore

    parent: GObject.Object
    stamp: number
    root: object
    last: object
    nColumns: number
    sortColumnId: number
    sortList: object[]
    order: SortType
    columnHeaders: GObject.GType
    defaultSortFunc: TreeIterCompareFunc
    defaultSortData: object
    defaultSortDestroy: GLib.DestroyNotify
    columnsDirty: number

    // Owm methods of Gtk-2.0.Gtk.TreeStore

    /**
     * Appends a new row to `tree_store`.  If `parent` is non-%NULL, then it will append the
     * new row after the last child of `parent,` otherwise it will append a row to
     * the top level.  `iter` will be changed to point to this new row.  The row will
     * be empty after this function is called.  To fill in values, you need to call
     * gtk_tree_store_set() or gtk_tree_store_set_value().
     * @param parent A valid #GtkTreeIter, or %NULL
     */
    append(parent: TreeIter | null): /* iter */ TreeIter
    /**
     * Removes all rows from `tree_store`
     */
    clear(): void
    /**
     * Creates a new row at `position`.  If parent is non-%NULL, then the row will be
     * made a child of `parent`.  Otherwise, the row will be created at the toplevel.
     * If `position` is larger than the number of rows at that level, then the new
     * row will be inserted to the end of the list.  `iter` will be changed to point
     * to this new row.  The row will be empty after this function is called.  To
     * fill in values, you need to call gtk_tree_store_set() or
     * gtk_tree_store_set_value().
     * @param parent A valid #GtkTreeIter, or %NULL
     * @param position position to insert the new row
     */
    insert(parent: TreeIter | null, position: number): /* iter */ TreeIter
    /**
     * Inserts a new row after `sibling`.  If `sibling` is %NULL, then the row will be
     * prepended to `parent` 's children.  If `parent` and `sibling` are %NULL, then
     * the row will be prepended to the toplevel.  If both `sibling` and `parent` are
     * set, then `parent` must be the parent of `sibling`.  When `sibling` is set,
     * `parent` is optional.
     * 
     * `iter` will be changed to point to this new row.  The row will be empty after
     * this function is called.  To fill in values, you need to call
     * gtk_tree_store_set() or gtk_tree_store_set_value().
     * @param parent A valid #GtkTreeIter, or %NULL
     * @param sibling A valid #GtkTreeIter, or %NULL
     */
    insertAfter(parent: TreeIter | null, sibling: TreeIter | null): /* iter */ TreeIter
    /**
     * Inserts a new row before `sibling`.  If `sibling` is %NULL, then the row will
     * be appended to `parent` 's children.  If `parent` and `sibling` are %NULL, then
     * the row will be appended to the toplevel.  If both `sibling` and `parent` are
     * set, then `parent` must be the parent of `sibling`.  When `sibling` is set,
     * `parent` is optional.
     * 
     * `iter` will be changed to point to this new row.  The row will be empty after
     * this function is called.  To fill in values, you need to call
     * gtk_tree_store_set() or gtk_tree_store_set_value().
     * @param parent A valid #GtkTreeIter, or %NULL
     * @param sibling A valid #GtkTreeIter, or %NULL
     */
    insertBefore(parent: TreeIter | null, sibling: TreeIter | null): /* iter */ TreeIter
    /**
     * A variant of gtk_tree_store_insert_with_values() which takes
     * the columns and values as two arrays, instead of varargs.  This
     * function is mainly intended for language bindings.
     * @param parent A valid #GtkTreeIter, or %NULL
     * @param position position to insert the new row
     * @param columns an array of column numbers
     * @param values an array of GValues
     */
    insertWithValuesv(parent: TreeIter | null, position: number, columns: number[], values: any[]): /* iter */ TreeIter
    /**
     * Returns %TRUE if `iter` is an ancestor of `descendant`.  That is, `iter` is the
     * parent (or grandparent or great-grandparent) of `descendant`.
     * @param iter A valid #GtkTreeIter
     * @param descendant A valid #GtkTreeIter
     */
    isAncestor(iter: TreeIter, descendant: TreeIter): boolean
    /**
     * Returns the depth of `iter`.  This will be 0 for anything on the root level, 1
     * for anything down a level, etc.
     * @param iter A valid #GtkTreeIter
     */
    iterDepth(iter: TreeIter): number
    /**
     * WARNING: This function is slow. Only use it for debugging and/or testing
     * purposes.
     * 
     * Checks if the given iter is a valid iter for this #GtkTreeStore.
     * @param iter A #GtkTreeIter.
     */
    iterIsValid(iter: TreeIter): boolean
    /**
     * Moves `iter` in `tree_store` to the position after `position`. `iter` and
     * `position` should be in the same level. Note that this function only
     * works with unsorted stores. If `position` is %NULL, `iter` will be moved
     * to the start of the level.
     * @param iter A #GtkTreeIter.
     * @param position A #GtkTreeIter.
     */
    moveAfter(iter: TreeIter, position: TreeIter | null): void
    /**
     * Moves `iter` in `tree_store` to the position before `position`. `iter` and
     * `position` should be in the same level. Note that this function only
     * works with unsorted stores. If `position` is %NULL, `iter` will be
     * moved to the end of the level.
     * @param iter A #GtkTreeIter.
     * @param position A #GtkTreeIter or %NULL.
     */
    moveBefore(iter: TreeIter, position: TreeIter | null): void
    /**
     * Prepends a new row to `tree_store`.  If `parent` is non-%NULL, then it will prepend
     * the new row before the first child of `parent,` otherwise it will prepend a row
     * to the top level.  `iter` will be changed to point to this new row.  The row
     * will be empty after this function is called.  To fill in values, you need to
     * call gtk_tree_store_set() or gtk_tree_store_set_value().
     * @param parent A valid #GtkTreeIter, or %NULL
     */
    prepend(parent: TreeIter | null): /* iter */ TreeIter
    /**
     * Removes `iter` from `tree_store`.  After being removed, `iter` is set to the
     * next valid row at that level, or invalidated if it previously pointed to the
     * last one.
     * @param iter A valid #GtkTreeIter
     */
    remove(iter: TreeIter): boolean
    /**
     * Reorders the children of `parent` in `tree_store` to follow the order
     * indicated by `new_order`. Note that this function only works with
     * unsorted stores.
     * @param parent A #GtkTreeIter.
     * @param newOrder an array of integers mapping the new position of each child      to its old position before the re-ordering,      i.e. `new_order<`literal>[newpos] = oldpos</literal>.
     */
    reorder(parent: TreeIter, newOrder: number[]): void
    /**
     * This function is meant primarily for #GObjects that inherit from
     * #GtkTreeStore, and should only be used when constructing a new
     * #GtkTreeStore.  It will not function after a row has been added,
     * or a method on the #GtkTreeModel interface is called.
     * @param types An array of #GType types, one for each column
     */
    setColumnTypes(types: GObject.GType[]): void
    /**
     * Sets the data in the cell specified by `iter` and `column`.
     * The type of `value` must be convertible to the type of the
     * column.
     * @param iter A valid #GtkTreeIter for the row being modified
     * @param column column number to modify
     * @param value new value for the cell
     */
    setValue(iter: TreeIter, column: number, value: any): void
    /**
     * A variant of gtk_tree_store_set_valist() which takes
     * the columns and values as two arrays, instead of varargs.  This
     * function is mainly intended for language bindings or in case
     * the number of columns to change is not known until run-time.
     * @param iter A valid #GtkTreeIter for the row being modified
     * @param columns an array of column numbers
     * @param values an array of GValues
     */
    setValuesv(iter: TreeIter, columns: number[], values: any[]): void
    /**
     * Swaps `a` and `b` in the same level of `tree_store`. Note that this function
     * only works with unsorted stores.
     * @param a A #GtkTreeIter.
     * @param b Another #GtkTreeIter.
     */
    swap(a: TreeIter, b: TreeIter): void

    // Class property signals of Gtk-2.0.Gtk.TreeStore

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeStore extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.TreeStore

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeStore

    constructor(config?: TreeStore.ConstructorProperties) 
    /**
     * Non vararg creation function.  Used primarily by language bindings.
     * @constructor 
     * @param types an array of #GType types for the columns, from first to last
     */
    static newv(types: GObject.GType[]): TreeStore

    // Overloads of newv

    /**
     * Creates a new instance of a #GObject subtype and sets its properties.
     * 
     * Construction parameters (see %G_PARAM_CONSTRUCT, %G_PARAM_CONSTRUCT_ONLY)
     * which are not explicitly specified are set to their default values.
     * @constructor 
     * @param objectType the type id of the #GObject subtype to instantiate
     * @param parameters an array of #GParameter
     */
    static newv(objectType: GObject.GType, parameters: GObject.Parameter[]): GObject.Object
    _init(config?: TreeStore.ConstructorProperties): void
}

export module TreeView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `columns-changed`
     */
    export interface ColumnsChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cursor-changed`
     */
    export interface CursorChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `expand-collapse-cursor-row`
     */
    export interface ExpandCollapseCursorRowSignalCallback {
        (object: boolean, p0: boolean, p1: boolean): boolean
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    export interface MoveCursorSignalCallback {
        (object: MovementStep, p0: number): boolean
    }

    /**
     * Signal callback interface for `row-activated`
     */
    export interface RowActivatedSignalCallback {
        (path: TreePath, column: TreeViewColumn): void
    }

    /**
     * Signal callback interface for `row-collapsed`
     */
    export interface RowCollapsedSignalCallback {
        (iter: TreeIter, path: TreePath): void
    }

    /**
     * Signal callback interface for `row-expanded`
     */
    export interface RowExpandedSignalCallback {
        (iter: TreeIter, path: TreePath): void
    }

    /**
     * Signal callback interface for `select-all`
     */
    export interface SelectAllSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `select-cursor-parent`
     */
    export interface SelectCursorParentSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `select-cursor-row`
     */
    export interface SelectCursorRowSignalCallback {
        (object: boolean): boolean
    }

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (object: Adjustment, p0: Adjustment): void
    }

    /**
     * Signal callback interface for `start-interactive-search`
     */
    export interface StartInteractiveSearchSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `test-collapse-row`
     */
    export interface TestCollapseRowSignalCallback {
        (iter: TreeIter, path: TreePath): boolean
    }

    /**
     * Signal callback interface for `test-expand-row`
     */
    export interface TestExpandRowSignalCallback {
        (iter: TreeIter, path: TreePath): boolean
    }

    /**
     * Signal callback interface for `toggle-cursor-row`
     */
    export interface ToggleCursorRowSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `unselect-all`
     */
    export interface UnselectAllSignalCallback {
        (): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Container.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TreeView

        enableGridLines?: TreeViewGridLines | null
        enableSearch?: boolean | null
        enableTreeLines?: boolean | null
        expanderColumn?: TreeViewColumn | null
        /**
         * Setting the ::fixed-height-mode property to %TRUE speeds up
         * #GtkTreeView by assuming that all rows have the same height.
         * Only enable this option if all rows are the same height.
         * Please see gtk_tree_view_set_fixed_height_mode() for more
         * information on this option.
         */
        fixedHeightMode?: boolean | null
        hadjustment?: Adjustment | null
        headersClickable?: boolean | null
        headersVisible?: boolean | null
        /**
         * Enables of disables the hover expansion mode of `tree_view`.
         * Hover expansion makes rows expand or collapse if the pointer moves
         * over them.
         * 
         * This mode is primarily intended for treeviews in popups, e.g.
         * in #GtkComboBox or #GtkEntryCompletion.
         */
        hoverExpand?: boolean | null
        /**
         * Enables of disables the hover selection mode of `tree_view`.
         * Hover selection makes the selected row follow the pointer.
         * Currently, this works only for the selection modes
         * %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
         * 
         * This mode is primarily intended for treeviews in popups, e.g.
         * in #GtkComboBox or #GtkEntryCompletion.
         */
        hoverSelection?: boolean | null
        /**
         * Extra indentation for each level.
         */
        levelIndentation?: number | null
        model?: TreeModel | null
        reorderable?: boolean | null
        rubberBanding?: boolean | null
        rulesHint?: boolean | null
        searchColumn?: number | null
        /**
         * %TRUE if the view has expanders.
         */
        showExpanders?: boolean | null
        tooltipColumn?: number | null
        vadjustment?: Adjustment | null
    }

}

export interface TreeView extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.TreeView

    enableGridLines: TreeViewGridLines
    enableSearch: boolean
    enableTreeLines: boolean
    expanderColumn: TreeViewColumn
    /**
     * Setting the ::fixed-height-mode property to %TRUE speeds up
     * #GtkTreeView by assuming that all rows have the same height.
     * Only enable this option if all rows are the same height.
     * Please see gtk_tree_view_set_fixed_height_mode() for more
     * information on this option.
     */
    fixedHeightMode: boolean
    hadjustment: Adjustment
    headersClickable: boolean
    headersVisible: boolean
    /**
     * Enables of disables the hover expansion mode of `tree_view`.
     * Hover expansion makes rows expand or collapse if the pointer moves
     * over them.
     * 
     * This mode is primarily intended for treeviews in popups, e.g.
     * in #GtkComboBox or #GtkEntryCompletion.
     */
    hoverExpand: boolean
    /**
     * Enables of disables the hover selection mode of `tree_view`.
     * Hover selection makes the selected row follow the pointer.
     * Currently, this works only for the selection modes
     * %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
     * 
     * This mode is primarily intended for treeviews in popups, e.g.
     * in #GtkComboBox or #GtkEntryCompletion.
     */
    hoverSelection: boolean
    /**
     * Extra indentation for each level.
     */
    levelIndentation: number
    model: TreeModel
    reorderable: boolean
    rubberBanding: boolean
    rulesHint: boolean
    searchColumn: number
    /**
     * %TRUE if the view has expanders.
     */
    showExpanders: boolean
    tooltipColumn: number
    vadjustment: Adjustment

    // Own fields of Gtk-2.0.Gtk.TreeView

    parent: Container & Widget
    priv: TreeViewPrivate

    // Owm methods of Gtk-2.0.Gtk.TreeView

    /**
     * Appends `column` to the list of columns. If `tree_view` has "fixed_height"
     * mode enabled, then `column` must have its "sizing" property set to be
     * GTK_TREE_VIEW_COLUMN_FIXED.
     * @param column The #GtkTreeViewColumn to add.
     */
    appendColumn(column: TreeViewColumn): number
    /**
     * Recursively collapses all visible, expanded nodes in `tree_view`.
     */
    collapseAll(): void
    /**
     * Collapses a row (hides its child rows, if they exist).
     * @param path path to a row in the `tree_view`
     */
    collapseRow(path: TreePath): boolean
    /**
     * Resizes all columns to their optimal width. Only works after the
     * treeview has been realized.
     */
    columnsAutosize(): void
    /**
     * Converts bin_window coordinates to coordinates for the
     * tree (the full scrollable area of the tree).
     * @param bx X coordinate relative to bin_window
     * @param by Y coordinate relative to bin_window
     */
    convertBinWindowToTreeCoords(bx: number, by: number): [ /* tx */ number, /* ty */ number ]
    /**
     * Converts bin_window coordinates (see gtk_tree_view_get_bin_window())
     * to widget relative coordinates.
     * @param bx bin_window X coordinate
     * @param by bin_window Y coordinate
     */
    convertBinWindowToWidgetCoords(bx: number, by: number): [ /* wx */ number, /* wy */ number ]
    /**
     * Converts tree coordinates (coordinates in full scrollable area of the tree)
     * to bin_window coordinates.
     * @param tx tree X coordinate
     * @param ty tree Y coordinate
     */
    convertTreeToBinWindowCoords(tx: number, ty: number): [ /* bx */ number, /* by */ number ]
    /**
     * Converts tree coordinates (coordinates in full scrollable area of the tree)
     * to widget coordinates.
     * @param tx X coordinate relative to the tree
     * @param ty Y coordinate relative to the tree
     */
    convertTreeToWidgetCoords(tx: number, ty: number): [ /* wx */ number, /* wy */ number ]
    /**
     * Converts widget coordinates to coordinates for the bin_window
     * (see gtk_tree_view_get_bin_window()).
     * @param wx X coordinate relative to the widget
     * @param wy Y coordinate relative to the widget
     */
    convertWidgetToBinWindowCoords(wx: number, wy: number): [ /* bx */ number, /* by */ number ]
    /**
     * Converts widget coordinates to coordinates for the
     * tree (the full scrollable area of the tree).
     * @param wx X coordinate relative to the widget
     * @param wy Y coordinate relative to the widget
     */
    convertWidgetToTreeCoords(wx: number, wy: number): [ /* tx */ number, /* ty */ number ]
    /**
     * Creates a #GdkPixmap representation of the row at `path`.
     * This image is used for a drag icon.
     * @param path a #GtkTreePath in `tree_view`
     */
    createRowDragIcon(path: TreePath): Gdk.Pixmap
    /**
     * Turns `tree_view` into a drop destination for automatic DND. Calling
     * this method sets #GtkTreeView:reorderable to %FALSE.
     * @param targets the table of targets that the drag will support
     * @param actions the bitmask of possible actions for a drag from this    widget
     */
    enableModelDragDest(targets: TargetEntry[], actions: Gdk.DragAction): void
    /**
     * Turns `tree_view` into a drag source for automatic DND. Calling this
     * method sets #GtkTreeView:reorderable to %FALSE.
     * @param startButtonMask Mask of allowed buttons to start drag
     * @param targets the table of targets that the drag will support
     * @param actions the bitmask of possible actions for a drag from this    widget
     */
    enableModelDragSource(startButtonMask: Gdk.ModifierType, targets: TargetEntry[], actions: Gdk.DragAction): void
    /**
     * Recursively expands all nodes in the `tree_view`.
     */
    expandAll(): void
    /**
     * Opens the row so its children are visible.
     * @param path path to a row
     * @param openAll whether to recursively expand, or just expand immediate children
     */
    expandRow(path: TreePath, openAll: boolean): boolean
    /**
     * Expands the row at `path`. This will also expand all parent rows of
     * `path` as necessary.
     * @param path path to a row.
     */
    expandToPath(path: TreePath): void
    /**
     * Fills the bounding rectangle in bin_window coordinates for the cell at the
     * row specified by `path` and the column specified by `column`.  If `path` is
     * %NULL, or points to a node not found in the tree, the `y` and `height` fields of
     * the rectangle will be filled with 0. If `column` is %NULL, the `x` and `width`
     * fields will be filled with 0.  The returned rectangle is equivalent to the
     * `background_area` passed to gtk_cell_renderer_render().  These background
     * areas tile to cover the entire bin window.  Contrast with the `cell_area,`
     * returned by gtk_tree_view_get_cell_area(), which returns only the cell
     * itself, excluding surrounding borders and the tree expander area.
     * @param path a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
     * @param column a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordiantes
     */
    getBackgroundArea(path: TreePath | null, column: TreeViewColumn | null): /* rect */ Gdk.Rectangle
    /**
     * Returns the window that `tree_view` renders to.
     * This is used primarily to compare to <literal>event->window</literal>
     * to confirm that the event on `tree_view` is on the right window.
     */
    getBinWindow(): Gdk.Window
    /**
     * Fills the bounding rectangle in bin_window coordinates for the cell at the
     * row specified by `path` and the column specified by `column`.  If `path` is
     * %NULL, or points to a path not currently displayed, the `y` and `height` fields
     * of the rectangle will be filled with 0. If `column` is %NULL, the `x` and `width`
     * fields will be filled with 0.  The sum of all cell rects does not cover the
     * entire tree; there are extra pixels in between rows, for example. The
     * returned rectangle is equivalent to the `cell_area` passed to
     * gtk_cell_renderer_render().  This function is only valid if `tree_view` is
     * realized.
     * @param path a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
     * @param column a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordinates
     */
    getCellArea(path: TreePath | null, column: TreeViewColumn | null): /* rect */ Gdk.Rectangle
    /**
     * Gets the #GtkTreeViewColumn at the given position in the #tree_view.
     * @param n The position of the column, counting from 0.
     */
    getColumn(n: number): TreeViewColumn
    /**
     * Returns a #GList of all the #GtkTreeViewColumn s currently in `tree_view`.
     * The returned list must be freed with g_list_free ().
     */
    getColumns(): TreeViewColumn[]
    /**
     * Fills in `path` and `focus_column` with the current path and focus column.  If
     * the cursor isn't currently set, then *`path` will be %NULL.  If no column
     * currently has focus, then *`focus_column` will be %NULL.
     * 
     * The returned #GtkTreePath must be freed with gtk_tree_path_free() when
     * you are done with it.
     */
    getCursor(): [ /* path */ TreePath, /* focusColumn */ TreeViewColumn ]
    /**
     * Determines the destination row for a given position.  `drag_x` and
     * `drag_y` are expected to be in widget coordinates.  This function is only
     * meaningful if `tree_view` is realized.  Therefore this function will always
     * return %FALSE if `tree_view` is not realized or does not have a model.
     * @param dragX the position to determine the destination row for
     * @param dragY the position to determine the destination row for
     */
    getDestRowAtPos(dragX: number, dragY: number): [ /* returnType */ boolean, /* path */ TreePath, /* pos */ TreeViewDropPosition ]
    /**
     * Gets information about the row that is highlighted for feedback.
     */
    getDragDestRow(): [ /* path */ TreePath, /* pos */ TreeViewDropPosition ]
    /**
     * Returns whether or not the tree allows to start interactive searching
     * by typing in text.
     */
    getEnableSearch(): boolean
    /**
     * Returns whether or not tree lines are drawn in `tree_view`.
     */
    getEnableTreeLines(): boolean
    /**
     * Returns the column that is the current expander column.
     * This column has the expander arrow drawn next to it.
     */
    getExpanderColumn(): TreeViewColumn
    /**
     * Returns whether fixed height mode is turned on for `tree_view`.
     */
    getFixedHeightMode(): boolean
    /**
     * Returns which grid lines are enabled in `tree_view`.
     */
    getGridLines(): TreeViewGridLines
    /**
     * Gets the #GtkAdjustment currently being used for the horizontal aspect.
     */
    getHadjustment(): Adjustment
    /**
     * Returns whether all header columns are clickable.
     */
    getHeadersClickable(): boolean
    /**
     * Returns %TRUE if the headers on the `tree_view` are visible.
     */
    getHeadersVisible(): boolean
    /**
     * Returns whether hover expansion mode is turned on for `tree_view`.
     */
    getHoverExpand(): boolean
    /**
     * Returns whether hover selection mode is turned on for `tree_view`.
     */
    getHoverSelection(): boolean
    /**
     * Returns the amount, in pixels, of extra indentation for child levels
     * in `tree_view`.
     */
    getLevelIndentation(): number
    /**
     * Returns the model the #GtkTreeView is based on.  Returns %NULL if the
     * model is unset.
     */
    getModel(): TreeModel
    /**
     * Finds the path at the point (`x,` `y)`, relative to bin_window coordinates
     * (please see gtk_tree_view_get_bin_window()).
     * That is, `x` and `y` are relative to an events coordinates. `x` and `y` must
     * come from an event on the `tree_view` only where <literal>event->window ==
     * gtk_tree_view_get_bin_window (<!-- -->)</literal>. It is primarily for
     * things like popup menus. If `path` is non-%NULL, then it will be filled
     * with the #GtkTreePath at that point.  This path should be freed with
     * gtk_tree_path_free().  If `column` is non-%NULL, then it will be filled
     * with the column at that point.  `cell_x` and `cell_y` return the coordinates
     * relative to the cell background (i.e. the `background_area` passed to
     * gtk_cell_renderer_render()).  This function is only meaningful if
     * `tree_view` is realized.  Therefore this function will always return %FALSE
     * if `tree_view` is not realized or does not have a model.
     * 
     * For converting widget coordinates (eg. the ones you get from
     * GtkWidget::query-tooltip), please see
     * gtk_tree_view_convert_widget_to_bin_window_coords().
     * @param x The x position to be identified (relative to bin_window).
     * @param y The y position to be identified (relative to bin_window).
     */
    getPathAtPos(x: number, y: number): [ /* returnType */ boolean, /* path */ TreePath, /* column */ TreeViewColumn, /* cellX */ number, /* cellY */ number ]
    /**
     * Retrieves whether the user can reorder the tree via drag-and-drop. See
     * gtk_tree_view_set_reorderable().
     */
    getReorderable(): boolean
    /**
     * Returns whether rubber banding is turned on for `tree_view`.  If the
     * selection mode is #GTK_SELECTION_MULTIPLE, rubber banding will allow the
     * user to select multiple rows by dragging the mouse.
     */
    getRubberBanding(): boolean
    /**
     * Gets the setting set by gtk_tree_view_set_rules_hint().
     */
    getRulesHint(): boolean
    /**
     * Gets the column searched on by the interactive search code.
     */
    getSearchColumn(): number
    /**
     * Returns the #GtkEntry which is currently in use as interactive search
     * entry for `tree_view`.  In case the built-in entry is being used, %NULL
     * will be returned.
     */
    getSearchEntry(): Entry
    /**
     * Gets the #GtkTreeSelection associated with `tree_view`.
     */
    getSelection(): TreeSelection
    /**
     * Returns whether or not expanders are drawn in `tree_view`.
     */
    getShowExpanders(): boolean
    /**
     * Returns the column of `tree_view'`s model which is being used for
     * displaying tooltips on `tree_view'`s rows.
     */
    getTooltipColumn(): number
    /**
     * This function is supposed to be used in a #GtkWidget::query-tooltip
     * signal handler for #GtkTreeView.  The `x,` `y` and `keyboard_tip` values
     * which are received in the signal handler, should be passed to this
     * function without modification.
     * 
     * The return value indicates whether there is a tree view row at the given
     * coordinates (%TRUE) or not (%FALSE) for mouse tooltips.  For keyboard
     * tooltips the row returned will be the cursor row.  When %TRUE, then any of
     * `model,` `path` and `iter` which have been provided will be set to point to
     * that row and the corresponding model.  `x` and `y` will always be converted
     * to be relative to `tree_view'`s bin_window if `keyboard_tooltip` is %FALSE.
     * @param x the x coordinate (relative to widget coordinates)
     * @param y the y coordinate (relative to widget coordinates)
     * @param keyboardTip whether this is a keyboard tooltip or not
     */
    getTooltipContext(x: number, y: number, keyboardTip: boolean): [ /* returnType */ boolean, /* x */ number, /* y */ number, /* model */ TreeModel, /* path */ TreePath, /* iter */ TreeIter ]
    /**
     * Gets the #GtkAdjustment currently being used for the vertical aspect.
     */
    getVadjustment(): Adjustment
    /**
     * Sets `start_path` and `end_path` to be the first and last visible path.
     * Note that there may be invisible paths in between.
     * 
     * The paths should be freed with gtk_tree_path_free() after use.
     */
    getVisibleRange(): [ /* returnType */ boolean, /* startPath */ TreePath, /* endPath */ TreePath ]
    /**
     * Fills `visible_rect` with the currently-visible region of the
     * buffer, in tree coordinates. Convert to bin_window coordinates with
     * gtk_tree_view_convert_tree_to_bin_window_coords().
     * Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
     * scrollable area of the tree.
     */
    getVisibleRect(): /* visibleRect */ Gdk.Rectangle
    /**
     * This inserts the `column` into the `tree_view` at `position`.  If `position` is
     * -1, then the column is inserted at the end. If `tree_view` has
     * "fixed_height" mode enabled, then `column` must have its "sizing" property
     * set to be GTK_TREE_VIEW_COLUMN_FIXED.
     * @param column The #GtkTreeViewColumn to be inserted.
     * @param position The position to insert `column` in.
     */
    insertColumn(column: TreeViewColumn, position: number): number
    /**
     * Convenience function that inserts a new column into the #GtkTreeView
     * with the given cell renderer and a #GtkCellDataFunc to set cell renderer
     * attributes (normally using data from the model). See also
     * gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
     * If `tree_view` has "fixed_height" mode enabled, then the new column will have its
     * "sizing" property set to be GTK_TREE_VIEW_COLUMN_FIXED.
     * @param position Position to insert, -1 for append
     * @param title column title
     * @param cell cell renderer for column
     * @param func function to set attributes of cell renderer
     */
    insertColumnWithDataFunc(position: number, title: string, cell: CellRenderer, func: TreeCellDataFunc): number
    /**
     * Returns whether a rubber banding operation is currently being done
     * in `tree_view`.
     */
    isRubberBandingActive(): boolean
    /**
     * Calls `func` on all expanded rows.
     * @param func A function to be called
     */
    mapExpandedRows(func: TreeViewMappingFunc): void
    /**
     * Moves `column` to be after to `base_column`.  If `base_column` is %NULL, then
     * `column` is placed in the first position.
     * @param column The #GtkTreeViewColumn to be moved.
     * @param baseColumn The #GtkTreeViewColumn to be moved relative to, or %NULL.
     */
    moveColumnAfter(column: TreeViewColumn, baseColumn: TreeViewColumn | null): void
    /**
     * Removes `column` from `tree_view`.
     * @param column The #GtkTreeViewColumn to remove.
     */
    removeColumn(column: TreeViewColumn): number
    // Has conflict: rowActivated(path: TreePath, column: TreeViewColumn): void
    // Has conflict: rowExpanded(path: TreePath): boolean
    /**
     * Moves the alignments of `tree_view` to the position specified by `column` and
     * `path`.  If `column` is %NULL, then no horizontal scrolling occurs.  Likewise,
     * if `path` is %NULL no vertical scrolling occurs.  At a minimum, one of `column`
     * or `path` need to be non-%NULL.  `row_align` determines where the row is
     * placed, and `col_align` determines where `column` is placed.  Both are expected
     * to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
     * right/bottom alignment, 0.5 means center.
     * 
     * If `use_align` is %FALSE, then the alignment arguments are ignored, and the
     * tree does the minimum amount of work to scroll the cell onto the screen.
     * This means that the cell will be scrolled to the edge closest to its current
     * position.  If the cell is currently visible on the screen, nothing is done.
     * 
     * This function only works if the model is set, and `path` is a valid row on the
     * model.  If the model changes before the `tree_view` is realized, the centered
     * path will be modified to reflect this change.
     * @param path The path of the row to move to, or %NULL.
     * @param column The #GtkTreeViewColumn to move horizontally to, or %NULL.
     * @param useAlign whether to use alignment arguments, or %FALSE.
     * @param rowAlign The vertical alignment of the row specified by `path`.
     * @param colAlign The horizontal alignment of the column specified by `column`.
     */
    scrollToCell(path: TreePath | null, column: TreeViewColumn | null, useAlign: boolean, rowAlign: number, colAlign: number): void
    /**
     * Scrolls the tree view such that the top-left corner of the visible
     * area is `tree_x,` `tree_y,` where `tree_x` and `tree_y` are specified
     * in tree coordinates.  The `tree_view` must be realized before
     * this function is called.  If it isn't, you probably want to be
     * using gtk_tree_view_scroll_to_cell().
     * 
     * If either `tree_x` or `tree_y` are -1, then that direction isn't scrolled.
     * @param treeX X coordinate of new top-left pixel of visible area, or -1
     * @param treeY Y coordinate of new top-left pixel of visible area, or -1
     */
    scrollToPoint(treeX: number, treeY: number): void
    /**
     * Sets a user function for determining where a column may be dropped when
     * dragged.  This function is called on every column pair in turn at the
     * beginning of a column drag to determine where a drop can take place.  The
     * arguments passed to `func` are: the `tree_view,` the #GtkTreeViewColumn being
     * dragged, the two #GtkTreeViewColumn s determining the drop spot, and
     * `user_data`.  If either of the #GtkTreeViewColumn arguments for the drop spot
     * are %NULL, then they indicate an edge.  If `func` is set to be %NULL, then
     * `tree_view` reverts to the default behavior of allowing all columns to be
     * dropped everywhere.
     * @param func A function to determine which columns are reorderable, or %NULL.
     */
    setColumnDragFunction(func: TreeViewColumnDropFunc | null): void
    /**
     * Sets the current keyboard focus to be at `path,` and selects it.  This is
     * useful when you want to focus the user's attention on a particular row.  If
     * `focus_column` is not %NULL, then focus is given to the column specified by
     * it. Additionally, if `focus_column` is specified, and `start_editing` is
     * %TRUE, then editing should be started in the specified cell.
     * This function is often followed by `gtk_widget_grab_focus` (`tree_view)`
     * in order to give keyboard focus to the widget.  Please note that editing
     * can only happen when the widget is realized.
     * 
     * If `path` is invalid for `model,` the current cursor (if any) will be unset
     * and the function will return without failing.
     * @param path A #GtkTreePath
     * @param focusColumn A #GtkTreeViewColumn, or %NULL
     * @param startEditing %TRUE if the specified cell should start being edited.
     */
    setCursor(path: TreePath, focusColumn: TreeViewColumn | null, startEditing: boolean): void
    /**
     * Sets the current keyboard focus to be at `path,` and selects it.  This is
     * useful when you want to focus the user's attention on a particular row.  If
     * `focus_column` is not %NULL, then focus is given to the column specified by
     * it. If `focus_column` and `focus_cell` are not %NULL, and `focus_column`
     * contains 2 or more editable or activatable cells, then focus is given to
     * the cell specified by `focus_cell`. Additionally, if `focus_column` is
     * specified, and `start_editing` is %TRUE, then editing should be started in
     * the specified cell.  This function is often followed by
     * `gtk_widget_grab_focus` (`tree_view)` in order to give keyboard focus to the
     * widget.  Please note that editing can only happen when the widget is
     * realized.
     * 
     * If `path` is invalid for `model,` the current cursor (if any) will be unset
     * and the function will return without failing.
     * @param path A #GtkTreePath
     * @param focusColumn A #GtkTreeViewColumn, or %NULL
     * @param focusCell A #GtkCellRenderer, or %NULL
     * @param startEditing %TRUE if the specified cell should start being edited.
     */
    setCursorOnCell(path: TreePath, focusColumn: TreeViewColumn | null, focusCell: CellRenderer | null, startEditing: boolean): void
    /**
     * This function should almost never be used.  It is meant for private use by
     * ATK for determining the number of visible children that are removed when the
     * user collapses a row, or a row is deleted.
     * @param func Function to be called when a view row is destroyed, or %NULL
     */
    setDestroyCountFunc(func: TreeDestroyCountFunc | null): void
    /**
     * Sets the row that is highlighted for feedback.
     * @param path The path of the row to highlight, or %NULL.
     * @param pos Specifies whether to drop before, after or into the row
     */
    setDragDestRow(path: TreePath | null, pos: TreeViewDropPosition): void
    /**
     * If `enable_search` is set, then the user can type in text to search through
     * the tree interactively (this is sometimes called "typeahead find").
     * 
     * Note that even if this is %FALSE, the user can still initiate a search
     * using the "start-interactive-search" key binding.
     * @param enableSearch %TRUE, if the user can search interactively
     */
    setEnableSearch(enableSearch: boolean): void
    /**
     * Sets whether to draw lines interconnecting the expanders in `tree_view`.
     * This does not have any visible effects for lists.
     * @param enabled %TRUE to enable tree line drawing, %FALSE otherwise.
     */
    setEnableTreeLines(enabled: boolean): void
    /**
     * Sets the column to draw the expander arrow at. It must be in `tree_view`.
     * If `column` is %NULL, then the expander arrow is always at the first
     * visible column.
     * 
     * If you do not want expander arrow to appear in your tree, set the
     * expander column to a hidden column.
     * @param column %NULL, or the column to draw the expander arrow at.
     */
    setExpanderColumn(column: TreeViewColumn): void
    /**
     * Enables or disables the fixed height mode of `tree_view`.
     * Fixed height mode speeds up #GtkTreeView by assuming that all
     * rows have the same height.
     * Only enable this option if all rows are the same height and all
     * columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.
     * @param enable %TRUE to enable fixed height mode
     */
    setFixedHeightMode(enable: boolean): void
    /**
     * Sets which grid lines to draw in `tree_view`.
     * @param gridLines a #GtkTreeViewGridLines value indicating which grid lines to enable.
     */
    setGridLines(gridLines: TreeViewGridLines): void
    /**
     * Sets the #GtkAdjustment for the current horizontal aspect.
     * @param adjustment The #GtkAdjustment to set, or %NULL
     */
    setHadjustment(adjustment: Adjustment | null): void
    /**
     * Allow the column title buttons to be clicked.
     * @param setting %TRUE if the columns are clickable.
     */
    setHeadersClickable(setting: boolean): void
    /**
     * Sets the visibility state of the headers.
     * @param headersVisible %TRUE if the headers are visible
     */
    setHeadersVisible(headersVisible: boolean): void
    /**
     * Enables of disables the hover expansion mode of `tree_view`.
     * Hover expansion makes rows expand or collapse if the pointer
     * moves over them.
     * @param expand %TRUE to enable hover selection mode
     */
    setHoverExpand(expand: boolean): void
    /**
     * Enables of disables the hover selection mode of `tree_view`.
     * Hover selection makes the selected row follow the pointer.
     * Currently, this works only for the selection modes
     * %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
     * @param hover %TRUE to enable hover selection mode
     */
    setHoverSelection(hover: boolean): void
    /**
     * Sets the amount of extra indentation for child levels to use in `tree_view`
     * in addition to the default indentation.  The value should be specified in
     * pixels, a value of 0 disables this feature and in this case only the default
     * indentation will be used.
     * This does not have any visible effects for lists.
     * @param indentation the amount, in pixels, of extra indentation in `tree_view`.
     */
    setLevelIndentation(indentation: number): void
    /**
     * Sets the model for a #GtkTreeView.  If the `tree_view` already has a model
     * set, it will remove it before setting the new model.  If `model` is %NULL,
     * then it will unset the old model.
     * @param model The model.
     */
    setModel(model: TreeModel | null): void
    /**
     * This function is a convenience function to allow you to reorder
     * models that support the #GtkDragSourceIface and the
     * #GtkDragDestIface.  Both #GtkTreeStore and #GtkListStore support
     * these.  If `reorderable` is %TRUE, then the user can reorder the
     * model by dragging and dropping rows. The developer can listen to
     * these changes by connecting to the model's row_inserted and
     * row_deleted signals. The reordering is implemented by setting up
     * the tree view as a drag source and destination. Therefore, drag and
     * drop can not be used in a reorderable view for any other purpose.
     * 
     * This function does not give you any degree of control over the order -- any
     * reordering is allowed.  If more control is needed, you should probably
     * handle drag and drop manually.
     * @param reorderable %TRUE, if the tree can be reordered.
     */
    setReorderable(reorderable: boolean): void
    /**
     * Sets the row separator function, which is used to determine
     * whether a row should be drawn as a separator. If the row separator
     * function is %NULL, no separators are drawn. This is the default value.
     * @param func a #GtkTreeViewRowSeparatorFunc
     */
    setRowSeparatorFunc(func: TreeViewRowSeparatorFunc): void
    /**
     * Enables or disables rubber banding in `tree_view`.  If the selection mode
     * is #GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select
     * multiple rows by dragging the mouse.
     * @param enable %TRUE to enable rubber banding
     */
    setRubberBanding(enable: boolean): void
    /**
     * This function tells GTK+ that the user interface for your
     * application requires users to read across tree rows and associate
     * cells with one another. By default, GTK+ will then render the tree
     * with alternating row colors. Do <emphasis>not</emphasis> use it
     * just because you prefer the appearance of the ruled tree; that's a
     * question for the theme. Some themes will draw tree rows in
     * alternating colors even when rules are turned off, and users who
     * prefer that appearance all the time can choose those themes. You
     * should call this function only as a <emphasis>semantic</emphasis>
     * hint to the theme engine that your tree makes alternating colors
     * useful from a functional standpoint (since it has lots of columns,
     * generally).
     * @param setting %TRUE if the tree requires reading across rows
     */
    setRulesHint(setting: boolean): void
    /**
     * Sets `column` as the column where the interactive search code should
     * search in for the current model.
     * 
     * If the search column is set, users can use the "start-interactive-search"
     * key binding to bring up search popup. The enable-search property controls
     * whether simply typing text will also start an interactive search.
     * 
     * Note that `column` refers to a column of the current model. The search
     * column is reset to -1 when the model is changed.
     * @param column the column of the model to search in, or -1 to disable searching
     */
    setSearchColumn(column: number): void
    /**
     * Sets the entry which the interactive search code will use for this
     * `tree_view`.  This is useful when you want to provide a search entry
     * in our interface at all time at a fixed position.  Passing %NULL for
     * `entry` will make the interactive search code use the built-in popup
     * entry again.
     * @param entry the entry the interactive search code of `tree_view` should use or %NULL
     */
    setSearchEntry(entry: Entry | null): void
    /**
     * Sets the compare function for the interactive search capabilities; note
     * that somewhat like strcmp() returning 0 for equality
     * #GtkTreeViewSearchEqualFunc returns %FALSE on matches.
     * @param searchEqualFunc the compare function to use during the search
     */
    setSearchEqualFunc(searchEqualFunc: TreeViewSearchEqualFunc): void
    /**
     * Sets the function to use when positioning the search dialog.
     * @param func the function to use to position the search dialog, or %NULL    to use the default search position function
     */
    setSearchPositionFunc(func: TreeViewSearchPositionFunc | null): void
    /**
     * Sets whether to draw and enable expanders and indent child rows in
     * `tree_view`.  When disabled there will be no expanders visible in trees
     * and there will be no way to expand and collapse rows by default.  Also
     * note that hiding the expanders will disable the default indentation.  You
     * can set a custom indentation in this case using
     * gtk_tree_view_set_level_indentation().
     * This does not have any visible effects for lists.
     * @param enabled %TRUE to enable expander drawing, %FALSE otherwise.
     */
    setShowExpanders(enabled: boolean): void
    /**
     * Sets the tip area of `tooltip` to the area `path,` `column` and `cell` have
     * in common.  For example if `path` is %NULL and `column` is set, the tip
     * area will be set to the full area covered by `column`.  See also
     * gtk_tooltip_set_tip_area().
     * 
     * Note that if `path` is not specified and `cell` is set and part of a column
     * containing the expander, the tooltip might not show and hide at the correct
     * position.  In such cases `path` must be set to the current node under the
     * mouse cursor for this function to operate correctly.
     * 
     * See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
     * @param tooltip a #GtkTooltip
     * @param path a #GtkTreePath or %NULL
     * @param column a #GtkTreeViewColumn or %NULL
     * @param cell a #GtkCellRenderer or %NULL
     */
    setTooltipCell(tooltip: Tooltip, path: TreePath | null, column: TreeViewColumn | null, cell: CellRenderer | null): void
    /**
     * If you only plan to have simple (text-only) tooltips on full rows, you
     * can use this function to have #GtkTreeView handle these automatically
     * for you. `column` should be set to the column in `tree_view'`s model
     * containing the tooltip texts, or -1 to disable this feature.
     * 
     * When enabled, #GtkWidget::has-tooltip will be set to %TRUE and
     * `tree_view` will connect a #GtkWidget::query-tooltip signal handler.
     * 
     * Note that the signal handler sets the text with gtk_tooltip_set_markup(),
     * so &amp;, &lt;, etc have to be escaped in the text.
     * @param column an integer, which is a valid column number for `tree_view'`s model
     */
    setTooltipColumn(column: number): void
    /**
     * Sets the tip area of `tooltip` to be the area covered by the row at `path`.
     * See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
     * See also gtk_tooltip_set_tip_area().
     * @param tooltip a #GtkTooltip
     * @param path a #GtkTreePath
     */
    setTooltipRow(tooltip: Tooltip, path: TreePath): void
    /**
     * Sets the #GtkAdjustment for the current vertical aspect.
     * @param adjustment The #GtkAdjustment to set, or %NULL
     */
    setVadjustment(adjustment: Adjustment | null): void
    /**
     * Converts tree coordinates (coordinates in full scrollable area of the tree)
     * to bin_window coordinates.
     * @param tx tree X coordinate
     * @param ty tree Y coordinate
     * @param wx return location for X coordinate relative to bin_window
     * @param wy return location for Y coordinate relative to bin_window
     */
    treeToWidgetCoords(tx: number, ty: number, wx: number, wy: number): void
    /**
     * Undoes the effect of
     * gtk_tree_view_enable_model_drag_dest(). Calling this method sets
     * #GtkTreeView:reorderable to %FALSE.
     */
    unsetRowsDragDest(): void
    /**
     * Undoes the effect of
     * gtk_tree_view_enable_model_drag_source(). Calling this method sets
     * #GtkTreeView:reorderable to %FALSE.
     */
    unsetRowsDragSource(): void
    /**
     * Converts bin_window coordinates to coordinates for the
     * tree (the full scrollable area of the tree).
     * @param wx X coordinate relative to bin_window
     * @param wy Y coordinate relative to bin_window
     * @param tx return location for tree X coordinate
     * @param ty return location for tree Y coordinate
     */
    widgetToTreeCoords(wx: number, wy: number, tx: number, ty: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.TreeView

    columnsChanged(): void
    cursorChanged(): void
    expandCollapseCursorRow(logical: boolean, expand: boolean, openAll: boolean): boolean
    moveCursor(step: MovementStep, count: number): boolean
    /**
     * Activates the cell determined by `path` and `column`.
     * @virtual 
     * @param path The #GtkTreePath to be activated.
     * @param column The #GtkTreeViewColumn to be activated.
     */
    rowActivated(path: TreePath, column: TreeViewColumn): void
    rowCollapsed(iter: TreeIter, path: TreePath): void
    rowExpanded(iter: TreeIter, path: TreePath): void
    selectAll(): boolean
    selectCursorParent(): boolean
    selectCursorRow(startEditing: boolean): boolean
    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean
    startInteractiveSearch(): boolean
    testCollapseRow(iter: TreeIter, path: TreePath): boolean
    testExpandRow(iter: TreeIter, path: TreePath): boolean
    toggleCursorRow(): boolean
    unselectAll(): boolean

    // Own signals of Gtk-2.0.Gtk.TreeView

    connect(sigName: "columns-changed", callback: TreeView.ColumnsChangedSignalCallback): number
    on(sigName: "columns-changed", callback: TreeView.ColumnsChangedSignalCallback): number
    once(sigName: "columns-changed", callback: TreeView.ColumnsChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "columns-changed", ...args: any[]): void
    connect(sigName: "cursor-changed", callback: TreeView.CursorChangedSignalCallback): number
    on(sigName: "cursor-changed", callback: TreeView.CursorChangedSignalCallback): number
    once(sigName: "cursor-changed", callback: TreeView.CursorChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "cursor-changed", ...args: any[]): void
    connect(sigName: "expand-collapse-cursor-row", callback: TreeView.ExpandCollapseCursorRowSignalCallback): number
    on(sigName: "expand-collapse-cursor-row", callback: TreeView.ExpandCollapseCursorRowSignalCallback): number
    once(sigName: "expand-collapse-cursor-row", callback: TreeView.ExpandCollapseCursorRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "expand-collapse-cursor-row", p0: boolean, p1: boolean, ...args: any[]): void
    connect(sigName: "move-cursor", callback: TreeView.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: TreeView.MoveCursorSignalCallback): number
    once(sigName: "move-cursor", callback: TreeView.MoveCursorSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-cursor", p0: number, ...args: any[]): void
    connect(sigName: "row-activated", callback: TreeView.RowActivatedSignalCallback): number
    on(sigName: "row-activated", callback: TreeView.RowActivatedSignalCallback): number
    once(sigName: "row-activated", callback: TreeView.RowActivatedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-activated", column: TreeViewColumn, ...args: any[]): void
    connect(sigName: "row-collapsed", callback: TreeView.RowCollapsedSignalCallback): number
    on(sigName: "row-collapsed", callback: TreeView.RowCollapsedSignalCallback): number
    once(sigName: "row-collapsed", callback: TreeView.RowCollapsedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-collapsed", path: TreePath, ...args: any[]): void
    connect(sigName: "row-expanded", callback: TreeView.RowExpandedSignalCallback): number
    on(sigName: "row-expanded", callback: TreeView.RowExpandedSignalCallback): number
    once(sigName: "row-expanded", callback: TreeView.RowExpandedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "row-expanded", path: TreePath, ...args: any[]): void
    connect(sigName: "select-all", callback: TreeView.SelectAllSignalCallback): number
    on(sigName: "select-all", callback: TreeView.SelectAllSignalCallback): number
    once(sigName: "select-all", callback: TreeView.SelectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-all", ...args: any[]): void
    connect(sigName: "select-cursor-parent", callback: TreeView.SelectCursorParentSignalCallback): number
    on(sigName: "select-cursor-parent", callback: TreeView.SelectCursorParentSignalCallback): number
    once(sigName: "select-cursor-parent", callback: TreeView.SelectCursorParentSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-cursor-parent", ...args: any[]): void
    connect(sigName: "select-cursor-row", callback: TreeView.SelectCursorRowSignalCallback): number
    on(sigName: "select-cursor-row", callback: TreeView.SelectCursorRowSignalCallback): number
    once(sigName: "select-cursor-row", callback: TreeView.SelectCursorRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "select-cursor-row", ...args: any[]): void
    connect(sigName: "set-scroll-adjustments", callback: TreeView.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: TreeView.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: TreeView.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", p0: Adjustment, ...args: any[]): void
    connect(sigName: "start-interactive-search", callback: TreeView.StartInteractiveSearchSignalCallback): number
    on(sigName: "start-interactive-search", callback: TreeView.StartInteractiveSearchSignalCallback): number
    once(sigName: "start-interactive-search", callback: TreeView.StartInteractiveSearchSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "start-interactive-search", ...args: any[]): void
    connect(sigName: "test-collapse-row", callback: TreeView.TestCollapseRowSignalCallback): number
    on(sigName: "test-collapse-row", callback: TreeView.TestCollapseRowSignalCallback): number
    once(sigName: "test-collapse-row", callback: TreeView.TestCollapseRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "test-collapse-row", path: TreePath, ...args: any[]): void
    connect(sigName: "test-expand-row", callback: TreeView.TestExpandRowSignalCallback): number
    on(sigName: "test-expand-row", callback: TreeView.TestExpandRowSignalCallback): number
    once(sigName: "test-expand-row", callback: TreeView.TestExpandRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "test-expand-row", path: TreePath, ...args: any[]): void
    connect(sigName: "toggle-cursor-row", callback: TreeView.ToggleCursorRowSignalCallback): number
    on(sigName: "toggle-cursor-row", callback: TreeView.ToggleCursorRowSignalCallback): number
    once(sigName: "toggle-cursor-row", callback: TreeView.ToggleCursorRowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "toggle-cursor-row", ...args: any[]): void
    connect(sigName: "unselect-all", callback: TreeView.UnselectAllSignalCallback): number
    on(sigName: "unselect-all", callback: TreeView.UnselectAllSignalCallback): number
    once(sigName: "unselect-all", callback: TreeView.UnselectAllSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unselect-all", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TreeView

    connect(sigName: "notify::enable-grid-lines", callback: any): number
    on(sigName: "notify::enable-grid-lines", callback: any): number
    once(sigName: "notify::enable-grid-lines", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::enable-grid-lines", ...args: any[]): void
    connect(sigName: "notify::enable-search", callback: any): number
    on(sigName: "notify::enable-search", callback: any): number
    once(sigName: "notify::enable-search", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::enable-search", ...args: any[]): void
    connect(sigName: "notify::enable-tree-lines", callback: any): number
    on(sigName: "notify::enable-tree-lines", callback: any): number
    once(sigName: "notify::enable-tree-lines", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::enable-tree-lines", ...args: any[]): void
    connect(sigName: "notify::expander-column", callback: any): number
    on(sigName: "notify::expander-column", callback: any): number
    once(sigName: "notify::expander-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::expander-column", ...args: any[]): void
    connect(sigName: "notify::fixed-height-mode", callback: any): number
    on(sigName: "notify::fixed-height-mode", callback: any): number
    once(sigName: "notify::fixed-height-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fixed-height-mode", ...args: any[]): void
    connect(sigName: "notify::hadjustment", callback: any): number
    on(sigName: "notify::hadjustment", callback: any): number
    once(sigName: "notify::hadjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hadjustment", ...args: any[]): void
    connect(sigName: "notify::headers-clickable", callback: any): number
    on(sigName: "notify::headers-clickable", callback: any): number
    once(sigName: "notify::headers-clickable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::headers-clickable", ...args: any[]): void
    connect(sigName: "notify::headers-visible", callback: any): number
    on(sigName: "notify::headers-visible", callback: any): number
    once(sigName: "notify::headers-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::headers-visible", ...args: any[]): void
    connect(sigName: "notify::hover-expand", callback: any): number
    on(sigName: "notify::hover-expand", callback: any): number
    once(sigName: "notify::hover-expand", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hover-expand", ...args: any[]): void
    connect(sigName: "notify::hover-selection", callback: any): number
    on(sigName: "notify::hover-selection", callback: any): number
    once(sigName: "notify::hover-selection", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::hover-selection", ...args: any[]): void
    connect(sigName: "notify::level-indentation", callback: any): number
    on(sigName: "notify::level-indentation", callback: any): number
    once(sigName: "notify::level-indentation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::level-indentation", ...args: any[]): void
    connect(sigName: "notify::model", callback: any): number
    on(sigName: "notify::model", callback: any): number
    once(sigName: "notify::model", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::model", ...args: any[]): void
    connect(sigName: "notify::reorderable", callback: any): number
    on(sigName: "notify::reorderable", callback: any): number
    once(sigName: "notify::reorderable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::reorderable", ...args: any[]): void
    connect(sigName: "notify::rubber-banding", callback: any): number
    on(sigName: "notify::rubber-banding", callback: any): number
    once(sigName: "notify::rubber-banding", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rubber-banding", ...args: any[]): void
    connect(sigName: "notify::rules-hint", callback: any): number
    on(sigName: "notify::rules-hint", callback: any): number
    once(sigName: "notify::rules-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::rules-hint", ...args: any[]): void
    connect(sigName: "notify::search-column", callback: any): number
    on(sigName: "notify::search-column", callback: any): number
    once(sigName: "notify::search-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::search-column", ...args: any[]): void
    connect(sigName: "notify::show-expanders", callback: any): number
    on(sigName: "notify::show-expanders", callback: any): number
    once(sigName: "notify::show-expanders", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-expanders", ...args: any[]): void
    connect(sigName: "notify::tooltip-column", callback: any): number
    on(sigName: "notify::tooltip-column", callback: any): number
    once(sigName: "notify::tooltip-column", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-column", ...args: any[]): void
    connect(sigName: "notify::vadjustment", callback: any): number
    on(sigName: "notify::vadjustment", callback: any): number
    once(sigName: "notify::vadjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::vadjustment", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeView extends Container {

    // Own properties of Gtk-2.0.Gtk.TreeView

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeView

    constructor(config?: TreeView.ConstructorProperties) 
    /**
     * Creates a new #GtkTreeView widget.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkTreeView widget.
     * @constructor 
     */
    static new(): TreeView
    /**
     * Creates a new #GtkTreeView widget with the model initialized to `model`.
     * @constructor 
     * @param model the model.
     */
    static newWithModel(model: TreeModel): TreeView
    _init(config?: TreeView.ConstructorProperties): void
}

export module TreeViewColumn {

    // Signal callback interfaces

    /**
     * Signal callback interface for `clicked`
     */
    export interface ClickedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, CellLayout.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.TreeViewColumn

        alignment?: number | null
        clickable?: boolean | null
        expand?: boolean | null
        fixedWidth?: number | null
        maxWidth?: number | null
        minWidth?: number | null
        reorderable?: boolean | null
        resizable?: boolean | null
        sizing?: TreeViewColumnSizing | null
        /**
         * Logical sort column ID this column sorts on when selected for sorting. Setting the sort column ID makes the column header
         * clickable. Set to %-1 to make the column unsortable.
         */
        sortColumnId?: number | null
        sortIndicator?: boolean | null
        sortOrder?: SortType | null
        spacing?: number | null
        title?: string | null
        visible?: boolean | null
        widget?: Widget | null
    }

}

export interface TreeViewColumn extends Buildable, CellLayout {

    // Own properties of Gtk-2.0.Gtk.TreeViewColumn

    sizing: TreeViewColumnSizing
    sortIndicator: boolean
    widget: Widget

    // Own fields of Gtk-2.0.Gtk.TreeViewColumn

    parent: Object
    treeView: Widget
    button: Widget
    child: Widget
    arrow: Widget
    alignment: Widget
    window: Gdk.Window
    editableWidget: CellEditable
    xalign: number
    propertyChangedSignal: number
    spacing: number
    columnType: TreeViewColumnSizing
    requestedWidth: number
    buttonRequest: number
    resizedWidth: number
    width: number
    fixedWidth: number
    minWidth: number
    maxWidth: number
    dragX: number
    dragY: number
    title: string
    cellList: object[]
    sortClickedSignal: number
    sortColumnChangedSignal: number
    sortColumnId: number
    sortOrder: SortType
    visible: number
    resizable: number
    clickable: number
    dirty: number
    showSortIndicator: number
    maybeReordered: number
    reorderable: number
    useResizedWidth: number
    expand: number

    // Owm methods of Gtk-2.0.Gtk.TreeViewColumn

    /**
     * Adds an attribute mapping to the list in `tree_column`.  The `column` is the
     * column of the model to get a value from, and the `attribute` is the
     * parameter on `cell_renderer` to be set from the value. So for example
     * if column 2 of the model contains strings, you could have the
     * "text" attribute of a #GtkCellRendererText get its values from
     * column 2.
     * @param cellRenderer the #GtkCellRenderer to set attributes on
     * @param attribute An attribute on the renderer
     * @param column The column position on the model to get the attribute from.
     */
    addAttribute(cellRenderer: CellRenderer, attribute: string, column: number): void

    // Overloads of addAttribute

    /**
     * Adds an attribute mapping to the list in `cell_layout`. The `column` is the
     * column of the model to get a value from, and the `attribute` is the
     * parameter on `cell` to be set from the value. So for example if column 2
     * of the model contains strings, you could have the "text" attribute of a
     * #GtkCellRendererText get its values from column 2.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param attribute An attribute on the renderer.
     * @param column The column position on the model to get the attribute from.
     */
    addAttribute(cell: CellRenderer, attribute: string, column: number): void
    /**
     * Obtains the horizontal position and size of a cell in a column. If the
     * cell is not found in the column, `start_pos` and `width` are not changed and
     * %FALSE is returned.
     * @param cellRenderer a #GtkCellRenderer
     * @param startPos return location for the horizontal position of `cell` within            `tree_column,` may be %NULL
     * @param width return location for the width of `cell,` may be %NULL
     */
    cellGetPosition(cellRenderer: CellRenderer, startPos: number, width: number): boolean
    /**
     * Obtains the width and height needed to render the column.  This is used
     * primarily by the #GtkTreeView.
     * @param cellArea The area a cell in the column will be allocated, or %NULL
     */
    cellGetSize(cellArea: Gdk.Rectangle | null): [ /* xOffset */ number, /* yOffset */ number, /* width */ number, /* height */ number ]
    /**
     * Returns %TRUE if any of the cells packed into the `tree_column` are visible.
     * For this to be meaningful, you must first initialize the cells with
     * gtk_tree_view_column_cell_set_cell_data()
     */
    cellIsVisible(): boolean
    /**
     * Sets the cell renderer based on the `tree_model` and `iter`.  That is, for
     * every attribute mapping in `tree_column,` it will get a value from the set
     * column on the `iter,` and use that value to set the attribute on the cell
     * renderer.  This is used primarily by the #GtkTreeView.
     * @param treeModel The #GtkTreeModel to to get the cell renderers attributes from.
     * @param iter The #GtkTreeIter to to get the cell renderer's attributes from.
     * @param isExpander %TRUE, if the row has children
     * @param isExpanded %TRUE, if the row has visible children
     */
    cellSetCellData(treeModel: TreeModel, iter: TreeIter, isExpander: boolean, isExpanded: boolean): void
    /**
     * Unsets all the mappings on all renderers on the `tree_column`.
     */
    clear(): void

    // Overloads of clear

    /**
     * Unsets all the mappings on all renderers on `cell_layout` and
     * removes all renderers from `cell_layout`.
     * @virtual 
     */
    clear(): void
    /**
     * Clears all existing attributes previously set with
     * gtk_tree_view_column_set_attributes().
     * @param cellRenderer a #GtkCellRenderer to clear the attribute mapping on.
     */
    clearAttributes(cellRenderer: CellRenderer): void

    // Overloads of clearAttributes

    /**
     * Clears all existing attributes previously set with
     * gtk_cell_layout_set_attributes().
     * @virtual 
     * @param cell A #GtkCellRenderer to clear the attribute mapping on.
     */
    clearAttributes(cell: CellRenderer): void
    // Has conflict: clicked(): void
    /**
     * Sets the current keyboard focus to be at `cell,` if the column contains
     * 2 or more editable and activatable cells.
     * @param cell A #GtkCellRenderer
     */
    focusCell(cell: CellRenderer): void
    /**
     * Returns the current x alignment of `tree_column`.  This value can range
     * between 0.0 and 1.0.
     */
    getAlignment(): number
    /**
     * Returns %TRUE if the user can click on the header for the column.
     */
    getClickable(): boolean
    /**
     * Return %TRUE if the column expands to take any available space.
     */
    getExpand(): boolean
    /**
     * Gets the fixed width of the column.  This value is only meaning may not be
     * the actual width of the column on the screen, just what is requested.
     */
    getFixedWidth(): number
    /**
     * Returns the maximum width in pixels of the `tree_column,` or -1 if no maximum
     * width is set.
     */
    getMaxWidth(): number
    /**
     * Returns the minimum width in pixels of the `tree_column,` or -1 if no minimum
     * width is set.
     */
    getMinWidth(): number
    /**
     * Returns %TRUE if the `tree_column` can be reordered by the user.
     */
    getReorderable(): boolean
    /**
     * Returns %TRUE if the `tree_column` can be resized by the end user.
     */
    getResizable(): boolean
    /**
     * Returns the current type of `tree_column`.
     */
    getSizing(): TreeViewColumnSizing
    /**
     * Gets the logical `sort_column_id` that the model sorts on when this
     * column is selected for sorting.
     * See gtk_tree_view_column_set_sort_column_id().
     */
    getSortColumnId(): number
    /**
     * Gets the value set by gtk_tree_view_column_set_sort_indicator().
     */
    getSortIndicator(): boolean
    /**
     * Gets the value set by gtk_tree_view_column_set_sort_order().
     */
    getSortOrder(): SortType
    /**
     * Returns the spacing of `tree_column`.
     */
    getSpacing(): number
    /**
     * Returns the title of the widget.
     */
    getTitle(): string
    /**
     * Returns the #GtkTreeView wherein `tree_column` has been inserted.
     * If `column` is currently not inserted in any tree view, %NULL is
     * returned.
     */
    getTreeView(): Widget
    /**
     * Returns %TRUE if `tree_column` is visible.
     */
    getVisible(): boolean
    /**
     * Returns the #GtkWidget in the button on the column header.
     * If a custom widget has not been set then %NULL is returned.
     */
    getWidget(): Widget
    /**
     * Returns the current size of `tree_column` in pixels.
     */
    getWidth(): number
    /**
     * Adds the `cell` to end of the column. If `expand` is %FALSE, then the `cell`
     * is allocated no more space than it needs. Any unused space is divided
     * evenly between cells for which `expand` is %TRUE.
     * @param cell The #GtkCellRenderer.
     * @param expand %TRUE if `cell` is to be given extra space allocated to `tree_column`.
     */
    packEnd(cell: CellRenderer, expand: boolean): void

    // Overloads of packEnd

    /**
     * Adds the `cell` to the end of `cell_layout`. If `expand` is %FALSE, then the
     * `cell` is allocated no more space than it needs. Any unused space is
     * divided evenly between cells for which `expand` is %TRUE.
     * 
     * Note that reusing the same cell renderer is not supported.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param expand %TRUE if `cell` is to be given extra space allocated to `cell_layout`.
     */
    packEnd(cell: CellRenderer, expand: boolean): void
    /**
     * Packs the `cell` into the beginning of the column. If `expand` is %FALSE, then
     * the `cell` is allocated no more space than it needs. Any unused space is divided
     * evenly between cells for which `expand` is %TRUE.
     * @param cell The #GtkCellRenderer.
     * @param expand %TRUE if `cell` is to be given extra space allocated to `tree_column`.
     */
    packStart(cell: CellRenderer, expand: boolean): void

    // Overloads of packStart

    /**
     * Packs the `cell` into the beginning of `cell_layout`. If `expand` is %FALSE,
     * then the `cell` is allocated no more space than it needs. Any unused space
     * is divided evenly between cells for which `expand` is %TRUE.
     * 
     * Note that reusing the same cell renderer is not supported.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param expand %TRUE if `cell` is to be given extra space allocated to `cell_layout`.
     */
    packStart(cell: CellRenderer, expand: boolean): void
    /**
     * Flags the column, and the cell renderers added to this column, to have
     * their sizes renegotiated.
     */
    queueResize(): void
    /**
     * Sets the alignment of the title or custom widget inside the column header.
     * The alignment determines its location inside the button -- 0.0 for left, 0.5
     * for center, 1.0 for right.
     * @param xalign The alignment, which is between [0.0 and 1.0] inclusive.
     */
    setAlignment(xalign: number): void
    /**
     * Sets the #GtkTreeViewColumnFunc to use for the column.  This
     * function is used instead of the standard attributes mapping for
     * setting the column value, and should set the value of `tree_column'`s
     * cell renderer as appropriate.  `func` may be %NULL to remove an
     * older one.
     * @param cellRenderer A #GtkCellRenderer
     * @param func The #GtkTreeViewColumnFunc to use.
     */
    setCellDataFunc(cellRenderer: CellRenderer, func: TreeCellDataFunc): void

    // Overloads of setCellDataFunc

    /**
     * Sets the #GtkCellLayoutDataFunc to use for `cell_layout`. This function
     * is used instead of the standard attributes mapping for setting the
     * column value, and should set the value of `cell_layout'`s cell renderer(s)
     * as appropriate. `func` may be %NULL to remove and older one.
     * @virtual 
     * @param cell A #GtkCellRenderer.
     * @param func The #GtkCellLayoutDataFunc to use.
     */
    setCellDataFunc(cell: CellRenderer, func: CellLayoutDataFunc): void
    /**
     * Sets the header to be active if `active` is %TRUE.  When the header is active,
     * then it can take keyboard focus, and can be clicked.
     * @param clickable %TRUE if the header is active.
     */
    setClickable(clickable: boolean): void
    /**
     * Sets the column to take available extra space.  This space is shared equally
     * amongst all columns that have the expand set to %TRUE.  If no column has this
     * option set, then the last column gets all extra space.  By default, every
     * column is created with this %FALSE.
     * @param expand %TRUE if the column should take available extra space, %FALSE if not
     */
    setExpand(expand: boolean): void
    /**
     * Sets the size of the column in pixels.  This is meaningful only if the sizing
     * type is #GTK_TREE_VIEW_COLUMN_FIXED.  The size of the column is clamped to
     * the min/max width for the column.  Please note that the min/max width of the
     * column doesn't actually affect the "fixed_width" property of the widget, just
     * the actual size when displayed.
     * @param fixedWidth The size to set `tree_column` to. Must be greater than 0.
     */
    setFixedWidth(fixedWidth: number): void
    /**
     * Sets the maximum width of the `tree_column`.  If `max_width` is -1, then the
     * maximum width is unset.  Note, the column can actually be wider than max
     * width if it's the last column in a view.  In this case, the column expands to
     * fill any extra space.
     * @param maxWidth The maximum width of the column in pixels, or -1.
     */
    setMaxWidth(maxWidth: number): void
    /**
     * Sets the minimum width of the `tree_column`.  If `min_width` is -1, then the
     * minimum width is unset.
     * @param minWidth The minimum width of the column in pixels, or -1.
     */
    setMinWidth(minWidth: number): void
    /**
     * If `reorderable` is %TRUE, then the column can be reordered by the end user
     * dragging the header.
     * @param reorderable %TRUE, if the column can be reordered.
     */
    setReorderable(reorderable: boolean): void
    /**
     * If `resizable` is %TRUE, then the user can explicitly resize the column by
     * grabbing the outer edge of the column button.  If resizable is %TRUE and
     * sizing mode of the column is #GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
     * mode is changed to #GTK_TREE_VIEW_COLUMN_GROW_ONLY.
     * @param resizable %TRUE, if the column can be resized
     */
    setResizable(resizable: boolean): void
    /**
     * Sets the growth behavior of `tree_column` to `type`.
     * @param type The #GtkTreeViewColumnSizing.
     */
    setSizing(type: TreeViewColumnSizing): void
    /**
     * Sets the logical `sort_column_id` that this column sorts on when this column
     * is selected for sorting.  Doing so makes the column header clickable.
     * @param sortColumnId The `sort_column_id` of the model to sort on.
     */
    setSortColumnId(sortColumnId: number): void
    /**
     * Call this function with a `setting` of %TRUE to display an arrow in
     * the header button indicating the column is sorted. Call
     * gtk_tree_view_column_set_sort_order() to change the direction of
     * the arrow.
     * @param setting %TRUE to display an indicator that the column is sorted
     */
    setSortIndicator(setting: boolean): void
    /**
     * Changes the appearance of the sort indicator.
     * 
     * This <emphasis>does not</emphasis> actually sort the model.  Use
     * gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
     * support.  This function is primarily for custom sorting behavior, and should
     * be used in conjunction with gtk_tree_sortable_set_sort_column() to do
     * that. For custom models, the mechanism will vary.
     * 
     * The sort indicator changes direction to indicate normal sort or reverse sort.
     * Note that you must have the sort indicator enabled to see anything when
     * calling this function; see gtk_tree_view_column_set_sort_indicator().
     * @param order sort order that the sort indicator should indicate
     */
    setSortOrder(order: SortType): void
    /**
     * Sets the spacing field of `tree_column,` which is the number of pixels to
     * place between cell renderers packed into it.
     * @param spacing distance between cell renderers in pixels.
     */
    setSpacing(spacing: number): void
    /**
     * Sets the title of the `tree_column`.  If a custom widget has been set, then
     * this value is ignored.
     * @param title The title of the `tree_column`.
     */
    setTitle(title: string): void
    /**
     * Sets the visibility of `tree_column`.
     * @param visible %TRUE if the `tree_column` is visible.
     */
    setVisible(visible: boolean): void
    /**
     * Sets the widget in the header to be `widget`.  If widget is %NULL, then the
     * header button is set with a #GtkLabel set to the title of `tree_column`.
     * @param widget A child #GtkWidget, or %NULL.
     */
    setWidget(widget: Widget | null): void

    // Own virtual methods of Gtk-2.0.Gtk.TreeViewColumn

    /**
     * Emits the "clicked" signal on the column.  This function will only work if
     * `tree_column` is clickable.
     * @virtual 
     */
    clicked(): void

    // Own signals of Gtk-2.0.Gtk.TreeViewColumn

    connect(sigName: "clicked", callback: TreeViewColumn.ClickedSignalCallback): number
    on(sigName: "clicked", callback: TreeViewColumn.ClickedSignalCallback): number
    once(sigName: "clicked", callback: TreeViewColumn.ClickedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "clicked", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.TreeViewColumn

    connect(sigName: "notify::sizing", callback: any): number
    on(sigName: "notify::sizing", callback: any): number
    once(sigName: "notify::sizing", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sizing", ...args: any[]): void
    connect(sigName: "notify::sort-indicator", callback: any): number
    on(sigName: "notify::sort-indicator", callback: any): number
    once(sigName: "notify::sort-indicator", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sort-indicator", ...args: any[]): void
    connect(sigName: "notify::widget", callback: any): number
    on(sigName: "notify::widget", callback: any): number
    once(sigName: "notify::widget", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::widget", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class TreeViewColumn extends Object {

    // Own properties of Gtk-2.0.Gtk.TreeViewColumn

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeViewColumn

    constructor(config?: TreeViewColumn.ConstructorProperties) 
    /**
     * Creates a new #GtkTreeViewColumn.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkTreeViewColumn.
     * @constructor 
     */
    static new(): TreeViewColumn
    _init(config?: TreeViewColumn.ConstructorProperties): void
}

export module UIManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `actions-changed`
     */
    export interface ActionsChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `add-widget`
     */
    export interface AddWidgetSignalCallback {
        (widget: Widget): void
    }

    /**
     * Signal callback interface for `connect-proxy`
     */
    export interface ConnectProxySignalCallback {
        (action: Action, proxy: Widget): void
    }

    /**
     * Signal callback interface for `disconnect-proxy`
     */
    export interface DisconnectProxySignalCallback {
        (action: Action, proxy: Widget): void
    }

    /**
     * Signal callback interface for `post-activate`
     */
    export interface PostActivateSignalCallback {
        (action: Action): void
    }

    /**
     * Signal callback interface for `pre-activate`
     */
    export interface PreActivateSignalCallback {
        (action: Action): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Buildable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.UIManager

        /**
         * The "add-tearoffs" property controls whether generated menus
         * have tearoff menu items.
         * 
         * Note that this only affects regular menus. Generated popup
         * menus never have tearoff menu items.
         */
        addTearoffs?: boolean | null
    }

}

export interface UIManager extends Buildable {

    // Own properties of Gtk-2.0.Gtk.UIManager

    /**
     * The "add-tearoffs" property controls whether generated menus
     * have tearoff menu items.
     * 
     * Note that this only affects regular menus. Generated popup
     * menus never have tearoff menu items.
     */
    addTearoffs: boolean
    readonly ui: string

    // Own fields of Gtk-2.0.Gtk.UIManager

    parent: GObject.Object

    // Owm methods of Gtk-2.0.Gtk.UIManager

    /**
     * Adds a UI element to the current contents of `self`.
     * 
     * If `type` is %GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or
     * separator if such an element can be inserted at the place determined by
     * `path`. Otherwise `type` must indicate an element that can be inserted at
     * the place determined by `path`.
     * 
     * If `path` points to a menuitem or toolitem, the new element will be inserted
     * before or after this item, depending on `top`.
     * @param mergeId the merge id for the merged UI, see gtk_ui_manager_new_merge_id()
     * @param path a path
     * @param name the name for the added UI element
     * @param action the name of the action to be proxied, or %NULL to add a separator
     * @param type the type of UI element to add.
     * @param top if %TRUE, the UI element is added before its siblings, otherwise it   is added after its siblings.
     */
    addUi(mergeId: number, path: string, name: string, action: string | null, type: UIManagerItemType, top: boolean): void
    /**
     * Parses a file containing a <link linkend="XML-UI">UI definition</link> and
     * merges it with the current contents of `self`.
     * @param filename the name of the file to parse
     */
    addUiFromFile(filename: string): number
    /**
     * Parses a string containing a <link linkend="XML-UI">UI definition</link> and
     * merges it with the current contents of `self`. An enclosing &lt;ui&gt;
     * element is added if it is missing.
     * @param buffer the string to parse
     * @param length the length of `buffer` (may be -1 if `buffer` is nul-terminated)
     */
    addUiFromString(buffer: string, length: number): number
    /**
     * Makes sure that all pending updates to the UI have been completed.
     * 
     * This may occasionally be necessary, since #GtkUIManager updates the
     * UI in an idle function. A typical example where this function is
     * useful is to enforce that the menubar and toolbar have been added to
     * the main window before showing it:
     * |[
     * gtk_container_add (GTK_CONTAINER (window), vbox);
     * g_signal_connect (merge, "add-widget",
     *                   G_CALLBACK (add_widget), vbox);
     * gtk_ui_manager_add_ui_from_file (merge, "my-menus");
     * gtk_ui_manager_add_ui_from_file (merge, "my-toolbars");
     * gtk_ui_manager_ensure_update (merge);
     * gtk_widget_show (window);
     * ```
     * 
     */
    ensureUpdate(): void
    /**
     * Returns the #GtkAccelGroup associated with `self`.
     */
    getAccelGroup(): AccelGroup
    // Has conflict: getAction(path: string): Action
    /**
     * Returns the list of action groups associated with `self`.
     */
    getActionGroups(): ActionGroup[]
    /**
     * Returns whether menus generated by this #GtkUIManager
     * will have tearoff menu items.
     */
    getAddTearoffs(): boolean
    /**
     * Obtains a list of all toplevel widgets of the requested types.
     * @param types specifies the types of toplevel widgets to include. Allowed   types are #GTK_UI_MANAGER_MENUBAR, #GTK_UI_MANAGER_TOOLBAR and   #GTK_UI_MANAGER_POPUP.
     */
    getToplevels(types: UIManagerItemType): Widget[]
    /**
     * Creates a <link linkend="XML-UI">UI definition</link> of the merged UI.
     */
    getUi(): string
    // Has conflict: getWidget(path: string): Widget
    /**
     * Inserts an action group into the list of action groups associated
     * with `self`. Actions in earlier groups hide actions with the same
     * name in later groups.
     * @param actionGroup the action group to be inserted
     * @param pos the position at which the group will be inserted.
     */
    insertActionGroup(actionGroup: ActionGroup, pos: number): void
    /**
     * Returns an unused merge id, suitable for use with
     * gtk_ui_manager_add_ui().
     */
    newMergeId(): number
    /**
     * Removes an action group from the list of action groups associated
     * with `self`.
     * @param actionGroup the action group to be removed
     */
    removeActionGroup(actionGroup: ActionGroup): void
    /**
     * Unmerges the part of `self<`!-- -->s content identified by `merge_id`.
     * @param mergeId a merge id as returned by gtk_ui_manager_add_ui_from_string()
     */
    removeUi(mergeId: number): void
    /**
     * Sets the "add_tearoffs" property, which controls whether menus
     * generated by this #GtkUIManager will have tearoff menu items.
     * 
     * Note that this only affects regular menus. Generated popup
     * menus never have tearoff menu items.
     * @param addTearoffs whether tearoff menu items are added
     */
    setAddTearoffs(addTearoffs: boolean): void

    // Own virtual methods of Gtk-2.0.Gtk.UIManager

    actionsChanged(): void
    addWidget(widget: Widget): void
    connectProxy(action: Action, proxy: Widget): void
    disconnectProxy(action: Action, proxy: Widget): void
    /**
     * Looks up an action by following a path. See gtk_ui_manager_get_widget()
     * for more information about paths.
     * @virtual 
     * @param path a path
     */
    getAction(path: string): Action
    /**
     * Looks up a widget by following a path.
     * The path consists of the names specified in the XML description of the UI.
     * separated by '/'. Elements which don't have a name or action attribute in
     * the XML (e.g. &lt;popup&gt;) can be addressed by their XML element name
     * (e.g. "popup"). The root element ("/ui") can be omitted in the path.
     * 
     * Note that the widget found by following a path that ends in a &lt;menu&gt;
     * element is the menuitem to which the menu is attached, not the menu itself.
     * 
     * Also note that the widgets constructed by a ui manager are not tied to
     * the lifecycle of the ui manager. If you add the widgets returned by this
     * function to some container or explicitly ref them, they will survive the
     * destruction of the ui manager.
     * @virtual 
     * @param path a path
     */
    getWidget(path: string): Widget
    postActivate(action: Action): void
    preActivate(action: Action): void

    // Own signals of Gtk-2.0.Gtk.UIManager

    connect(sigName: "actions-changed", callback: UIManager.ActionsChangedSignalCallback): number
    on(sigName: "actions-changed", callback: UIManager.ActionsChangedSignalCallback): number
    once(sigName: "actions-changed", callback: UIManager.ActionsChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "actions-changed", ...args: any[]): void
    connect(sigName: "add-widget", callback: UIManager.AddWidgetSignalCallback): number
    on(sigName: "add-widget", callback: UIManager.AddWidgetSignalCallback): number
    once(sigName: "add-widget", callback: UIManager.AddWidgetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "add-widget", ...args: any[]): void
    connect(sigName: "connect-proxy", callback: UIManager.ConnectProxySignalCallback): number
    on(sigName: "connect-proxy", callback: UIManager.ConnectProxySignalCallback): number
    once(sigName: "connect-proxy", callback: UIManager.ConnectProxySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "connect-proxy", proxy: Widget, ...args: any[]): void
    connect(sigName: "disconnect-proxy", callback: UIManager.DisconnectProxySignalCallback): number
    on(sigName: "disconnect-proxy", callback: UIManager.DisconnectProxySignalCallback): number
    once(sigName: "disconnect-proxy", callback: UIManager.DisconnectProxySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "disconnect-proxy", proxy: Widget, ...args: any[]): void
    connect(sigName: "post-activate", callback: UIManager.PostActivateSignalCallback): number
    on(sigName: "post-activate", callback: UIManager.PostActivateSignalCallback): number
    once(sigName: "post-activate", callback: UIManager.PostActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "post-activate", ...args: any[]): void
    connect(sigName: "pre-activate", callback: UIManager.PreActivateSignalCallback): number
    on(sigName: "pre-activate", callback: UIManager.PreActivateSignalCallback): number
    once(sigName: "pre-activate", callback: UIManager.PreActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "pre-activate", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.UIManager

    connect(sigName: "notify::add-tearoffs", callback: any): number
    on(sigName: "notify::add-tearoffs", callback: any): number
    once(sigName: "notify::add-tearoffs", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::add-tearoffs", ...args: any[]): void
    connect(sigName: "notify::ui", callback: any): number
    on(sigName: "notify::ui", callback: any): number
    once(sigName: "notify::ui", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::ui", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class UIManager extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.UIManager

    static name: string

    // Constructors of Gtk-2.0.Gtk.UIManager

    constructor(config?: UIManager.ConstructorProperties) 
    /**
     * Creates a new ui manager object.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new ui manager object.
     * @constructor 
     */
    static new(): UIManager
    _init(config?: UIManager.ConstructorProperties): void
}

export module VBox {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Box.ConstructorProperties {
    }

}

export interface VBox extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VBox

    box: Box

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VBox

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * A #GtkVBox is a container that organizes child widgets into a single column.
 * 
 * Use the #GtkBox packing interface to determine the arrangement,
 * spacing, height, and alignment of #GtkVBox children.
 * 
 * All children are allocated the same width.
 * @class 
 */
export class VBox extends Box {

    // Own properties of Gtk-2.0.Gtk.VBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.VBox

    constructor(config?: VBox.ConstructorProperties) 
    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    constructor(homogeneous: boolean, spacing: number) 
    /**
     * Creates a new #GtkVBox.
     * @constructor 
     * @param homogeneous %TRUE if all children are to be given equal space allotments.
     * @param spacing the number of pixels to place by default between children.
     */
    static new(homogeneous: boolean, spacing: number): VBox
    _init(config?: VBox.ConstructorProperties): void
}

export module VButtonBox {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, ButtonBox.ConstructorProperties {
    }

}

export interface VButtonBox extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VButtonBox

    buttonBox: ButtonBox

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VButtonBox

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class VButtonBox extends ButtonBox {

    // Own properties of Gtk-2.0.Gtk.VButtonBox

    static name: string

    // Constructors of Gtk-2.0.Gtk.VButtonBox

    constructor(config?: VButtonBox.ConstructorProperties) 
    /**
     * Creates a new vertical button box.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new vertical button box.
     * @constructor 
     */
    static new(): VButtonBox
    _init(config?: VButtonBox.ConstructorProperties): void
    /**
     * Retrieves the current layout used to arrange buttons in button box widgets.
     */
    static getLayoutDefault(): ButtonBoxStyle
    /**
     * Retrieves the current default spacing for vertical button boxes. This is the number of pixels
     * to be placed between the buttons when they are arranged.
     */
    static getSpacingDefault(): number
    /**
     * Sets a new layout mode that will be used by all button boxes.
     * @param layout a new #GtkButtonBoxStyle.
     */
    static setLayoutDefault(layout: ButtonBoxStyle): void
    /**
     * Changes the default spacing that is placed between widgets in an
     * vertical button box.
     * @param spacing an integer value.
     */
    static setSpacingDefault(spacing: number): void
}

export module VPaned {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Paned.ConstructorProperties {
    }

}

export interface VPaned extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VPaned

    paned: Paned

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VPaned

    connect(sigName: "notify::max-position", callback: any): number
    on(sigName: "notify::max-position", callback: any): number
    once(sigName: "notify::max-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::max-position", ...args: any[]): void
    connect(sigName: "notify::min-position", callback: any): number
    on(sigName: "notify::min-position", callback: any): number
    once(sigName: "notify::min-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::min-position", ...args: any[]): void
    connect(sigName: "notify::position", callback: any): number
    on(sigName: "notify::position", callback: any): number
    once(sigName: "notify::position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::position", ...args: any[]): void
    connect(sigName: "notify::position-set", callback: any): number
    on(sigName: "notify::position-set", callback: any): number
    once(sigName: "notify::position-set", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::position-set", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The VPaned widget is a container widget with two
 * children arranged vertically. The division between
 * the two panes is adjustable by the user by dragging
 * a handle. See #GtkPaned for details.
 * @class 
 */
export class VPaned extends Paned {

    // Own properties of Gtk-2.0.Gtk.VPaned

    static name: string

    // Constructors of Gtk-2.0.Gtk.VPaned

    constructor(config?: VPaned.ConstructorProperties) 
    /**
     * Create a new #GtkVPaned
     * @constructor 
     */
    constructor() 
    /**
     * Create a new #GtkVPaned
     * @constructor 
     */
    static new(): VPaned
    _init(config?: VPaned.ConstructorProperties): void
}

export module VRuler {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Ruler.ConstructorProperties {
    }

}

export interface VRuler extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VRuler

    ruler: Ruler

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VRuler

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * <note>
 *  This widget is considered too specialized/little-used for
 *  GTK+, and will be removed in GTK 3.  If your application needs this widget,
 *  feel free to use it, as the widget is useful in some applications; it's just
 *  not of general interest. However, we are not accepting new features for the
 *  widget, and it will move out of the GTK+ distribution.
 * </note>
 * 
 * The VRuler widget is a widget arranged vertically creating a ruler that is
 * utilized around other widgets such as a text widget. The ruler is used to show
 * the location of the mouse on the window and to show the size of the window in
 * specified units. The available units of measurement are GTK_PIXELS, GTK_INCHES
 * and GTK_CENTIMETERS. GTK_PIXELS is the default unit of measurement.
 * @class 
 */
export class VRuler extends Ruler {

    // Own properties of Gtk-2.0.Gtk.VRuler

    static name: string

    // Constructors of Gtk-2.0.Gtk.VRuler

    constructor(config?: VRuler.ConstructorProperties) 
    /**
     * Creates a new vertical ruler
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new vertical ruler
     * @constructor 
     */
    static new(): VRuler
    _init(config?: VRuler.ConstructorProperties): void
}

export module VScale {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Scale.ConstructorProperties {
    }

}

export interface VScale extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VScale

    scale: Scale

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VScale

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkVScale widget is used to allow the user to select a value using
 * a vertical slider. To create one, use gtk_hscale_new_with_range().
 * 
 * The position to show the current value, and the number of decimal places
 * shown can be set using the parent #GtkScale class's functions.
 * @class 
 */
export class VScale extends Scale {

    // Own properties of Gtk-2.0.Gtk.VScale

    static name: string

    // Constructors of Gtk-2.0.Gtk.VScale

    constructor(config?: VScale.ConstructorProperties) 
    /**
     * Creates a new #GtkVScale.
     * @constructor 
     * @param adjustment the #GtkAdjustment which sets the range of the scale.
     */
    constructor(adjustment: Adjustment) 
    /**
     * Creates a new #GtkVScale.
     * @constructor 
     * @param adjustment the #GtkAdjustment which sets the range of the scale.
     */
    static new(adjustment: Adjustment): VScale
    /**
     * Creates a new vertical scale widget that lets the user input a
     * number between `min` and `max` (including `min` and `max)` with the
     * increment `step`.  `step` must be nonzero; it's the distance the
     * slider moves when using the arrow keys to adjust the scale value.
     * 
     * Note that the way in which the precision is derived works best if `step`
     * is a power of ten. If the resulting precision is not suitable for your
     * needs, use gtk_scale_set_digits() to correct it.
     * @constructor 
     * @param min minimum value
     * @param max maximum value
     * @param step step increment (tick size) used with keyboard shortcuts
     */
    static newWithRange(min: number, max: number, step: number): VScale
    _init(config?: VScale.ConstructorProperties): void
}

export module VScrollbar {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Scrollbar.ConstructorProperties {
    }

}

export interface VScrollbar extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VScrollbar

    scrollbar: Scrollbar

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VScrollbar

    connect(sigName: "notify::fill-level", callback: any): number
    on(sigName: "notify::fill-level", callback: any): number
    once(sigName: "notify::fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::fill-level", ...args: any[]): void
    connect(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    on(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    once(sigName: "notify::lower-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::lower-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::restrict-to-fill-level", callback: any): number
    on(sigName: "notify::restrict-to-fill-level", callback: any): number
    once(sigName: "notify::restrict-to-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::restrict-to-fill-level", ...args: any[]): void
    connect(sigName: "notify::show-fill-level", callback: any): number
    on(sigName: "notify::show-fill-level", callback: any): number
    once(sigName: "notify::show-fill-level", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::show-fill-level", ...args: any[]): void
    connect(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    on(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    once(sigName: "notify::upper-stepper-sensitivity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::upper-stepper-sensitivity", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkVScrollbar widget is a widget arranged vertically creating a
 * scrollbar. See #GtkScrollbar for details on
 * scrollbars. #GtkAdjustment pointers may be added to handle the
 * adjustment of the scrollbar or it may be left %NULL in which case one
 * will be created for you. See #GtkScrollbar for a description of what the
 * fields in an adjustment represent for a scrollbar.
 * @class 
 */
export class VScrollbar extends Scrollbar {

    // Own properties of Gtk-2.0.Gtk.VScrollbar

    static name: string

    // Constructors of Gtk-2.0.Gtk.VScrollbar

    constructor(config?: VScrollbar.ConstructorProperties) 
    /**
     * Creates a new vertical scrollbar.
     * @constructor 
     * @param adjustment the #GtkAdjustment to use, or %NULL to create a new adjustment
     */
    constructor(adjustment: Adjustment | null) 
    /**
     * Creates a new vertical scrollbar.
     * @constructor 
     * @param adjustment the #GtkAdjustment to use, or %NULL to create a new adjustment
     */
    static new(adjustment: Adjustment | null): VScrollbar
    _init(config?: VScrollbar.ConstructorProperties): void
}

export module VSeparator {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, Separator.ConstructorProperties {
    }

}

export interface VSeparator extends Atk.ImplementorIface, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VSeparator

    separator: Separator

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VSeparator

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkVSeparator widget is a vertical separator, used to group the
 * widgets within a window. It displays a vertical line with a shadow to
 * make it appear sunken into the interface.
 * @class 
 */
export class VSeparator extends Separator {

    // Own properties of Gtk-2.0.Gtk.VSeparator

    static name: string

    // Constructors of Gtk-2.0.Gtk.VSeparator

    constructor(config?: VSeparator.ConstructorProperties) 
    /**
     * Creates a new #GtkVSeparator.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkVSeparator.
     * @constructor 
     */
    static new(): VSeparator
    _init(config?: VSeparator.ConstructorProperties): void
}

export module Viewport {

    // Signal callback interfaces

    /**
     * Signal callback interface for `set-scroll-adjustments`
     */
    export interface SetScrollAdjustmentsSignalCallback {
        (object: Adjustment, p0: Adjustment): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Viewport

        hadjustment?: Adjustment | null
        shadowType?: ShadowType | null
        vadjustment?: Adjustment | null
    }

}

export interface Viewport extends Atk.ImplementorIface, Buildable {

    // Own fields of Gtk-2.0.Gtk.Viewport

    bin: Bin
    shadowType: ShadowType
    viewWindow: Gdk.Window
    binWindow: Gdk.Window
    hadjustment: Adjustment
    vadjustment: Adjustment

    // Owm methods of Gtk-2.0.Gtk.Viewport

    /**
     * Gets the bin window of the #GtkViewport.
     */
    getBinWindow(): Gdk.Window
    /**
     * Returns the horizontal adjustment of the viewport.
     */
    getHadjustment(): Adjustment
    /**
     * Gets the shadow type of the #GtkViewport. See
     * gtk_viewport_set_shadow_type().
     */
    getShadowType(): ShadowType
    /**
     * Returns the vertical adjustment of the viewport.
     */
    getVadjustment(): Adjustment
    /**
     * Gets the view window of the #GtkViewport.
     */
    getViewWindow(): Gdk.Window
    /**
     * Sets the horizontal adjustment of the viewport.
     * @param adjustment a #GtkAdjustment.
     */
    setHadjustment(adjustment: Adjustment | null): void
    /**
     * Sets the shadow type of the viewport.
     * @param type the new shadow type.
     */
    setShadowType(type: ShadowType): void
    /**
     * Sets the vertical adjustment of the viewport.
     * @param adjustment a #GtkAdjustment.
     */
    setVadjustment(adjustment: Adjustment | null): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Viewport

    setScrollAdjustments(hadjustment: Adjustment, vadjustment: Adjustment): void

    // Overloads of setScrollAdjustments

    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean

    // Own signals of Gtk-2.0.Gtk.Viewport

    connect(sigName: "set-scroll-adjustments", callback: Viewport.SetScrollAdjustmentsSignalCallback): number
    on(sigName: "set-scroll-adjustments", callback: Viewport.SetScrollAdjustmentsSignalCallback): number
    once(sigName: "set-scroll-adjustments", callback: Viewport.SetScrollAdjustmentsSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-scroll-adjustments", p0: Adjustment, ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Viewport

    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #GtkViewport widget acts as an adaptor class, implementing
 * scrollability for child widgets that lack their own scrolling
 * capabilities. Use #GtkViewport to scroll child widgets such as
 * #GtkTable, #GtkBox, and so on.
 * 
 * If a widget has native scrolling abilities, such as #GtkTextView,
 * #GtkTreeView or #GtkIconview, it can be added to a #GtkScrolledWindow
 * with gtk_container_add(). If a widget does not, you must first add the
 * widget to a #GtkViewport, then add the viewport to the scrolled window.
 * The convenience function gtk_scrolled_window_add_with_viewport() does
 * exactly this, so you can ignore the presence of the viewport.
 * @class 
 */
export class Viewport extends Bin {

    // Own properties of Gtk-2.0.Gtk.Viewport

    static name: string

    // Constructors of Gtk-2.0.Gtk.Viewport

    constructor(config?: Viewport.ConstructorProperties) 
    /**
     * Creates a new #GtkViewport with the given adjustments.
     * @constructor 
     * @param hadjustment horizontal adjustment.
     * @param vadjustment vertical adjustment.
     */
    constructor(hadjustment: Adjustment, vadjustment: Adjustment) 
    /**
     * Creates a new #GtkViewport with the given adjustments.
     * @constructor 
     * @param hadjustment horizontal adjustment.
     * @param vadjustment vertical adjustment.
     */
    static new(hadjustment: Adjustment, vadjustment: Adjustment): Viewport
    _init(config?: Viewport.ConstructorProperties): void
}

export module VolumeButton {

    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Activatable.ConstructorProperties, Buildable.ConstructorProperties, Orientable.ConstructorProperties, ScaleButton.ConstructorProperties {
    }

}

export interface VolumeButton extends Atk.ImplementorIface, Activatable, Buildable, Orientable {

    // Own fields of Gtk-2.0.Gtk.VolumeButton

    parent: ScaleButton & Button & Widget & Widget

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Class property signals of Gtk-2.0.Gtk.VolumeButton

    connect(sigName: "notify::adjustment", callback: any): number
    on(sigName: "notify::adjustment", callback: any): number
    once(sigName: "notify::adjustment", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::adjustment", ...args: any[]): void
    connect(sigName: "notify::icons", callback: any): number
    on(sigName: "notify::icons", callback: any): number
    once(sigName: "notify::icons", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icons", ...args: any[]): void
    connect(sigName: "notify::size", callback: any): number
    on(sigName: "notify::size", callback: any): number
    once(sigName: "notify::size", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::value", callback: any): number
    on(sigName: "notify::value", callback: any): number
    once(sigName: "notify::value", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::image", callback: any): number
    on(sigName: "notify::image", callback: any): number
    once(sigName: "notify::image", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: any): number
    on(sigName: "notify::image-position", callback: any): number
    once(sigName: "notify::image-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: any): number
    on(sigName: "notify::label", callback: any): number
    once(sigName: "notify::label", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: any): number
    on(sigName: "notify::xalign", callback: any): number
    once(sigName: "notify::xalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: any): number
    on(sigName: "notify::yalign", callback: any): number
    once(sigName: "notify::yalign", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: any): number
    on(sigName: "notify::related-action", callback: any): number
    once(sigName: "notify::related-action", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: any): number
    on(sigName: "notify::use-action-appearance", callback: any): number
    once(sigName: "notify::use-action-appearance", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: any): number
    on(sigName: "notify::orientation", callback: any): number
    once(sigName: "notify::orientation", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * #GtkVolumeButton is a subclass of #GtkScaleButton that has
 * been tailored for use as a volume control widget with suitable
 * icons, tooltips and accessible labels.
 * @class 
 */
export class VolumeButton extends ScaleButton {

    // Own properties of Gtk-2.0.Gtk.VolumeButton

    static name: string

    // Constructors of Gtk-2.0.Gtk.VolumeButton

    constructor(config?: VolumeButton.ConstructorProperties) 
    /**
     * Creates a #GtkVolumeButton, with a range between 0.0 and 1.0, with
     * a stepping of 0.02. Volume values can be obtained and modified using
     * the functions from #GtkScaleButton.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a #GtkVolumeButton, with a range between 0.0 and 1.0, with
     * a stepping of 0.02. Volume values can be obtained and modified using
     * the functions from #GtkScaleButton.
     * @constructor 
     */
    static new(): VolumeButton

    // Overloads of new

    /**
     * Creates a #GtkScaleButton, with a range between `min` and `max,` with
     * a stepping of `step`.
     * @constructor 
     * @param size a stock icon size
     * @param min the minimum value of the scale (usually 0)
     * @param max the maximum value of the scale (usually 100)
     * @param step the stepping of value when a scroll-wheel event,        or up/down arrow event occurs (usually 2)
     * @param icons a %NULL-terminated         array of icon names, or %NULL if you want to set the list         later with gtk_scale_button_set_icons()
     */
    static new(size: IconSize, min: number, max: number, step: number, icons: string[] | null): ScaleButton
    static new(): Button
    _init(config?: VolumeButton.ConstructorProperties): void
}

export module Widget {

    // Signal callback interfaces

    /**
     * Signal callback interface for `accel-closures-changed`
     */
    export interface AccelClosuresChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `button-press-event`
     */
    export interface ButtonPressEventSignalCallback {
        (event: Gdk.EventButton): boolean
    }

    /**
     * Signal callback interface for `button-release-event`
     */
    export interface ButtonReleaseEventSignalCallback {
        (event: Gdk.EventButton): boolean
    }

    /**
     * Signal callback interface for `can-activate-accel`
     */
    export interface CanActivateAccelSignalCallback {
        (signalId: number): boolean
    }

    /**
     * Signal callback interface for `child-notify`
     */
    export interface ChildNotifySignalCallback {
        (pspec: GObject.ParamSpec): void
    }

    /**
     * Signal callback interface for `client-event`
     */
    export interface ClientEventSignalCallback {
        (event: Gdk.EventClient): boolean
    }

    /**
     * Signal callback interface for `composited-changed`
     */
    export interface CompositedChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `configure-event`
     */
    export interface ConfigureEventSignalCallback {
        (event: Gdk.EventConfigure): boolean
    }

    /**
     * Signal callback interface for `damage-event`
     */
    export interface DamageEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `delete-event`
     */
    export interface DeleteEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `destroy-event`
     */
    export interface DestroyEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `direction-changed`
     */
    export interface DirectionChangedSignalCallback {
        (previousDirection: TextDirection): void
    }

    /**
     * Signal callback interface for `drag-begin`
     */
    export interface DragBeginSignalCallback {
        (dragContext: Gdk.DragContext): void
    }

    /**
     * Signal callback interface for `drag-data-delete`
     */
    export interface DragDataDeleteSignalCallback {
        (dragContext: Gdk.DragContext): void
    }

    /**
     * Signal callback interface for `drag-data-get`
     */
    export interface DragDataGetSignalCallback {
        (dragContext: Gdk.DragContext, data: SelectionData, info: number, time: number): void
    }

    /**
     * Signal callback interface for `drag-data-received`
     */
    export interface DragDataReceivedSignalCallback {
        (dragContext: Gdk.DragContext, x: number, y: number, data: SelectionData, info: number, time: number): void
    }

    /**
     * Signal callback interface for `drag-drop`
     */
    export interface DragDropSignalCallback {
        (dragContext: Gdk.DragContext, x: number, y: number, time: number): boolean
    }

    /**
     * Signal callback interface for `drag-end`
     */
    export interface DragEndSignalCallback {
        (dragContext: Gdk.DragContext): void
    }

    /**
     * Signal callback interface for `drag-failed`
     */
    export interface DragFailedSignalCallback {
        (dragContext: Gdk.DragContext, result: DragResult): boolean
    }

    /**
     * Signal callback interface for `drag-leave`
     */
    export interface DragLeaveSignalCallback {
        (dragContext: Gdk.DragContext, time: number): void
    }

    /**
     * Signal callback interface for `drag-motion`
     */
    export interface DragMotionSignalCallback {
        (dragContext: Gdk.DragContext, x: number, y: number, time: number): boolean
    }

    /**
     * Signal callback interface for `enter-notify-event`
     */
    export interface EnterNotifyEventSignalCallback {
        (event: Gdk.EventCrossing): boolean
    }

    /**
     * Signal callback interface for `event`
     */
    export interface EventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `event-after`
     */
    export interface EventAfterSignalCallback {
        (event: Gdk.Event): void
    }

    /**
     * Signal callback interface for `expose-event`
     */
    export interface ExposeEventSignalCallback {
        (event: Gdk.EventExpose): boolean
    }

    /**
     * Signal callback interface for `focus`
     */
    export interface FocusSignalCallback {
        (direction: DirectionType): boolean
    }

    /**
     * Signal callback interface for `focus-in-event`
     */
    export interface FocusInEventSignalCallback {
        (event: Gdk.EventFocus): boolean
    }

    /**
     * Signal callback interface for `focus-out-event`
     */
    export interface FocusOutEventSignalCallback {
        (event: Gdk.EventFocus): boolean
    }

    /**
     * Signal callback interface for `grab-broken-event`
     */
    export interface GrabBrokenEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `grab-focus`
     */
    export interface GrabFocusSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `grab-notify`
     */
    export interface GrabNotifySignalCallback {
        (wasGrabbed: boolean): void
    }

    /**
     * Signal callback interface for `hide`
     */
    export interface HideSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `hierarchy-changed`
     */
    export interface HierarchyChangedSignalCallback {
        (previousToplevel: Widget | null): void
    }

    /**
     * Signal callback interface for `key-press-event`
     */
    export interface KeyPressEventSignalCallback {
        (event: Gdk.EventKey): boolean
    }

    /**
     * Signal callback interface for `key-release-event`
     */
    export interface KeyReleaseEventSignalCallback {
        (event: Gdk.EventKey): boolean
    }

    /**
     * Signal callback interface for `keynav-failed`
     */
    export interface KeynavFailedSignalCallback {
        (direction: DirectionType): boolean
    }

    /**
     * Signal callback interface for `leave-notify-event`
     */
    export interface LeaveNotifyEventSignalCallback {
        (event: Gdk.EventCrossing): boolean
    }

    /**
     * Signal callback interface for `map`
     */
    export interface MapSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `map-event`
     */
    export interface MapEventSignalCallback {
        (event: Gdk.EventAny): boolean
    }

    /**
     * Signal callback interface for `mnemonic-activate`
     */
    export interface MnemonicActivateSignalCallback {
        (arg1: boolean): boolean
    }

    /**
     * Signal callback interface for `motion-notify-event`
     */
    export interface MotionNotifyEventSignalCallback {
        (event: Gdk.EventMotion): boolean
    }

    /**
     * Signal callback interface for `move-focus`
     */
    export interface MoveFocusSignalCallback {
        (direction: DirectionType): void
    }

    /**
     * Signal callback interface for `no-expose-event`
     */
    export interface NoExposeEventSignalCallback {
        (event: Gdk.EventNoExpose): boolean
    }

    /**
     * Signal callback interface for `parent-set`
     */
    export interface ParentSetSignalCallback {
        (oldParent: Widget | null): void
    }

    /**
     * Signal callback interface for `popup-menu`
     */
    export interface PopupMenuSignalCallback {
        (): boolean
    }

    /**
     * Signal callback interface for `property-notify-event`
     */
    export interface PropertyNotifyEventSignalCallback {
        (event: Gdk.EventProperty): boolean
    }

    /**
     * Signal callback interface for `proximity-in-event`
     */
    export interface ProximityInEventSignalCallback {
        (event: Gdk.EventProximity): boolean
    }

    /**
     * Signal callback interface for `proximity-out-event`
     */
    export interface ProximityOutEventSignalCallback {
        (event: Gdk.EventProximity): boolean
    }

    /**
     * Signal callback interface for `query-tooltip`
     */
    export interface QueryTooltipSignalCallback {
        (x: number, y: number, keyboardMode: boolean, tooltip: Tooltip): boolean
    }

    /**
     * Signal callback interface for `realize`
     */
    export interface RealizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `screen-changed`
     */
    export interface ScreenChangedSignalCallback {
        (previousScreen: Gdk.Screen | null): void
    }

    /**
     * Signal callback interface for `scroll-event`
     */
    export interface ScrollEventSignalCallback {
        (event: Gdk.EventScroll): boolean
    }

    /**
     * Signal callback interface for `selection-clear-event`
     */
    export interface SelectionClearEventSignalCallback {
        (event: Gdk.EventSelection): boolean
    }

    /**
     * Signal callback interface for `selection-get`
     */
    export interface SelectionGetSignalCallback {
        (data: SelectionData, info: number, time: number): void
    }

    /**
     * Signal callback interface for `selection-notify-event`
     */
    export interface SelectionNotifyEventSignalCallback {
        (event: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `selection-received`
     */
    export interface SelectionReceivedSignalCallback {
        (data: SelectionData, time: number): void
    }

    /**
     * Signal callback interface for `selection-request-event`
     */
    export interface SelectionRequestEventSignalCallback {
        (event: Gdk.EventSelection): boolean
    }

    /**
     * Signal callback interface for `show`
     */
    export interface ShowSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `show-help`
     */
    export interface ShowHelpSignalCallback {
        (helpType: WidgetHelpType): boolean
    }

    /**
     * Signal callback interface for `size-allocate`
     */
    export interface SizeAllocateSignalCallback {
        (allocation: Gdk.Rectangle): void
    }

    /**
     * Signal callback interface for `size-request`
     */
    export interface SizeRequestSignalCallback {
        (requisition: Requisition): void
    }

    /**
     * Signal callback interface for `state-changed`
     */
    export interface StateChangedSignalCallback {
        (state: StateType): void
    }

    /**
     * Signal callback interface for `style-set`
     */
    export interface StyleSetSignalCallback {
        (previousStyle: Style | null): void
    }

    /**
     * Signal callback interface for `unmap`
     */
    export interface UnmapSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `unmap-event`
     */
    export interface UnmapEventSignalCallback {
        (event: Gdk.EventAny): boolean
    }

    /**
     * Signal callback interface for `unrealize`
     */
    export interface UnrealizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `visibility-notify-event`
     */
    export interface VisibilityNotifyEventSignalCallback {
        (event: Gdk.EventVisibility): boolean
    }

    /**
     * Signal callback interface for `window-state-event`
     */
    export interface WindowStateEventSignalCallback {
        (event: Gdk.EventWindowState): boolean
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Widget

        appPaintable?: boolean | null
        canDefault?: boolean | null
        canFocus?: boolean | null
        /**
         * Whether or not the widget is double buffered.
         */
        doubleBuffered?: boolean | null
        events?: Gdk.EventMask | null
        extensionEvents?: Gdk.ExtensionMode | null
        hasDefault?: boolean | null
        hasFocus?: boolean | null
        /**
         * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
         * A value of %TRUE indicates that `widget` can have a tooltip, in this case
         * the widget will be queried using #GtkWidget::query-tooltip to determine
         * whether it will provide a tooltip or not.
         * 
         * Note that setting this property to %TRUE for the first time will change
         * the event masks of the GdkWindows of this widget to include leave-notify
         * and motion-notify events.  This cannot and will not be undone when the
         * property is set to %FALSE again.
         */
        hasTooltip?: boolean | null
        heightRequest?: number | null
        isFocus?: boolean | null
        name?: string | null
        noShowAll?: boolean | null
        parent?: Container | null
        receivesDefault?: boolean | null
        sensitive?: boolean | null
        style?: Style | null
        /**
         * Sets the text of tooltip to be the given string, which is marked up
         * with the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
         * Also see gtk_tooltip_set_markup().
         * 
         * This is a convenience property which will take care of getting the
         * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
         * will automatically be set to %TRUE and there will be taken care of
         * #GtkWidget::query-tooltip in the default signal handler.
         */
        tooltipMarkup?: string | null
        /**
         * Sets the text of tooltip to be the given string.
         * 
         * Also see gtk_tooltip_set_text().
         * 
         * This is a convenience property which will take care of getting the
         * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
         * will automatically be set to %TRUE and there will be taken care of
         * #GtkWidget::query-tooltip in the default signal handler.
         */
        tooltipText?: string | null
        visible?: boolean | null
        widthRequest?: number | null
    }

}

export interface Widget extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Widget

    appPaintable: boolean
    canDefault: boolean
    canFocus: boolean
    readonly compositeChild: boolean
    /**
     * Whether or not the widget is double buffered.
     */
    doubleBuffered: boolean
    events: Gdk.EventMask
    extensionEvents: Gdk.ExtensionMode
    hasDefault: boolean
    hasFocus: boolean
    /**
     * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using #GtkWidget::query-tooltip to determine
     * whether it will provide a tooltip or not.
     * 
     * Note that setting this property to %TRUE for the first time will change
     * the event masks of the GdkWindows of this widget to include leave-notify
     * and motion-notify events.  This cannot and will not be undone when the
     * property is set to %FALSE again.
     */
    hasTooltip: boolean
    heightRequest: number
    isFocus: boolean
    noShowAll: boolean
    receivesDefault: boolean
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * Also see gtk_tooltip_set_markup().
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
     * will automatically be set to %TRUE and there will be taken care of
     * #GtkWidget::query-tooltip in the default signal handler.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see gtk_tooltip_set_text().
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
     * will automatically be set to %TRUE and there will be taken care of
     * #GtkWidget::query-tooltip in the default signal handler.
     */
    tooltipText: string
    visible: boolean
    widthRequest: number

    // Own fields of Gtk-2.0.Gtk.Widget

    object: Object
    privateFlags: number
    state: number
    savedState: number
    name: string
    style: Style
    requisition: Requisition
    allocation: Allocation
    window: Gdk.Window
    parent: Widget

    // Owm methods of Gtk-2.0.Gtk.Widget

    /**
     * For widgets that can be "activated" (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Installs an accelerator for this `widget` in `accel_group` that causes
     * `accel_signal` to be emitted if the accelerator is activated.
     * The `accel_group` needs to be added to the widget's toplevel via
     * gtk_window_add_accel_group(), and the signal must be of type %G_RUN_ACTION.
     * Accelerators added through this function are not user changeable during
     * runtime. If you want to support accelerators that can be changed by the
     * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
     * gtk_menu_item_set_accel_path() instead.
     * @param accelSignal widget signal to emit on accelerator activation
     * @param accelGroup accel group for this widget, added to its toplevel
     * @param accelKey GDK keyval of the accelerator
     * @param accelMods modifier key combination of the accelerator
     * @param accelFlags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
     */
    addAccelerator(accelSignal: string, accelGroup: AccelGroup, accelKey: number, accelMods: Gdk.ModifierType, accelFlags: AccelFlags): void
    /**
     * Adds the events in the bitfield `events` to the event mask for
     * `widget`. See gtk_widget_set_events() for details.
     * @param events an event mask, see #GdkEventMask
     */
    addEvents(events: number): void
    /**
     * Adds a widget to the list of mnemonic labels for
     * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well, by using a connection
     * to the #GtkWidget::destroy signal or a weak notifier.
     * @param label a #GtkWidget that acts as a mnemonic label for `widget`
     */
    addMnemonicLabel(label: Widget): void
    // Has conflict: canActivateAccel(signalId: number): boolean
    /**
     * This function is used by custom widget implementations; if you're
     * writing an app, you'd use gtk_widget_grab_focus() to move the focus
     * to a particular widget, and gtk_container_set_focus_chain() to
     * change the focus tab order. So you may want to investigate those
     * functions instead.
     * 
     * gtk_widget_child_focus() is called by containers as the user moves
     * around the window using keyboard shortcuts. `direction` indicates
     * what kind of motion is taking place (up, down, left, right, tab
     * forward, tab backward). gtk_widget_child_focus() emits the
     * #GtkWidget::focus signal; widgets override the default handler
     * for this signal in order to implement appropriate focus behavior.
     * 
     * The default ::focus handler for a widget should return %TRUE if
     * moving in `direction` left the focus on a focusable location inside
     * that widget, and %FALSE if moving in `direction` moved the focus
     * outside the widget. If returning %TRUE, widgets normally
     * call gtk_widget_grab_focus() to place the focus accordingly;
     * if returning %FALSE, they don't modify the current focus location.
     * 
     * This function replaces gtk_container_focus() from GTK+ 1.2.
     * It was necessary to check that the child was visible, sensitive,
     * and focusable before calling gtk_container_focus().
     * gtk_widget_child_focus() returns %FALSE if the widget is not
     * currently in a focusable state, so there's no need for those checks.
     * @param direction direction of focus movement
     */
    childFocus(direction: DirectionType): boolean
    // Has conflict: childNotify(childProperty: string): void
    /**
     * Same as gtk_widget_path(), but always uses the name of a widget's type,
     * never uses a custom name set with gtk_widget_set_name().
     */
    classPath(): [ /* pathLength */ number, /* path */ string, /* pathReversed */ string ]
    /**
     * Creates a new #PangoContext with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget. See also gtk_widget_get_pango_context().
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new #PangoLayout with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a #PangoLayout created in this way around, in order to
     * notify the layout of changes to the base direction or font of this
     * widget, you must call pango_layout_context_changed() in response to
     * the #GtkWidget::style-set and #GtkWidget::direction-changed signals
     * for the widget.
     * @param text text to set on the layout (can be %NULL)
     */
    createPangoLayout(text: string): Pango.Layout
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    /**
     * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
     * %NULL.  It's intended to be used as a callback connected to the
     * "destroy" signal of a widget. You connect gtk_widget_destroyed()
     * as a signal handler, and pass the address of your widget variable
     * as user data. Then when the widget is destroyed, the variable will
     * be set to %NULL. Useful for example to avoid multiple copies
     * of the same dialog.
     * @param widgetPointer address of a variable that contains `widget`
     */
    destroyed(widgetPointer: Widget): /* widgetPointer */ Widget
    /**
     * In GTK+ 1.2, this function would immediately render the
     * region `area` of a widget, by invoking the virtual draw method of a
     * widget. In GTK+ 2.0, the draw method is gone, and instead
     * gtk_widget_draw() simply invalidates the specified region of the
     * widget, then updates the invalid region of the widget immediately.
     * Usually you don't want to update the region immediately for
     * performance reasons, so in general gtk_widget_queue_draw_area() is
     * a better choice if you want to draw a region of a widget.
     * @param area area to draw
     */
    draw(area: Gdk.Rectangle): void
    /**
     * Ensures that `widget` has a style (`widget->`style). Not a very useful
     * function; most of the time, if you want the style, the widget is
     * realized, and realized widgets are guaranteed to have a style
     * already.
     */
    ensureStyle(): void
    /**
     * Notifies the user about an input-related error on this widget.
     * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
     * gdk_window_beep(), otherwise it does nothing.
     * 
     * Note that the effect of gdk_window_beep() can be configured in many
     * ways, depending on the windowing backend and the desktop environment
     * or window manager that is used.
     */
    errorBell(): void
    // Has conflict: event(event: Gdk.Event): boolean
    /**
     * Stops emission of #GtkWidget::child-notify signals on `widget`. The
     * signals are queued until gtk_widget_thaw_child_notify() is called
     * on `widget`.
     * 
     * This is the analogue of g_object_freeze_notify() for child properties.
     */
    freezeChildNotify(): void
    // Has conflict: getAccessible(): Atk.Object
    /**
     * Retrieves the widget's allocation.
     */
    getAllocation(): /* allocation */ Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`. For example,
     * <literal>gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)</literal> gets
     * the first #GtkBox that's an ancestor of `widget`. No reference will be
     * added to the returned widget; it should not be unreferenced. See note
     * about checking for a toplevel #GtkWindow in the docs for
     * gtk_widget_get_toplevel().
     * 
     * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
     * considers `widget` to be an ancestor of itself.
     * @param widgetType ancestor type
     */
    getAncestor(widgetType: GObject.GType): Widget
    /**
     * Determines whether the application intends to draw on the widget in
     * an #GtkWidget::expose-event handler.
     * 
     * See gtk_widget_set_app_paintable()
     */
    getAppPaintable(): boolean
    /**
     * Determines whether `widget` can be a default widget. See
     * gtk_widget_set_can_default().
     */
    getCanDefault(): boolean
    /**
     * Determines whether `widget` can own the input focus. See
     * gtk_widget_set_can_focus().
     */
    getCanFocus(): boolean
    /**
     * This function is only for use in widget implementations. Obtains
     * `widget->`requisition, unless someone has forced a particular
     * geometry on the widget (e.g. with gtk_widget_set_size_request()),
     * in which case it returns that geometry instead of the widget's
     * requisition.
     * 
     * This function differs from gtk_widget_size_request() in that
     * it retrieves the last size request value from `widget->`requisition,
     * while gtk_widget_size_request() actually calls the "size_request" method
     * on `widget` to compute the size request and fill in `widget->`requisition,
     * and only then returns `widget->`requisition.
     * 
     * Because this function does not call the "size_request" method, it
     * can only be used when you know that `widget->`requisition is
     * up-to-date, that is, gtk_widget_size_request() has been called
     * since the last time a resize was queued. In general, only container
     * implementations have this information; applications should use
     * gtk_widget_size_request().
     * @param requisition a #GtkRequisition to be filled in
     */
    getChildRequisition(requisition: Requisition): void
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Returns the clipboard object for the given selection to
     * be used with `widget`. `widget` must have a #GdkDisplay
     * associated with it, so must be attached to a toplevel
     * window.
     * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
     */
    getClipboard(selection: Gdk.Atom): Clipboard
    /**
     * Gets the colormap that will be used to render `widget`. No reference will
     * be added to the returned colormap; it should not be unreferenced.
     */
    getColormap(): Gdk.Colormap
    /**
     * Obtains the composite name of a widget.
     */
    getCompositeName(): string
    /**
     * Gets the reading direction for a particular widget. See
     * gtk_widget_set_direction().
     */
    getDirection(): TextDirection
    /**
     * Get the #GdkDisplay for the toplevel window associated with
     * this widget. This function can only be called after the widget
     * has been added to a widget hierarchy with a #GtkWindow at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Determines whether the widget is double buffered.
     * 
     * See gtk_widget_set_double_buffered()
     */
    getDoubleBuffered(): boolean
    /**
     * Returns the event mask for the widget (a bitfield containing flags
     * from the #GdkEventMask enumeration). These are the events that the widget
     * will receive.
     */
    getEvents(): number
    /**
     * Retrieves the extension events the widget will receive; see
     * gdk_input_set_extension_events().
     */
    getExtensionEvents(): Gdk.ExtensionMode
    /**
     * Returns the current value of the has-tooltip property.  See
     * GtkWidget:has-tooltip for more information.
     */
    getHasTooltip(): boolean
    /**
     * Determines whether `widget` has a #GdkWindow of its own. See
     * gtk_widget_set_has_window().
     */
    getHasWindow(): boolean
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Returns the current modifier style for the widget. (As set by
     * gtk_widget_modify_style().) If no style has previously set, a new
     * #GtkRcStyle will be created with all values unset, and set as the
     * modifier style for the widget. If you make changes to this rc
     * style, you must call gtk_widget_modify_style(), passing in the
     * returned rc style, to make sure that your changes take effect.
     * 
     * Caution: passing the style back to gtk_widget_modify_style() will
     * normally end up destroying it, because gtk_widget_modify_style() copies
     * the passed-in style and sets the copy as the new modifier style,
     * thus dropping any reference to the old modifier style. Add a reference
     * to the modifier style if you want to keep it alive.
     */
    getModifierStyle(): RcStyle
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Returns the current value of the GtkWidget:no-show-all property,
     * which determines whether calls to gtk_widget_show_all() and
     * gtk_widget_hide_all() will affect this widget.
     */
    getNoShowAll(): boolean
    /**
     * Gets a #PangoContext with the appropriate font map, font description,
     * and base direction for this widget. Unlike the context returned
     * by gtk_widget_create_pango_context(), this context is owned by
     * the widget (it can be used until the screen for the widget changes
     * or the widget is removed from its toplevel), and will be updated to
     * match any changes to the widget's attributes.
     * 
     * If you create and keep a #PangoLayout using this context, you must
     * deal with changes to the context by calling pango_layout_context_changed()
     * on the layout in response to the #GtkWidget::style-set and
     * #GtkWidget::direction-changed signals for the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent container of `widget`.
     */
    getParent(): Widget
    /**
     * Gets `widget'`s parent window.
     */
    getParentWindow(): Gdk.Window
    /**
     * Obtains the location of the mouse pointer in widget coordinates.
     * Widget coordinates are a bit odd; for historical reasons, they are
     * defined as `widget->`window coordinates for widgets that are not
     * #GTK_NO_WINDOW widgets, and are relative to `widget->`allocation.x,
     * `widget->`allocation.y for widgets that are #GTK_NO_WINDOW widgets.
     */
    getPointer(): [ /* x */ number, /* y */ number ]
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is alyways treated as default widget
     * withing its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See gtk_widget_set_receives_default().
     */
    getReceivesDefault(): boolean
    /**
     * Retrieves the widget's requisition.
     * 
     * This function should only be used by widget implementations in
     * order to figure whether the widget's requisition has actually
     * changed after some internal state change (so that they can call
     * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
     * 
     * Normally, gtk_widget_size_request() should be used.
     */
    getRequisition(): /* requisition */ Requisition
    /**
     * Get the root window where this widget is located. This function can
     * only be called after the widget has been added to a widget
     * hierarchy with #GtkWindow at the top.
     * 
     * The root window is useful for such purposes as creating a popup
     * #GdkWindow associated with the window. In general, you should only
     * create display specific resources when a widget has been realized,
     * and you should free those resources when the widget is unrealized.
     */
    getRootWindow(): Gdk.Window
    /**
     * Get the #GdkScreen from the toplevel window associated with
     * this widget. This function can only be called after the widget
     * has been added to a widget hierarchy with a #GtkWindow
     * at the top.
     * 
     * In general, you should only create screen specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getScreen(): Gdk.Screen
    /**
     * Returns the widget's sensitivity (in the sense of returning
     * the value that has been set using gtk_widget_set_sensitive()).
     * 
     * The effective sensitivity of a widget is however determined by both its
     * own and its parent widget's sensitivity. See gtk_widget_is_sensitive().
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings (global property
     * settings, RC file information, etc) used for this widget.
     * 
     * Note that this function can only be called when the #GtkWidget
     * is attached to a toplevel, since the settings object is specific
     * to a particular #GdkScreen.
     */
    getSettings(): Settings
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request(). A value of -1 stored in `width` or
     * `height` indicates that that dimension has not been set explicitly
     * and the natural requisition of the widget will be used intead. See
     * gtk_widget_set_size_request(). To get the size a widget will
     * actually use, call gtk_widget_size_request() instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number, /* height */ number ]
    /**
     * Returns the widget's state. See gtk_widget_set_state().
     */
    getState(): StateType
    /**
     * Simply an accessor function that returns `widget->`style.
     */
    getStyle(): Style
    /**
     * Gets the contents of the tooltip for `widget`.
     */
    getTooltipMarkup(): string
    /**
     * Gets the contents of the tooltip for `widget`.
     */
    getTooltipText(): string
    /**
     * Returns the #GtkWindow of the current tooltip. This can be the
     * GtkWindow created by default, or the custom tooltip window set
     * using gtk_widget_set_tooltip_window().
     */
    getTooltipWindow(): Window
    /**
     * This function returns the topmost widget in the container hierarchy
     * `widget` is a part of. If `widget` has no parent widgets, it will be
     * returned as the topmost widget. No reference will be added to the
     * returned widget; it should not be unreferenced.
     * 
     * Note the difference in behavior vs. gtk_widget_get_ancestor();
     * <literal>gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)</literal>
     * would return
     * %NULL if `widget` wasn't inside a toplevel window, and if the
     * window was inside a #GtkWindow-derived widget which was in turn
     * inside the toplevel #GtkWindow. While the second case may
     * seem unlikely, it actually happens when a #GtkPlug is embedded
     * inside a #GtkSocket within the same application.
     * 
     * To reliably find the toplevel #GtkWindow, use
     * gtk_widget_get_toplevel() and check if the %TOPLEVEL flags
     * is set on the result.
     * |[
     *  GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
     *  if (gtk_widget_is_toplevel (toplevel))
     *    {
     *      /&ast; Perform action on toplevel. &ast;/
     *    }
     * ```
     * 
     */
    getToplevel(): Widget
    /**
     * Determines whether the widget is visible. Note that this doesn't
     * take into account whether the widget's parent is also visible
     * or the widget is obscured in any way.
     * 
     * See gtk_widget_set_visible().
     */
    getVisible(): boolean
    /**
     * Gets the visual that will be used to render `widget`.
     */
    getVisual(): Gdk.Visual
    /**
     * Returns the widget's window if it is realized, %NULL otherwise
     */
    getWindow(): Gdk.Window
    /**
     * Causes `widget` to become the default widget. `widget` must have the
     * %GTK_CAN_DEFAULT flag set; typically you have to set this flag
     * yourself by calling <literal>gtk_widget_set_can_default (`widget,`
     * %TRUE)</literal>. The default widget is activated when
     * the user presses Enter in a window. Default widgets must be
     * activatable, that is, gtk_widget_activate() should affect them.
     */
    grabDefault(): void
    // Has conflict: grabFocus(): void
    /**
     * Determines whether the widget is currently grabbing events, so it
     * is the only widget receiving input events (keyboard and mouse).
     * 
     * See also gtk_grab_add().
     */
    hasGrab(): boolean
    /**
     * Determines if the widget style has been looked up through the rc mechanism.
     */
    hasRcStyle(): boolean
    /**
     * Checks whether there is a #GdkScreen is associated with
     * this widget. All toplevel widgets have an associated
     * screen, and all widgets added into a hierarchy with a toplevel
     * window at the top.
     */
    hasScreen(): boolean
    // Has conflict: hide(): void
    // Has conflict: hideAll(): void
    /**
     * Utility function; intended to be connected to the #GtkWidget::delete-event
     * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
     * argument, then returns %TRUE. If connected to ::delete-event, the
     * result is that clicking the close button for a window (on the
     * window frame, top right corner usually) will hide but not destroy
     * the window. By default, GTK+ destroys windows when ::delete-event
     * is received.
     */
    hideOnDelete(): boolean
    /**
     * Sets an input shape for this widget's GDK window. This allows for
     * windows which react to mouse click in a nonrectangular region, see
     * gdk_window_input_shape_combine_mask() for more information.
     * @param shapeMask shape to be added, or %NULL to remove an existing shape
     * @param offsetX X position of shape mask with respect to `window`
     * @param offsetY Y position of shape mask with respect to `window`
     */
    inputShapeCombineMask(shapeMask: Gdk.Bitmap | null, offsetX: number, offsetY: number): void
    /**
     * Computes the intersection of a `widget'`s area and `area,` storing
     * the intersection in `intersection,` and returns %TRUE if there was
     * an intersection.  `intersection` may be %NULL if you're only
     * interested in whether there was an intersection.
     * @param area a rectangle
     * @param intersection rectangle to store intersection of `widget` and `area`
     */
    intersect(area: Gdk.Rectangle, intersection: Gdk.Rectangle): boolean
    /**
     * Determines whether `widget` is somewhere inside `ancestor,` possibly with
     * intermediate containers.
     * @param ancestor another #GtkWidget
     */
    isAncestor(ancestor: Widget): boolean
    /**
     * Whether `widget` can rely on having its alpha channel
     * drawn correctly. On X11 this function returns whether a
     * compositing manager is running for `widget'`s screen.
     * 
     * Please note that the semantics of this call will change
     * in the future if used on a widget that has a composited
     * window in its hierarchy (as set by gdk_window_set_composited()).
     */
    isComposited(): boolean
    /**
     * Determines whether `widget` can be drawn to. A widget can be drawn
     * to if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Returns the widget's effective sensitivity, which means
     * it is sensitive itself and also its parent widget is sensntive
     */
    isSensitive(): boolean
    /**
     * Determines whether `widget` is a toplevel widget. Currently only
     * #GtkWindow and #GtkInvisible are toplevel widgets. Toplevel
     * widgets have no parent widget.
     */
    isToplevel(): boolean
    /**
     * This function should be called whenever keyboard navigation within
     * a single widget hits a boundary. The function emits the
     * #GtkWidget::keynav-failed signal on the widget and its return
     * value should be interpreted in a way similar to the return value of
     * gtk_widget_child_focus():
     * 
     * When %TRUE is returned, stay in the widget, the failed keyboard
     * navigation is Ok and/or there is nowhere we can/should move the
     * focus to.
     * 
     * When %FALSE is returned, the caller should continue with keyboard
     * navigation outside the widget, e.g. by calling
     * gtk_widget_child_focus() on the widget's toplevel.
     * 
     * The default ::keynav-failed handler returns %TRUE for
     * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
     * values of #GtkDirectionType, it looks at the
     * #GtkSettings:gtk-keynav-cursor-only setting and returns %FALSE
     * if the setting is %TRUE. This way the entire user interface
     * becomes cursor-navigatable on input devices such as mobile phones
     * which only have cursor keys but no tab key.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * gtk_widget_error_bell() to notify the user of the failed keyboard
     * navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * #GtkEntry widgets where the user should be able to navigate the
     * entire row with the cursor keys, as e.g. known from user interfaces
     * that require entering license keys.
     * @param direction direction of focus movement
     */
    keynavFailed(direction: DirectionType): boolean
    /**
     * Lists the closures used by `widget` for accelerator group connections
     * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
     * The closures can be used to monitor accelerator changes on `widget,`
     * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
     * #GtkAccelGroup of a closure which can be found out with
     * gtk_accel_group_from_accel_closure().
     */
    listAccelClosures(): GObject.TClosure[]
    /**
     * Returns a newly allocated list of the widgets, normally labels, for
     * which this widget is a the target of a mnemonic (see for example,
     * gtk_label_set_mnemonic_widget()).
     * 
     * The widgets in the list are not individually referenced. If you
     * want to iterate through the list and perform actions involving
     * callbacks that might destroy the widgets, you
     * <emphasis>must</emphasis> call <literal>g_list_foreach (result,
     * (GFunc)g_object_ref, NULL)</literal> first, and then unref all the
     * widgets afterwards.
     */
    listMnemonicLabels(): Widget[]
    // Has conflict: map(): void
    // Has conflict: mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Sets the base color for a widget in a particular state.
     * All other style values are left untouched. The base color
     * is the background color used along with the text color
     * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
     * and #GtkTextView. See also gtk_widget_modify_style().
     * 
     * Note that "no window" widgets (which have the %GTK_NO_WINDOW flag set)
     * draw on their parent container's window and thus may not draw any
     * background themselves. This is the case for e.g. #GtkLabel. To modify
     * the background of such widgets, you have to set the base color on their
     * parent; if you want to set the background of a rectangular area around
     * a label, try placing the label in a #GtkEventBox widget and setting
     * the base color on that.
     * @param state the state for which to set the base color
     * @param color the color to assign (does not need to be allocated),         or %NULL to undo the effect of previous calls to         of gtk_widget_modify_base().
     */
    modifyBase(state: StateType, color: Gdk.Color | null): void
    /**
     * Sets the background color for a widget in a particular state.
     * All other style values are left untouched. See also
     * gtk_widget_modify_style().
     * 
     * Note that "no window" widgets (which have the %GTK_NO_WINDOW flag set)
     * draw on their parent container's window and thus may not draw any
     * background themselves. This is the case for e.g. #GtkLabel. To modify
     * the background of such widgets, you have to set the background color
     * on their parent; if you want to set the background of a rectangular
     * area around a label, try placing the label in a #GtkEventBox widget
     * and setting the background color on that.
     * @param state the state for which to set the background color
     * @param color the color to assign (does not need to be allocated),         or %NULL to undo the effect of previous calls to         of gtk_widget_modify_bg().
     */
    modifyBg(state: StateType, color: Gdk.Color | null): void
    /**
     * Sets the cursor color to use in a widget, overriding the
     * #GtkWidget:cursor-color and #GtkWidget:secondary-cursor-color
     * style properties. All other style values are left untouched.
     * See also gtk_widget_modify_style().
     * @param primary the color to use for primary cursor (does not need to be           allocated), or %NULL to undo the effect of previous calls to           of gtk_widget_modify_cursor().
     * @param secondary the color to use for secondary cursor (does not need to be             allocated), or %NULL to undo the effect of previous calls to             of gtk_widget_modify_cursor().
     */
    modifyCursor(primary: Gdk.Color, secondary: Gdk.Color): void
    /**
     * Sets the foreground color for a widget in a particular state.
     * All other style values are left untouched. See also
     * gtk_widget_modify_style().
     * @param state the state for which to set the foreground color
     * @param color the color to assign (does not need to be allocated),         or %NULL to undo the effect of previous calls to         of gtk_widget_modify_fg().
     */
    modifyFg(state: StateType, color: Gdk.Color | null): void
    /**
     * Sets the font to use for a widget.  All other style values are left
     * untouched. See also gtk_widget_modify_style().
     * @param fontDesc the font description to use, or %NULL to undo   the effect of previous calls to gtk_widget_modify_font().
     */
    modifyFont(fontDesc: Pango.FontDescription | null): void
    /**
     * Modifies style values on the widget. Modifications made using this
     * technique take precedence over style values set via an RC file,
     * however, they will be overriden if a style is explicitely set on
     * the widget using gtk_widget_set_style(). The #GtkRcStyle structure
     * is designed so each field can either be set or unset, so it is
     * possible, using this function, to modify some style values and
     * leave the others unchanged.
     * 
     * Note that modifications made with this function are not cumulative
     * with previous calls to gtk_widget_modify_style() or with such
     * functions as gtk_widget_modify_fg(). If you wish to retain
     * previous values, you must first call gtk_widget_get_modifier_style(),
     * make your modifications to the returned style, then call
     * gtk_widget_modify_style() with that style. On the other hand,
     * if you first call gtk_widget_modify_style(), subsequent calls
     * to such functions gtk_widget_modify_fg() will have a cumulative
     * effect with the initial modifications.
     * @param style the #GtkRcStyle holding the style modifications
     */
    modifyStyle(style: RcStyle): void
    /**
     * Sets the text color for a widget in a particular state.  All other
     * style values are left untouched. The text color is the foreground
     * color used along with the base color (see gtk_widget_modify_base())
     * for widgets such as #GtkEntry and #GtkTextView. See also
     * gtk_widget_modify_style().
     * @param state the state for which to set the text color
     * @param color the color to assign (does not need to be allocated),         or %NULL to undo the effect of previous calls to         of gtk_widget_modify_text().
     */
    modifyText(state: StateType, color: Gdk.Color | null): void
    /**
     * Obtains the full path to `widget`. The path is simply the name of a
     * widget and all its parents in the container hierarchy, separated by
     * periods. The name of a widget comes from
     * gtk_widget_get_name(). Paths are used to apply styles to a widget
     * in gtkrc configuration files. Widget names are the type of the
     * widget by default (e.g. "GtkButton") or can be set to an
     * application-specific value with gtk_widget_set_name(). By setting
     * the name of a widget, you allow users or theme authors to apply
     * styles to that specific widget in their gtkrc
     * file. `path_reversed_p` fills in the path in reverse order,
     * i.e. starting with `widget'`s name instead of starting with the name
     * of `widget'`s outermost ancestor.
     */
    path(): [ /* pathLength */ number, /* path */ string, /* pathReversed */ string ]
    /**
     * This function does the same as gtk_widget_queue_draw().
     */
    queueClear(): void
    /**
     * This function is no longer different from
     * gtk_widget_queue_draw_area(), though it once was. Now it just calls
     * gtk_widget_queue_draw_area(). Originally
     * gtk_widget_queue_clear_area() would force a redraw of the
     * background for %GTK_NO_WINDOW widgets, and
     * gtk_widget_queue_draw_area() would not. Now both functions ensure
     * the background will be redrawn.
     * @param x x coordinate of upper-left corner of rectangle to redraw
     * @param y y coordinate of upper-left corner of rectangle to redraw
     * @param width width of region to draw
     * @param height height of region to draw
     */
    queueClearArea(x: number, y: number, width: number, height: number): void
    /**
     * Equivalent to calling gtk_widget_queue_draw_area() for the
     * entire area of a widget.
     */
    queueDraw(): void
    /**
     * Invalidates the rectangular area of `widget` defined by `x,` `y,`
     * `width` and `height` by calling gdk_window_invalidate_rect() on the
     * widget's window and all its child windows. Once the main loop
     * becomes idle (after the current batch of events has been processed,
     * roughly), the window will receive expose events for the union of
     * all regions that have been invalidated.
     * 
     * Normally you would only use this function in widget
     * implementations. You might also use it, or
     * gdk_window_invalidate_rect() directly, to schedule a redraw of a
     * #GtkDrawingArea or some portion thereof.
     * 
     * Frequently you can just call gdk_window_invalidate_rect() or
     * gdk_window_invalidate_region() instead of this function. Those
     * functions will invalidate only a single window, instead of the
     * widget and all its children.
     * 
     * The advantage of adding to the invalidated region compared to
     * simply drawing immediately is efficiency; using an invalid region
     * ensures that you only have to redraw one time.
     * @param x x coordinate of upper-left corner of rectangle to redraw
     * @param y y coordinate of upper-left corner of rectangle to redraw
     * @param width width of region to draw
     * @param height height of region to draw
     */
    queueDrawArea(x: number, y: number, width: number, height: number): void
    /**
     * This function is only for use in widget implementations.
     * Flags a widget to have its size renegotiated; should
     * be called when a widget for some reason has a new size request.
     * For example, when you change the text in a #GtkLabel, #GtkLabel
     * queues a resize to ensure there's enough space for the new text.
     */
    queueResize(): void
    /**
     * This function works like gtk_widget_queue_resize(),
     * except that the widget is not invalidated.
     */
    queueResizeNoRedraw(): void
    // Has conflict: realize(): void
    /**
     * Removes an accelerator from `widget,` previously installed with
     * gtk_widget_add_accelerator().
     * @param accelGroup accel group for this widget
     * @param accelKey GDK keyval of the accelerator
     * @param accelMods modifier key combination of the accelerator
     */
    removeAccelerator(accelGroup: AccelGroup, accelKey: number, accelMods: Gdk.ModifierType): boolean
    /**
     * Removes a widget from the list of mnemonic labels for
     * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
     * must have previously been added to the list with
     * gtk_widget_add_mnemonic_label().
     * @param label a #GtkWidget that was previously set as a mnemnic label for         `widget` with gtk_widget_add_mnemonic_label().
     */
    removeMnemonicLabel(label: Widget): void
    /**
     * A convenience function that uses the theme engine and RC file
     * settings for `widget` to look up `stock_id` and render it to
     * a pixbuf. `stock_id` should be a stock icon ID such as
     * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
     * such as #GTK_ICON_SIZE_MENU. `detail` should be a string that
     * identifies the widget or code doing the rendering, so that
     * theme engines can special-case rendering for that widget or code.
     * 
     * The pixels in the returned #GdkPixbuf are shared with the rest of
     * the application and should not be modified. The pixbuf should be freed
     * after use with g_object_unref().
     * @param stockId a stock ID
     * @param size a stock size. A size of (GtkIconSize)-1 means     render at the size of the source and don't scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
     * @param detail render detail to pass to theme engine
     */
    renderIcon(stockId: string, size: number, detail: string | null): GdkPixbuf.Pixbuf
    /**
     * Moves a widget from one #GtkContainer to another, handling reference
     * count issues to avoid destroying the widget.
     * @param newParent a #GtkContainer to move the widget into
     */
    reparent(newParent: Widget): void
    /**
     * Reset the styles of `widget` and all descendents, so when
     * they are looked up again, they get the correct values
     * for the currently loaded RC file settings.
     * 
     * This function is not useful for applications.
     */
    resetRcStyles(): void
    /**
     * Recursively resets the shape on this widget and its descendants.
     */
    resetShapes(): void
    /**
     * Very rarely-used function. This function is used to emit
     * an expose event signals on a widget. This function is not
     * normally used directly. The only time it is used is when
     * propagating an expose event to a child %NO_WINDOW widget, and
     * that is normally done using gtk_container_propagate_expose().
     * 
     * If you want to force an area of a window to be redrawn,
     * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
     * To cause the redraw to be done immediately, follow that call
     * with a call to gdk_window_process_updates().
     * @param event a expose #GdkEvent
     */
    sendExpose(event: Gdk.Event): number
    /**
     * Sends the focus change `event` to `widget`
     * 
     * This function is not meant to be used by applications. The only time it
     * should be used is when it is necessary for a #GtkWidget to assign focus
     * to a widget that is semantically owned by the first widget even though
     * it's not a direct child - for instance, a search entry in a floating
     * window similar to the quick search in #GtkTreeView.
     * 
     * An example of its usage is:
     * 
     * |[
     *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
     * 
     *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
     *   fevent->focus_change.in = TRUE;
     *   fevent->focus_change.window = gtk_widget_get_window (widget);
     *   if (fevent->focus_change.window != NULL)
     *     g_object_ref (fevent->focus_change.window);
     * 
     *   gtk_widget_send_focus_change (widget, fevent);
     * 
     *   gdk_event_free (event);
     * ```
     * 
     * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
     */
    sendFocusChange(event: Gdk.Event): boolean
    /**
     * Given an accelerator group, `accel_group,` and an accelerator path,
     * `accel_path,` sets up an accelerator in `accel_group` so whenever the
     * key binding that is defined for `accel_path` is pressed, `widget`
     * will be activated.  This removes any accelerators (for any
     * accelerator group) installed by previous calls to
     * gtk_widget_set_accel_path(). Associating accelerators with
     * paths allows them to be modified by the user and the modifications
     * to be saved for future use. (See gtk_accel_map_save().)
     * 
     * This function is a low level function that would most likely
     * be used by a menu creation system like #GtkUIManager. If you
     * use #GtkUIManager, setting up accelerator paths will be done
     * automatically.
     * 
     * Even when you you aren't using #GtkUIManager, if you only want to
     * set up accelerators on menu items gtk_menu_item_set_accel_path()
     * provides a somewhat more convenient interface.
     * 
     * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
     * pass a static string, you can save some memory by interning it first with
     * g_intern_static_string().
     * @param accelPath path used to look up the accelerator
     * @param accelGroup a #GtkAccelGroup.
     */
    setAccelPath(accelPath: string | null, accelGroup: AccelGroup | null): void
    /**
     * Sets the widget's allocation.  This should not be used
     * directly, but from within a widget's size_allocate method.
     * @param allocation a pointer to a #GtkAllocation to copy from
     */
    setAllocation(allocation: Allocation): void
    /**
     * Sets whether the application intends to draw on the widget in
     * an #GtkWidget::expose-event handler.
     * 
     * This is a hint to the widget and does not affect the behavior of
     * the GTK+ core; many widgets ignore this flag entirely. For widgets
     * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
     * the effect is to suppress default themed drawing of the widget's
     * background. (Children of the widget will still be drawn.) The application
     * is then entirely responsible for drawing the widget background.
     * 
     * Note that the background is still drawn when the widget is mapped.
     * If this is not suitable (e.g. because you want to make a transparent
     * window using an RGBA visual), you can work around this by doing:
     * |[
     *  gtk_widget_realize (window);
     *  gdk_window_set_back_pixmap (window->window, NULL, FALSE);
     *  gtk_widget_show (window);
     * ```
     * 
     * @param appPaintable %TRUE if the application will paint on the widget
     */
    setAppPaintable(appPaintable: boolean): void
    /**
     * Specifies whether `widget` can be a default widget. See
     * gtk_widget_grab_default() for details about the meaning of
     * "default".
     * @param canDefault whether or not `widget` can be a default widget.
     */
    setCanDefault(canDefault: boolean): void
    /**
     * Specifies whether `widget` can own the input focus. See
     * gtk_widget_grab_focus() for actually setting the input focus on a
     * widget.
     * @param canFocus whether or not `widget` can own the input focus.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void
    /**
     * Sets the colormap for the widget to the given value. Widget must not
     * have been previously realized. This probably should only be used
     * from an <function>init()</function> function (i.e. from the constructor
     * for the widget).
     * @param colormap a colormap
     */
    setColormap(colormap: Gdk.Colormap): void
    /**
     * Sets a widgets composite name. The widget must be
     * a composite child of its parent; see gtk_widget_push_composite_child().
     * @param name the name to set
     */
    setCompositeName(name: string): void
    /**
     * Sets the reading direction on a particular widget. This direction
     * controls the primary direction for widgets containing text,
     * and also the direction in which the children of a container are
     * packed. The ability to set the direction is present in order
     * so that correct localization into languages with right-to-left
     * reading directions can be done. Generally, applications will
     * let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitely
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by gtk_widget_set_default_direction() will be used.
     * @param dir the new direction
     */
    setDirection(dir: TextDirection): void
    /**
     * Widgets are double buffered by default; you can use this function
     * to turn off the buffering. "Double buffered" simply means that
     * gdk_window_begin_paint_region() and gdk_window_end_paint() are called
     * automatically around expose events sent to the
     * widget. gdk_window_begin_paint() diverts all drawing to a widget's
     * window to an offscreen buffer, and gdk_window_end_paint() draws the
     * buffer to the screen. The result is that users see the window
     * update in one smooth step, and don't see individual graphics
     * primitives being rendered.
     * 
     * In very simple terms, double buffered widgets don't flicker,
     * so you would only use this function to turn off double buffering
     * if you had special needs and really knew what you were doing.
     * 
     * Note: if you turn off double-buffering, you have to handle
     * expose events, since even the clearing to the background color or
     * pixmap will not happen automatically (as it is done in
     * gdk_window_begin_paint()).
     * @param doubleBuffered %TRUE to double-buffer a widget
     */
    setDoubleBuffered(doubleBuffered: boolean): void
    /**
     * Sets the event mask (see #GdkEventMask) for a widget. The event
     * mask determines which events a widget will receive. Keep in mind
     * that different widgets have different default event masks, and by
     * changing the event mask you may disrupt a widget's functionality,
     * so be careful. This function must be called while a widget is
     * unrealized. Consider gtk_widget_add_events() for widgets that are
     * already realized, or if you want to preserve the existing event
     * mask. This function can't be used with #GTK_NO_WINDOW widgets;
     * to get events on those widgets, place them inside a #GtkEventBox
     * and receive events on the event box.
     * @param events event mask
     */
    setEvents(events: number): void
    /**
     * Sets the extension events mask to `mode`. See #GdkExtensionMode
     * and gdk_input_set_extension_events().
     * @param mode bitfield of extension events to receive
     */
    setExtensionEvents(mode: Gdk.ExtensionMode): void
    /**
     * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
     * GtkWidget:has-tooltip for more information.
     * @param hasTooltip whether or not `widget` has a tooltip.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Specifies whether `widget` has a #GdkWindow of its own. Note that
     * all realized widgets have a non-%NULL "window" pointer
     * (gtk_widget_get_window() never returns a %NULL window when a widget
     * is realized), but for many of them it's actually the #GdkWindow of
     * one of its parent widgets. Widgets that do not create a %window for
     * themselves in GtkWidget::realize() must announce this by
     * calling this function with `has_window` = %FALSE.
     * 
     * This function should only be called by widget implementations,
     * and they should call it in their init() function.
     * @param hasWindow whether or not `widget` has a window.
     */
    setHasWindow(hasWindow: boolean): void
    /**
     * Marks the widget as being realized.
     * 
     * This function should only ever be called in a derived widget's
     * "map" or "unmap" implementation.
     * @param mapped %TRUE to mark the widget as mapped
     */
    setMapped(mapped: boolean): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Sets the #GtkWidget:no-show-all property, which determines whether
     * calls to gtk_widget_show_all() and gtk_widget_hide_all() will affect
     * this widget.
     * 
     * This is mostly for use in constructing widget hierarchies with externally
     * controlled visibility, see #GtkUIManager.
     * @param noShowAll the new value for the "no-show-all" property
     */
    setNoShowAll(noShowAll: boolean): void
    /**
     * This function is useful only when implementing subclasses of
     * #GtkContainer.
     * Sets the container as the parent of `widget,` and takes care of
     * some details such as updating the state and style of the child
     * to reflect its new location. The opposite function is
     * gtk_widget_unparent().
     * @param parent parent container
     */
    setParent(parent: Widget): void
    /**
     * Sets a non default parent window for `widget`.
     * @param parentWindow the new parent window.
     */
    setParentWindow(parentWindow: Gdk.Window): void
    /**
     * Marks the widget as being realized.
     * 
     * This function should only ever be called in a derived widget's
     * "realize" or "unrealize" implementation.
     * @param realized %TRUE to mark the widget as realized
     */
    setRealized(realized: boolean): void
    /**
     * Specifies whether `widget` will be treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See gtk_widget_grab_default() for details about the meaning of
     * "default".
     * @param receivesDefault whether or not `widget` can be a default widget.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets whether the entire widget is queued for drawing when its size
     * allocation changes. By default, this setting is %TRUE and
     * the entire widget is redrawn on every size change. If your widget
     * leaves the upper left unchanged when made bigger, turning this
     * setting off will improve performance.
     * 
     * Note that for %NO_WINDOW widgets setting this flag to %FALSE turns
     * off all allocation on resizing: the widget will not even redraw if
     * its position changes; this is to allow containers that don't draw
     * anything to avoid excess invalidations. If you set this flag on a
     * %NO_WINDOW widget that <emphasis>does</emphasis> draw on `widget->`window,
     * you are responsible for invalidating both the old and new allocation
     * of the widget when the widget is moved and responsible for invalidating
     * regions newly when the widget increases size.
     * @param redrawOnAllocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
     */
    setRedrawOnAllocate(redrawOnAllocate: boolean): void
    /**
     * For widgets that support scrolling, sets the scroll adjustments and
     * returns %TRUE.  For widgets that don't support scrolling, does
     * nothing and returns %FALSE. Widgets that don't support scrolling
     * can be scrolled by placing them in a #GtkViewport, which does
     * support scrolling.
     * @param hadjustment an adjustment for horizontal scrolling, or %NULL
     * @param vadjustment an adjustment for vertical scrolling, or %NULL
     */
    setScrollAdjustments(hadjustment: Adjustment | null, vadjustment: Adjustment | null): boolean
    /**
     * Sets the sensitivity of a widget. A widget is sensitive if the user
     * can interact with it. Insensitive widgets are "grayed out" and the
     * user can't interact with them. Insensitive widgets are known as
     * "inactive", "disabled", or "ghosted" in some other toolkits.
     * @param sensitive %TRUE to make the widget sensitive
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget; that is, the widget's size
     * request will be `width` by `height`. You can use this function to
     * force a widget to be either larger or smaller than it normally
     * would be.
     * 
     * In most cases, gtk_window_set_default_size() is a better choice for
     * toplevel windows than this function; setting the default size will
     * still allow users to shrink the window. Setting the size request
     * will force them to leave the window at least as large as the size
     * request. When dealing with window sizes,
     * gtk_window_set_geometry_hints() can be a useful function as well.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the "natural" size request of the widget will be used instead.
     * 
     * Widgets can't actually be allocated a size less than 1 by 1, but
     * you can pass 0,0 to this function to mean "as small as possible."
     * @param width width `widget` should request, or -1 to unset
     * @param height height `widget` should request, or -1 to unset
     */
    setSizeRequest(width: number, height: number): void
    /**
     * This function is for use in widget implementations. Sets the state
     * of a widget (insensitive, prelighted, etc.) Usually you should set
     * the state using wrapper functions such as gtk_widget_set_sensitive().
     * @param state new state for `widget`
     */
    setState(state: StateType): void
    /**
     * Sets the #GtkStyle for a widget (`widget->`style). You probably don't
     * want to use this function; it interacts badly with themes, because
     * themes work by replacing the #GtkStyle. Instead, use
     * gtk_widget_modify_style().
     * @param style a #GtkStyle, or %NULL to remove the effect of a previous         gtk_widget_set_style() and go back to the default style
     */
    setStyle(style: Style | null): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked up with
     *  the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
     * 
     * This function will take care of setting GtkWidget:has-tooltip to %TRUE
     * and of the default handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-markup property and
     * gtk_tooltip_set_markup().
     * @param markup the contents of the tooltip for `widget,` or %NULL
     */
    setTooltipMarkup(markup: string | null): void
    /**
     * Sets `text` as the contents of the tooltip. This function will take
     * care of setting GtkWidget:has-tooltip to %TRUE and of the default
     * handler for the GtkWidget::query-tooltip signal.
     * 
     * See also the GtkWidget:tooltip-text property and gtk_tooltip_set_text().
     * @param text the contents of the tooltip for `widget`
     */
    setTooltipText(text: string): void
    /**
     * Replaces the default, usually yellow, window used for displaying
     * tooltips with `custom_window`. GTK+ will take care of showing and
     * hiding `custom_window` at the right moment, to behave likewise as
     * the default tooltip window. If `custom_window` is %NULL, the default
     * tooltip window will be used.
     * 
     * If the custom window should have the default theming it needs to
     * have the name "gtk-tooltip", see gtk_widget_set_name().
     * @param customWindow a #GtkWindow, or %NULL
     */
    setTooltipWindow(customWindow: Window | null): void
    /**
     * Sets the position of a widget. The funny "u" in the name comes from
     * the "user position" hint specified by the X Window System, and
     * exists for legacy reasons. This function doesn't work if a widget
     * is inside a container; it's only really useful on #GtkWindow.
     * 
     * Don't use this function to center dialogs over the main application
     * window; most window managers will do the centering on your behalf
     * if you call gtk_window_set_transient_for(), and it's really not
     * possible to get the centering to work correctly in all cases from
     * application code. But if you insist, use gtk_window_set_position()
     * to set #GTK_WIN_POS_CENTER_ON_PARENT, don't do the centering
     * manually.
     * 
     * Note that although `x` and `y` can be individually unset, the position
     * is not honoured unless both `x` and `y` are set.
     * @param x x position; -1 to unset x; -2 to leave x unchanged
     * @param y y position; -1 to unset y; -2 to leave y unchanged
     */
    setUposition(x: number, y: number): void
    /**
     * Sets the minimum size of a widget; that is, the widget's size
     * request will be `width` by `height`. You can use this function to
     * force a widget to be either larger or smaller than it is. The
     * strange "usize" name dates from the early days of GTK+, and derives
     * from X Window System terminology. In many cases,
     * gtk_window_set_default_size() is a better choice for toplevel
     * windows than this function; setting the default size will still
     * allow users to shrink the window. Setting the usize will force them
     * to leave the window at least as large as the usize. When dealing
     * with window sizes, gtk_window_set_geometry_hints() can be a useful
     * function as well.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * @param width minimum width, or -1 to unset
     * @param height minimum height, or -1 to unset
     */
    setUsize(width: number, height: number): void
    /**
     * Sets the visibility state of `widget`. Note that setting this to
     * %TRUE doesn't mean the widget is actually viewable, see
     * gtk_widget_get_visible().
     * 
     * This function simply calls gtk_widget_show() or gtk_widget_hide()
     * but is nicer to use when the visibility of the widget depends on
     * some condition.
     * @param visible whether the widget should be shown or not
     */
    setVisible(visible: boolean): void
    /**
     * Sets a widget's window. This function should only be used in a
     * widget's GtkWidget::realize() implementation. The %window passed is
     * usually either new window created with gdk_window_new(), or the
     * window of its parent widget as returned by
     * gtk_widget_get_parent_window().
     * 
     * Widgets must indicate whether they will create their own #GdkWindow
     * by calling gtk_widget_set_has_window(). This is usually done in the
     * widget's init() function.
     * @param window a #GdkWindow
     */
    setWindow(window: Gdk.Window): void
    /**
     * Sets a shape for this widget's GDK window. This allows for
     * transparent windows etc., see gdk_window_shape_combine_mask()
     * for more information.
     * @param shapeMask shape to be added, or %NULL to remove an existing shape
     * @param offsetX X position of shape mask with respect to `window`
     * @param offsetY Y position of shape mask with respect to `window`
     */
    shapeCombineMask(shapeMask: Gdk.Bitmap | null, offsetX: number, offsetY: number): void
    // Has conflict: show(): void
    // Has conflict: showAll(): void
    /**
     * Shows a widget. If the widget is an unmapped toplevel widget
     * (i.e. a #GtkWindow that has not yet been shown), enter the main
     * loop and wait for the window to actually be mapped. Be careful;
     * because the main loop is running, anything can happen during
     * this function.
     */
    showNow(): void
    // Has conflict: sizeAllocate(allocation: Allocation): void
    // Has conflict: sizeRequest(requisition: Requisition): void
    /**
     * This function attaches the widget's #GtkStyle to the widget's
     * #GdkWindow. It is a replacement for
     * 
     * <programlisting>
     * widget->style = gtk_style_attach (widget->style, widget->window);
     * </programlisting>
     * 
     * and should only ever be called in a derived widget's "realize"
     * implementation which does not chain up to its parent class'
     * "realize" implementation, because one of the parent classes
     * (finally #GtkWidget) would attach the style itself.
     */
    styleAttach(): void
    /**
     * Gets the value of a style property of `widget`.
     * @param propertyName the name of a style property
     * @param value location to return the property value
     */
    styleGetProperty(propertyName: string, value: any): void
    /**
     * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
     * This causes all queued #GtkWidget::child-notify signals on `widget` to be
     * emitted.
     */
    thawChildNotify(): void
    /**
     * Translate coordinates relative to `src_widget'`s allocation to coordinates
     * relative to `dest_widget'`s allocations. In order to perform this
     * operation, both widgets must be realized, and must share a common
     * toplevel.
     * @param destWidget a #GtkWidget
     * @param srcX X position relative to `src_widget`
     * @param srcY Y position relative to `src_widget`
     */
    translateCoordinates(destWidget: Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number, /* destY */ number ]
    /**
     * Triggers a tooltip query on the display where the toplevel of `widget`
     * is located. See gtk_tooltip_trigger_tooltip_query() for more
     * information.
     */
    triggerTooltipQuery(): void
    // Has conflict: unmap(): void
    /**
     * This function is only for use in widget implementations.
     * Should be called by implementations of the remove method
     * on #GtkContainer, to dissociate a child from the container.
     */
    unparent(): void
    // Has conflict: unrealize(): void
    /**
     * Inverse of gtk_widget_ref(). Equivalent to g_object_unref().
     */
    unref(): void

    // Own virtual methods of Gtk-2.0.Gtk.Widget

    buttonPressEvent(event: Gdk.EventButton): boolean
    buttonReleaseEvent(event: Gdk.EventButton): boolean
    /**
     * Determines whether an accelerator that activates the signal
     * identified by `signal_id` can currently be activated.
     * This is done by emitting the #GtkWidget::can-activate-accel
     * signal on `widget;` if the signal isn't overridden by a
     * handler or in a derived widget, then the default check is
     * that the widget must be sensitive, and the widget and all
     * its ancestors mapped.
     * @virtual 
     * @param signalId the ID of a signal installed on `widget`
     */
    canActivateAccel(signalId: number): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * <link linkend="child-properties">child property</link> `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * @virtual 
     * @param pspec 
     */
    childNotify(pspec: GObject.ParamSpec): void
    clientEvent(event: Gdk.EventClient): boolean
    compositedChanged(): void
    configureEvent(event: Gdk.EventConfigure): boolean
    deleteEvent(event: Gdk.EventAny): boolean
    destroyEvent(event: Gdk.EventAny): boolean
    directionChanged(previousDirection: TextDirection): void
    dispatchChildPropertiesChanged(nPspecs: number, pspecs: GObject.ParamSpec): void
    dragBegin(context: Gdk.DragContext): void
    dragDataDelete(context: Gdk.DragContext): void
    dragDataGet(context: Gdk.DragContext, selectionData: SelectionData, info: number, time: number): void
    dragDataReceived(context: Gdk.DragContext, x: number, y: number, selectionData: SelectionData, info: number, time: number): void
    dragDrop(context: Gdk.DragContext, x: number, y: number, time: number): boolean
    dragEnd(context: Gdk.DragContext): void
    dragLeave(context: Gdk.DragContext, time: number): void
    dragMotion(context: Gdk.DragContext, x: number, y: number, time: number): boolean
    enterNotifyEvent(event: Gdk.EventCrossing): boolean
    /**
     * Rarely-used function. This function is used to emit
     * the event signals on a widget (those signals should never
     * be emitted without using this function to do so).
     * If you want to synthesize an event though, don't use this function;
     * instead, use gtk_main_do_event() so the event will behave as if
     * it were in the event queue. Don't synthesize expose events; instead,
     * use gdk_window_invalidate_rect() to invalidate a region of the
     * window.
     * @virtual 
     * @param event a #GdkEvent
     */
    event(event: Gdk.Event): boolean
    exposeEvent(event: Gdk.EventExpose): boolean
    focus(direction: DirectionType): boolean
    focusInEvent(event: Gdk.EventFocus): boolean
    focusOutEvent(event: Gdk.EventFocus): boolean
    /**
     * Returns the accessible object that describes the widget to an
     * assistive technology.
     * 
     * If no accessibility library is loaded (i.e. no ATK implementation library is
     * loaded via <envar>GTK_MODULES</envar> or via another application library,
     * such as libgnome), then this #AtkObject instance may be a no-op. Likewise,
     * if no class-specific #AtkObject implementation is available for the widget
     * instance in question, it will inherit an #AtkObject implementation from the
     * first ancestor class for which such an implementation is defined.
     * 
     * The documentation of the <ulink url="http://developer.gnome.org/doc/API/2.0/atk/index.html">ATK</ulink>
     * library contains more information about accessible objects and their uses.
     * @virtual 
     */
    getAccessible(): Atk.Object
    grabBrokenEvent(event: Gdk.EventGrabBroken): boolean
    /**
     * Causes `widget` to have the keyboard focus for the #GtkWindow it's
     * inside. `widget` must be a focusable widget, such as a #GtkEntry;
     * something like #GtkFrame won't work.
     * 
     * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
     * gtk_widget_set_can_focus() to modify that flag.
     * 
     * The widget also needs to be realized and mapped. This is indicated by the
     * related signals. Grabbing the focus immediately after creating the widget
     * will likely fail and cause critical warnings.
     * @virtual 
     */
    grabFocus(): void
    grabNotify(wasGrabbed: boolean): void
    /**
     * Reverses the effects of gtk_widget_show(), causing the widget to be
     * hidden (invisible to the user).
     * @virtual 
     */
    hide(): void
    /**
     * Recursively hides a widget and any child widgets.
     * @virtual 
     */
    hideAll(): void
    hierarchyChanged(previousToplevel: Widget): void
    keyPressEvent(event: Gdk.EventKey): boolean
    keyReleaseEvent(event: Gdk.EventKey): boolean
    leaveNotifyEvent(event: Gdk.EventCrossing): boolean
    /**
     * This function is only for use in widget implementations. Causes
     * a widget to be mapped if it isn't already.
     * @virtual 
     */
    map(): void
    mapEvent(event: Gdk.EventAny): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    motionNotifyEvent(event: Gdk.EventMotion): boolean
    noExposeEvent(event: Gdk.EventAny): boolean
    parentSet(previousParent: Widget): void
    popupMenu(): boolean
    propertyNotifyEvent(event: Gdk.EventProperty): boolean
    proximityInEvent(event: Gdk.EventProximity): boolean
    proximityOutEvent(event: Gdk.EventProximity): boolean
    queryTooltip(x: number, y: number, keyboardTooltip: boolean, tooltip: Tooltip): boolean
    /**
     * Creates the GDK (windowing system) resources associated with a
     * widget.  For example, `widget->`window will be created when a widget
     * is realized.  Normally realization happens implicitly; if you show
     * a widget and all its parent containers, then the widget will be
     * realized and mapped automatically.
     * 
     * Realizing a widget requires all
     * the widget's parent widgets to be realized; calling
     * gtk_widget_realize() realizes the widget's parents in addition to
     * `widget` itself. If a widget is not yet inside a toplevel window
     * when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn't very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * GtkWidget::expose-event. Or simply g_signal_connect () to the
     * GtkWidget::realize signal.
     * @virtual 
     */
    realize(): void
    screenChanged(previousScreen: Gdk.Screen): void
    scrollEvent(event: Gdk.EventScroll): boolean
    selectionClearEvent(event: Gdk.EventSelection): boolean
    selectionGet(selectionData: SelectionData, info: number, time: number): void
    selectionNotifyEvent(event: Gdk.EventSelection): boolean
    selectionReceived(selectionData: SelectionData, time: number): void
    selectionRequestEvent(event: Gdk.EventSelection): boolean
    /**
     * Flags a widget to be displayed. Any widget that isn't shown will
     * not appear on the screen. If you want to show all the widgets in a
     * container, it's easier to call gtk_widget_show_all() on the
     * container, instead of individually showing the widgets.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     * @virtual 
     */
    show(): void
    /**
     * Recursively shows a widget, and any child widgets (if the widget is
     * a container).
     * @virtual 
     */
    showAll(): void
    showHelp(helpType: WidgetHelpType): boolean
    /**
     * This function is only used by #GtkContainer subclasses, to assign a size
     * and position to their child widgets.
     * @virtual 
     * @param allocation position and size to be allocated to `widget`
     */
    sizeAllocate(allocation: Allocation): void
    /**
     * This function is typically used when implementing a #GtkContainer
     * subclass.  Obtains the preferred size of a widget. The container
     * uses this information to arrange its child widgets and decide what
     * size allocations to give them with gtk_widget_size_allocate().
     * 
     * You can also call this function from an application, with some
     * caveats. Most notably, getting a size request requires the widget
     * to be associated with a screen, because font information may be
     * needed. Multihead-aware applications should keep this in mind.
     * 
     * Also remember that the size request is not necessarily the size
     * a widget will actually be allocated.
     * 
     * See also gtk_widget_get_child_requisition().
     * @virtual 
     * @param requisition a #GtkRequisition to be filled in
     */
    sizeRequest(requisition: Requisition): void
    stateChanged(previousState: StateType): void
    styleSet(previousStyle: Style): void
    /**
     * This function is only for use in widget implementations. Causes
     * a widget to be unmapped if it's currently mapped.
     * @virtual 
     */
    unmap(): void
    unmapEvent(event: Gdk.EventAny): boolean
    /**
     * This function is only useful in widget implementations.
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget, such as `widget->`window).
     * @virtual 
     */
    unrealize(): void
    visibilityNotifyEvent(event: Gdk.EventVisibility): boolean
    windowStateEvent(event: Gdk.EventWindowState): boolean

    // Own signals of Gtk-2.0.Gtk.Widget

    connect(sigName: "accel-closures-changed", callback: Widget.AccelClosuresChangedSignalCallback): number
    on(sigName: "accel-closures-changed", callback: Widget.AccelClosuresChangedSignalCallback): number
    once(sigName: "accel-closures-changed", callback: Widget.AccelClosuresChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "accel-closures-changed", ...args: any[]): void
    connect(sigName: "button-press-event", callback: Widget.ButtonPressEventSignalCallback): number
    on(sigName: "button-press-event", callback: Widget.ButtonPressEventSignalCallback): number
    once(sigName: "button-press-event", callback: Widget.ButtonPressEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "button-press-event", ...args: any[]): void
    connect(sigName: "button-release-event", callback: Widget.ButtonReleaseEventSignalCallback): number
    on(sigName: "button-release-event", callback: Widget.ButtonReleaseEventSignalCallback): number
    once(sigName: "button-release-event", callback: Widget.ButtonReleaseEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "button-release-event", ...args: any[]): void
    connect(sigName: "can-activate-accel", callback: Widget.CanActivateAccelSignalCallback): number
    on(sigName: "can-activate-accel", callback: Widget.CanActivateAccelSignalCallback): number
    once(sigName: "can-activate-accel", callback: Widget.CanActivateAccelSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "can-activate-accel", ...args: any[]): void
    connect(sigName: "child-notify", callback: Widget.ChildNotifySignalCallback): number
    on(sigName: "child-notify", callback: Widget.ChildNotifySignalCallback): number
    once(sigName: "child-notify", callback: Widget.ChildNotifySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "child-notify", ...args: any[]): void
    connect(sigName: "client-event", callback: Widget.ClientEventSignalCallback): number
    on(sigName: "client-event", callback: Widget.ClientEventSignalCallback): number
    once(sigName: "client-event", callback: Widget.ClientEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "client-event", ...args: any[]): void
    connect(sigName: "composited-changed", callback: Widget.CompositedChangedSignalCallback): number
    on(sigName: "composited-changed", callback: Widget.CompositedChangedSignalCallback): number
    once(sigName: "composited-changed", callback: Widget.CompositedChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "composited-changed", ...args: any[]): void
    connect(sigName: "configure-event", callback: Widget.ConfigureEventSignalCallback): number
    on(sigName: "configure-event", callback: Widget.ConfigureEventSignalCallback): number
    once(sigName: "configure-event", callback: Widget.ConfigureEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "configure-event", ...args: any[]): void
    connect(sigName: "damage-event", callback: Widget.DamageEventSignalCallback): number
    on(sigName: "damage-event", callback: Widget.DamageEventSignalCallback): number
    once(sigName: "damage-event", callback: Widget.DamageEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "damage-event", ...args: any[]): void
    connect(sigName: "delete-event", callback: Widget.DeleteEventSignalCallback): number
    on(sigName: "delete-event", callback: Widget.DeleteEventSignalCallback): number
    once(sigName: "delete-event", callback: Widget.DeleteEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "delete-event", ...args: any[]): void
    connect(sigName: "destroy-event", callback: Widget.DestroyEventSignalCallback): number
    on(sigName: "destroy-event", callback: Widget.DestroyEventSignalCallback): number
    once(sigName: "destroy-event", callback: Widget.DestroyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "destroy-event", ...args: any[]): void
    connect(sigName: "direction-changed", callback: Widget.DirectionChangedSignalCallback): number
    on(sigName: "direction-changed", callback: Widget.DirectionChangedSignalCallback): number
    once(sigName: "direction-changed", callback: Widget.DirectionChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "direction-changed", ...args: any[]): void
    connect(sigName: "drag-begin", callback: Widget.DragBeginSignalCallback): number
    on(sigName: "drag-begin", callback: Widget.DragBeginSignalCallback): number
    once(sigName: "drag-begin", callback: Widget.DragBeginSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-begin", ...args: any[]): void
    connect(sigName: "drag-data-delete", callback: Widget.DragDataDeleteSignalCallback): number
    on(sigName: "drag-data-delete", callback: Widget.DragDataDeleteSignalCallback): number
    once(sigName: "drag-data-delete", callback: Widget.DragDataDeleteSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-data-delete", ...args: any[]): void
    connect(sigName: "drag-data-get", callback: Widget.DragDataGetSignalCallback): number
    on(sigName: "drag-data-get", callback: Widget.DragDataGetSignalCallback): number
    once(sigName: "drag-data-get", callback: Widget.DragDataGetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-data-get", data: SelectionData, info: number, time: number, ...args: any[]): void
    connect(sigName: "drag-data-received", callback: Widget.DragDataReceivedSignalCallback): number
    on(sigName: "drag-data-received", callback: Widget.DragDataReceivedSignalCallback): number
    once(sigName: "drag-data-received", callback: Widget.DragDataReceivedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-data-received", x: number, y: number, data: SelectionData, info: number, time: number, ...args: any[]): void
    connect(sigName: "drag-drop", callback: Widget.DragDropSignalCallback): number
    on(sigName: "drag-drop", callback: Widget.DragDropSignalCallback): number
    once(sigName: "drag-drop", callback: Widget.DragDropSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-drop", x: number, y: number, time: number, ...args: any[]): void
    connect(sigName: "drag-end", callback: Widget.DragEndSignalCallback): number
    on(sigName: "drag-end", callback: Widget.DragEndSignalCallback): number
    once(sigName: "drag-end", callback: Widget.DragEndSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-end", ...args: any[]): void
    connect(sigName: "drag-failed", callback: Widget.DragFailedSignalCallback): number
    on(sigName: "drag-failed", callback: Widget.DragFailedSignalCallback): number
    once(sigName: "drag-failed", callback: Widget.DragFailedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-failed", result: DragResult, ...args: any[]): void
    connect(sigName: "drag-leave", callback: Widget.DragLeaveSignalCallback): number
    on(sigName: "drag-leave", callback: Widget.DragLeaveSignalCallback): number
    once(sigName: "drag-leave", callback: Widget.DragLeaveSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-leave", time: number, ...args: any[]): void
    connect(sigName: "drag-motion", callback: Widget.DragMotionSignalCallback): number
    on(sigName: "drag-motion", callback: Widget.DragMotionSignalCallback): number
    once(sigName: "drag-motion", callback: Widget.DragMotionSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "drag-motion", x: number, y: number, time: number, ...args: any[]): void
    connect(sigName: "enter-notify-event", callback: Widget.EnterNotifyEventSignalCallback): number
    on(sigName: "enter-notify-event", callback: Widget.EnterNotifyEventSignalCallback): number
    once(sigName: "enter-notify-event", callback: Widget.EnterNotifyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "enter-notify-event", ...args: any[]): void
    connect(sigName: "event", callback: Widget.EventSignalCallback): number
    on(sigName: "event", callback: Widget.EventSignalCallback): number
    once(sigName: "event", callback: Widget.EventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "event", ...args: any[]): void
    connect(sigName: "event-after", callback: Widget.EventAfterSignalCallback): number
    on(sigName: "event-after", callback: Widget.EventAfterSignalCallback): number
    once(sigName: "event-after", callback: Widget.EventAfterSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "event-after", ...args: any[]): void
    connect(sigName: "expose-event", callback: Widget.ExposeEventSignalCallback): number
    on(sigName: "expose-event", callback: Widget.ExposeEventSignalCallback): number
    once(sigName: "expose-event", callback: Widget.ExposeEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "expose-event", ...args: any[]): void
    connect(sigName: "focus", callback: Widget.FocusSignalCallback): number
    on(sigName: "focus", callback: Widget.FocusSignalCallback): number
    once(sigName: "focus", callback: Widget.FocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "focus", ...args: any[]): void
    connect(sigName: "focus-in-event", callback: Widget.FocusInEventSignalCallback): number
    on(sigName: "focus-in-event", callback: Widget.FocusInEventSignalCallback): number
    once(sigName: "focus-in-event", callback: Widget.FocusInEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "focus-in-event", ...args: any[]): void
    connect(sigName: "focus-out-event", callback: Widget.FocusOutEventSignalCallback): number
    on(sigName: "focus-out-event", callback: Widget.FocusOutEventSignalCallback): number
    once(sigName: "focus-out-event", callback: Widget.FocusOutEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "focus-out-event", ...args: any[]): void
    connect(sigName: "grab-broken-event", callback: Widget.GrabBrokenEventSignalCallback): number
    on(sigName: "grab-broken-event", callback: Widget.GrabBrokenEventSignalCallback): number
    once(sigName: "grab-broken-event", callback: Widget.GrabBrokenEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "grab-broken-event", ...args: any[]): void
    connect(sigName: "grab-focus", callback: Widget.GrabFocusSignalCallback): number
    on(sigName: "grab-focus", callback: Widget.GrabFocusSignalCallback): number
    once(sigName: "grab-focus", callback: Widget.GrabFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "grab-focus", ...args: any[]): void
    connect(sigName: "grab-notify", callback: Widget.GrabNotifySignalCallback): number
    on(sigName: "grab-notify", callback: Widget.GrabNotifySignalCallback): number
    once(sigName: "grab-notify", callback: Widget.GrabNotifySignalCallback): number
    off(handlerId: number): number
    emit(sigName: "grab-notify", ...args: any[]): void
    connect(sigName: "hide", callback: Widget.HideSignalCallback): number
    on(sigName: "hide", callback: Widget.HideSignalCallback): number
    once(sigName: "hide", callback: Widget.HideSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "hide", ...args: any[]): void
    connect(sigName: "hierarchy-changed", callback: Widget.HierarchyChangedSignalCallback): number
    on(sigName: "hierarchy-changed", callback: Widget.HierarchyChangedSignalCallback): number
    once(sigName: "hierarchy-changed", callback: Widget.HierarchyChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "hierarchy-changed", ...args: any[]): void
    connect(sigName: "key-press-event", callback: Widget.KeyPressEventSignalCallback): number
    on(sigName: "key-press-event", callback: Widget.KeyPressEventSignalCallback): number
    once(sigName: "key-press-event", callback: Widget.KeyPressEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "key-press-event", ...args: any[]): void
    connect(sigName: "key-release-event", callback: Widget.KeyReleaseEventSignalCallback): number
    on(sigName: "key-release-event", callback: Widget.KeyReleaseEventSignalCallback): number
    once(sigName: "key-release-event", callback: Widget.KeyReleaseEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "key-release-event", ...args: any[]): void
    connect(sigName: "keynav-failed", callback: Widget.KeynavFailedSignalCallback): number
    on(sigName: "keynav-failed", callback: Widget.KeynavFailedSignalCallback): number
    once(sigName: "keynav-failed", callback: Widget.KeynavFailedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "keynav-failed", ...args: any[]): void
    connect(sigName: "leave-notify-event", callback: Widget.LeaveNotifyEventSignalCallback): number
    on(sigName: "leave-notify-event", callback: Widget.LeaveNotifyEventSignalCallback): number
    once(sigName: "leave-notify-event", callback: Widget.LeaveNotifyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "leave-notify-event", ...args: any[]): void
    connect(sigName: "map", callback: Widget.MapSignalCallback): number
    on(sigName: "map", callback: Widget.MapSignalCallback): number
    once(sigName: "map", callback: Widget.MapSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "map", ...args: any[]): void
    connect(sigName: "map-event", callback: Widget.MapEventSignalCallback): number
    on(sigName: "map-event", callback: Widget.MapEventSignalCallback): number
    once(sigName: "map-event", callback: Widget.MapEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "map-event", ...args: any[]): void
    connect(sigName: "mnemonic-activate", callback: Widget.MnemonicActivateSignalCallback): number
    on(sigName: "mnemonic-activate", callback: Widget.MnemonicActivateSignalCallback): number
    once(sigName: "mnemonic-activate", callback: Widget.MnemonicActivateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "mnemonic-activate", ...args: any[]): void
    connect(sigName: "motion-notify-event", callback: Widget.MotionNotifyEventSignalCallback): number
    on(sigName: "motion-notify-event", callback: Widget.MotionNotifyEventSignalCallback): number
    once(sigName: "motion-notify-event", callback: Widget.MotionNotifyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "motion-notify-event", ...args: any[]): void
    connect(sigName: "move-focus", callback: Widget.MoveFocusSignalCallback): number
    on(sigName: "move-focus", callback: Widget.MoveFocusSignalCallback): number
    once(sigName: "move-focus", callback: Widget.MoveFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "move-focus", ...args: any[]): void
    connect(sigName: "no-expose-event", callback: Widget.NoExposeEventSignalCallback): number
    on(sigName: "no-expose-event", callback: Widget.NoExposeEventSignalCallback): number
    once(sigName: "no-expose-event", callback: Widget.NoExposeEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "no-expose-event", ...args: any[]): void
    connect(sigName: "parent-set", callback: Widget.ParentSetSignalCallback): number
    on(sigName: "parent-set", callback: Widget.ParentSetSignalCallback): number
    once(sigName: "parent-set", callback: Widget.ParentSetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "parent-set", ...args: any[]): void
    connect(sigName: "popup-menu", callback: Widget.PopupMenuSignalCallback): number
    on(sigName: "popup-menu", callback: Widget.PopupMenuSignalCallback): number
    once(sigName: "popup-menu", callback: Widget.PopupMenuSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "popup-menu", ...args: any[]): void
    connect(sigName: "property-notify-event", callback: Widget.PropertyNotifyEventSignalCallback): number
    on(sigName: "property-notify-event", callback: Widget.PropertyNotifyEventSignalCallback): number
    once(sigName: "property-notify-event", callback: Widget.PropertyNotifyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "property-notify-event", ...args: any[]): void
    connect(sigName: "proximity-in-event", callback: Widget.ProximityInEventSignalCallback): number
    on(sigName: "proximity-in-event", callback: Widget.ProximityInEventSignalCallback): number
    once(sigName: "proximity-in-event", callback: Widget.ProximityInEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "proximity-in-event", ...args: any[]): void
    connect(sigName: "proximity-out-event", callback: Widget.ProximityOutEventSignalCallback): number
    on(sigName: "proximity-out-event", callback: Widget.ProximityOutEventSignalCallback): number
    once(sigName: "proximity-out-event", callback: Widget.ProximityOutEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "proximity-out-event", ...args: any[]): void
    connect(sigName: "query-tooltip", callback: Widget.QueryTooltipSignalCallback): number
    on(sigName: "query-tooltip", callback: Widget.QueryTooltipSignalCallback): number
    once(sigName: "query-tooltip", callback: Widget.QueryTooltipSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "query-tooltip", y: number, keyboardMode: boolean, tooltip: Tooltip, ...args: any[]): void
    connect(sigName: "realize", callback: Widget.RealizeSignalCallback): number
    on(sigName: "realize", callback: Widget.RealizeSignalCallback): number
    once(sigName: "realize", callback: Widget.RealizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "realize", ...args: any[]): void
    connect(sigName: "screen-changed", callback: Widget.ScreenChangedSignalCallback): number
    on(sigName: "screen-changed", callback: Widget.ScreenChangedSignalCallback): number
    once(sigName: "screen-changed", callback: Widget.ScreenChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "screen-changed", ...args: any[]): void
    connect(sigName: "scroll-event", callback: Widget.ScrollEventSignalCallback): number
    on(sigName: "scroll-event", callback: Widget.ScrollEventSignalCallback): number
    once(sigName: "scroll-event", callback: Widget.ScrollEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "scroll-event", ...args: any[]): void
    connect(sigName: "selection-clear-event", callback: Widget.SelectionClearEventSignalCallback): number
    on(sigName: "selection-clear-event", callback: Widget.SelectionClearEventSignalCallback): number
    once(sigName: "selection-clear-event", callback: Widget.SelectionClearEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-clear-event", ...args: any[]): void
    connect(sigName: "selection-get", callback: Widget.SelectionGetSignalCallback): number
    on(sigName: "selection-get", callback: Widget.SelectionGetSignalCallback): number
    once(sigName: "selection-get", callback: Widget.SelectionGetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-get", info: number, time: number, ...args: any[]): void
    connect(sigName: "selection-notify-event", callback: Widget.SelectionNotifyEventSignalCallback): number
    on(sigName: "selection-notify-event", callback: Widget.SelectionNotifyEventSignalCallback): number
    once(sigName: "selection-notify-event", callback: Widget.SelectionNotifyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-notify-event", ...args: any[]): void
    connect(sigName: "selection-received", callback: Widget.SelectionReceivedSignalCallback): number
    on(sigName: "selection-received", callback: Widget.SelectionReceivedSignalCallback): number
    once(sigName: "selection-received", callback: Widget.SelectionReceivedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-received", time: number, ...args: any[]): void
    connect(sigName: "selection-request-event", callback: Widget.SelectionRequestEventSignalCallback): number
    on(sigName: "selection-request-event", callback: Widget.SelectionRequestEventSignalCallback): number
    once(sigName: "selection-request-event", callback: Widget.SelectionRequestEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "selection-request-event", ...args: any[]): void
    connect(sigName: "show", callback: Widget.ShowSignalCallback): number
    on(sigName: "show", callback: Widget.ShowSignalCallback): number
    once(sigName: "show", callback: Widget.ShowSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "show", ...args: any[]): void
    connect(sigName: "show-help", callback: Widget.ShowHelpSignalCallback): number
    on(sigName: "show-help", callback: Widget.ShowHelpSignalCallback): number
    once(sigName: "show-help", callback: Widget.ShowHelpSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "show-help", ...args: any[]): void
    connect(sigName: "size-allocate", callback: Widget.SizeAllocateSignalCallback): number
    on(sigName: "size-allocate", callback: Widget.SizeAllocateSignalCallback): number
    once(sigName: "size-allocate", callback: Widget.SizeAllocateSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "size-allocate", ...args: any[]): void
    connect(sigName: "size-request", callback: Widget.SizeRequestSignalCallback): number
    on(sigName: "size-request", callback: Widget.SizeRequestSignalCallback): number
    once(sigName: "size-request", callback: Widget.SizeRequestSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "size-request", ...args: any[]): void
    connect(sigName: "state-changed", callback: Widget.StateChangedSignalCallback): number
    on(sigName: "state-changed", callback: Widget.StateChangedSignalCallback): number
    once(sigName: "state-changed", callback: Widget.StateChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "state-changed", ...args: any[]): void
    connect(sigName: "style-set", callback: Widget.StyleSetSignalCallback): number
    on(sigName: "style-set", callback: Widget.StyleSetSignalCallback): number
    once(sigName: "style-set", callback: Widget.StyleSetSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "style-set", ...args: any[]): void
    connect(sigName: "unmap", callback: Widget.UnmapSignalCallback): number
    on(sigName: "unmap", callback: Widget.UnmapSignalCallback): number
    once(sigName: "unmap", callback: Widget.UnmapSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unmap", ...args: any[]): void
    connect(sigName: "unmap-event", callback: Widget.UnmapEventSignalCallback): number
    on(sigName: "unmap-event", callback: Widget.UnmapEventSignalCallback): number
    once(sigName: "unmap-event", callback: Widget.UnmapEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unmap-event", ...args: any[]): void
    connect(sigName: "unrealize", callback: Widget.UnrealizeSignalCallback): number
    on(sigName: "unrealize", callback: Widget.UnrealizeSignalCallback): number
    once(sigName: "unrealize", callback: Widget.UnrealizeSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "unrealize", ...args: any[]): void
    connect(sigName: "visibility-notify-event", callback: Widget.VisibilityNotifyEventSignalCallback): number
    on(sigName: "visibility-notify-event", callback: Widget.VisibilityNotifyEventSignalCallback): number
    once(sigName: "visibility-notify-event", callback: Widget.VisibilityNotifyEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "visibility-notify-event", ...args: any[]): void
    connect(sigName: "window-state-event", callback: Widget.WindowStateEventSignalCallback): number
    on(sigName: "window-state-event", callback: Widget.WindowStateEventSignalCallback): number
    once(sigName: "window-state-event", callback: Widget.WindowStateEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "window-state-event", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Widget

    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

/**
 * GtkWidget is the base class all widgets in GTK+ derive from. It manages the
 * widget lifecycle, states and style.
 * 
 * <refsect2 id="style-properties">
 * <para>
 * <structname>GtkWidget</structname> introduces <firstterm>style
 * properties</firstterm> - these are basically object properties that are stored
 * not on the object, but in the style object associated to the widget. Style
 * properties are set in <link linkend="gtk-Resource-Files">resource files</link>.
 * This mechanism is used for configuring such things as the location of the
 * scrollbar arrows through the theme, giving theme authors more control over the
 * look of applications without the need to write a theme engine in C.
 * </para>
 * <para>
 * Use gtk_widget_class_install_style_property() to install style properties for
 * a widget class, gtk_widget_class_find_style_property() or
 * gtk_widget_class_list_style_properties() to get information about existing
 * style properties and gtk_widget_style_get_property(), gtk_widget_style_get() or
 * gtk_widget_style_get_valist() to obtain the value of a style property.
 * </para>
 * </refsect2>
 * <refsect2 id="GtkWidget-BUILDER-UI">
 * <title>GtkWidget as GtkBuildable</title>
 * <para>
 * The GtkWidget implementation of the GtkBuildable interface supports a
 * custom &lt;accelerator&gt; element, which has attributes named key,
 * modifiers and signal and allows to specify accelerators.
 * </para>
 * <example>
 * <title>A UI definition fragment specifying an accelerator</title>
 * <programlisting><![CDATA[
 * <object class="GtkButton">
 *   <accelerator key="q" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
 * </object>
 * ]]></programlisting>
 * </example>
 * <para>
 * In addition to accelerators, <structname>GtkWidget</structname> also support a
 * custom &lt;accessible&gt; element, which supports actions and relations.
 * Properties on the accessible implementation of an object can be set by accessing the
 * internal child "accessible" of a <structname>GtkWidget</structname>.
 * </para>
 * <example>
 * <title>A UI definition fragment specifying an accessible</title>
 * <programlisting><![CDATA[
 * <object class="GtkButton" id="label1"/>
 *   <property name="label">I am a Label for a Button</property>
 * </object>
 * <object class="GtkButton" id="button1">
 *   <accessibility>
 *     <action action_name="click" translatable="yes">Click the button.</action>
 *     <relation target="label1" type="labelled-by"/>
 *   </accessibility>
 *   <child internal-child="accessible">
 *     <object class="AtkObject" id="a11y-button1">
 *       <property name="AtkObject::name">Clickable Button</property>
 *     </object>
 *   </child>
 * </object>
 * ]]></programlisting>
 * </example>
 * </refsect2>
 * @class 
 */
export class Widget extends Object {

    // Own properties of Gtk-2.0.Gtk.Widget

    static name: string

    // Constructors of Gtk-2.0.Gtk.Widget

    constructor(config?: Widget.ConstructorProperties) 
    _init(config?: Widget.ConstructorProperties): void
    /**
     * Obtains the default colormap used to create widgets.
     */
    static getDefaultColormap(): Gdk.Colormap
    /**
     * Obtains the current default reading direction. See
     * gtk_widget_set_default_direction().
     */
    static getDefaultDirection(): TextDirection
    /**
     * Returns the default style used by all widgets initially.
     */
    static getDefaultStyle(): Style
    /**
     * Obtains the visual of the default colormap. Not really useful;
     * used to be useful before gdk_colormap_get_visual() existed.
     */
    static getDefaultVisual(): Gdk.Visual
    /**
     * Removes a colormap pushed with gtk_widget_push_colormap().
     */
    static popColormap(): void
    /**
     * Cancels the effect of a previous call to gtk_widget_push_composite_child().
     */
    static popCompositeChild(): void
    /**
     * Pushes `cmap` onto a global stack of colormaps; the topmost
     * colormap on the stack will be used to create all widgets.
     * Remove `cmap` with gtk_widget_pop_colormap(). There's little
     * reason to use this function.
     * @param cmap a #GdkColormap
     */
    static pushColormap(cmap: Gdk.Colormap): void
    /**
     * Makes all newly-created widgets as composite children until
     * the corresponding gtk_widget_pop_composite_child() call.
     * 
     * A composite child is a child that's an implementation detail of the
     * container it's inside and should not be visible to people using the
     * container. Composite children aren't treated differently by GTK (but
     * see gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI
     * builders might want to treat them in a different way.
     * 
     * Here is a simple example:
     * |[
     *   gtk_widget_push_composite_child ();
     *   scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
     *   gtk_widget_set_composite_name (scrolled_window->hscrollbar, "hscrollbar");
     *   gtk_widget_pop_composite_child ();
     *   gtk_widget_set_parent (scrolled_window->hscrollbar,
     *                          GTK_WIDGET (scrolled_window));
     *   g_object_ref (scrolled_window->hscrollbar);
     * ```
     * 
     */
    static pushCompositeChild(): void
    /**
     * Sets the default colormap to use when creating widgets.
     * gtk_widget_push_colormap() is a better function to use if
     * you only want to affect a few widgets, rather than all widgets.
     * @param colormap a #GdkColormap
     */
    static setDefaultColormap(colormap: Gdk.Colormap): void
    /**
     * Sets the default reading direction for widgets where the
     * direction has not been explicitly set by gtk_widget_set_direction().
     * @param dir the new default direction. This cannot be        %GTK_TEXT_DIR_NONE.
     */
    static setDefaultDirection(dir: TextDirection): void
}

export module Window {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate-default`
     */
    export interface ActivateDefaultSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `activate-focus`
     */
    export interface ActivateFocusSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `frame-event`
     */
    export interface FrameEventSignalCallback {
        (object: Gdk.Event): boolean
    }

    /**
     * Signal callback interface for `keys-changed`
     */
    export interface KeysChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `set-focus`
     */
    export interface SetFocusSignalCallback {
        (object: Widget): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Buildable.ConstructorProperties, Bin.ConstructorProperties {

        // Own constructor properties of Gtk-2.0.Gtk.Window

        /**
         * Whether the window should receive the input focus.
         */
        acceptFocus?: boolean | null
        /**
         * If %TRUE, users can expand the window beyond its minimum size.
         */
        allowGrow?: boolean | null
        /**
         * If %TRUE, the window has no mimimum size. Setting this to %TRUE is
         * 99&percnt; of the time a bad idea.
         */
        allowShrink?: boolean | null
        /**
         * Whether the window should be decorated by the window manager.
         */
        decorated?: boolean | null
        defaultHeight?: number | null
        defaultWidth?: number | null
        /**
         * Whether the window frame should have a close button.
         */
        deletable?: boolean | null
        destroyWithParent?: boolean | null
        /**
         * Whether the window should receive the input focus when mapped.
         */
        focusOnMap?: boolean | null
        /**
         * The window gravity of the window. See gtk_window_move() and #GdkGravity for
         * more details about window gravity.
         */
        gravity?: Gdk.Gravity | null
        icon?: GdkPixbuf.Pixbuf | null
        /**
         * The :icon-name property specifies the name of the themed icon to
         * use as the window icon. See #GtkIconTheme for more details.
         */
        iconName?: string | null
        mnemonicsVisible?: boolean | null
        modal?: boolean | null
        /**
         * The requested opacity of the window. See gtk_window_set_opacity() for
         * more details about window opacity.
         */
        opacity?: number | null
        resizable?: boolean | null
        role?: string | null
        screen?: Gdk.Screen | null
        skipPagerHint?: boolean | null
        skipTaskbarHint?: boolean | null
        /**
         * The :startup-id is a write-only property for setting window's
         * startup notification identifier. See gtk_window_set_startup_id()
         * for more details.
         */
        startupId?: string | null
        title?: string | null
        /**
         * The transient parent of the window. See gtk_window_set_transient_for() for
         * more details about transient windows.
         */
        transientFor?: Window | null
        type?: WindowType | null
        typeHint?: Gdk.WindowTypeHint | null
        urgencyHint?: boolean | null
        windowPosition?: WindowPosition | null
    }

}

export interface Window extends Atk.ImplementorIface, Buildable {

    // Own properties of Gtk-2.0.Gtk.Window

    /**
     * Whether the window should receive the input focus.
     */
    acceptFocus: boolean
    defaultHeight: number
    defaultWidth: number
    /**
     * Whether the window frame should have a close button.
     */
    deletable: boolean
    /**
     * Whether the window should receive the input focus when mapped.
     */
    focusOnMap: boolean
    icon: GdkPixbuf.Pixbuf
    /**
     * The :icon-name property specifies the name of the themed icon to
     * use as the window icon. See #GtkIconTheme for more details.
     */
    iconName: string
    mnemonicsVisible: boolean
    /**
     * The requested opacity of the window. See gtk_window_set_opacity() for
     * more details about window opacity.
     */
    opacity: number
    resizable: boolean
    role: string
    skipPagerHint: boolean
    skipTaskbarHint: boolean
    /**
     * The :startup-id is a write-only property for setting window's
     * startup notification identifier. See gtk_window_set_startup_id()
     * for more details.
     */
    startupId: string
    /**
     * The transient parent of the window. See gtk_window_set_transient_for() for
     * more details about transient windows.
     */
    transientFor: Window
    urgencyHint: boolean
    windowPosition: WindowPosition

    // Own fields of Gtk-2.0.Gtk.Window

    bin: Bin
    title: string
    wmclassName: string
    wmclassClass: string
    wmRole: string
    focusWidget: Widget
    defaultWidget: Widget
    transientParent: Window
    geometryInfo: WindowGeometryInfo
    frame: Gdk.Window
    group: WindowGroup
    configureRequestCount: number
    allowShrink: number
    allowGrow: number
    configureNotifyReceived: number
    needDefaultPosition: number
    needDefaultSize: number
    position: number
    type: number
    hasUserRefCount: number
    hasFocus: any
    modal: number
    destroyWithParent: number
    hasFrame: number
    iconifyInitially: number
    stickInitially: number
    maximizeInitially: number
    decorated: number
    typeHint: number
    gravity: number
    isActive: number
    hasToplevelFocus: number
    frameLeft: number
    frameTop: number
    frameRight: number
    frameBottom: number
    keysChangedHandler: number
    mnemonicModifier: Gdk.ModifierType
    screen: Gdk.Screen

    // Owm methods of Gtk-2.0.Gtk.Window

    // Has conflict: activateDefault(): boolean
    // Has conflict: activateFocus(): boolean
    /**
     * Activates mnemonics and accelerators for this #GtkWindow. This is normally
     * called by the default ::key_press_event handler for toplevel windows,
     * however in some cases it may be useful to call this directly when
     * overriding the standard key handling for a toplevel window.
     * @param event a #GdkEventKey
     */
    activateKey(event: Gdk.EventKey): boolean
    /**
     * Associate `accel_group` with `window,` such that calling
     * gtk_accel_groups_activate() on `window` will activate accelerators
     * in `accel_group`.
     * @param accelGroup a #GtkAccelGroup
     */
    addAccelGroup(accelGroup: AccelGroup): void
    addEmbeddedXid(xid: Gdk.NativeWindow): void
    /**
     * Adds a mnemonic to this window.
     * @param keyval the mnemonic
     * @param target the widget that gets activated by the mnemonic
     */
    addMnemonic(keyval: number, target: Widget): void
    /**
     * Starts moving a window. This function is used if an application has
     * window movement grips. When GDK can support it, the window movement
     * will be done using the standard mechanism for the <link
     * linkend="gtk-X11-arch">window manager</link> or windowing
     * system. Otherwise, GDK will try to emulate window movement,
     * potentially not all that well, depending on the windowing system.
     * @param button mouse button that initiated the drag
     * @param rootX X position where the user clicked to initiate the drag, in root window coordinates
     * @param rootY Y position where the user clicked to initiate the drag
     * @param timestamp timestamp from the click event that initiated the drag
     */
    beginMoveDrag(button: number, rootX: number, rootY: number, timestamp: number): void
    /**
     * Starts resizing a window. This function is used if an application
     * has window resizing controls. When GDK can support it, the resize
     * will be done using the standard mechanism for the <link
     * linkend="gtk-X11-arch">window manager</link> or windowing
     * system. Otherwise, GDK will try to emulate window resizing,
     * potentially not all that well, depending on the windowing system.
     * @param edge position of the resize control
     * @param button mouse button that initiated the drag
     * @param rootX X position where the user clicked to initiate the drag, in root window coordinates
     * @param rootY Y position where the user clicked to initiate the drag
     * @param timestamp timestamp from the click event that initiated the drag
     */
    beginResizeDrag(edge: Gdk.WindowEdge, button: number, rootX: number, rootY: number, timestamp: number): void
    /**
     * Asks to deiconify (i.e. unminimize) the specified `window`. Note
     * that you shouldn't assume the window is definitely deiconified
     * afterward, because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could iconify it
     * again before your code which assumes deiconification gets to run.
     * 
     * You can track iconification via the "window-state-event" signal
     * on #GtkWidget.
     */
    deiconify(): void
    /**
     * Asks to place `window` in the fullscreen state. Note that you
     * shouldn't assume the window is definitely full screen afterward,
     * because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could unfullscreen it
     * again, and not all window managers honor requests to fullscreen
     * windows. But normally the window will end up fullscreen. Just
     * don't write code that crashes if not.
     * 
     * You can track the fullscreen state via the "window-state-event" signal
     * on #GtkWidget.
     */
    fullscreen(): void
    /**
     * Gets the value set by gtk_window_set_accept_focus().
     */
    getAcceptFocus(): boolean
    /**
     * Returns whether the window has been set to have decorations
     * such as a title bar via gtk_window_set_decorated().
     */
    getDecorated(): boolean
    /**
     * Gets the default size of the window. A value of -1 for the width or
     * height indicates that a default size has not been explicitly set
     * for that dimension, so the "natural" size of the window will be
     * used.
     * @param width location to store the default width, or %NULL
     * @param height location to store the default height, or %NULL
     */
    getDefaultSize(width: number | null, height: number | null): void
    /**
     * Returns the default widget for `window`. See gtk_window_set_default()
     * for more details.
     */
    getDefaultWidget(): Widget
    /**
     * Returns whether the window has been set to have a close button
     * via gtk_window_set_deletable().
     */
    getDeletable(): boolean
    /**
     * Returns whether the window will be destroyed with its transient parent. See
     * gtk_window_set_destroy_with_parent ().
     */
    getDestroyWithParent(): boolean
    /**
     * Retrieves the current focused widget within the window.
     * Note that this is the widget that would have the focus
     * if the toplevel window focused; if the toplevel window
     * is not focused then  <literal>gtk_widget_has_focus (widget)</literal> will
     * not be %TRUE for the widget.
     */
    getFocus(): Widget
    /**
     * Gets the value set by gtk_window_set_focus_on_map().
     */
    getFocusOnMap(): boolean
    /**
     * (Note: this is a special-purpose function intended for the
     *  framebuffer port; see gtk_window_set_has_frame(). It will not
     *  return the size of the window border drawn by the <link
     *  linkend="gtk-X11-arch">window manager</link>, which is the normal
     *  case when using a windowing system.  See
     *  gdk_window_get_frame_extents() to get the standard window border
     *  extents.)
     * 
     * Retrieves the dimensions of the frame window for this toplevel.
     * See gtk_window_set_has_frame(), gtk_window_set_frame_dimensions().
     */
    getFrameDimensions(): [ /* left */ number, /* top */ number, /* right */ number, /* bottom */ number ]
    /**
     * Gets the value set by gtk_window_set_gravity().
     */
    getGravity(): Gdk.Gravity
    /**
     * Returns the group for `window` or the default group, if
     * `window` is %NULL or if `window` does not have an explicit
     * window group.
     */
    getGroup(): WindowGroup
    /**
     * Accessor for whether the window has a frame window exterior to
     * `window->`window. Gets the value set by gtk_window_set_has_frame ().
     */
    getHasFrame(): boolean
    /**
     * Gets the value set by gtk_window_set_icon() (or if you've
     * called gtk_window_set_icon_list(), gets the first icon in
     * the icon list).
     */
    getIcon(): GdkPixbuf.Pixbuf
    /**
     * Retrieves the list of icons set by gtk_window_set_icon_list().
     * The list is copied, but the reference count on each
     * member won't be incremented.
     */
    getIconList(): GdkPixbuf.Pixbuf[]
    /**
     * Returns the name of the themed icon for the window,
     * see gtk_window_set_icon_name().
     */
    getIconName(): string
    /**
     * Returns the mnemonic modifier for this window. See
     * gtk_window_set_mnemonic_modifier().
     */
    getMnemonicModifier(): Gdk.ModifierType
    getMnemonicsVisible(): boolean
    /**
     * Returns whether the window is modal. See gtk_window_set_modal().
     */
    getModal(): boolean
    /**
     * Fetches the requested opacity for this window. See
     * gtk_window_set_opacity().
     */
    getOpacity(): number
    /**
     * This function returns the position you need to pass to
     * gtk_window_move() to keep `window` in its current position.  This
     * means that the meaning of the returned value varies with window
     * gravity. See gtk_window_move() for more details.
     * 
     * If you haven't changed the window gravity, its gravity will be
     * #GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()
     * gets the position of the top-left corner of the window manager
     * frame for the window. gtk_window_move() sets the position of this
     * same top-left corner.
     * 
     * gtk_window_get_position() is not 100% reliable because the X Window System
     * does not specify a way to obtain the geometry of the
     * decorations placed on a window by the window manager.
     * Thus GTK+ is using a "best guess" that works with most
     * window managers.
     * 
     * Moreover, nearly all window managers are historically broken with
     * respect to their handling of window gravity. So moving a window to
     * its current position as returned by gtk_window_get_position() tends
     * to result in moving the window slightly. Window managers are
     * slowly getting better over time.
     * 
     * If a window has gravity #GDK_GRAVITY_STATIC the window manager
     * frame is not relevant, and thus gtk_window_get_position() will
     * always produce accurate results. However you can't use static
     * gravity to do things like place a window in a corner of the screen,
     * because static gravity ignores the window manager decorations.
     * 
     * If you are saving and restoring your application's window
     * positions, you should know that it's impossible for applications to
     * do this without getting it somewhat wrong because applications do
     * not have sufficient knowledge of window manager state. The Correct
     * Mechanism is to support the session management protocol (see the
     * "GnomeClient" object in the GNOME libraries for example) and allow
     * the window manager to save your window sizes and positions.
     */
    getPosition(): [ /* rootX */ number, /* rootY */ number ]
    /**
     * Gets the value set by gtk_window_set_resizable().
     */
    getResizable(): boolean
    /**
     * Returns the role of the window. See gtk_window_set_role() for
     * further explanation.
     */
    getRole(): string
    /**
     * Returns the #GdkScreen associated with `window`.
     */
    getScreen(): Gdk.Screen
    /**
     * Obtains the current size of `window`. If `window` is not onscreen,
     * it returns the size GTK+ will suggest to the <link
     * linkend="gtk-X11-arch">window manager</link> for the initial window
     * size (but this is not reliably the same as the size the window
     * manager will actually select). The size obtained by
     * gtk_window_get_size() is the last size received in a
     * #GdkEventConfigure, that is, GTK+ uses its locally-stored size,
     * rather than querying the X server for the size. As a result, if you
     * call gtk_window_resize() then immediately call
     * gtk_window_get_size(), the size won't have taken effect yet. After
     * the window manager processes the resize request, GTK+ receives
     * notification that the size has changed via a configure event, and
     * the size of the window gets updated.
     * 
     * Note 1: Nearly any use of this function creates a race condition,
     * because the size of the window may change between the time that you
     * get the size and the time that you perform some action assuming
     * that size is the current size. To avoid race conditions, connect to
     * "configure-event" on the window and adjust your size-dependent
     * state to match the size delivered in the #GdkEventConfigure.
     * 
     * Note 2: The returned size does <emphasis>not</emphasis> include the
     * size of the window manager decorations (aka the window frame or
     * border). Those are not drawn by GTK+ and GTK+ has no reliable
     * method of determining their size.
     * 
     * Note 3: If you are getting a window size in order to position
     * the window onscreen, there may be a better way. The preferred
     * way is to simply set the window's semantic type with
     * gtk_window_set_type_hint(), which allows the window manager to
     * e.g. center dialogs. Also, if you set the transient parent of
     * dialogs with gtk_window_set_transient_for() window managers
     * will often center the dialog over its parent window. It's
     * much preferred to let the window manager handle these
     * things rather than doing it yourself, because all apps will
     * behave consistently and according to user prefs if the window
     * manager handles it. Also, the window manager can take the size
     * of the window decorations/border into account, while your
     * application cannot.
     * 
     * In any case, if you insist on application-specified window
     * positioning, there's <emphasis>still</emphasis> a better way than
     * doing it yourself - gtk_window_set_position() will frequently
     * handle the details for you.
     */
    getSize(): [ /* width */ number, /* height */ number ]
    /**
     * Gets the value set by gtk_window_set_skip_pager_hint().
     */
    getSkipPagerHint(): boolean
    /**
     * Gets the value set by gtk_window_set_skip_taskbar_hint()
     */
    getSkipTaskbarHint(): boolean
    /**
     * Retrieves the title of the window. See gtk_window_set_title().
     */
    getTitle(): string
    /**
     * Fetches the transient parent for this window. See
     * gtk_window_set_transient_for().
     */
    getTransientFor(): Window
    /**
     * Gets the type hint for this window. See gtk_window_set_type_hint().
     */
    getTypeHint(): Gdk.WindowTypeHint
    /**
     * Gets the value set by gtk_window_set_urgency_hint()
     */
    getUrgencyHint(): boolean
    /**
     * Gets the type of the window. See #GtkWindowType.
     */
    getWindowType(): WindowType
    /**
     * Returns whether `window` has an explicit window group.
     */
    hasGroup(): boolean
    /**
     * Asks to iconify (i.e. minimize) the specified `window`. Note that
     * you shouldn't assume the window is definitely iconified afterward,
     * because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could deiconify it
     * again, or there may not be a window manager in which case
     * iconification isn't possible, etc. But normally the window will end
     * up iconified. Just don't write code that crashes if not.
     * 
     * It's permitted to call this function before showing a window,
     * in which case the window will be iconified before it ever appears
     * onscreen.
     * 
     * You can track iconification via the "window-state-event" signal
     * on #GtkWidget.
     */
    iconify(): void
    /**
     * Asks to maximize `window,` so that it becomes full-screen. Note that
     * you shouldn't assume the window is definitely maximized afterward,
     * because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could unmaximize it
     * again, and not all window managers support maximization. But
     * normally the window will end up maximized. Just don't write code
     * that crashes if not.
     * 
     * It's permitted to call this function before showing a window,
     * in which case the window will be maximized when it appears onscreen
     * initially.
     * 
     * You can track maximization via the "window-state-event" signal
     * on #GtkWidget.
     */
    maximize(): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * 
     * The default handler for this signal activates the `widget` if
     * `group_cycling` is %FALSE, and just grabs the focus if `group_cycling`
     * is %TRUE.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Asks the <link linkend="gtk-X11-arch">window manager</link> to move
     * `window` to the given position.  Window managers are free to ignore
     * this; most window managers ignore requests for initial window
     * positions (instead using a user-defined placement algorithm) and
     * honor requests after the window has already been shown.
     * 
     * Note: the position is the position of the gravity-determined
     * reference point for the window. The gravity determines two things:
     * first, the location of the reference point in root window
     * coordinates; and second, which point on the window is positioned at
     * the reference point.
     * 
     * By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
     * point is simply the `x,` `y` supplied to gtk_window_move(). The
     * top-left corner of the window decorations (aka window frame or
     * border) will be placed at `x,` `y`.  Therefore, to position a window
     * at the top left of the screen, you want to use the default gravity
     * (which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.
     * 
     * To position a window at the bottom right corner of the screen, you
     * would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
     * point is at `x` + the window width and `y` + the window height, and
     * the bottom-right corner of the window border will be placed at that
     * reference point. So, to place a window in the bottom right corner
     * you would first set gravity to south east, then write:
     * <literal>gtk_window_move (window, gdk_screen_width () - window_width,
     * gdk_screen_height () - window_height)</literal> (note that this
     * example does not take multi-head scenarios into account).
     * 
     * The Extended Window Manager Hints specification at <ulink
     * url="http://www.freedesktop.org/Standards/wm-spec">
     * http://www.freedesktop.org/Standards/wm-spec</ulink> has a
     * nice table of gravities in the "implementation notes" section.
     * 
     * The gtk_window_get_position() documentation may also be relevant.
     * @param x X coordinate to move window to
     * @param y Y coordinate to move window to
     */
    move(x: number, y: number): void
    /**
     * Parses a standard X Window System geometry string - see the
     * manual page for X (type 'man X') for details on this.
     * gtk_window_parse_geometry() does work on all GTK+ ports
     * including Win32 but is primarily intended for an X environment.
     * 
     * If either a size or a position can be extracted from the
     * geometry string, gtk_window_parse_geometry() returns %TRUE
     * and calls gtk_window_set_default_size() and/or gtk_window_move()
     * to resize/move the window.
     * 
     * If gtk_window_parse_geometry() returns %TRUE, it will also
     * set the #GDK_HINT_USER_POS and/or #GDK_HINT_USER_SIZE hints
     * indicating to the window manager that the size/position of
     * the window was user-specified. This causes most window
     * managers to honor the geometry.
     * 
     * Note that for gtk_window_parse_geometry() to work as expected, it has
     * to be called when the window has its "final" size, i.e. after calling
     * gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()
     * on the window.
     * |[
     * #include <gtk/gtk.h>
     *    
     * static void
     * fill_with_content (GtkWidget *vbox)
     * {
     *   /&ast; fill with content... &ast;/
     * }
     *    
     * int
     * main (int argc, char *argv[])
     * {
     *   GtkWidget *window, *vbox;
     *   GdkGeometry size_hints = {
     *     100, 50, 0, 0, 100, 50, 10, 10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST
     *   };
     *    
     *   gtk_init (&argc, &argv);
     *   
     *   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
     *   vbox = gtk_vbox_new (FALSE, 0);
     *   
     *   gtk_container_add (GTK_CONTAINER (window), vbox);
     *   fill_with_content (vbox);
     *   gtk_widget_show_all (vbox);
     *   
     *   gtk_window_set_geometry_hints (GTK_WINDOW (window),
     * 	  			    window,
     * 				    &size_hints,
     * 				    GDK_HINT_MIN_SIZE |
     * 				    GDK_HINT_BASE_SIZE |
     * 				    GDK_HINT_RESIZE_INC);
     *   
     *   if (argc &gt; 1)
     *     {
     *       if (!gtk_window_parse_geometry (GTK_WINDOW (window), argv[1]))
     *         fprintf (stderr, "Failed to parse '%s'\n", argv[1]);
     *     }
     *    
     *   gtk_widget_show_all (window);
     *   gtk_main ();
     *    
     *   return 0;
     * }
     * ```
     * 
     * @param geometry geometry string
     */
    parseGeometry(geometry: string): boolean
    /**
     * Presents a window to the user. This may mean raising the window
     * in the stacking order, deiconifying it, moving it to the current
     * desktop, and/or giving it the keyboard focus, possibly dependent
     * on the user's platform, window manager, and preferences.
     * 
     * If `window` is hidden, this function calls gtk_widget_show()
     * as well.
     * 
     * This function should be used when the user tries to open a window
     * that's already open. Say for example the preferences dialog is
     * currently open, and the user chooses Preferences from the menu
     * a second time; use gtk_window_present() to move the already-open dialog
     * where the user can see it.
     * 
     * If you are calling this function in response to a user interaction,
     * it is preferable to use gtk_window_present_with_time().
     */
    present(): void
    /**
     * Presents a window to the user in response to a user interaction.
     * If you need to present a window without a timestamp, use
     * gtk_window_present(). See gtk_window_present() for details.
     * @param timestamp the timestamp of the user interaction (typically a   button or key press event) which triggered this call
     */
    presentWithTime(timestamp: number): void
    /**
     * Propagate a key press or release event to the focus widget and
     * up the focus container chain until a widget handles `event`.
     * This is normally called by the default ::key_press_event and
     * ::key_release_event handlers for toplevel windows,
     * however in some cases it may be useful to call this directly when
     * overriding the standard key handling for a toplevel window.
     * @param event a #GdkEventKey
     */
    propagateKeyEvent(event: Gdk.EventKey): boolean
    /**
     * Reverses the effects of gtk_window_add_accel_group().
     * @param accelGroup a #GtkAccelGroup
     */
    removeAccelGroup(accelGroup: AccelGroup): void
    removeEmbeddedXid(xid: Gdk.NativeWindow): void
    /**
     * Removes a mnemonic from this window.
     * @param keyval the mnemonic
     * @param target the widget that gets activated by the mnemonic
     */
    removeMnemonic(keyval: number, target: Widget): void
    /**
     * Hides `window,` then reshows it, resetting the
     * default size and position of the window. Used
     * by GUI builders only.
     */
    reshowWithInitialSize(): void
    /**
     * Resizes the window as if the user had done so, obeying geometry
     * constraints. The default geometry constraint is that windows may
     * not be smaller than their size request; to override this
     * constraint, call gtk_widget_set_size_request() to set the window's
     * request to a smaller value.
     * 
     * If gtk_window_resize() is called before showing a window for the
     * first time, it overrides any default size set with
     * gtk_window_set_default_size().
     * 
     * Windows may not be resized smaller than 1 by 1 pixels.
     * @param width width in pixels to resize the window to
     * @param height height in pixels to resize the window to
     */
    resize(width: number, height: number): void
    /**
     * Windows may set a hint asking the desktop environment not to receive
     * the input focus. This function sets this hint.
     * @param setting %TRUE to let this window receive input focus
     */
    setAcceptFocus(setting: boolean): void
    /**
     * By default, windows are decorated with a title bar, resize
     * controls, etc.  Some <link linkend="gtk-X11-arch">window
     * managers</link> allow GTK+ to disable these decorations, creating a
     * borderless window. If you set the decorated property to %FALSE
     * using this function, GTK+ will do its best to convince the window
     * manager not to decorate the window. Depending on the system, this
     * function may not have any effect when called on a window that is
     * already visible, so you should call it before calling gtk_window_show().
     * 
     * On Windows, this function always works, since there's no window manager
     * policy involved.
     * @param setting %TRUE to decorate the window
     */
    setDecorated(setting: boolean): void
    /**
     * The default widget is the widget that's activated when the user
     * presses Enter in a dialog (for example). This function sets or
     * unsets the default widget for a #GtkWindow about. When setting
     * (rather than unsetting) the default widget it's generally easier to
     * call gtk_widget_grab_focus() on the widget. Before making a widget
     * the default widget, you must set the #GTK_CAN_DEFAULT flag on the
     * widget you'd like to make the default using GTK_WIDGET_SET_FLAGS().
     * @param defaultWidget widget to be the default, or %NULL to unset the                  default widget for the toplevel.
     */
    setDefault(defaultWidget: Widget | null): void
    /**
     * Sets the default size of a window. If the window's "natural" size
     * (its size request) is larger than the default, the default will be
     * ignored. More generally, if the default size does not obey the
     * geometry hints for the window (gtk_window_set_geometry_hints() can
     * be used to set these explicitly), the default size will be clamped
     * to the nearest permitted size.
     * 
     * Unlike gtk_widget_set_size_request(), which sets a size request for
     * a widget and thus would keep users from shrinking the window, this
     * function only sets the initial size, just as if the user had
     * resized the window themselves. Users can still shrink the window
     * again as they normally would. Setting a default size of -1 means to
     * use the "natural" default size (the size request of the window).
     * 
     * For more control over a window's initial size and how resizing works,
     * investigate gtk_window_set_geometry_hints().
     * 
     * For some uses, gtk_window_resize() is a more appropriate function.
     * gtk_window_resize() changes the current size of the window, rather
     * than the size to be used on initial display. gtk_window_resize() always
     * affects the window itself, not the geometry widget.
     * 
     * The default size of a window only affects the first time a window is
     * shown; if a window is hidden and re-shown, it will remember the size
     * it had prior to hiding, rather than using the default size.
     * 
     * Windows can't actually be 0x0 in size, they must be at least 1x1, but
     * passing 0 for `width` and `height` is OK, resulting in a 1x1 default size.
     * @param width width in pixels, or -1 to unset the default width
     * @param height height in pixels, or -1 to unset the default height
     */
    setDefaultSize(width: number, height: number): void
    /**
     * By default, windows have a close button in the window frame. Some
     * <link linkend="gtk-X11-arch">window managers</link> allow GTK+ to
     * disable this button. If you set the deletable property to %FALSE
     * using this function, GTK+ will do its best to convince the window
     * manager not to show a close button. Depending on the system, this
     * function may not have any effect when called on a window that is
     * already visible, so you should call it before calling gtk_window_show().
     * 
     * On Windows, this function always works, since there's no window manager
     * policy involved.
     * @param setting %TRUE to decorate the window as deletable
     */
    setDeletable(setting: boolean): void
    /**
     * If `setting` is %TRUE, then destroying the transient parent of `window`
     * will also destroy `window` itself. This is useful for dialogs that
     * shouldn't persist beyond the lifetime of the main window they're
     * associated with, for example.
     * @param setting whether to destroy `window` with its transient parent
     */
    setDestroyWithParent(setting: boolean): void
    // Has conflict: setFocus(focus: Widget | null): void
    /**
     * Windows may set a hint asking the desktop environment not to receive
     * the input focus when the window is mapped.  This function sets this
     * hint.
     * @param setting %TRUE to let this window receive input focus on map
     */
    setFocusOnMap(setting: boolean): void
    /**
     * (Note: this is a special-purpose function intended for the framebuffer
     *  port; see gtk_window_set_has_frame(). It will have no effect on the
     *  window border drawn by the window manager, which is the normal
     *  case when using the X Window system.)
     * 
     * For windows with frames (see gtk_window_set_has_frame()) this function
     * can be used to change the size of the frame border.
     * @param left The width of the left border
     * @param top The height of the top border
     * @param right The width of the right border
     * @param bottom The height of the bottom border
     */
    setFrameDimensions(left: number, top: number, right: number, bottom: number): void
    /**
     * This function sets up hints about how a window can be resized by
     * the user.  You can set a minimum and maximum size; allowed resize
     * increments (e.g. for xterm, you can only resize by the size of a
     * character); aspect ratios; and more. See the #GdkGeometry struct.
     * @param geometryWidget widget the geometry hints will be applied to
     * @param geometry struct containing geometry information
     * @param geomMask mask indicating which struct fields should be paid attention to
     */
    setGeometryHints(geometryWidget: Widget, geometry: Gdk.Geometry, geomMask: Gdk.WindowHints): void
    /**
     * Window gravity defines the meaning of coordinates passed to
     * gtk_window_move(). See gtk_window_move() and #GdkGravity for
     * more details.
     * 
     * The default window gravity is #GDK_GRAVITY_NORTH_WEST which will
     * typically "do what you mean."
     * @param gravity window gravity
     */
    setGravity(gravity: Gdk.Gravity): void
    /**
     * (Note: this is a special-purpose function for the framebuffer port,
     *  that causes GTK+ to draw its own window border. For most applications,
     *  you want gtk_window_set_decorated() instead, which tells the window
     *  manager whether to draw the window border.)
     * 
     * If this function is called on a window with setting of %TRUE, before
     * it is realized or showed, it will have a "frame" window around
     * `window->`window, accessible in `window->`frame. Using the signal
     * frame_event you can receive all events targeted at the frame.
     * 
     * This function is used by the linux-fb port to implement managed
     * windows, but it could conceivably be used by X-programs that
     * want to do their own window decorations.
     * @param setting a boolean
     */
    setHasFrame(setting: boolean): void
    /**
     * Sets up the icon representing a #GtkWindow. This icon is used when
     * the window is minimized (also known as iconified).  Some window
     * managers or desktop environments may also place it in the window
     * frame, or display it in other contexts.
     * 
     * The icon should be provided in whatever size it was naturally
     * drawn; that is, don't scale the image before passing it to
     * GTK+. Scaling is postponed until the last minute, when the desired
     * final size is known, to allow best quality.
     * 
     * If you have your icon hand-drawn in multiple sizes, use
     * gtk_window_set_icon_list(). Then the best size will be used.
     * 
     * This function is equivalent to calling gtk_window_set_icon_list()
     * with a 1-element list.
     * 
     * See also gtk_window_set_default_icon_list() to set the icon
     * for all windows in your application in one go.
     * @param icon icon image, or %NULL
     */
    setIcon(icon: GdkPixbuf.Pixbuf | null): void
    /**
     * Sets the icon for `window`.
     * Warns on failure if `err` is %NULL.
     * 
     * This function is equivalent to calling gtk_window_set_icon()
     * with a pixbuf created by loading the image from `filename`.
     * @param filename location of icon file
     */
    setIconFromFile(filename: string): boolean
    /**
     * Sets the icon for the window from a named themed icon. See
     * the docs for #GtkIconTheme for more details.
     * 
     * Note that this has nothing to do with the WM_ICON_NAME
     * property which is mentioned in the ICCCM.
     * @param name the name of the themed icon
     */
    setIconName(name: string | null): void
    /**
     * Asks to keep `window` above, so that it stays on top. Note that
     * you shouldn't assume the window is definitely above afterward,
     * because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could not keep it above,
     * and not all window managers support keeping windows above. But
     * normally the window will end kept above. Just don't write code
     * that crashes if not.
     * 
     * It's permitted to call this function before showing a window,
     * in which case the window will be kept above when it appears onscreen
     * initially.
     * 
     * You can track the above state via the "window-state-event" signal
     * on #GtkWidget.
     * 
     * Note that, according to the <ulink
     * url="http://www.freedesktop.org/Standards/wm-spec">Extended Window
     * Manager Hints</ulink> specification, the above state is mainly meant
     * for user preferences and should not be used by applications e.g. for
     * drawing attention to their dialogs.
     * @param setting whether to keep `window` above other windows
     */
    setKeepAbove(setting: boolean): void
    /**
     * Asks to keep `window` below, so that it stays in bottom. Note that
     * you shouldn't assume the window is definitely below afterward,
     * because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could not keep it below,
     * and not all window managers support putting windows below. But
     * normally the window will be kept below. Just don't write code
     * that crashes if not.
     * 
     * It's permitted to call this function before showing a window,
     * in which case the window will be kept below when it appears onscreen
     * initially.
     * 
     * You can track the below state via the "window-state-event" signal
     * on #GtkWidget.
     * 
     * Note that, according to the <ulink
     * url="http://www.freedesktop.org/Standards/wm-spec">Extended Window
     * Manager Hints</ulink> specification, the above state is mainly meant
     * for user preferences and should not be used by applications e.g. for
     * drawing attention to their dialogs.
     * @param setting whether to keep `window` below other windows
     */
    setKeepBelow(setting: boolean): void
    /**
     * Sets the mnemonic modifier for this window.
     * @param modifier the modifier mask used to activate               mnemonics on this window.
     */
    setMnemonicModifier(modifier: Gdk.ModifierType): void
    /**
     * Sets the #GtkWindow:mnemonics-visible property.
     * @param setting the new value
     */
    setMnemonicsVisible(setting: boolean): void
    /**
     * Sets a window modal or non-modal. Modal windows prevent interaction
     * with other windows in the same application. To keep modal dialogs
     * on top of main application windows, use
     * gtk_window_set_transient_for() to make the dialog transient for the
     * parent; most <link linkend="gtk-X11-arch">window managers</link>
     * will then disallow lowering the dialog below the parent.
     * @param modal whether the window is modal
     */
    setModal(modal: boolean): void
    /**
     * Request the windowing system to make `window` partially transparent,
     * with opacity 0 being fully transparent and 1 fully opaque. (Values
     * of the opacity parameter are clamped to the [0,1] range.) On X11
     * this has any effect only on X screens with a compositing manager
     * running. See gtk_widget_is_composited(). On Windows it should work
     * always.
     * 
     * Note that setting a window's opacity after the window has been
     * shown causes it to flicker once on Windows.
     * @param opacity desired opacity, between 0 and 1
     */
    setOpacity(opacity: number): void
    setPolicy(allowShrink: number, allowGrow: number, autoShrink: number): void
    /**
     * Sets a position constraint for this window. If the old or new
     * constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
     * the window to be repositioned to satisfy the new constraint.
     * @param position a position constraint.
     */
    setPosition(position: WindowPosition): void
    /**
     * Sets whether the user can resize a window. Windows are user resizable
     * by default.
     * @param resizable %TRUE if the user can resize this window
     */
    setResizable(resizable: boolean): void
    /**
     * This function is only useful on X11, not with other GTK+ targets.
     * 
     * In combination with the window title, the window role allows a
     * <link linkend="gtk-X11-arch">window manager</link> to identify "the
     * same" window when an application is restarted. So for example you
     * might set the "toolbox" role on your app's toolbox window, so that
     * when the user restarts their session, the window manager can put
     * the toolbox back in the same place.
     * 
     * If a window already has a unique title, you don't need to set the
     * role, since the WM can use the title to identify the window when
     * restoring the session.
     * @param role unique identifier for the window to be used when restoring a session
     */
    setRole(role: string): void
    /**
     * Sets the #GdkScreen where the `window` is displayed; if
     * the window is already mapped, it will be unmapped, and
     * then remapped on the new screen.
     * @param screen a #GdkScreen.
     */
    setScreen(screen: Gdk.Screen): void
    /**
     * Windows may set a hint asking the desktop environment not to display
     * the window in the pager. This function sets this hint.
     * (A "pager" is any desktop navigation tool such as a workspace
     * switcher that displays a thumbnail representation of the windows
     * on the screen.)
     * @param setting %TRUE to keep this window from appearing in the pager
     */
    setSkipPagerHint(setting: boolean): void
    /**
     * Windows may set a hint asking the desktop environment not to display
     * the window in the task bar. This function sets this hint.
     * @param setting %TRUE to keep this window from appearing in the task bar
     */
    setSkipTaskbarHint(setting: boolean): void
    /**
     * Startup notification identifiers are used by desktop environment to
     * track application startup, to provide user feedback and other
     * features. This function changes the corresponding property on the
     * underlying GdkWindow. Normally, startup identifier is managed
     * automatically and you should only use this function in special cases
     * like transferring focus from other processes. You should use this
     * function before calling gtk_window_present() or any equivalent
     * function generating a window map event.
     * 
     * This function is only useful on X11, not with other GTK+ targets.
     * @param startupId a string with startup-notification identifier
     */
    setStartupId(startupId: string): void
    /**
     * Sets the title of the #GtkWindow. The title of a window will be
     * displayed in its title bar; on the X Window System, the title bar
     * is rendered by the <link linkend="gtk-X11-arch">window
     * manager</link>, so exactly how the title appears to users may vary
     * according to a user's exact configuration. The title should help a
     * user distinguish this window from other windows they may have
     * open. A good title might include the application name and current
     * document filename, for example.
     * @param title title of the window
     */
    setTitle(title: string): void
    /**
     * Dialog windows should be set transient for the main application
     * window they were spawned from. This allows <link
     * linkend="gtk-X11-arch">window managers</link> to e.g. keep the
     * dialog on top of the main window, or center the dialog over the
     * main window. gtk_dialog_new_with_buttons() and other convenience
     * functions in GTK+ will sometimes call
     * gtk_window_set_transient_for() on your behalf.
     * 
     * Passing %NULL for `parent` unsets the current transient window.
     * 
     * On Windows, this function puts the child window on top of the parent,
     * much as the window manager would have done on X.
     * @param parent parent window, or %NULL
     */
    setTransientFor(parent: Window | null): void
    /**
     * By setting the type hint for the window, you allow the window
     * manager to decorate and handle the window in a way which is
     * suitable to the function of the window in your application.
     * 
     * This function should be called before the window becomes visible.
     * 
     * gtk_dialog_new_with_buttons() and other convenience functions in GTK+
     * will sometimes call gtk_window_set_type_hint() on your behalf.
     * @param hint the window type
     */
    setTypeHint(hint: Gdk.WindowTypeHint): void
    /**
     * Windows may set a hint asking the desktop environment to draw
     * the users attention to the window. This function sets this hint.
     * @param setting %TRUE to mark this window as urgent
     */
    setUrgencyHint(setting: boolean): void
    /**
     * Don't use this function. It sets the X Window System "class" and
     * "name" hints for a window.  According to the ICCCM, you should
     * always set these to the same value for all windows in an
     * application, and GTK+ sets them to that value by default, so calling
     * this function is sort of pointless. However, you may want to call
     * gtk_window_set_role() on each window in your application, for the
     * benefit of the session manager. Setting the role allows the window
     * manager to restore window positions when loading a saved session.
     * @param wmclassName window name hint
     * @param wmclassClass window class hint
     */
    setWmclass(wmclassName: string, wmclassClass: string): void
    /**
     * Asks to stick `window,` which means that it will appear on all user
     * desktops. Note that you shouldn't assume the window is definitely
     * stuck afterward, because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could unstick it
     * again, and some window managers do not support sticking
     * windows. But normally the window will end up stuck. Just don't
     * write code that crashes if not.
     * 
     * It's permitted to call this function before showing a window.
     * 
     * You can track stickiness via the "window-state-event" signal
     * on #GtkWidget.
     */
    stick(): void
    /**
     * Asks to toggle off the fullscreen state for `window`. Note that you
     * shouldn't assume the window is definitely not full screen
     * afterward, because other entities (e.g. the user or <link
     * linkend="gtk-X11-arch">window manager</link>) could fullscreen it
     * again, and not all window managers honor requests to unfullscreen
     * windows. But normally the window will end up restored to its normal
     * state. Just don't write code that crashes if not.
     * 
     * You can track the fullscreen state via the "window-state-event" signal
     * on #GtkWidget.
     */
    unfullscreen(): void
    /**
     * Asks to unmaximize `window`. Note that you shouldn't assume the
     * window is definitely unmaximized afterward, because other entities
     * (e.g. the user or <link linkend="gtk-X11-arch">window
     * manager</link>) could maximize it again, and not all window
     * managers honor requests to unmaximize. But normally the window will
     * end up unmaximized. Just don't write code that crashes if not.
     * 
     * You can track maximization via the "window-state-event" signal
     * on #GtkWidget.
     */
    unmaximize(): void
    /**
     * Asks to unstick `window,` which means that it will appear on only
     * one of the user's desktops. Note that you shouldn't assume the
     * window is definitely unstuck afterward, because other entities
     * (e.g. the user or <link linkend="gtk-X11-arch">window
     * manager</link>) could stick it again. But normally the window will
     * end up stuck. Just don't write code that crashes if not.
     * 
     * You can track stickiness via the "window-state-event" signal
     * on #GtkWidget.
     */
    unstick(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     */
    getName(): string

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the the
     * <link linkend="BUILDER-UI">GtkBuilder UI definition</link>
     * used to construct the `buildable`.
     * @virtual 
     */
    getName(): string
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * gtkrc file. You can apply a style to widgets with a particular name
     * in the gtkrc file. See the documentation for gtkrc files (on the
     * same page as the docs for #GtkRcStyle).
     * 
     * Note that widget names are separated by periods in paths (see
     * gtk_widget_path()), so names with embedded periods may cause confusion.
     * @param name name for the widget
     */
    setName(name: string): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string): void
    /**
     * Destroys a widget. Equivalent to gtk_object_destroy(), except that
     * you don't have to cast the widget to #GtkObject. When a widget is
     * destroyed, it will break any references it holds to other objects.
     * If the widget is inside a container, the widget will be removed
     * from the container. If the widget is a toplevel (derived from
     * #GtkWindow), it will be removed from the list of toplevels, and the
     * reference GTK+ holds to it will be removed. Removing a
     * widget from its container or the list of toplevels results in the
     * widget being finalized, unless you've added additional references
     * to the widget with g_object_ref().
     * 
     * In most cases, only toplevel widgets (windows) require explicit
     * destruction, because when you destroy a toplevel its children will
     * be destroyed as well.
     */
    destroy(): void

    // Overloads of destroy

    destroy(): void
    destroy(): void

    // Own virtual methods of Gtk-2.0.Gtk.Window

    activateDefault(): void
    activateFocus(): void
    frameEvent(event: Gdk.Event): boolean
    keysChanged(): void
    moveFocus(direction: DirectionType): void
    /**
     * If `focus` is not the current focus widget, and is focusable, sets
     * it as the focus widget for the window. If `focus` is %NULL, unsets
     * the focus widget for this window. To set the focus to a particular
     * widget in the toplevel, it is usually more convenient to use
     * gtk_widget_grab_focus() instead of this function.
     * @virtual 
     * @param focus widget to be the new focus widget, or %NULL to unset   any focus widget for the toplevel window.
     */
    setFocus(focus: Widget | null): void

    // Own signals of Gtk-2.0.Gtk.Window

    connect(sigName: "activate-default", callback: Window.ActivateDefaultSignalCallback): number
    on(sigName: "activate-default", callback: Window.ActivateDefaultSignalCallback): number
    once(sigName: "activate-default", callback: Window.ActivateDefaultSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-default", ...args: any[]): void
    connect(sigName: "activate-focus", callback: Window.ActivateFocusSignalCallback): number
    on(sigName: "activate-focus", callback: Window.ActivateFocusSignalCallback): number
    once(sigName: "activate-focus", callback: Window.ActivateFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "activate-focus", ...args: any[]): void
    connect(sigName: "frame-event", callback: Window.FrameEventSignalCallback): number
    on(sigName: "frame-event", callback: Window.FrameEventSignalCallback): number
    once(sigName: "frame-event", callback: Window.FrameEventSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "frame-event", ...args: any[]): void
    connect(sigName: "keys-changed", callback: Window.KeysChangedSignalCallback): number
    on(sigName: "keys-changed", callback: Window.KeysChangedSignalCallback): number
    once(sigName: "keys-changed", callback: Window.KeysChangedSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "keys-changed", ...args: any[]): void
    connect(sigName: "set-focus", callback: Window.SetFocusSignalCallback): number
    on(sigName: "set-focus", callback: Window.SetFocusSignalCallback): number
    once(sigName: "set-focus", callback: Window.SetFocusSignalCallback): number
    off(handlerId: number): number
    emit(sigName: "set-focus", ...args: any[]): void

    // Class property signals of Gtk-2.0.Gtk.Window

    connect(sigName: "notify::accept-focus", callback: any): number
    on(sigName: "notify::accept-focus", callback: any): number
    once(sigName: "notify::accept-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: any): number
    on(sigName: "notify::default-height", callback: any): number
    once(sigName: "notify::default-height", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: any): number
    on(sigName: "notify::default-width", callback: any): number
    once(sigName: "notify::default-width", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: any): number
    on(sigName: "notify::deletable", callback: any): number
    once(sigName: "notify::deletable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: any): number
    on(sigName: "notify::focus-on-map", callback: any): number
    once(sigName: "notify::focus-on-map", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::icon", callback: any): number
    on(sigName: "notify::icon", callback: any): number
    once(sigName: "notify::icon", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: any): number
    on(sigName: "notify::icon-name", callback: any): number
    once(sigName: "notify::icon-name", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: any): number
    on(sigName: "notify::mnemonics-visible", callback: any): number
    once(sigName: "notify::mnemonics-visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: any): number
    on(sigName: "notify::opacity", callback: any): number
    once(sigName: "notify::opacity", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: any): number
    on(sigName: "notify::resizable", callback: any): number
    once(sigName: "notify::resizable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::role", callback: any): number
    on(sigName: "notify::role", callback: any): number
    once(sigName: "notify::role", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: any): number
    on(sigName: "notify::skip-pager-hint", callback: any): number
    once(sigName: "notify::skip-pager-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: any): number
    on(sigName: "notify::skip-taskbar-hint", callback: any): number
    once(sigName: "notify::skip-taskbar-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: any): number
    on(sigName: "notify::startup-id", callback: any): number
    once(sigName: "notify::startup-id", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: any): number
    on(sigName: "notify::transient-for", callback: any): number
    once(sigName: "notify::transient-for", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: any): number
    on(sigName: "notify::urgency-hint", callback: any): number
    once(sigName: "notify::urgency-hint", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: any): number
    on(sigName: "notify::window-position", callback: any): number
    once(sigName: "notify::window-position", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::child", callback: any): number
    on(sigName: "notify::child", callback: any): number
    once(sigName: "notify::child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: any): number
    on(sigName: "notify::resize-mode", callback: any): number
    once(sigName: "notify::resize-mode", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: any): number
    on(sigName: "notify::app-paintable", callback: any): number
    once(sigName: "notify::app-paintable", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: any): number
    on(sigName: "notify::can-default", callback: any): number
    once(sigName: "notify::can-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: any): number
    on(sigName: "notify::can-focus", callback: any): number
    once(sigName: "notify::can-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: any): number
    on(sigName: "notify::composite-child", callback: any): number
    once(sigName: "notify::composite-child", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: any): number
    on(sigName: "notify::double-buffered", callback: any): number
    once(sigName: "notify::double-buffered", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: any): number
    on(sigName: "notify::events", callback: any): number
    once(sigName: "notify::events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::extension-events", callback: any): number
    on(sigName: "notify::extension-events", callback: any): number
    once(sigName: "notify::extension-events", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::extension-events", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: any): number
    on(sigName: "notify::has-default", callback: any): number
    once(sigName: "notify::has-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: any): number
    on(sigName: "notify::has-focus", callback: any): number
    once(sigName: "notify::has-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: any): number
    on(sigName: "notify::has-tooltip", callback: any): number
    once(sigName: "notify::has-tooltip", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: any): number
    on(sigName: "notify::height-request", callback: any): number
    once(sigName: "notify::height-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: any): number
    on(sigName: "notify::is-focus", callback: any): number
    once(sigName: "notify::is-focus", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: any): number
    on(sigName: "notify::no-show-all", callback: any): number
    once(sigName: "notify::no-show-all", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: any): number
    on(sigName: "notify::receives-default", callback: any): number
    once(sigName: "notify::receives-default", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: any): number
    on(sigName: "notify::sensitive", callback: any): number
    once(sigName: "notify::sensitive", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: any): number
    on(sigName: "notify::tooltip-markup", callback: any): number
    once(sigName: "notify::tooltip-markup", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: any): number
    on(sigName: "notify::tooltip-text", callback: any): number
    once(sigName: "notify::tooltip-text", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::visible", callback: any): number
    on(sigName: "notify::visible", callback: any): number
    once(sigName: "notify::visible", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: any): number
    on(sigName: "notify::width-request", callback: any): number
    once(sigName: "notify::width-request", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::user-data", callback: any): number
    on(sigName: "notify::user-data", callback: any): number
    once(sigName: "notify::user-data", callback: any): number
    off(handlerId: number): number
    emit(sigName: "notify::user-data", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class Window extends Bin {

    // Own properties of Gtk-2.0.Gtk.Window

    static name: string

    // Constructors of Gtk-2.0.Gtk.Window

    constructor(config?: Window.ConstructorProperties) 
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    constructor(type: WindowType) 
    /**
     * Creates a new #GtkWindow, which is a toplevel window that can
     * contain other widgets. Nearly always, the type of the window should
     * be #GTK_WINDOW_TOPLEVEL. If you're implementing something like a
     * popup menu from scratch (which is a bad idea, just use #GtkMenu),
     * you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
     * dialogs, though in some other toolkits dialogs are called "popups".
     * In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
     * On X11, popup windows are not controlled by the <link
     * linkend="gtk-X11-arch">window manager</link>.
     * 
     * If you simply want an undecorated window (no window borders), use
     * gtk_window_set_decorated(), don't use #GTK_WINDOW_POPUP.
     * @constructor 
     * @param type type of window
     */
    static new(type: WindowType): Window
    _init(config?: Window.ConstructorProperties): void
    /**
     * Gets the value set by gtk_window_set_default_icon_list().
     * The list is a copy and should be freed with g_list_free(),
     * but the pixbufs in the list have not had their reference count
     * incremented.
     */
    static getDefaultIconList(): GdkPixbuf.Pixbuf[]
    /**
     * Returns the fallback icon name for windows that has been set
     * with gtk_window_set_default_icon_name(). The returned
     * string is owned by GTK+ and should not be modified. It
     * is only valid until the next call to
     * gtk_window_set_default_icon_name().
     */
    static getDefaultIconName(): string
    /**
     * Returns a list of all existing toplevel windows. The widgets
     * in the list are not individually referenced. If you want
     * to iterate through the list and perform actions involving
     * callbacks that might destroy the widgets, you <emphasis>must</emphasis> call
     * <literal>g_list_foreach (result, (GFunc)g_object_ref, NULL)</literal> first, and
     * then unref all the widgets afterwards.
     */
    static listToplevels(): Widget[]
    /**
     * By default, after showing the first #GtkWindow, GTK+ calls
     * gdk_notify_startup_complete().  Call this function to disable
     * the automatic startup notification. You might do this if your
     * first window is a splash screen, and you want to delay notification
     * until after your real main window has been shown, for example.
     * 
     * In that example, you would disable startup notification
     * temporarily, show your splash screen, then re-enable it so that
     * showing the main window would automatically result in notification.
     * @param setting %TRUE to automatically do startup notification
     */
    static setAutoStartupNotification(setting: boolean): void
    /**
     * Sets an icon to be used as fallback for windows that haven't
     * had gtk_window_set_icon() called on them from a pixbuf.
     * @param icon the icon
     */
    static setDefaultIcon(icon: GdkPixbuf.Pixbuf): void
    /**
     * Sets an icon to be used as fallback for windows that haven't
     * had gtk_window_set_icon_list() called on them from a file
     * on disk. Warns on failure if `err` is %NULL.
     * @param filename location of icon file
     */
    static setDefaultIconFromFile(filename: string): boolean
    /**
     * Sets an icon list to be used as fallback for windows that haven't
     * had gtk_window_set_icon_list() called on them to set up a
     * window-specific icon list. This function allows you to set up the
     * icon for all windows in your app at once.
     * 
     * See gtk_window_set_icon_list() for more details.
     * @param list a list of #GdkPixbuf
     */
    static setDefaultIconList(list: GdkPixbuf.Pixbuf[]): void
    /**
     * Sets an icon to be used as fallback for windows that haven't
     * had gtk_window_set_icon_list() called on them from a named
     * themed icon, see gtk_window_set_icon_name().
     * @param name the name of the themed icon
     */
    static setDefaultIconName(name: string): void
}

export module WindowGroup {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface WindowGroup {

    // Own fields of Gtk-2.0.Gtk.WindowGroup

    parentInstance: GObject.Object
    grabs: object[]

    // Owm methods of Gtk-2.0.Gtk.WindowGroup

    /**
     * Adds a window to a #GtkWindowGroup.
     * @param window the #GtkWindow to add
     */
    addWindow(window: Window): void
    /**
     * Returns a list of the #GtkWindows that belong to `window_group`.
     */
    listWindows(): Widget[]
    /**
     * Removes a window from a #GtkWindowGroup.
     * @param window the #GtkWindow to remove
     */
    removeWindow(window: Window): void

    // Class property signals of Gtk-2.0.Gtk.WindowGroup

    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void): number
    once(sigName: string, callback: (...args: any[]) => void): number
    off(handlerId: number): number
    emit(sigName: string, ...args: any[]): void
}

export class WindowGroup extends GObject.Object {

    // Own properties of Gtk-2.0.Gtk.WindowGroup

    static name: string

    // Constructors of Gtk-2.0.Gtk.WindowGroup

    constructor(config?: WindowGroup.ConstructorProperties) 
    /**
     * Creates a new #GtkWindowGroup object. Grabs added with
     * gtk_grab_add() only affect windows within the same #GtkWindowGroup.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkWindowGroup object. Grabs added with
     * gtk_grab_add() only affect windows within the same #GtkWindowGroup.
     * @constructor 
     */
    static new(): WindowGroup
    _init(config?: WindowGroup.ConstructorProperties): void
}

export interface AboutDialogClass {

    // Own fields of Gtk-2.0.Gtk.AboutDialogClass

    parentClass: DialogClass
    activateLink: (dialog: AboutDialog, uri: string) => boolean
}

export abstract class AboutDialogClass {

    // Own properties of Gtk-2.0.Gtk.AboutDialogClass

    static name: string
}

export interface AccelGroupClass {

    // Own fields of Gtk-2.0.Gtk.AccelGroupClass

    parentClass: GObject.ObjectClass
    accelChanged: (accelGroup: AccelGroup, keyval: number, modifier: Gdk.ModifierType, accelClosure: GObject.TClosure) => void
}

export abstract class AccelGroupClass {

    // Own properties of Gtk-2.0.Gtk.AccelGroupClass

    static name: string
}

export interface AccelGroupEntry {

    // Own fields of Gtk-2.0.Gtk.AccelGroupEntry

    key: AccelKey
    closure: GObject.TClosure
    accelPathQuark: GLib.Quark
}

export class AccelGroupEntry {

    // Own properties of Gtk-2.0.Gtk.AccelGroupEntry

    static name: string
}

export interface AccelKey {

    // Own fields of Gtk-2.0.Gtk.AccelKey

    accelKey: number
    accelMods: Gdk.ModifierType
    accelFlags: number
}

export class AccelKey {

    // Own properties of Gtk-2.0.Gtk.AccelKey

    static name: string
}

export interface AccelLabelClass {

    // Own fields of Gtk-2.0.Gtk.AccelLabelClass

    parentClass: LabelClass
    signalQuote1: string
    signalQuote2: string
    modNameShift: string
    modNameControl: string
    modNameAlt: string
    modSeparator: string
    accelSeperator: string
    latin1ToChar: number
}

export abstract class AccelLabelClass {

    // Own properties of Gtk-2.0.Gtk.AccelLabelClass

    static name: string
}

export interface AccelMapClass {
}

export abstract class AccelMapClass {

    // Own properties of Gtk-2.0.Gtk.AccelMapClass

    static name: string
}

export interface AccessibleClass {

    // Own fields of Gtk-2.0.Gtk.AccessibleClass

    parentClass: Atk.ObjectClass
    connectWidgetDestroyed: (accessible: Accessible) => void
}

export abstract class AccessibleClass {

    // Own properties of Gtk-2.0.Gtk.AccessibleClass

    static name: string
}

export interface ActionClass {

    // Own fields of Gtk-2.0.Gtk.ActionClass

    parentClass: GObject.ObjectClass
    activate: (action: Action) => void
    menuItemType: GObject.GType
    toolbarItemType: GObject.GType
    createMenuItem: (action: Action) => Widget
    createToolItem: (action: Action) => Widget
    connectProxy: (action: Action, proxy: Widget) => void
    disconnectProxy: (action: Action, proxy: Widget) => void
    createMenu: (action: Action) => Widget
}

export abstract class ActionClass {

    // Own properties of Gtk-2.0.Gtk.ActionClass

    static name: string
}

export interface ActionEntry {

    // Own fields of Gtk-2.0.Gtk.ActionEntry

    name: string
    stockId: string
    label: string
    accelerator: string
    tooltip: string
    callback: GObject.Callback
}

export class ActionEntry {

    // Own properties of Gtk-2.0.Gtk.ActionEntry

    static name: string
}

export interface ActionGroupClass {

    // Own fields of Gtk-2.0.Gtk.ActionGroupClass

    parentClass: GObject.ObjectClass
    getAction: (actionGroup: ActionGroup, actionName: string) => Action
}

export abstract class ActionGroupClass {

    // Own properties of Gtk-2.0.Gtk.ActionGroupClass

    static name: string
}

export interface ActionGroupPrivate {
}

export class ActionGroupPrivate {

    // Own properties of Gtk-2.0.Gtk.ActionGroupPrivate

    static name: string
}

export interface ActionPrivate {
}

export class ActionPrivate {

    // Own properties of Gtk-2.0.Gtk.ActionPrivate

    static name: string
}

export interface ActivatableIface {

    // Own fields of Gtk-2.0.Gtk.ActivatableIface

    gIface: GObject.TypeInterface
    update: (activatable: Activatable, action: Action, propertyName: string) => void
    syncActionProperties: (activatable: Activatable, action: Action | null) => void
}

export abstract class ActivatableIface {

    // Own properties of Gtk-2.0.Gtk.ActivatableIface

    static name: string
}

export interface AdjustmentClass {

    // Own fields of Gtk-2.0.Gtk.AdjustmentClass

    parentClass: ObjectClass
    changed: (adjustment: Adjustment) => void
    valueChanged: (adjustment: Adjustment) => void
}

export abstract class AdjustmentClass {

    // Own properties of Gtk-2.0.Gtk.AdjustmentClass

    static name: string
}

export interface AlignmentClass {

    // Own fields of Gtk-2.0.Gtk.AlignmentClass

    parentClass: BinClass
}

export abstract class AlignmentClass {

    // Own properties of Gtk-2.0.Gtk.AlignmentClass

    static name: string
}

export interface AlignmentPrivate {
}

export class AlignmentPrivate {

    // Own properties of Gtk-2.0.Gtk.AlignmentPrivate

    static name: string
}

export interface Arg {

    // Own fields of Gtk-2.0.Gtk.Arg

    type: GObject.GType
    name: string
}

export class Arg {

    // Own properties of Gtk-2.0.Gtk.Arg

    static name: string
}

export interface ArrowClass {

    // Own fields of Gtk-2.0.Gtk.ArrowClass

    parentClass: MiscClass
}

export abstract class ArrowClass {

    // Own properties of Gtk-2.0.Gtk.ArrowClass

    static name: string
}

export interface AspectFrameClass {

    // Own fields of Gtk-2.0.Gtk.AspectFrameClass

    parentClass: FrameClass
}

export abstract class AspectFrameClass {

    // Own properties of Gtk-2.0.Gtk.AspectFrameClass

    static name: string
}

export interface AssistantClass {

    // Own fields of Gtk-2.0.Gtk.AssistantClass

    parentClass: WindowClass
    prepare: (assistant: Assistant, page: Widget) => void
    apply: (assistant: Assistant) => void
    close: (assistant: Assistant) => void
    cancel: (assistant: Assistant) => void
}

export abstract class AssistantClass {

    // Own properties of Gtk-2.0.Gtk.AssistantClass

    static name: string
}

export interface AssistantPrivate {
}

export class AssistantPrivate {

    // Own properties of Gtk-2.0.Gtk.AssistantPrivate

    static name: string
}

export interface BinClass {

    // Own fields of Gtk-2.0.Gtk.BinClass

    parentClass: ContainerClass
}

export abstract class BinClass {

    // Own properties of Gtk-2.0.Gtk.BinClass

    static name: string
}

export interface BindingArg {

    // Own fields of Gtk-2.0.Gtk.BindingArg

    argType: GObject.GType
}

export class BindingArg {

    // Own properties of Gtk-2.0.Gtk.BindingArg

    static name: string
}

export interface BindingEntry {

    // Own fields of Gtk-2.0.Gtk.BindingEntry

    keyval: number
    modifiers: Gdk.ModifierType
    bindingSet: BindingSet
    destroyed: number
    inEmission: number
    marksUnbound: number
    setNext: BindingEntry
    hashNext: BindingEntry
    signals: BindingSignal
}

export class BindingEntry {

    // Own properties of Gtk-2.0.Gtk.BindingEntry

    static name: string

    // Constructors of Gtk-2.0.Gtk.BindingEntry

    /**
     * Override or install a new key binding for `keyval` with `modifiers` on
     * `binding_set`.
     * @param bindingSet a #GtkBindingSet to add a signal to
     * @param keyval key value
     * @param modifiers key modifier
     * @param signalName signal name to be bound
     * @param bindingArgs      list of #GtkBindingArg signal arguments
     */
    static addSignall(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType, signalName: string, bindingArgs: BindingArg[]): void
    /**
     * Clears a binding entry.
     * @param bindingSet binding set to clear an entry of
     * @param keyval key value of binding to clear
     * @param modifiers key modifier of binding to clear
     */
    static clear(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType): void
    /**
     * Remove a binding previously installed via
     * gtk_binding_entry_add_signal() on `binding_set`.
     * @param bindingSet a #GtkBindingSet to remove an entry of
     * @param keyval key value of binding to remove
     * @param modifiers key modifier of binding to remove
     */
    static remove(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType): void
    /**
     * Install a binding on `binding_set` which causes key lookups
     * to be aborted, to prevent bindings from lower priority sets
     * to be activated.
     * @param bindingSet a #GtkBindingSet to skip an entry of
     * @param keyval key value of binding to skip
     * @param modifiers key modifier of binding to skip
     */
    static skip(bindingSet: BindingSet, keyval: number, modifiers: Gdk.ModifierType): void
}

export interface BindingSet {

    // Own fields of Gtk-2.0.Gtk.BindingSet

    setName: string
    priority: number
    widgetPathPspecs: object[]
    widgetClassPspecs: object[]
    classBranchPspecs: object[]
    entries: BindingEntry
    current: BindingEntry
    parsed: number

    // Owm methods of Gtk-2.0.Gtk.BindingSet

    /**
     * Find a key binding matching `keyval` and `modifiers` within
     * `binding_set` and activate the binding on `object`.
     * @param keyval key value of the binding
     * @param modifiers key modifier of the binding
     * @param object object to activate when binding found
     */
    activate(keyval: number, modifiers: Gdk.ModifierType, object: Object): boolean
    /**
     * This function is used internally by the GtkRC parsing mechanism to
     * assign match patterns to #GtkBindingSet structures.
     * @param pathType path type the pattern applies to
     * @param pathPattern the actual match pattern
     * @param priority binding priority
     */
    addPath(pathType: PathType, pathPattern: string, priority: PathPriorityType): void
}

export class BindingSet {

    // Own properties of Gtk-2.0.Gtk.BindingSet

    static name: string

    // Constructors of Gtk-2.0.Gtk.BindingSet

    /**
     * Find a binding set by its globally unique name. The `set_name` can
     * either be a name used for gtk_binding_set_new() or the type name of
     * a class used in gtk_binding_set_by_class().
     * @param setName unique binding set name
     */
    static find(setName: string): BindingSet
}

export interface BindingSignal {

    // Own fields of Gtk-2.0.Gtk.BindingSignal

    next: BindingSignal
    signalName: string
    nArgs: number
    args: BindingArg
}

export class BindingSignal {

    // Own properties of Gtk-2.0.Gtk.BindingSignal

    static name: string
}

export interface Border {

    // Own fields of Gtk-2.0.Gtk.Border

    left: number
    right: number
    top: number
    bottom: number

    // Owm methods of Gtk-2.0.Gtk.Border

    /**
     * Copies a #GtkBorder structure.
     */
    copy(): Border
    /**
     * Frees a #GtkBorder structure.
     */
    free(): void
}

export class Border {

    // Own properties of Gtk-2.0.Gtk.Border

    static name: string

    // Constructors of Gtk-2.0.Gtk.Border

    /**
     * Allocates a new #GtkBorder structure and initializes its elements to zero.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #GtkBorder structure and initializes its elements to zero.
     * @constructor 
     */
    static new(): Border
}

export interface BoxChild {

    // Own fields of Gtk-2.0.Gtk.BoxChild

    /**
     * the child widget, packed into the GtkBox.
     * @field 
     */
    widget: Widget
    /**
     * the number of extra pixels to put between this child and its
     *  neighbors, set when packed, zero by default.
     * @field 
     */
    padding: number
    /**
     * flag indicates whether extra space should be given to this child.
     *  Any extra space given to the parent GtkBox is divided up among all children
     *  with this attribute set to %TRUE; set when packed, %TRUE by default.
     * @field 
     */
    expand: number
    /**
     * flag indicates whether any extra space given to this child due to its
     *  `expand` attribute being set is actually allocated to the child, rather than
     *  being used as padding around the widget; set when packed, %TRUE by default.
     * @field 
     */
    fill: number
    /**
     * one of #GtkPackType indicating whether the child is packed with
     *  reference to the start (top/left) or end (bottom/right) of the GtkBox.
     * @field 
     */
    pack: number
    /**
     * %TRUE if the child is secondary
     * @field 
     */
    isSecondary: number
}

/**
 * The #GtkBoxChild holds a child widget of #GtkBox and describes how the child
 * is to be packed into the #GtkBox. All fields of this #GtkBoxChild should be
 * considered read-only and they should never be set directly by an application.
 * Use gtk_box_query_child_packing() and gtk_box_set_child_packing() to query
 * and set the #GtkBoxChild.padding, #GtkBoxChild.expand, #GtkBoxChild.fill and
 * #GtkBoxChild.pack fields.
 * @record 
 */
export class BoxChild {

    // Own properties of Gtk-2.0.Gtk.BoxChild

    static name: string
}

export interface BoxClass {

    // Own fields of Gtk-2.0.Gtk.BoxClass

    parentClass: ContainerClass
}

export abstract class BoxClass {

    // Own properties of Gtk-2.0.Gtk.BoxClass

    static name: string
}

export interface BuildableIface {

    // Own fields of Gtk-2.0.Gtk.BuildableIface

    /**
     * the parent class
     * @field 
     */
    gIface: GObject.TypeInterface
    setName: (buildable: Buildable, name: string) => void
    getName: (buildable: Buildable) => string
    addChild: (buildable: Buildable, builder: Builder, child: GObject.Object, type: string | null) => void
    setBuildableProperty: (buildable: Buildable, builder: Builder, name: string, value: any) => void
    constructChild: (buildable: Buildable, builder: Builder, name: string) => GObject.Object
    customTagStart: (buildable: Buildable, builder: Builder, child: GObject.Object | null, tagname: string) => [ /* returnType */ boolean, /* parser */ GLib.MarkupParser, /* data */ object | null ]
    customTagEnd: (buildable: Buildable, builder: Builder, child: GObject.Object | null, tagname: string, data: object | null) => void
    customFinished: (buildable: Buildable, builder: Builder, child: GObject.Object | null, tagname: string, data: object | null) => void
    parserFinished: (buildable: Buildable, builder: Builder) => void
    getInternalChild: (buildable: Buildable, builder: Builder, childname: string) => GObject.Object
}

/**
 * The GtkBuildableIface interface contains method that are
 * necessary to allow #GtkBuilder to construct an object from
 * a GtkBuilder UI definition.
 * @record 
 */
export abstract class BuildableIface {

    // Own properties of Gtk-2.0.Gtk.BuildableIface

    static name: string
}

export interface BuilderClass {

    // Own fields of Gtk-2.0.Gtk.BuilderClass

    parentClass: GObject.ObjectClass
    getTypeFromName: (builder: Builder, typeName: string) => GObject.GType
}

export abstract class BuilderClass {

    // Own properties of Gtk-2.0.Gtk.BuilderClass

    static name: string
}

export interface BuilderPrivate {
}

export class BuilderPrivate {

    // Own properties of Gtk-2.0.Gtk.BuilderPrivate

    static name: string
}

export interface ButtonBoxClass {

    // Own fields of Gtk-2.0.Gtk.ButtonBoxClass

    parentClass: BoxClass
}

export abstract class ButtonBoxClass {

    // Own properties of Gtk-2.0.Gtk.ButtonBoxClass

    static name: string
}

export interface ButtonClass {

    // Own fields of Gtk-2.0.Gtk.ButtonClass

    parentClass: BinClass
    pressed: (button: Button) => void
    released: (button: Button) => void
    clicked: (button: Button) => void
    enter: (button: Button) => void
    leave: (button: Button) => void
    activate: (button: Button) => void
}

export abstract class ButtonClass {

    // Own properties of Gtk-2.0.Gtk.ButtonClass

    static name: string
}

export interface CListCellInfo {

    // Own fields of Gtk-2.0.Gtk.CListCellInfo

    row: number
    column: number
}

export class CListCellInfo {

    // Own properties of Gtk-2.0.Gtk.CListCellInfo

    static name: string
}

export interface CListClass {

    // Own fields of Gtk-2.0.Gtk.CListClass

    parentClass: ContainerClass
    setScrollAdjustments: (clist: CList, hadjustment: Adjustment, vadjustment: Adjustment) => void
    refresh: (clist: CList) => void
    selectRow: (clist: CList, row: number, column: number, event: Gdk.Event) => void
    unselectRow: (clist: CList, row: number, column: number, event: Gdk.Event) => void
    rowMove: (clist: CList, sourceRow: number, destRow: number) => void
    clickColumn: (clist: CList, column: number) => void
    resizeColumn: (clist: CList, column: number, width: number) => void
    toggleFocusRow: (clist: CList) => void
    selectAll: (clist: CList) => void
    unselectAll: (clist: CList) => void
    undoSelection: (clist: CList) => void
    startSelection: (clist: CList) => void
    endSelection: (clist: CList) => void
    extendSelection: (clist: CList, scrollType: ScrollType, position: number, autoStartSelection: boolean) => void
    scrollHorizontal: (clist: CList, scrollType: ScrollType, position: number) => void
    scrollVertical: (clist: CList, scrollType: ScrollType, position: number) => void
    toggleAddMode: (clist: CList) => void
    abortColumnResize: (clist: CList) => void
    resyncSelection: (clist: CList, event: Gdk.Event) => void
    drawRow: (clist: CList, area: Gdk.Rectangle, row: number, clistRow: CListRow) => void
    drawDragHighlight: (clist: CList, targetRow: CListRow, targetRowNumber: number, dragPos: CListDragPos) => void
    clear: (clist: CList) => void
    fakeUnselectAll: (clist: CList, row: number) => void
    sortList: (clist: CList) => void
    insertRow: (clist: CList, row: number, text: string) => number
    removeRow: (clist: CList, row: number) => void
    setCellContents: (clist: CList, clistRow: CListRow, column: number, type: CellType, text: string, spacing: number, pixmap: Gdk.Pixmap, mask: Gdk.Bitmap) => void
    cellSizeRequest: (clist: CList, clistRow: CListRow, column: number, requisition: Requisition) => void
}

export abstract class CListClass {

    // Own properties of Gtk-2.0.Gtk.CListClass

    static name: string
}

export interface CListColumn {

    // Own fields of Gtk-2.0.Gtk.CListColumn

    title: string
    area: Gdk.Rectangle
    button: Widget
    window: Gdk.Window
    width: number
    minWidth: number
    maxWidth: number
    justification: Justification
    visible: number
    widthSet: number
    resizeable: number
    autoResize: number
    buttonPassive: number
}

export class CListColumn {

    // Own properties of Gtk-2.0.Gtk.CListColumn

    static name: string
}

export interface CListDestInfo {

    // Own fields of Gtk-2.0.Gtk.CListDestInfo

    cell: CListCellInfo
    insertPos: CListDragPos
}

export class CListDestInfo {

    // Own properties of Gtk-2.0.Gtk.CListDestInfo

    static name: string
}

export interface CListRow {

    // Own fields of Gtk-2.0.Gtk.CListRow

    cell: Cell
    state: StateType
    foreground: Gdk.Color
    background: Gdk.Color
    style: Style
    data: object
    destroy: GLib.DestroyNotify
    fgSet: number
    bgSet: number
    selectable: number
}

export class CListRow {

    // Own properties of Gtk-2.0.Gtk.CListRow

    static name: string
}

export interface CTreeClass {

    // Own fields of Gtk-2.0.Gtk.CTreeClass

    parentClass: CListClass
    treeSelectRow: (ctree: CTree, row: CTreeNode, column: number) => void
    treeUnselectRow: (ctree: CTree, row: CTreeNode, column: number) => void
    treeExpand: (ctree: CTree, node: CTreeNode) => void
    treeCollapse: (ctree: CTree, node: CTreeNode) => void
    treeMove: (ctree: CTree, node: CTreeNode, newParent: CTreeNode, newSibling: CTreeNode) => void
    changeFocusRowExpansion: (ctree: CTree, action: CTreeExpansionType) => void
}

export abstract class CTreeClass {

    // Own properties of Gtk-2.0.Gtk.CTreeClass

    static name: string
}

export interface CTreeNode {

    // Own fields of Gtk-2.0.Gtk.CTreeNode

    list: object[]
}

export class CTreeNode {

    // Own properties of Gtk-2.0.Gtk.CTreeNode

    static name: string
}

export interface CTreeRow {

    // Own fields of Gtk-2.0.Gtk.CTreeRow

    row: CListRow
    parent: CTreeNode
    sibling: CTreeNode
    children: CTreeNode
    pixmapClosed: Gdk.Pixmap
    maskClosed: Gdk.Bitmap
    pixmapOpened: Gdk.Pixmap
    maskOpened: Gdk.Bitmap
    level: number
    isLeaf: number
    expanded: number
}

export class CTreeRow {

    // Own properties of Gtk-2.0.Gtk.CTreeRow

    static name: string
}

export interface CalendarClass {

    // Own fields of Gtk-2.0.Gtk.CalendarClass

    parentClass: WidgetClass
    monthChanged: (calendar: Calendar) => void
    daySelected: (calendar: Calendar) => void
    daySelectedDoubleClick: (calendar: Calendar) => void
    prevMonth: (calendar: Calendar) => void
    nextMonth: (calendar: Calendar) => void
    prevYear: (calendar: Calendar) => void
    nextYear: (calendar: Calendar) => void
}

export abstract class CalendarClass {

    // Own properties of Gtk-2.0.Gtk.CalendarClass

    static name: string
}

export interface CalendarPrivate {
}

export class CalendarPrivate {

    // Own properties of Gtk-2.0.Gtk.CalendarPrivate

    static name: string
}

export interface Cell {

    // Own fields of Gtk-2.0.Gtk.Cell

    type: CellType
    vertical: number
    horizontal: number
    style: Style
}

export class Cell {

    // Own properties of Gtk-2.0.Gtk.Cell

    static name: string
}

export interface CellEditableIface {

    // Own fields of Gtk-2.0.Gtk.CellEditableIface

    gIface: GObject.TypeInterface
    editingDone: (cellEditable: CellEditable) => void
    removeWidget: (cellEditable: CellEditable) => void
    startEditing: (cellEditable: CellEditable, event: Gdk.Event | null) => void
}

export abstract class CellEditableIface {

    // Own properties of Gtk-2.0.Gtk.CellEditableIface

    static name: string
}

export interface CellLayoutIface {

    // Own fields of Gtk-2.0.Gtk.CellLayoutIface

    gIface: GObject.TypeInterface
    packStart: (cellLayout: CellLayout, cell: CellRenderer, expand: boolean) => void
    packEnd: (cellLayout: CellLayout, cell: CellRenderer, expand: boolean) => void
    clear: (cellLayout: CellLayout) => void
    addAttribute: (cellLayout: CellLayout, cell: CellRenderer, attribute: string, column: number) => void
    setCellDataFunc: (cellLayout: CellLayout, cell: CellRenderer, func: CellLayoutDataFunc) => void
    clearAttributes: (cellLayout: CellLayout, cell: CellRenderer) => void
    reorder: (cellLayout: CellLayout, cell: CellRenderer, position: number) => void
    getCells: (cellLayout: CellLayout) => CellRenderer[]
}

export abstract class CellLayoutIface {

    // Own properties of Gtk-2.0.Gtk.CellLayoutIface

    static name: string
}

export interface CellPixText {

    // Own fields of Gtk-2.0.Gtk.CellPixText

    type: CellType
    vertical: number
    horizontal: number
    style: Style
    text: string
    spacing: number
    pixmap: Gdk.Pixmap
    mask: Gdk.Bitmap
}

export class CellPixText {

    // Own properties of Gtk-2.0.Gtk.CellPixText

    static name: string
}

export interface CellPixmap {

    // Own fields of Gtk-2.0.Gtk.CellPixmap

    type: CellType
    vertical: number
    horizontal: number
    style: Style
    pixmap: Gdk.Pixmap
    mask: Gdk.Bitmap
}

export class CellPixmap {

    // Own properties of Gtk-2.0.Gtk.CellPixmap

    static name: string
}

export interface CellRendererAccelClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererAccelClass

    parentClass: CellRendererTextClass
    accelEdited: (accel: CellRendererAccel, pathString: string, accelKey: number, accelMods: Gdk.ModifierType, hardwareKeycode: number) => void
    accelCleared: (accel: CellRendererAccel, pathString: string) => void
}

export abstract class CellRendererAccelClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererAccelClass

    static name: string
}

export interface CellRendererClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererClass

    parentClass: ObjectClass
    getSize: (cell: CellRenderer, widget: Widget, cellArea: Gdk.Rectangle | null) => [ /* xOffset */ number, /* yOffset */ number, /* width */ number, /* height */ number ]
    render: (cell: CellRenderer, window: Gdk.Drawable, widget: Widget, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, exposeArea: Gdk.Rectangle, flags: CellRendererState) => void
    activate: (cell: CellRenderer, event: Gdk.Event, widget: Widget, path: string, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, flags: CellRendererState) => boolean
    startEditing: (cell: CellRenderer, event: Gdk.Event, widget: Widget, path: string, backgroundArea: Gdk.Rectangle, cellArea: Gdk.Rectangle, flags: CellRendererState) => CellEditable
    editingCanceled: (cell: CellRenderer) => void
    editingStarted: (cell: CellRenderer, editable: CellEditable, path: string) => void
}

export abstract class CellRendererClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererClass

    static name: string
}

export interface CellRendererComboClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererComboClass

    parent: CellRendererTextClass
}

export abstract class CellRendererComboClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererComboClass

    static name: string
}

export interface CellRendererPixbufClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererPixbufClass

    parentClass: CellRendererClass
}

export abstract class CellRendererPixbufClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererPixbufClass

    static name: string
}

export interface CellRendererProgressClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererProgressClass

    parentClass: CellRendererClass
}

export abstract class CellRendererProgressClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererProgressClass

    static name: string
}

export interface CellRendererProgressPrivate {
}

export class CellRendererProgressPrivate {

    // Own properties of Gtk-2.0.Gtk.CellRendererProgressPrivate

    static name: string
}

export interface CellRendererSpinClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererSpinClass

    parent: CellRendererTextClass
}

export abstract class CellRendererSpinClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpinClass

    static name: string
}

export interface CellRendererSpinPrivate {
}

export class CellRendererSpinPrivate {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpinPrivate

    static name: string
}

export interface CellRendererSpinnerClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererSpinnerClass

    parentClass: CellRendererClass
}

export abstract class CellRendererSpinnerClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpinnerClass

    static name: string
}

export interface CellRendererSpinnerPrivate {
}

export class CellRendererSpinnerPrivate {

    // Own properties of Gtk-2.0.Gtk.CellRendererSpinnerPrivate

    static name: string
}

export interface CellRendererTextClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererTextClass

    parentClass: CellRendererClass
    edited: (cellRendererText: CellRendererText, path: string, newText: string) => void
}

export abstract class CellRendererTextClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererTextClass

    static name: string
}

export interface CellRendererToggleClass {

    // Own fields of Gtk-2.0.Gtk.CellRendererToggleClass

    parentClass: CellRendererClass
    toggled: (cellRendererToggle: CellRendererToggle, path: string) => void
}

export abstract class CellRendererToggleClass {

    // Own properties of Gtk-2.0.Gtk.CellRendererToggleClass

    static name: string
}

export interface CellText {

    // Own fields of Gtk-2.0.Gtk.CellText

    type: CellType
    vertical: number
    horizontal: number
    style: Style
    text: string
}

export class CellText {

    // Own properties of Gtk-2.0.Gtk.CellText

    static name: string
}

export interface CellViewClass {

    // Own fields of Gtk-2.0.Gtk.CellViewClass

    parentClass: WidgetClass
}

export abstract class CellViewClass {

    // Own properties of Gtk-2.0.Gtk.CellViewClass

    static name: string
}

export interface CellViewPrivate {
}

export class CellViewPrivate {

    // Own properties of Gtk-2.0.Gtk.CellViewPrivate

    static name: string
}

export interface CellWidget {

    // Own fields of Gtk-2.0.Gtk.CellWidget

    type: CellType
    vertical: number
    horizontal: number
    style: Style
    widget: Widget
}

export class CellWidget {

    // Own properties of Gtk-2.0.Gtk.CellWidget

    static name: string
}

export interface CheckButtonClass {

    // Own fields of Gtk-2.0.Gtk.CheckButtonClass

    parentClass: ToggleButtonClass
    drawIndicator: (checkButton: CheckButton, area: Gdk.Rectangle) => void
}

export abstract class CheckButtonClass {

    // Own properties of Gtk-2.0.Gtk.CheckButtonClass

    static name: string
}

export interface CheckMenuItemClass {

    // Own fields of Gtk-2.0.Gtk.CheckMenuItemClass

    parentClass: MenuItemClass
    toggled: (checkMenuItem: CheckMenuItem) => void
    drawIndicator: (checkMenuItem: CheckMenuItem, area: Gdk.Rectangle) => void
}

export abstract class CheckMenuItemClass {

    // Own properties of Gtk-2.0.Gtk.CheckMenuItemClass

    static name: string
}

export interface ColorButtonClass {

    // Own fields of Gtk-2.0.Gtk.ColorButtonClass

    parentClass: ButtonClass
    colorSet: (cp: ColorButton) => void
}

export abstract class ColorButtonClass {

    // Own properties of Gtk-2.0.Gtk.ColorButtonClass

    static name: string
}

export interface ColorButtonPrivate {
}

export class ColorButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.ColorButtonPrivate

    static name: string
}

export interface ColorSelectionClass {

    // Own fields of Gtk-2.0.Gtk.ColorSelectionClass

    parentClass: VBoxClass
    colorChanged: (colorSelection: ColorSelection) => void
}

export abstract class ColorSelectionClass {

    // Own properties of Gtk-2.0.Gtk.ColorSelectionClass

    static name: string
}

export interface ColorSelectionDialogClass {

    // Own fields of Gtk-2.0.Gtk.ColorSelectionDialogClass

    parentClass: DialogClass
}

export abstract class ColorSelectionDialogClass {

    // Own properties of Gtk-2.0.Gtk.ColorSelectionDialogClass

    static name: string
}

export interface ComboBoxClass {

    // Own fields of Gtk-2.0.Gtk.ComboBoxClass

    parentClass: BinClass
    changed: (comboBox: ComboBox) => void
    getActiveText: (comboBox: ComboBox) => string
}

export abstract class ComboBoxClass {

    // Own properties of Gtk-2.0.Gtk.ComboBoxClass

    static name: string
}

export interface ComboBoxEntryClass {

    // Own fields of Gtk-2.0.Gtk.ComboBoxEntryClass

    parentClass: ComboBoxClass
}

export abstract class ComboBoxEntryClass {

    // Own properties of Gtk-2.0.Gtk.ComboBoxEntryClass

    static name: string
}

export interface ComboBoxEntryPrivate {
}

export class ComboBoxEntryPrivate {

    // Own properties of Gtk-2.0.Gtk.ComboBoxEntryPrivate

    static name: string
}

export interface ComboBoxPrivate {
}

export class ComboBoxPrivate {

    // Own properties of Gtk-2.0.Gtk.ComboBoxPrivate

    static name: string
}

export interface ComboBoxTextClass {

    // Own fields of Gtk-2.0.Gtk.ComboBoxTextClass

    parentClass: ComboBoxClass
}

export abstract class ComboBoxTextClass {

    // Own properties of Gtk-2.0.Gtk.ComboBoxTextClass

    static name: string
}

export interface ComboBoxTextPrivate {
}

export class ComboBoxTextPrivate {

    // Own properties of Gtk-2.0.Gtk.ComboBoxTextPrivate

    static name: string
}

export interface ComboClass {

    // Own fields of Gtk-2.0.Gtk.ComboClass

    parentClass: HBoxClass
}

export abstract class ComboClass {

    // Own properties of Gtk-2.0.Gtk.ComboClass

    static name: string
}

export interface ContainerClass {

    // Own fields of Gtk-2.0.Gtk.ContainerClass

    parentClass: WidgetClass
    add: (container: Container, widget: Widget) => void
    remove: (container: Container, widget: Widget) => void
    checkResize: (container: Container) => void
    setFocusChild: (container: Container, widget: Widget) => void
    childType: (container: Container) => GObject.GType
    compositeName: (container: Container, child: Widget) => string
    setChildProperty: (container: Container, child: Widget, propertyId: number, value: any, pspec: GObject.ParamSpec) => void
    getChildProperty: (container: Container, child: Widget, propertyId: number, value: any, pspec: GObject.ParamSpec) => void

    // Owm methods of Gtk-2.0.Gtk.ContainerClass

    /**
     * Finds a child property of a container class by name.
     * @param propertyName the name of the child property to find
     */
    findChildProperty(cclass: Container | Function | GObject.GType, propertyName: string): GObject.ParamSpec
    /**
     * Installs a child property on a container class.
     * @param propertyId the id for the property
     * @param pspec the #GParamSpec for the property
     */
    installChildProperty(cclass: Container | Function | GObject.GType, propertyId: number, pspec: GObject.ParamSpec): void
    /**
     * Returns all child properties of a container class.
     */
    listChildProperties(cclass: Container | Function | GObject.GType): GObject.ParamSpec[]
}

export abstract class ContainerClass {

    // Own properties of Gtk-2.0.Gtk.ContainerClass

    static name: string
}

export interface CurveClass {

    // Own fields of Gtk-2.0.Gtk.CurveClass

    parentClass: DrawingAreaClass
    curveTypeChanged: (curve: Curve) => void
}

export abstract class CurveClass {

    // Own properties of Gtk-2.0.Gtk.CurveClass

    static name: string
}

export interface DialogClass {

    // Own fields of Gtk-2.0.Gtk.DialogClass

    parentClass: WindowClass
    response: (dialog: Dialog, responseId: number) => void
    close: (dialog: Dialog) => void
}

export abstract class DialogClass {

    // Own properties of Gtk-2.0.Gtk.DialogClass

    static name: string
}

export interface DrawingAreaClass {

    // Own fields of Gtk-2.0.Gtk.DrawingAreaClass

    parentClass: WidgetClass
}

export abstract class DrawingAreaClass {

    // Own properties of Gtk-2.0.Gtk.DrawingAreaClass

    static name: string
}

export interface EditableClass {

    // Own fields of Gtk-2.0.Gtk.EditableClass

    baseIface: GObject.TypeInterface
    insertText: (editable: Editable, text: string, length: number, position: number) => void
    deleteText: (editable: Editable, startPos: number, endPos: number) => void
    changed: (editable: Editable) => void
    doInsertText: (editable: Editable, text: string, length: number, position: number) => void
    doDeleteText: (editable: Editable, startPos: number, endPos: number) => void
    getChars: (editable: Editable, startPos: number, endPos: number) => string
    setSelectionBounds: (editable: Editable, startPos: number, endPos: number) => void
    getSelectionBounds: (editable: Editable, startPos: number, endPos: number) => boolean
    setPosition: (editable: Editable, position: number) => void
    getPosition: (editable: Editable) => number
}

export class EditableClass {

    // Own properties of Gtk-2.0.Gtk.EditableClass

    static name: string
}

export interface EntryBufferClass {

    // Own fields of Gtk-2.0.Gtk.EntryBufferClass

    parentClass: GObject.ObjectClass
    insertedText: (buffer: EntryBuffer, position: number, chars: string, nChars: number) => void
    deletedText: (buffer: EntryBuffer, position: number, nChars: number) => void
    getText: (buffer: EntryBuffer, nBytes: number) => string
    getLength: (buffer: EntryBuffer) => number
    insertText: (buffer: EntryBuffer, position: number, chars: string, nChars: number) => number
    deleteText: (buffer: EntryBuffer, position: number, nChars: number) => number
}

export abstract class EntryBufferClass {

    // Own properties of Gtk-2.0.Gtk.EntryBufferClass

    static name: string
}

export interface EntryBufferPrivate {
}

export class EntryBufferPrivate {

    // Own properties of Gtk-2.0.Gtk.EntryBufferPrivate

    static name: string
}

export interface EntryClass {

    // Own fields of Gtk-2.0.Gtk.EntryClass

    parentClass: WidgetClass
    populatePopup: (entry: Entry, menu: Menu) => void
    activate: (entry: Entry) => void
    moveCursor: (entry: Entry, step: MovementStep, count: number, extendSelection: boolean) => void
    insertAtCursor: (entry: Entry, str: string) => void
    deleteFromCursor: (entry: Entry, type: DeleteType, count: number) => void
    backspace: (entry: Entry) => void
    cutClipboard: (entry: Entry) => void
    copyClipboard: (entry: Entry) => void
    pasteClipboard: (entry: Entry) => void
    toggleOverwrite: (entry: Entry) => void
    getTextAreaSize: (entry: Entry, x: number, y: number, width: number, height: number) => void
}

export abstract class EntryClass {

    // Own properties of Gtk-2.0.Gtk.EntryClass

    static name: string
}

export interface EntryCompletionClass {

    // Own fields of Gtk-2.0.Gtk.EntryCompletionClass

    parentClass: GObject.ObjectClass
    matchSelected: (completion: EntryCompletion, model: TreeModel, iter: TreeIter) => boolean
    actionActivated: (completion: EntryCompletion, index: number) => void
    insertPrefix: (completion: EntryCompletion, prefix: string) => boolean
    cursorOnMatch: (completion: EntryCompletion, model: TreeModel, iter: TreeIter) => boolean
}

export abstract class EntryCompletionClass {

    // Own properties of Gtk-2.0.Gtk.EntryCompletionClass

    static name: string
}

export interface EntryCompletionPrivate {
}

export class EntryCompletionPrivate {

    // Own properties of Gtk-2.0.Gtk.EntryCompletionPrivate

    static name: string
}

export interface EventBoxClass {

    // Own fields of Gtk-2.0.Gtk.EventBoxClass

    parentClass: BinClass
}

export abstract class EventBoxClass {

    // Own properties of Gtk-2.0.Gtk.EventBoxClass

    static name: string
}

export interface ExpanderClass {

    // Own fields of Gtk-2.0.Gtk.ExpanderClass

    parentClass: BinClass
    activate: (expander: Expander) => void
}

export abstract class ExpanderClass {

    // Own properties of Gtk-2.0.Gtk.ExpanderClass

    static name: string
}

export interface ExpanderPrivate {
}

export class ExpanderPrivate {

    // Own properties of Gtk-2.0.Gtk.ExpanderPrivate

    static name: string
}

export interface FileChooserButtonClass {

    // Own fields of Gtk-2.0.Gtk.FileChooserButtonClass

    fileSet: (fc: FileChooserButton) => void
}

export abstract class FileChooserButtonClass {

    // Own properties of Gtk-2.0.Gtk.FileChooserButtonClass

    static name: string
}

export interface FileChooserButtonPrivate {
}

export class FileChooserButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.FileChooserButtonPrivate

    static name: string
}

export interface FileChooserDialogClass {

    // Own fields of Gtk-2.0.Gtk.FileChooserDialogClass

    parentClass: DialogClass
}

export abstract class FileChooserDialogClass {

    // Own properties of Gtk-2.0.Gtk.FileChooserDialogClass

    static name: string
}

export interface FileChooserDialogPrivate {
}

export class FileChooserDialogPrivate {

    // Own properties of Gtk-2.0.Gtk.FileChooserDialogPrivate

    static name: string
}

export interface FileChooserWidgetClass {

    // Own fields of Gtk-2.0.Gtk.FileChooserWidgetClass

    parentClass: VBoxClass
}

export abstract class FileChooserWidgetClass {

    // Own properties of Gtk-2.0.Gtk.FileChooserWidgetClass

    static name: string
}

export interface FileChooserWidgetPrivate {
}

export class FileChooserWidgetPrivate {

    // Own properties of Gtk-2.0.Gtk.FileChooserWidgetPrivate

    static name: string
}

export interface FileFilterInfo {

    // Own fields of Gtk-2.0.Gtk.FileFilterInfo

    contains: FileFilterFlags
    filename: string
    uri: string
    displayName: string
    mimeType: string
}

export class FileFilterInfo {

    // Own properties of Gtk-2.0.Gtk.FileFilterInfo

    static name: string
}

export interface FileSelectionClass {

    // Own fields of Gtk-2.0.Gtk.FileSelectionClass

    parentClass: DialogClass
}

export abstract class FileSelectionClass {

    // Own properties of Gtk-2.0.Gtk.FileSelectionClass

    static name: string
}

export interface FixedChild {

    // Own fields of Gtk-2.0.Gtk.FixedChild

    widget: Widget
    x: number
    y: number
}

export class FixedChild {

    // Own properties of Gtk-2.0.Gtk.FixedChild

    static name: string
}

export interface FixedClass {

    // Own fields of Gtk-2.0.Gtk.FixedClass

    parentClass: ContainerClass
}

export abstract class FixedClass {

    // Own properties of Gtk-2.0.Gtk.FixedClass

    static name: string
}

export interface FontButtonClass {

    // Own fields of Gtk-2.0.Gtk.FontButtonClass

    parentClass: ButtonClass
    fontSet: (gfp: FontButton) => void
}

export abstract class FontButtonClass {

    // Own properties of Gtk-2.0.Gtk.FontButtonClass

    static name: string
}

export interface FontButtonPrivate {
}

export class FontButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.FontButtonPrivate

    static name: string
}

export interface FontSelectionClass {

    // Own fields of Gtk-2.0.Gtk.FontSelectionClass

    parentClass: VBoxClass
}

export abstract class FontSelectionClass {

    // Own properties of Gtk-2.0.Gtk.FontSelectionClass

    static name: string
}

export interface FontSelectionDialogClass {

    // Own fields of Gtk-2.0.Gtk.FontSelectionDialogClass

    parentClass: DialogClass
}

export abstract class FontSelectionDialogClass {

    // Own properties of Gtk-2.0.Gtk.FontSelectionDialogClass

    static name: string
}

export interface FrameClass {

    // Own fields of Gtk-2.0.Gtk.FrameClass

    parentClass: BinClass
    computeChildAllocation: (frame: Frame, allocation: Allocation) => void
}

export abstract class FrameClass {

    // Own properties of Gtk-2.0.Gtk.FrameClass

    static name: string
}

export interface GammaCurveClass {

    // Own fields of Gtk-2.0.Gtk.GammaCurveClass

    parentClass: VBoxClass
}

export abstract class GammaCurveClass {

    // Own properties of Gtk-2.0.Gtk.GammaCurveClass

    static name: string
}

export interface HBoxClass {

    // Own fields of Gtk-2.0.Gtk.HBoxClass

    parentClass: BoxClass
}

export abstract class HBoxClass {

    // Own properties of Gtk-2.0.Gtk.HBoxClass

    static name: string
}

export interface HButtonBoxClass {

    // Own fields of Gtk-2.0.Gtk.HButtonBoxClass

    parentClass: ButtonBoxClass
}

export abstract class HButtonBoxClass {

    // Own properties of Gtk-2.0.Gtk.HButtonBoxClass

    static name: string
}

export interface HPanedClass {

    // Own fields of Gtk-2.0.Gtk.HPanedClass

    parentClass: PanedClass
}

export abstract class HPanedClass {

    // Own properties of Gtk-2.0.Gtk.HPanedClass

    static name: string
}

export interface HRulerClass {

    // Own fields of Gtk-2.0.Gtk.HRulerClass

    parentClass: RulerClass
}

export abstract class HRulerClass {

    // Own properties of Gtk-2.0.Gtk.HRulerClass

    static name: string
}

export interface HSVClass {

    // Own fields of Gtk-2.0.Gtk.HSVClass

    parentClass: WidgetClass
    changed: (hsv: HSV) => void
    move: (hsv: HSV, type: DirectionType) => void
}

export abstract class HSVClass {

    // Own properties of Gtk-2.0.Gtk.HSVClass

    static name: string
}

export interface HScaleClass {

    // Own fields of Gtk-2.0.Gtk.HScaleClass

    parentClass: ScaleClass
}

export abstract class HScaleClass {

    // Own properties of Gtk-2.0.Gtk.HScaleClass

    static name: string
}

export interface HScrollbarClass {

    // Own fields of Gtk-2.0.Gtk.HScrollbarClass

    parentClass: ScrollbarClass
}

export abstract class HScrollbarClass {

    // Own properties of Gtk-2.0.Gtk.HScrollbarClass

    static name: string
}

export interface HSeparatorClass {

    // Own fields of Gtk-2.0.Gtk.HSeparatorClass

    parentClass: SeparatorClass
}

export abstract class HSeparatorClass {

    // Own properties of Gtk-2.0.Gtk.HSeparatorClass

    static name: string
}

export interface HandleBoxClass {

    // Own fields of Gtk-2.0.Gtk.HandleBoxClass

    parentClass: BinClass
    childAttached: (handleBox: HandleBox, child: Widget) => void
    childDetached: (handleBox: HandleBox, child: Widget) => void
}

export abstract class HandleBoxClass {

    // Own properties of Gtk-2.0.Gtk.HandleBoxClass

    static name: string
}

export interface IMContextClass {

    // Own fields of Gtk-2.0.Gtk.IMContextClass

    preeditStart: (context: IMContext) => void
    preeditEnd: (context: IMContext) => void
    preeditChanged: (context: IMContext) => void
    commit: (context: IMContext, str: string) => void
    retrieveSurrounding: (context: IMContext) => boolean
    deleteSurrounding: (context: IMContext, offset: number, nChars: number) => boolean
    setClientWindow: (context: IMContext, window: Gdk.Window | null) => void
    getPreeditString: (context: IMContext) => [ /* str */ string, /* attrs */ Pango.AttrList, /* cursorPos */ number ]
    filterKeypress: (context: IMContext, event: Gdk.EventKey) => boolean
    focusIn: (context: IMContext) => void
    focusOut: (context: IMContext) => void
    reset: (context: IMContext) => void
    setCursorLocation: (context: IMContext, area: Gdk.Rectangle) => void
    setUsePreedit: (context: IMContext, usePreedit: boolean) => void
    setSurrounding: (context: IMContext, text: string, len: number, cursorIndex: number) => void
    getSurrounding: (context: IMContext) => [ /* returnType */ boolean, /* text */ string, /* cursorIndex */ number ]
}

export abstract class IMContextClass {

    // Own properties of Gtk-2.0.Gtk.IMContextClass

    static name: string
}

export interface IMContextInfo {

    // Own fields of Gtk-2.0.Gtk.IMContextInfo

    /**
     * The unique identification string of the input method.
     * @field 
     */
    contextId: string
    /**
     * The human-readable name of the input method.
     * @field 
     */
    contextName: string
    /**
     * Translation domain to be used with dgettext()
     * @field 
     */
    domain: string
    /**
     * Name of locale directory for use with bindtextdomain()
     * @field 
     */
    domainDirname: string
    /**
     * A colon-separated list of locales where this input method
     *   should be the default. The asterisk "*" sets the default for all locales.
     * @field 
     */
    defaultLocales: string
}

/**
 * Bookkeeping information about a loadable input method.
 * @record 
 */
export class IMContextInfo {

    // Own properties of Gtk-2.0.Gtk.IMContextInfo

    static name: string
}

export interface IMContextSimpleClass {

    // Own fields of Gtk-2.0.Gtk.IMContextSimpleClass

    parentClass: IMContextClass
}

export abstract class IMContextSimpleClass {

    // Own properties of Gtk-2.0.Gtk.IMContextSimpleClass

    static name: string
}

export interface IMMulticontextClass {

    // Own fields of Gtk-2.0.Gtk.IMMulticontextClass

    parentClass: IMContextClass
}

export abstract class IMMulticontextClass {

    // Own properties of Gtk-2.0.Gtk.IMMulticontextClass

    static name: string
}

export interface IMMulticontextPrivate {
}

export class IMMulticontextPrivate {

    // Own properties of Gtk-2.0.Gtk.IMMulticontextPrivate

    static name: string
}

export interface IconFactoryClass {

    // Own fields of Gtk-2.0.Gtk.IconFactoryClass

    parentClass: GObject.ObjectClass
}

export abstract class IconFactoryClass {

    // Own properties of Gtk-2.0.Gtk.IconFactoryClass

    static name: string
}

export interface IconInfo {

    // Owm methods of Gtk-2.0.Gtk.IconInfo

    /**
     * Make a copy of a #GtkIconInfo.
     */
    copy(): IconInfo
    /**
     * Free a #GtkIconInfo and associated information
     */
    free(): void
    /**
     * Fetches the set of attach points for an icon. An attach point
     * is a location in the icon that can be used as anchor points for attaching
     * emblems or overlays to the icon.
     */
    getAttachPoints(): [ /* returnType */ boolean, /* points */ Gdk.Point[] ]
    /**
     * Gets the base size for the icon. The base size
     * is a size for the icon that was specified by
     * the icon theme creator. This may be different
     * than the actual size of image; an example of
     * this is small emblem icons that can be attached
     * to a larger icon. These icons will be given
     * the same base size as the larger icons to which
     * they are attached.
     */
    getBaseSize(): number
    /**
     * Gets the built-in image for this icon, if any. To allow
     * GTK+ to use built in icon images, you must pass the
     * %GTK_ICON_LOOKUP_USE_BUILTIN to
     * gtk_icon_theme_lookup_icon().
     */
    getBuiltinPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Gets the display name for an icon. A display name is a
     * string to be used in place of the icon name in a user
     * visible context like a list of icons.
     */
    getDisplayName(): string
    /**
     * Gets the coordinates of a rectangle within the icon
     * that can be used for display of information such
     * as a preview of the contents of a text file.
     * See gtk_icon_info_set_raw_coordinates() for further
     * information about the coordinate system.
     */
    getEmbeddedRect(): [ /* returnType */ boolean, /* rectangle */ Gdk.Rectangle ]
    /**
     * Gets the filename for the icon. If the
     * %GTK_ICON_LOOKUP_USE_BUILTIN flag was passed
     * to gtk_icon_theme_lookup_icon(), there may be
     * no filename if a builtin icon is returned; in this
     * case, you should use gtk_icon_info_get_builtin_pixbuf().
     */
    getFilename(): string
    /**
     * Renders an icon previously looked up in an icon theme using
     * gtk_icon_theme_lookup_icon(); the size will be based on the size
     * passed to gtk_icon_theme_lookup_icon(). Note that the resulting
     * pixbuf may not be exactly this size; an icon theme may have icons
     * that differ slightly from their nominal sizes, and in addition GTK+
     * will avoid scaling icons that it considers sufficiently close to the
     * requested size or for which the source image would have to be scaled
     * up too far. (This maintains sharpness.). This behaviour can be changed
     * by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
     * the #GtkIconInfo. If this flag has been specified, the pixbuf
     * returned by this function will be scaled to the exact size.
     */
    loadIcon(): GdkPixbuf.Pixbuf
    /**
     * Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()
     * and gtk_icon_info_get_attach_points() should be returned in their
     * original form as specified in the icon theme, instead of scaled
     * appropriately for the pixbuf returned by gtk_icon_info_load_icon().
     * 
     * Raw coordinates are somewhat strange; they are specified to be with
     * respect to the unscaled pixmap for PNG and XPM icons, but for SVG
     * icons, they are in a 1000x1000 coordinate space that is scaled
     * to the final size of the icon.  You can determine if the icon is an SVG
     * icon by using gtk_icon_info_get_filename(), and seeing if it is non-%NULL
     * and ends in '.svg'.
     * 
     * This function is provided primarily to allow compatibility wrappers
     * for older API's, and is not expected to be useful for applications.
     * @param rawCoordinates whether the coordinates of embedded rectangles   and attached points should be returned in their original   (unscaled) form.
     */
    setRawCoordinates(rawCoordinates: boolean): void
}

export class IconInfo {

    // Own properties of Gtk-2.0.Gtk.IconInfo

    static name: string

    // Constructors of Gtk-2.0.Gtk.IconInfo

    /**
     * Creates a #GtkIconInfo for a #GdkPixbuf.
     * @constructor 
     * @param iconTheme a #GtkIconTheme
     * @param pixbuf the pixbuf to wrap in a #GtkIconInfo
     */
    static newForPixbuf(iconTheme: IconTheme, pixbuf: GdkPixbuf.Pixbuf): IconInfo
}

export interface IconSet {

    // Owm methods of Gtk-2.0.Gtk.IconSet

    /**
     * Icon sets have a list of #GtkIconSource, which they use as base
     * icons for rendering icons in different states and sizes. Icons are
     * scaled, made to look insensitive, etc. in
     * gtk_icon_set_render_icon(), but #GtkIconSet needs base images to
     * work with. The base images and when to use them are described by
     * a #GtkIconSource.
     * 
     * This function copies `source,` so you can reuse the same source immediately
     * without affecting the icon set.
     * 
     * An example of when you'd use this function: a web browser's "Back
     * to Previous Page" icon might point in a different direction in
     * Hebrew and in English; it might look different when insensitive;
     * and it might change size depending on toolbar mode (small/large
     * icons). So a single icon set would contain all those variants of
     * the icon, and you might add a separate source for each one.
     * 
     * You should nearly always add a "default" icon source with all
     * fields wildcarded, which will be used as a fallback if no more
     * specific source matches. #GtkIconSet always prefers more specific
     * icon sources to more generic icon sources. The order in which you
     * add the sources to the icon set does not matter.
     * 
     * gtk_icon_set_new_from_pixbuf() creates a new icon set with a
     * default icon source based on the given pixbuf.
     * @param source a #GtkIconSource
     */
    addSource(source: IconSource): void
    /**
     * Copies `icon_set` by value.
     */
    copy(): IconSet
    /**
     * Obtains a list of icon sizes this icon set can render. The returned
     * array must be freed with g_free().
     */
    getSizes(): /* sizes */ number[]
    /**
     * Increments the reference count on `icon_set`.
     */
    ref(): IconSet
    /**
     * Renders an icon using gtk_style_render_icon(). In most cases,
     * gtk_widget_render_icon() is better, since it automatically provides
     * most of the arguments from the current widget settings.  This
     * function never returns %NULL; if the icon can't be rendered
     * (perhaps because an image file fails to load), a default "missing
     * image" icon will be returned instead.
     * @param style a #GtkStyle associated with `widget,` or %NULL
     * @param direction text direction
     * @param state widget state
     * @param size icon size. A size of (GtkIconSize)-1        means render at the size of the source and don't scale.
     * @param widget widget that will display the icon, or %NULL.          The only use that is typically made of this          is to determine the appropriate #GdkScreen.
     * @param detail detail to pass to the theme engine, or %NULL.          Note that passing a detail of anything but %NULL          will disable caching.
     */
    renderIcon(style: Style | null, direction: TextDirection, state: StateType, size: number, widget: Widget | null, detail: string | null): GdkPixbuf.Pixbuf
    /**
     * Decrements the reference count on `icon_set,` and frees memory
     * if the reference count reaches 0.
     */
    unref(): void
}

export class IconSet {

    // Own properties of Gtk-2.0.Gtk.IconSet

    static name: string

    // Constructors of Gtk-2.0.Gtk.IconSet

    /**
     * Creates a new #GtkIconSet. A #GtkIconSet represents a single icon
     * in various sizes and widget states. It can provide a #GdkPixbuf
     * for a given size and state on request, and automatically caches
     * some of the rendered #GdkPixbuf objects.
     * 
     * Normally you would use gtk_widget_render_icon() instead of
     * using #GtkIconSet directly. The one case where you'd use
     * #GtkIconSet is to create application-specific icon sets to place in
     * a #GtkIconFactory.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkIconSet. A #GtkIconSet represents a single icon
     * in various sizes and widget states. It can provide a #GdkPixbuf
     * for a given size and state on request, and automatically caches
     * some of the rendered #GdkPixbuf objects.
     * 
     * Normally you would use gtk_widget_render_icon() instead of
     * using #GtkIconSet directly. The one case where you'd use
     * #GtkIconSet is to create application-specific icon sets to place in
     * a #GtkIconFactory.
     * @constructor 
     */
    static new(): IconSet
    /**
     * Creates a new #GtkIconSet with `pixbuf` as the default/fallback
     * source image. If you don't add any additional #GtkIconSource to the
     * icon set, all variants of the icon will be created from `pixbuf,`
     * using scaling, pixelation, etc. as required to adjust the icon size
     * or make the icon look insensitive/prelighted.
     * @constructor 
     * @param pixbuf a #GdkPixbuf
     */
    static newFromPixbuf(pixbuf: GdkPixbuf.Pixbuf): IconSet
}

export interface IconSource {

    // Owm methods of Gtk-2.0.Gtk.IconSource

    /**
     * Creates a copy of `source;` mostly useful for language bindings.
     */
    copy(): IconSource
    /**
     * Frees a dynamically-allocated icon source, along with its
     * filename, size, and pixbuf fields if those are not %NULL.
     */
    free(): void
    /**
     * Obtains the text direction this icon source applies to. The return
     * value is only useful/meaningful if the text direction is <emphasis>not</emphasis>
     * wildcarded.
     */
    getDirection(): TextDirection
    /**
     * Gets the value set by gtk_icon_source_set_direction_wildcarded().
     */
    getDirectionWildcarded(): boolean
    /**
     * Retrieves the source filename, or %NULL if none is set. The
     * filename is not a copy, and should not be modified or expected to
     * persist beyond the lifetime of the icon source.
     */
    getFilename(): string
    /**
     * Retrieves the source icon name, or %NULL if none is set. The
     * icon_name is not a copy, and should not be modified or expected to
     * persist beyond the lifetime of the icon source.
     */
    getIconName(): string
    /**
     * Retrieves the source pixbuf, or %NULL if none is set.
     * In addition, if a filename source is in use, this
     * function in some cases will return the pixbuf from
     * loaded from the filename. This is, for example, true
     * for the GtkIconSource passed to the GtkStyle::render_icon()
     * virtual function. The reference count on the pixbuf is
     * not incremented.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Obtains the icon size this source applies to. The return value
     * is only useful/meaningful if the icon size is <emphasis>not</emphasis> wildcarded.
     */
    getSize(): number
    /**
     * Gets the value set by gtk_icon_source_set_size_wildcarded().
     */
    getSizeWildcarded(): boolean
    /**
     * Obtains the widget state this icon source applies to. The return
     * value is only useful/meaningful if the widget state is <emphasis>not</emphasis>
     * wildcarded.
     */
    getState(): StateType
    /**
     * Gets the value set by gtk_icon_source_set_state_wildcarded().
     */
    getStateWildcarded(): boolean
    /**
     * Sets the text direction this icon source is intended to be used
     * with.
     * 
     * Setting the text direction on an icon source makes no difference
     * if the text direction is wildcarded. Therefore, you should usually
     * call gtk_icon_source_set_direction_wildcarded() to un-wildcard it
     * in addition to calling this function.
     * @param direction text direction this source applies to
     */
    setDirection(direction: TextDirection): void
    /**
     * If the text direction is wildcarded, this source can be used
     * as the base image for an icon in any #GtkTextDirection.
     * If the text direction is not wildcarded, then the
     * text direction the icon source applies to should be set
     * with gtk_icon_source_set_direction(), and the icon source
     * will only be used with that text direction.
     * 
     * #GtkIconSet prefers non-wildcarded sources (exact matches) over
     * wildcarded sources, and will use an exact match when possible.
     * @param setting %TRUE to wildcard the text direction
     */
    setDirectionWildcarded(setting: boolean): void
    /**
     * Sets the name of an image file to use as a base image when creating
     * icon variants for #GtkIconSet. The filename must be absolute.
     * @param filename image file to use
     */
    setFilename(filename: string): void
    /**
     * Sets the name of an icon to look up in the current icon theme
     * to use as a base image when creating icon variants for #GtkIconSet.
     * @param iconName name of icon to use
     */
    setIconName(iconName: string | null): void
    /**
     * Sets a pixbuf to use as a base image when creating icon variants
     * for #GtkIconSet.
     * @param pixbuf pixbuf to use as a source
     */
    setPixbuf(pixbuf: GdkPixbuf.Pixbuf): void
    /**
     * Sets the icon size this icon source is intended to be used
     * with.
     * 
     * Setting the icon size on an icon source makes no difference
     * if the size is wildcarded. Therefore, you should usually
     * call gtk_icon_source_set_size_wildcarded() to un-wildcard it
     * in addition to calling this function.
     * @param size icon size this source applies to
     */
    setSize(size: number): void
    /**
     * If the icon size is wildcarded, this source can be used as the base
     * image for an icon of any size.  If the size is not wildcarded, then
     * the size the source applies to should be set with
     * gtk_icon_source_set_size() and the icon source will only be used
     * with that specific size.
     * 
     * #GtkIconSet prefers non-wildcarded sources (exact matches) over
     * wildcarded sources, and will use an exact match when possible.
     * 
     * #GtkIconSet will normally scale wildcarded source images to produce
     * an appropriate icon at a given size, but will not change the size
     * of source images that match exactly.
     * @param setting %TRUE to wildcard the widget state
     */
    setSizeWildcarded(setting: boolean): void
    /**
     * Sets the widget state this icon source is intended to be used
     * with.
     * 
     * Setting the widget state on an icon source makes no difference
     * if the state is wildcarded. Therefore, you should usually
     * call gtk_icon_source_set_state_wildcarded() to un-wildcard it
     * in addition to calling this function.
     * @param state widget state this source applies to
     */
    setState(state: StateType): void
    /**
     * If the widget state is wildcarded, this source can be used as the
     * base image for an icon in any #GtkStateType.  If the widget state
     * is not wildcarded, then the state the source applies to should be
     * set with gtk_icon_source_set_state() and the icon source will
     * only be used with that specific state.
     * 
     * #GtkIconSet prefers non-wildcarded sources (exact matches) over
     * wildcarded sources, and will use an exact match when possible.
     * 
     * #GtkIconSet will normally transform wildcarded source images to
     * produce an appropriate icon for a given state, for example
     * lightening an image on prelight, but will not modify source images
     * that match exactly.
     * @param setting %TRUE to wildcard the widget state
     */
    setStateWildcarded(setting: boolean): void
}

export class IconSource {

    // Own properties of Gtk-2.0.Gtk.IconSource

    static name: string

    // Constructors of Gtk-2.0.Gtk.IconSource

    /**
     * Creates a new #GtkIconSource. A #GtkIconSource contains a #GdkPixbuf (or
     * image filename) that serves as the base image for one or more of the
     * icons in a #GtkIconSet, along with a specification for which icons in the
     * icon set will be based on that pixbuf or image file. An icon set contains
     * a set of icons that represent "the same" logical concept in different states,
     * different global text directions, and different sizes.
     * 
     * So for example a web browser's "Back to Previous Page" icon might
     * point in a different direction in Hebrew and in English; it might
     * look different when insensitive; and it might change size depending
     * on toolbar mode (small/large icons). So a single icon set would
     * contain all those variants of the icon. #GtkIconSet contains a list
     * of #GtkIconSource from which it can derive specific icon variants in
     * the set.
     * 
     * In the simplest case, #GtkIconSet contains one source pixbuf from
     * which it derives all variants. The convenience function
     * gtk_icon_set_new_from_pixbuf() handles this case; if you only have
     * one source pixbuf, just use that function.
     * 
     * If you want to use a different base pixbuf for different icon
     * variants, you create multiple icon sources, mark which variants
     * they'll be used to create, and add them to the icon set with
     * gtk_icon_set_add_source().
     * 
     * By default, the icon source has all parameters wildcarded. That is,
     * the icon source will be used as the base icon for any desired text
     * direction, widget state, or icon size.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkIconSource. A #GtkIconSource contains a #GdkPixbuf (or
     * image filename) that serves as the base image for one or more of the
     * icons in a #GtkIconSet, along with a specification for which icons in the
     * icon set will be based on that pixbuf or image file. An icon set contains
     * a set of icons that represent "the same" logical concept in different states,
     * different global text directions, and different sizes.
     * 
     * So for example a web browser's "Back to Previous Page" icon might
     * point in a different direction in Hebrew and in English; it might
     * look different when insensitive; and it might change size depending
     * on toolbar mode (small/large icons). So a single icon set would
     * contain all those variants of the icon. #GtkIconSet contains a list
     * of #GtkIconSource from which it can derive specific icon variants in
     * the set.
     * 
     * In the simplest case, #GtkIconSet contains one source pixbuf from
     * which it derives all variants. The convenience function
     * gtk_icon_set_new_from_pixbuf() handles this case; if you only have
     * one source pixbuf, just use that function.
     * 
     * If you want to use a different base pixbuf for different icon
     * variants, you create multiple icon sources, mark which variants
     * they'll be used to create, and add them to the icon set with
     * gtk_icon_set_add_source().
     * 
     * By default, the icon source has all parameters wildcarded. That is,
     * the icon source will be used as the base icon for any desired text
     * direction, widget state, or icon size.
     * @constructor 
     */
    static new(): IconSource
}

export interface IconThemeClass {

    // Own fields of Gtk-2.0.Gtk.IconThemeClass

    parentClass: GObject.ObjectClass
    changed: (iconTheme: IconTheme) => void
}

export abstract class IconThemeClass {

    // Own properties of Gtk-2.0.Gtk.IconThemeClass

    static name: string
}

export interface IconThemePrivate {
}

export class IconThemePrivate {

    // Own properties of Gtk-2.0.Gtk.IconThemePrivate

    static name: string
}

export interface IconViewClass {

    // Own fields of Gtk-2.0.Gtk.IconViewClass

    parentClass: ContainerClass
    setScrollAdjustments: (iconView: IconView, hadjustment: Adjustment, vadjustment: Adjustment) => void
    itemActivated: (iconView: IconView, path: TreePath) => void
    selectionChanged: (iconView: IconView) => void
    selectAll: (iconView: IconView) => void
    unselectAll: (iconView: IconView) => void
    selectCursorItem: (iconView: IconView) => void
    toggleCursorItem: (iconView: IconView) => void
    moveCursor: (iconView: IconView, step: MovementStep, count: number) => boolean
    activateCursorItem: (iconView: IconView) => boolean
}

export abstract class IconViewClass {

    // Own properties of Gtk-2.0.Gtk.IconViewClass

    static name: string
}

export interface IconViewPrivate {
}

export class IconViewPrivate {

    // Own properties of Gtk-2.0.Gtk.IconViewPrivate

    static name: string
}

export interface ImageAnimationData {

    // Own fields of Gtk-2.0.Gtk.ImageAnimationData

    anim: GdkPixbuf.PixbufAnimation
    iter: GdkPixbuf.PixbufAnimationIter
    frameTimeout: number
}

export class ImageAnimationData {

    // Own properties of Gtk-2.0.Gtk.ImageAnimationData

    static name: string
}

export interface ImageClass {

    // Own fields of Gtk-2.0.Gtk.ImageClass

    parentClass: MiscClass
}

export abstract class ImageClass {

    // Own properties of Gtk-2.0.Gtk.ImageClass

    static name: string
}

export interface ImageGIconData {

    // Own fields of Gtk-2.0.Gtk.ImageGIconData

    icon: Gio.Icon
    pixbuf: GdkPixbuf.Pixbuf
    themeChangeId: number
}

export class ImageGIconData {

    // Own properties of Gtk-2.0.Gtk.ImageGIconData

    static name: string
}

export interface ImageIconNameData {

    // Own fields of Gtk-2.0.Gtk.ImageIconNameData

    iconName: string
    pixbuf: GdkPixbuf.Pixbuf
    themeChangeId: number
}

export class ImageIconNameData {

    // Own properties of Gtk-2.0.Gtk.ImageIconNameData

    static name: string
}

export interface ImageIconSetData {

    // Own fields of Gtk-2.0.Gtk.ImageIconSetData

    iconSet: IconSet
}

export class ImageIconSetData {

    // Own properties of Gtk-2.0.Gtk.ImageIconSetData

    static name: string
}

export interface ImageImageData {

    // Own fields of Gtk-2.0.Gtk.ImageImageData

    image: Gdk.Image
}

export class ImageImageData {

    // Own properties of Gtk-2.0.Gtk.ImageImageData

    static name: string
}

export interface ImageMenuItemClass {

    // Own fields of Gtk-2.0.Gtk.ImageMenuItemClass

    parentClass: MenuItemClass
}

export abstract class ImageMenuItemClass {

    // Own properties of Gtk-2.0.Gtk.ImageMenuItemClass

    static name: string
}

export interface ImagePixbufData {

    // Own fields of Gtk-2.0.Gtk.ImagePixbufData

    pixbuf: GdkPixbuf.Pixbuf
}

export class ImagePixbufData {

    // Own properties of Gtk-2.0.Gtk.ImagePixbufData

    static name: string
}

export interface ImagePixmapData {

    // Own fields of Gtk-2.0.Gtk.ImagePixmapData

    pixmap: Gdk.Pixmap
}

export class ImagePixmapData {

    // Own properties of Gtk-2.0.Gtk.ImagePixmapData

    static name: string
}

export interface ImageStockData {

    // Own fields of Gtk-2.0.Gtk.ImageStockData

    stockId: string
}

export class ImageStockData {

    // Own properties of Gtk-2.0.Gtk.ImageStockData

    static name: string
}

export interface InfoBarClass {

    // Own fields of Gtk-2.0.Gtk.InfoBarClass

    parentClass: HBoxClass
    response: (infoBar: InfoBar, responseId: number) => void
    close: (infoBar: InfoBar) => void
}

export abstract class InfoBarClass {

    // Own properties of Gtk-2.0.Gtk.InfoBarClass

    static name: string
}

export interface InfoBarPrivate {
}

export class InfoBarPrivate {

    // Own properties of Gtk-2.0.Gtk.InfoBarPrivate

    static name: string
}

export interface InputDialogClass {

    // Own fields of Gtk-2.0.Gtk.InputDialogClass

    parentClass: DialogClass
    enableDevice: (inputd: InputDialog, device: Gdk.Device) => void
    disableDevice: (inputd: InputDialog, device: Gdk.Device) => void
}

export abstract class InputDialogClass {

    // Own properties of Gtk-2.0.Gtk.InputDialogClass

    static name: string
}

export interface InvisibleClass {

    // Own fields of Gtk-2.0.Gtk.InvisibleClass

    parentClass: WidgetClass
}

export abstract class InvisibleClass {

    // Own properties of Gtk-2.0.Gtk.InvisibleClass

    static name: string
}

export interface ItemClass {

    // Own fields of Gtk-2.0.Gtk.ItemClass

    parentClass: BinClass
    select: (item: Item) => void
    deselect: (item: Item) => void
    toggle: (item: Item) => void
}

export abstract class ItemClass {

    // Own properties of Gtk-2.0.Gtk.ItemClass

    static name: string
}

export interface ItemFactoryClass {

    // Own fields of Gtk-2.0.Gtk.ItemFactoryClass

    objectClass: ObjectClass
    itemHt: GLib.HashTable
}

export abstract class ItemFactoryClass {

    // Own properties of Gtk-2.0.Gtk.ItemFactoryClass

    static name: string
}

export interface ItemFactoryEntry {

    // Own fields of Gtk-2.0.Gtk.ItemFactoryEntry

    path: string
    accelerator: string
    callback: ItemFactoryCallback
    callbackAction: number
    itemType: string
    extraData: object
}

export class ItemFactoryEntry {

    // Own properties of Gtk-2.0.Gtk.ItemFactoryEntry

    static name: string
}

export interface ItemFactoryItem {

    // Own fields of Gtk-2.0.Gtk.ItemFactoryItem

    path: string
    widgets: object[]
}

export class ItemFactoryItem {

    // Own properties of Gtk-2.0.Gtk.ItemFactoryItem

    static name: string
}

export interface LabelClass {

    // Own fields of Gtk-2.0.Gtk.LabelClass

    parentClass: MiscClass
    moveCursor: (label: Label, step: MovementStep, count: number, extendSelection: boolean) => void
    copyClipboard: (label: Label) => void
    populatePopup: (label: Label, menu: Menu) => void
    activateLink: (label: Label, uri: string) => boolean
}

export abstract class LabelClass {

    // Own properties of Gtk-2.0.Gtk.LabelClass

    static name: string
}

export interface LabelSelectionInfo {
}

export class LabelSelectionInfo {

    // Own properties of Gtk-2.0.Gtk.LabelSelectionInfo

    static name: string
}

export interface LayoutClass {

    // Own fields of Gtk-2.0.Gtk.LayoutClass

    parentClass: ContainerClass
    setScrollAdjustments: (layout: Layout, hadjustment: Adjustment, vadjustment: Adjustment) => void
}

export abstract class LayoutClass {

    // Own properties of Gtk-2.0.Gtk.LayoutClass

    static name: string
}

export interface LinkButtonClass {

    // Own fields of Gtk-2.0.Gtk.LinkButtonClass

    parentClass: ButtonClass
}

export abstract class LinkButtonClass {

    // Own properties of Gtk-2.0.Gtk.LinkButtonClass

    static name: string
}

export interface LinkButtonPrivate {
}

export class LinkButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.LinkButtonPrivate

    static name: string
}

export interface ListClass {

    // Own fields of Gtk-2.0.Gtk.ListClass

    parentClass: ContainerClass
    selectionChanged: (list: List) => void
    selectChild: (list: List, child: Widget) => void
    unselectChild: (list: List, child: Widget) => void
}

export abstract class ListClass {

    // Own properties of Gtk-2.0.Gtk.ListClass

    static name: string
}

export interface ListItemClass {

    // Own fields of Gtk-2.0.Gtk.ListItemClass

    parentClass: ItemClass
    toggleFocusRow: (listItem: ListItem) => void
    selectAll: (listItem: ListItem) => void
    unselectAll: (listItem: ListItem) => void
    undoSelection: (listItem: ListItem) => void
    startSelection: (listItem: ListItem) => void
    endSelection: (listItem: ListItem) => void
    extendSelection: (listItem: ListItem, scrollType: ScrollType, position: number, autoStartSelection: boolean) => void
    scrollHorizontal: (listItem: ListItem, scrollType: ScrollType, position: number) => void
    scrollVertical: (listItem: ListItem, scrollType: ScrollType, position: number) => void
    toggleAddMode: (listItem: ListItem) => void
}

export abstract class ListItemClass {

    // Own properties of Gtk-2.0.Gtk.ListItemClass

    static name: string
}

export interface ListStoreClass {

    // Own fields of Gtk-2.0.Gtk.ListStoreClass

    parentClass: GObject.ObjectClass
}

export abstract class ListStoreClass {

    // Own properties of Gtk-2.0.Gtk.ListStoreClass

    static name: string
}

export interface MenuBarClass {

    // Own fields of Gtk-2.0.Gtk.MenuBarClass

    parentClass: MenuShellClass
}

export abstract class MenuBarClass {

    // Own properties of Gtk-2.0.Gtk.MenuBarClass

    static name: string
}

export interface MenuClass {

    // Own fields of Gtk-2.0.Gtk.MenuClass

    parentClass: MenuShellClass
}

export abstract class MenuClass {

    // Own properties of Gtk-2.0.Gtk.MenuClass

    static name: string
}

export interface MenuEntry {

    // Own fields of Gtk-2.0.Gtk.MenuEntry

    path: string
    accelerator: string
    callback: MenuCallback
    callbackData: object
    widget: Widget
}

export class MenuEntry {

    // Own properties of Gtk-2.0.Gtk.MenuEntry

    static name: string
}

export interface MenuItemClass {

    // Own fields of Gtk-2.0.Gtk.MenuItemClass

    parentClass: ItemClass
    hideOnActivate: number
    activate: (menuItem: MenuItem) => void
    activateItem: (menuItem: MenuItem) => void
    toggleSizeRequest: (menuItem: MenuItem, requisition: number) => void
    toggleSizeAllocate: (menuItem: MenuItem, allocation: number) => void
    setLabel: (menuItem: MenuItem, label: string) => void
    getLabel: (menuItem: MenuItem) => string
}

export abstract class MenuItemClass {

    // Own properties of Gtk-2.0.Gtk.MenuItemClass

    static name: string
}

export interface MenuShellClass {

    // Own fields of Gtk-2.0.Gtk.MenuShellClass

    parentClass: ContainerClass
    submenuPlacement: number
    deactivate: (menuShell: MenuShell) => void
    selectionDone: (menuShell: MenuShell) => void
    moveCurrent: (menuShell: MenuShell, direction: MenuDirectionType) => void
    activateCurrent: (menuShell: MenuShell, forceHide: boolean) => void
    cancel: (menuShell: MenuShell) => void
    selectItem: (menuShell: MenuShell, menuItem: Widget) => void
    insert: (menuShell: MenuShell, child: Widget, position: number) => void
    getPopupDelay: (menuShell: MenuShell) => number
    moveSelected: (menuShell: MenuShell, distance: number) => boolean
}

export abstract class MenuShellClass {

    // Own properties of Gtk-2.0.Gtk.MenuShellClass

    static name: string
}

export interface MenuToolButtonClass {

    // Own fields of Gtk-2.0.Gtk.MenuToolButtonClass

    parentClass: ToolButtonClass
    showMenu: (button: MenuToolButton) => void
}

export abstract class MenuToolButtonClass {

    // Own properties of Gtk-2.0.Gtk.MenuToolButtonClass

    static name: string
}

export interface MenuToolButtonPrivate {
}

export class MenuToolButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.MenuToolButtonPrivate

    static name: string
}

export interface MessageDialogClass {

    // Own fields of Gtk-2.0.Gtk.MessageDialogClass

    parentClass: DialogClass
}

export abstract class MessageDialogClass {

    // Own properties of Gtk-2.0.Gtk.MessageDialogClass

    static name: string
}

export interface MiscClass {

    // Own fields of Gtk-2.0.Gtk.MiscClass

    parentClass: WidgetClass
}

export abstract class MiscClass {

    // Own properties of Gtk-2.0.Gtk.MiscClass

    static name: string
}

export interface MountOperationClass {

    // Own fields of Gtk-2.0.Gtk.MountOperationClass

    parentClass: Gio.MountOperationClass
}

export abstract class MountOperationClass {

    // Own properties of Gtk-2.0.Gtk.MountOperationClass

    static name: string
}

export interface MountOperationPrivate {
}

export class MountOperationPrivate {

    // Own properties of Gtk-2.0.Gtk.MountOperationPrivate

    static name: string
}

export interface NotebookClass {

    // Own fields of Gtk-2.0.Gtk.NotebookClass

    parentClass: ContainerClass
    switchPage: (notebook: Notebook, page: NotebookPage, pageNum: number) => void
    selectPage: (notebook: Notebook, moveFocus: boolean) => boolean
    focusTab: (notebook: Notebook, type: NotebookTab) => boolean
    changeCurrentPage: (notebook: Notebook, offset: number) => boolean
    moveFocusOut: (notebook: Notebook, direction: DirectionType) => void
    reorderTab: (notebook: Notebook, direction: DirectionType, moveToLast: boolean) => boolean
    insertPage: (notebook: Notebook, child: Widget, tabLabel: Widget, menuLabel: Widget, position: number) => number
}

export abstract class NotebookClass {

    // Own properties of Gtk-2.0.Gtk.NotebookClass

    static name: string
}

export interface NotebookPage {
}

export class NotebookPage {

    // Own properties of Gtk-2.0.Gtk.NotebookPage

    static name: string
}

export interface ObjectClass {

    // Own fields of Gtk-2.0.Gtk.ObjectClass

    parentClass: GObject.InitiallyUnownedClass
    setArg: (object: Object, arg: Arg, argId: number) => void
    getArg: (object: Object, arg: Arg, argId: number) => void
    destroy: (object: Object) => void
}

export abstract class ObjectClass {

    // Own properties of Gtk-2.0.Gtk.ObjectClass

    static name: string
}

export interface OffscreenWindowClass {

    // Own fields of Gtk-2.0.Gtk.OffscreenWindowClass

    parentClass: WindowClass
}

export abstract class OffscreenWindowClass {

    // Own properties of Gtk-2.0.Gtk.OffscreenWindowClass

    static name: string
}

export interface OldEditableClass {

    // Own fields of Gtk-2.0.Gtk.OldEditableClass

    parentClass: WidgetClass
    activate: (editable: OldEditable) => void
    setEditable: (editable: OldEditable, isEditable: boolean) => void
    moveCursor: (editable: OldEditable, x: number, y: number) => void
    moveWord: (editable: OldEditable, n: number) => void
    movePage: (editable: OldEditable, x: number, y: number) => void
    moveToRow: (editable: OldEditable, row: number) => void
    moveToColumn: (editable: OldEditable, row: number) => void
    killChar: (editable: OldEditable, direction: number) => void
    killWord: (editable: OldEditable, direction: number) => void
    killLine: (editable: OldEditable, direction: number) => void
    cutClipboard: (editable: OldEditable) => void
    copyClipboard: (editable: OldEditable) => void
    pasteClipboard: (editable: OldEditable) => void
    updateText: (editable: OldEditable, startPos: number, endPos: number) => void
    getChars: (editable: OldEditable, startPos: number, endPos: number) => string
    setSelection: (editable: OldEditable, startPos: number, endPos: number) => void
    setPosition: (editable: OldEditable, position: number) => void
}

export abstract class OldEditableClass {

    // Own properties of Gtk-2.0.Gtk.OldEditableClass

    static name: string
}

export interface OptionMenuClass {

    // Own fields of Gtk-2.0.Gtk.OptionMenuClass

    parentClass: ButtonClass
    changed: (optionMenu: OptionMenu) => void
}

export abstract class OptionMenuClass {

    // Own properties of Gtk-2.0.Gtk.OptionMenuClass

    static name: string
}

export interface OrientableIface {

    // Own fields of Gtk-2.0.Gtk.OrientableIface

    baseIface: GObject.TypeInterface
}

export abstract class OrientableIface {

    // Own properties of Gtk-2.0.Gtk.OrientableIface

    static name: string
}

export interface PageRange {

    // Own fields of Gtk-2.0.Gtk.PageRange

    start: number
    end: number
}

export class PageRange {

    // Own properties of Gtk-2.0.Gtk.PageRange

    static name: string
}

export interface PanedClass {

    // Own fields of Gtk-2.0.Gtk.PanedClass

    parentClass: ContainerClass
    cycleChildFocus: (paned: Paned, reverse: boolean) => boolean
    toggleHandleFocus: (paned: Paned) => boolean
    moveHandle: (paned: Paned, scroll: ScrollType) => boolean
    cycleHandleFocus: (paned: Paned, reverse: boolean) => boolean
    acceptPosition: (paned: Paned) => boolean
    cancelPosition: (paned: Paned) => boolean
}

export abstract class PanedClass {

    // Own properties of Gtk-2.0.Gtk.PanedClass

    static name: string
}

export interface PanedPrivate {
}

export class PanedPrivate {

    // Own properties of Gtk-2.0.Gtk.PanedPrivate

    static name: string
}

export interface PaperSize {

    // Owm methods of Gtk-2.0.Gtk.PaperSize

    /**
     * Copies an existing #GtkPaperSize.
     */
    copy(): PaperSize
    /**
     * Free the given #GtkPaperSize object.
     */
    free(): void
    /**
     * Gets the default bottom margin for the #GtkPaperSize.
     * @param unit the unit for the return value
     */
    getDefaultBottomMargin(unit: Unit): number
    /**
     * Gets the default left margin for the #GtkPaperSize.
     * @param unit the unit for the return value
     */
    getDefaultLeftMargin(unit: Unit): number
    /**
     * Gets the default right margin for the #GtkPaperSize.
     * @param unit the unit for the return value
     */
    getDefaultRightMargin(unit: Unit): number
    /**
     * Gets the default top margin for the #GtkPaperSize.
     * @param unit the unit for the return value
     */
    getDefaultTopMargin(unit: Unit): number
    /**
     * Gets the human-readable name of the #GtkPaperSize.
     */
    getDisplayName(): string
    /**
     * Gets the paper height of the #GtkPaperSize, in
     * units of `unit`.
     * @param unit the unit for the return value
     */
    getHeight(unit: Unit): number
    /**
     * Gets the name of the #GtkPaperSize.
     */
    getName(): string
    /**
     * Gets the PPD name of the #GtkPaperSize, which
     * may be %NULL.
     */
    getPpdName(): string
    /**
     * Gets the paper width of the #GtkPaperSize, in
     * units of `unit`.
     * @param unit the unit for the return value
     */
    getWidth(unit: Unit): number
    /**
     * Returns %TRUE if `size` is not a standard paper size.
     */
    isCustom(): boolean
    /**
     * Compares two #GtkPaperSize objects.
     * @param size2 another #GtkPaperSize object
     */
    isEqual(size2: PaperSize): boolean
    /**
     * Changes the dimensions of a `size` to `width` x `height`.
     * @param width the new width in units of `unit`
     * @param height the new height in units of `unit`
     * @param unit the unit for `width` and `height`
     */
    setSize(width: number, height: number, unit: Unit): void
    /**
     * This function adds the paper size from `size` to `key_file`.
     * @param keyFile the #GKeyFile to save the paper size to
     * @param groupName the group to add the settings to in `key_file`
     */
    toKeyFile(keyFile: GLib.KeyFile, groupName: string): void
}

export class PaperSize {

    // Own properties of Gtk-2.0.Gtk.PaperSize

    static name: string

    // Constructors of Gtk-2.0.Gtk.PaperSize

    /**
     * Creates a new #GtkPaperSize object by parsing a
     * <ulink url="ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf">PWG 5101.1-2002</ulink>
     * paper name.
     * 
     * If `name` is %NULL, the default paper size is returned,
     * see gtk_paper_size_get_default().
     * @constructor 
     * @param name a paper size name, or %NULL
     */
    constructor(name: string | null) 
    /**
     * Creates a new #GtkPaperSize object by parsing a
     * <ulink url="ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf">PWG 5101.1-2002</ulink>
     * paper name.
     * 
     * If `name` is %NULL, the default paper size is returned,
     * see gtk_paper_size_get_default().
     * @constructor 
     * @param name a paper size name, or %NULL
     */
    static new(name: string | null): PaperSize
    /**
     * Creates a new #GtkPaperSize object with the
     * given parameters.
     * @constructor 
     * @param name the paper name
     * @param displayName the human-readable name
     * @param width the paper width, in units of `unit`
     * @param height the paper height, in units of `unit`
     * @param unit the unit for `width` and `height`
     */
    static newCustom(name: string, displayName: string, width: number, height: number, unit: Unit): PaperSize
    /**
     * Reads a paper size from the group `group_name` in the key file
     * `key_file`.
     * @constructor 
     * @param keyFile the #GKeyFile to retrieve the papersize from
     * @param groupName the name ofthe group in the key file to read,     or %NULL to read the first group
     */
    static newFromKeyFile(keyFile: GLib.KeyFile, groupName: string): PaperSize
    /**
     * Creates a new #GtkPaperSize object by using
     * PPD information.
     * 
     * If `ppd_name` is not a recognized PPD paper name,
     * `ppd_display_name,` `width` and `height` are used to
     * construct a custom #GtkPaperSize object.
     * @constructor 
     * @param ppdName a PPD paper name
     * @param ppdDisplayName the corresponding human-readable name
     * @param width the paper width, in points
     * @param height the paper height in points
     */
    static newFromPpd(ppdName: string, ppdDisplayName: string, width: number, height: number): PaperSize
    /**
     * Returns the name of the default paper size, which
     * depends on the current locale.
     */
    static getDefault(): string
    /**
     * Creates a list of known paper sizes.
     * @param includeCustom whether to include custom paper sizes     as defined in the page setup dialog
     */
    static getPaperSizes(includeCustom: boolean): PaperSize[]
}

export interface PixmapClass {

    // Own fields of Gtk-2.0.Gtk.PixmapClass

    parentClass: MiscClass
}

export abstract class PixmapClass {

    // Own properties of Gtk-2.0.Gtk.PixmapClass

    static name: string
}

export interface PlugClass {

    // Own fields of Gtk-2.0.Gtk.PlugClass

    parentClass: WindowClass
    embedded: (plug: Plug) => void
}

export abstract class PlugClass {

    // Own properties of Gtk-2.0.Gtk.PlugClass

    static name: string
}

export interface PreviewClass {

    // Own fields of Gtk-2.0.Gtk.PreviewClass

    parentClass: WidgetClass
    info: PreviewInfo
}

export abstract class PreviewClass {

    // Own properties of Gtk-2.0.Gtk.PreviewClass

    static name: string
}

export interface PreviewInfo {

    // Own fields of Gtk-2.0.Gtk.PreviewInfo

    lookup: number
    gamma: number
}

export class PreviewInfo {

    // Own properties of Gtk-2.0.Gtk.PreviewInfo

    static name: string
}

export interface PrintOperationClass {

    // Own fields of Gtk-2.0.Gtk.PrintOperationClass

    parentClass: GObject.ObjectClass
    done: (operation: PrintOperation, result: PrintOperationResult) => void
    beginPrint: (operation: PrintOperation, context: PrintContext) => void
    paginate: (operation: PrintOperation, context: PrintContext) => boolean
    requestPageSetup: (operation: PrintOperation, context: PrintContext, pageNr: number, setup: PageSetup) => void
    drawPage: (operation: PrintOperation, context: PrintContext, pageNr: number) => void
    endPrint: (operation: PrintOperation, context: PrintContext) => void
    statusChanged: (operation: PrintOperation) => void
    customWidgetApply: (operation: PrintOperation, widget: Widget) => void
    preview: (operation: PrintOperation, preview: PrintOperationPreview, context: PrintContext, parent: Window) => boolean
    updateCustomWidget: (operation: PrintOperation, widget: Widget, setup: PageSetup, settings: PrintSettings) => void
}

export abstract class PrintOperationClass {

    // Own properties of Gtk-2.0.Gtk.PrintOperationClass

    static name: string
}

export interface PrintOperationPreviewIface {

    // Own fields of Gtk-2.0.Gtk.PrintOperationPreviewIface

    gIface: GObject.TypeInterface
    ready: (preview: PrintOperationPreview, context: PrintContext) => void
    gotPageSize: (preview: PrintOperationPreview, context: PrintContext, pageSetup: PageSetup) => void
    renderPage: (preview: PrintOperationPreview, pageNr: number) => void
    isSelected: (preview: PrintOperationPreview, pageNr: number) => boolean
    endPreview: (preview: PrintOperationPreview) => void
}

export abstract class PrintOperationPreviewIface {

    // Own properties of Gtk-2.0.Gtk.PrintOperationPreviewIface

    static name: string
}

export interface PrintOperationPrivate {
}

export class PrintOperationPrivate {

    // Own properties of Gtk-2.0.Gtk.PrintOperationPrivate

    static name: string
}

export interface ProgressBarClass {

    // Own fields of Gtk-2.0.Gtk.ProgressBarClass

    parentClass: ProgressClass
}

export abstract class ProgressBarClass {

    // Own properties of Gtk-2.0.Gtk.ProgressBarClass

    static name: string
}

export interface ProgressClass {

    // Own fields of Gtk-2.0.Gtk.ProgressClass

    parentClass: WidgetClass
    paint: (progress: Progress) => void
    update: (progress: Progress) => void
    actModeEnter: (progress: Progress) => void
}

export abstract class ProgressClass {

    // Own properties of Gtk-2.0.Gtk.ProgressClass

    static name: string
}

export interface RadioActionClass {

    // Own fields of Gtk-2.0.Gtk.RadioActionClass

    parentClass: ToggleActionClass
    changed: (action: RadioAction, current: RadioAction) => void
}

export abstract class RadioActionClass {

    // Own properties of Gtk-2.0.Gtk.RadioActionClass

    static name: string
}

export interface RadioActionEntry {

    // Own fields of Gtk-2.0.Gtk.RadioActionEntry

    name: string
    stockId: string
    label: string
    accelerator: string
    tooltip: string
    value: number
}

export class RadioActionEntry {

    // Own properties of Gtk-2.0.Gtk.RadioActionEntry

    static name: string
}

export interface RadioActionPrivate {
}

export class RadioActionPrivate {

    // Own properties of Gtk-2.0.Gtk.RadioActionPrivate

    static name: string
}

export interface RadioButtonClass {

    // Own fields of Gtk-2.0.Gtk.RadioButtonClass

    parentClass: CheckButtonClass
    groupChanged: (radioButton: RadioButton) => void
}

export abstract class RadioButtonClass {

    // Own properties of Gtk-2.0.Gtk.RadioButtonClass

    static name: string
}

export interface RadioMenuItemClass {

    // Own fields of Gtk-2.0.Gtk.RadioMenuItemClass

    parentClass: CheckMenuItemClass
    groupChanged: (radioMenuItem: RadioMenuItem) => void
}

export abstract class RadioMenuItemClass {

    // Own properties of Gtk-2.0.Gtk.RadioMenuItemClass

    static name: string
}

export interface RadioToolButtonClass {

    // Own fields of Gtk-2.0.Gtk.RadioToolButtonClass

    parentClass: ToggleToolButtonClass
}

export abstract class RadioToolButtonClass {

    // Own properties of Gtk-2.0.Gtk.RadioToolButtonClass

    static name: string
}

export interface RangeClass {

    // Own fields of Gtk-2.0.Gtk.RangeClass

    parentClass: WidgetClass
    sliderDetail: string
    stepperDetail: string
    valueChanged: (range: Range) => void
    adjustBounds: (range: Range, newValue: number) => void
    moveSlider: (range: Range, scroll: ScrollType) => void
    getRangeBorder: (range: Range, border: Border) => void
    changeValue: (range: Range, scroll: ScrollType, newValue: number) => boolean
}

export abstract class RangeClass {

    // Own properties of Gtk-2.0.Gtk.RangeClass

    static name: string
}

export interface RangeLayout {
}

export class RangeLayout {

    // Own properties of Gtk-2.0.Gtk.RangeLayout

    static name: string
}

export interface RangeStepTimer {
}

export class RangeStepTimer {

    // Own properties of Gtk-2.0.Gtk.RangeStepTimer

    static name: string
}

export interface RcContext {
}

export class RcContext {

    // Own properties of Gtk-2.0.Gtk.RcContext

    static name: string
}

export interface RcProperty {

    // Own fields of Gtk-2.0.Gtk.RcProperty

    typeName: GLib.Quark
    propertyName: GLib.Quark
    origin: string
    value: any
}

export class RcProperty {

    // Own properties of Gtk-2.0.Gtk.RcProperty

    static name: string

    // Constructors of Gtk-2.0.Gtk.RcProperty

    /**
     * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
     * or gtk_widget_class_install_style_property_parser() which parses
     * borders in the form
     * <literal>"{ left, right, top, bottom }"</literal> for integers
     * %left, %right, %top and %bottom.
     * @param pspec a #GParamSpec
     * @param gstring the #GString to be parsed
     * @param propertyValue a #GValue which must hold boxed values.
     */
    static parseBorder(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
    /**
     * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
     * or gtk_widget_class_install_style_property_parser() which parses a
     * color given either by its name or in the form
     * <literal>{ red, green, blue }</literal> where %red, %green and
     * %blue are integers between 0 and 65535 or floating-point numbers
     * between 0 and 1.
     * @param pspec a #GParamSpec
     * @param gstring the #GString to be parsed
     * @param propertyValue a #GValue which must hold #GdkColor values.
     */
    static parseColor(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
    /**
     * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
     * or gtk_widget_class_install_style_property_parser() which parses a single
     * enumeration value.
     * 
     * The enumeration value can be specified by its name, its nickname or
     * its numeric value. For consistency with flags parsing, the value
     * may be surrounded by parentheses.
     * @param pspec a #GParamSpec
     * @param gstring the #GString to be parsed
     * @param propertyValue a #GValue which must hold enum values.
     */
    static parseEnum(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
    /**
     * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
     * or gtk_widget_class_install_style_property_parser() which parses flags.
     * 
     * Flags can be specified by their name, their nickname or
     * numerically. Multiple flags can be specified in the form
     * <literal>"( flag1 | flag2 | ... )"</literal>.
     * @param pspec a #GParamSpec
     * @param gstring the #GString to be parsed
     * @param propertyValue a #GValue which must hold flags values.
     */
    static parseFlags(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
    /**
     * A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
     * or gtk_widget_class_install_style_property_parser() which parses a
     * requisition in the form
     * <literal>"{ width, height }"</literal> for integers %width and %height.
     * @param pspec a #GParamSpec
     * @param gstring the #GString to be parsed
     * @param propertyValue a #GValue which must hold boxed values.
     */
    static parseRequisition(pspec: GObject.ParamSpec, gstring: GLib.String, propertyValue: any): boolean
}

export interface RcStyleClass {

    // Own fields of Gtk-2.0.Gtk.RcStyleClass

    parentClass: GObject.ObjectClass
    parse: (rcStyle: RcStyle, settings: Settings, scanner: GLib.Scanner) => number
    merge: (dest: RcStyle, src: RcStyle) => void
}

export abstract class RcStyleClass {

    // Own properties of Gtk-2.0.Gtk.RcStyleClass

    static name: string
}

export interface RecentActionClass {

    // Own fields of Gtk-2.0.Gtk.RecentActionClass

    parentClass: ActionClass
}

export abstract class RecentActionClass {

    // Own properties of Gtk-2.0.Gtk.RecentActionClass

    static name: string
}

export interface RecentActionPrivate {
}

export class RecentActionPrivate {

    // Own properties of Gtk-2.0.Gtk.RecentActionPrivate

    static name: string
}

export interface RecentChooserDialogClass {

    // Own fields of Gtk-2.0.Gtk.RecentChooserDialogClass

    parentClass: DialogClass
}

export abstract class RecentChooserDialogClass {

    // Own properties of Gtk-2.0.Gtk.RecentChooserDialogClass

    static name: string
}

export interface RecentChooserDialogPrivate {
}

export class RecentChooserDialogPrivate {

    // Own properties of Gtk-2.0.Gtk.RecentChooserDialogPrivate

    static name: string
}

export interface RecentChooserIface {

    // Own fields of Gtk-2.0.Gtk.RecentChooserIface

    baseIface: GObject.TypeInterface
    setCurrentUri: (chooser: RecentChooser, uri: string) => boolean
    getCurrentUri: (chooser: RecentChooser) => string
    selectUri: (chooser: RecentChooser, uri: string) => boolean
    unselectUri: (chooser: RecentChooser, uri: string) => void
    selectAll: (chooser: RecentChooser) => void
    unselectAll: (chooser: RecentChooser) => void
    getItems: (chooser: RecentChooser) => RecentInfo[]
    addFilter: (chooser: RecentChooser, filter: RecentFilter) => void
    removeFilter: (chooser: RecentChooser, filter: RecentFilter) => void
    listFilters: (chooser: RecentChooser) => RecentFilter[]
    setSortFunc: (chooser: RecentChooser, sortFunc: RecentSortFunc) => void
    itemActivated: (chooser: RecentChooser) => void
    selectionChanged: (chooser: RecentChooser) => void
}

export abstract class RecentChooserIface {

    // Own properties of Gtk-2.0.Gtk.RecentChooserIface

    static name: string
}

export interface RecentChooserMenuClass {

    // Own fields of Gtk-2.0.Gtk.RecentChooserMenuClass

    parentClass: MenuClass
    gtkRecent1: () => void
    gtkRecent2: () => void
    gtkRecent3: () => void
    gtkRecent4: () => void
}

export abstract class RecentChooserMenuClass {

    // Own properties of Gtk-2.0.Gtk.RecentChooserMenuClass

    static name: string
}

export interface RecentChooserMenuPrivate {
}

export class RecentChooserMenuPrivate {

    // Own properties of Gtk-2.0.Gtk.RecentChooserMenuPrivate

    static name: string
}

export interface RecentChooserWidgetClass {

    // Own fields of Gtk-2.0.Gtk.RecentChooserWidgetClass

    parentClass: VBoxClass
}

export abstract class RecentChooserWidgetClass {

    // Own properties of Gtk-2.0.Gtk.RecentChooserWidgetClass

    static name: string
}

export interface RecentChooserWidgetPrivate {
}

export class RecentChooserWidgetPrivate {

    // Own properties of Gtk-2.0.Gtk.RecentChooserWidgetPrivate

    static name: string
}

export interface RecentData {

    // Own fields of Gtk-2.0.Gtk.RecentData

    /**
     * a UTF-8 encoded string, containing the name of the recently
     *   used resource to be displayed, or %NULL;
     * @field 
     */
    displayName: string
    /**
     * a UTF-8 encoded string, containing a short description of
     *   the resource, or %NULL;
     * @field 
     */
    description: string
    /**
     * the MIME type of the resource;
     * @field 
     */
    mimeType: string
    /**
     * the name of the application that is registering this recently
     *   used resource;
     * @field 
     */
    appName: string
    /**
     * command line used to launch this resource; may contain the
     *   "&percnt;f" and "&percnt;u" escape characters which will be expanded
     *   to the resource file path and URI respectively when the command line
     *   is retrieved;
     * @field 
     */
    appExec: string
    /**
     * a vector of strings containing groups names;
     * @field 
     */
    groups: string
    /**
     * whether this resource should be displayed only by the
     *   applications that have registered it or not.
     * @field 
     */
    isPrivate: boolean
}

/**
 * Meta-data to be passed to gtk_recent_manager_add_full() when
 * registering a recently used resource.
 * @record 
 */
export class RecentData {

    // Own properties of Gtk-2.0.Gtk.RecentData

    static name: string
}

export interface RecentFilterInfo {

    // Own fields of Gtk-2.0.Gtk.RecentFilterInfo

    contains: RecentFilterFlags
    uri: string
    displayName: string
    mimeType: string
    applications: string
    groups: string
    age: number
}

export class RecentFilterInfo {

    // Own properties of Gtk-2.0.Gtk.RecentFilterInfo

    static name: string
}

export interface RecentInfo {

    // Owm methods of Gtk-2.0.Gtk.RecentInfo

    /**
     * Checks whether the resource pointed by `info` still exists.  At
     * the moment this check is done only on resources pointing to local files.
     */
    exists(): boolean
    /**
     * Gets the timestamp (seconds from system's Epoch) when the resource
     * was added to the recently used resources list.
     */
    getAdded(): number
    /**
     * Gets the number of days elapsed since the last update of the resource
     * pointed by `info`.
     */
    getAge(): number
    /**
     * Gets the data regarding the application that has registered the resource
     * pointed by `info`.
     * 
     * If the command line contains any escape characters defined inside the
     * storage specification, they will be expanded.
     * @param appName the name of the application that has registered this item
     */
    getApplicationInfo(appName: string): [ /* returnType */ boolean, /* appExec */ string, /* count */ number, /* time */ number ]
    /**
     * Retrieves the list of applications that have registered this resource.
     */
    getApplications(): string[]
    /**
     * Gets the (short) description of the resource.
     */
    getDescription(): string
    /**
     * Gets the name of the resource.  If none has been defined, the basename
     * of the resource is obtained.
     */
    getDisplayName(): string
    /**
     * Returns all groups registered for the recently used item `info`.  The
     * array of returned group names will be %NULL terminated, so length might
     * optionally be %NULL.
     */
    getGroups(): string[]
    /**
     * Retrieves the icon of size `size` associated to the resource MIME type.
     * @param size the size of the icon in pixels
     */
    getIcon(size: number): GdkPixbuf.Pixbuf
    /**
     * Gets the MIME type of the resource.
     */
    getMimeType(): string
    /**
     * Gets the timestamp (seconds from system's Epoch) when the resource
     * was last modified.
     */
    getModified(): number
    /**
     * Gets the value of the "private" flag.  Resources in the recently used
     * list that have this flag set to %TRUE should only be displayed by the
     * applications that have registered them.
     */
    getPrivateHint(): boolean
    /**
     * Computes a valid UTF-8 string that can be used as the name of the item in a
     * menu or list.  For example, calling this function on an item that refers to
     * "file:///foo/bar.txt" will yield "bar.txt".
     */
    getShortName(): string
    /**
     * Gets the URI of the resource.
     */
    getUri(): string
    /**
     * Gets a displayable version of the resource's URI.  If the resource
     * is local, it returns a local path; if the resource is not local,
     * it returns the UTF-8 encoded content of gtk_recent_info_get_uri().
     */
    getUriDisplay(): string
    /**
     * Gets the timestamp (seconds from system's Epoch) when the resource
     * was last visited.
     */
    getVisited(): number
    /**
     * Checks whether an application registered this resource using `app_name`.
     * @param appName a string containing an application name
     */
    hasApplication(appName: string): boolean
    /**
     * Checks whether `group_name` appears inside the groups registered for the
     * recently used item `info`.
     * @param groupName name of a group
     */
    hasGroup(groupName: string): boolean
    /**
     * Checks whether the resource is local or not by looking at the
     * scheme of its URI.
     */
    isLocal(): boolean
    /**
     * Gets the name of the last application that have registered the
     * recently used resource represented by `info`.
     */
    lastApplication(): string
    /**
     * Checks whether two #GtkRecentInfo structures point to the same
     * resource.
     * @param infoB a #GtkRecentInfo
     */
    match(infoB: RecentInfo): boolean
    /**
     * Increases the reference count of `recent_info` by one.
     */
    ref(): RecentInfo
    /**
     * Decreases the reference count of `info` by one.  If the reference
     * count reaches zero, `info` is deallocated, and the memory freed.
     */
    unref(): void
}

export class RecentInfo {

    // Own properties of Gtk-2.0.Gtk.RecentInfo

    static name: string
}

export interface RecentManagerClass {

    // Own fields of Gtk-2.0.Gtk.RecentManagerClass

    changed: (manager: RecentManager) => void
}

export abstract class RecentManagerClass {

    // Own properties of Gtk-2.0.Gtk.RecentManagerClass

    static name: string
}

export interface RecentManagerPrivate {
}

export class RecentManagerPrivate {

    // Own properties of Gtk-2.0.Gtk.RecentManagerPrivate

    static name: string
}

export interface Requisition {

    // Own fields of Gtk-2.0.Gtk.Requisition

    /**
     * the widget's desired width
     * @field 
     */
    width: number
    /**
     * the widget's desired height
     * @field 
     */
    height: number

    // Owm methods of Gtk-2.0.Gtk.Requisition

    /**
     * Copies a #GtkRequisition.
     */
    copy(): Requisition
    /**
     * Frees a #GtkRequisition.
     */
    free(): void
}

/**
 * A <structname>GtkRequisition</structname> represents the desired size of a widget. See
 * <xref linkend="size-requisition"/> for more information.
 * @record 
 */
export class Requisition {

    // Own properties of Gtk-2.0.Gtk.Requisition

    static name: string
}

export interface RulerClass {

    // Own fields of Gtk-2.0.Gtk.RulerClass

    parentClass: WidgetClass
    drawTicks: (ruler: Ruler) => void
    drawPos: (ruler: Ruler) => void
}

export abstract class RulerClass {

    // Own properties of Gtk-2.0.Gtk.RulerClass

    static name: string
}

export interface RulerMetric {

    // Own fields of Gtk-2.0.Gtk.RulerMetric

    metricName: string
    abbrev: string
    pixelsPerUnit: number
    rulerScale: number[]
    subdivide: number[]
}

export class RulerMetric {

    // Own properties of Gtk-2.0.Gtk.RulerMetric

    static name: string
}

export interface ScaleButtonClass {

    // Own fields of Gtk-2.0.Gtk.ScaleButtonClass

    parentClass: ButtonClass
    valueChanged: (button: ScaleButton, value: number) => void
}

export abstract class ScaleButtonClass {

    // Own properties of Gtk-2.0.Gtk.ScaleButtonClass

    static name: string
}

export interface ScaleButtonPrivate {
}

export class ScaleButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.ScaleButtonPrivate

    static name: string
}

export interface ScaleClass {

    // Own fields of Gtk-2.0.Gtk.ScaleClass

    parentClass: RangeClass
    formatValue: (scale: Scale, value: number) => string
    drawValue: (scale: Scale) => void
    getLayoutOffsets: (scale: Scale) => [ /* x */ number, /* y */ number ]
}

export abstract class ScaleClass {

    // Own properties of Gtk-2.0.Gtk.ScaleClass

    static name: string
}

export interface ScrollbarClass {

    // Own fields of Gtk-2.0.Gtk.ScrollbarClass

    parentClass: RangeClass
}

export abstract class ScrollbarClass {

    // Own properties of Gtk-2.0.Gtk.ScrollbarClass

    static name: string
}

export interface ScrolledWindowClass {

    // Own fields of Gtk-2.0.Gtk.ScrolledWindowClass

    parentClass: BinClass
    scrollbarSpacing: number
    scrollChild: (scrolledWindow: ScrolledWindow, scroll: ScrollType, horizontal: boolean) => boolean
    moveFocusOut: (scrolledWindow: ScrolledWindow, direction: DirectionType) => void
}

export abstract class ScrolledWindowClass {

    // Own properties of Gtk-2.0.Gtk.ScrolledWindowClass

    static name: string
}

export interface SelectionData {

    // Own fields of Gtk-2.0.Gtk.SelectionData

    selection: Gdk.Atom
    target: Gdk.Atom
    type: Gdk.Atom
    format: number
    data: number
    length: number
    display: Gdk.Display

    // Owm methods of Gtk-2.0.Gtk.SelectionData

    /**
     * Makes a copy of a #GtkSelectionData structure and its data.
     */
    copy(): SelectionData
    /**
     * Frees a #GtkSelectionData structure returned from
     * gtk_selection_data_copy().
     */
    free(): void
    /**
     * Retrieves the raw data of the selection.
     */
    getData(): number
    /**
     * Retrieves the data type of the selection.
     */
    getDataType(): Gdk.Atom
    /**
     * Retrieves the display of the selection.
     */
    getDisplay(): Gdk.Display
    /**
     * Retrieves the format of the selection.
     */
    getFormat(): number
    /**
     * Retrieves the length of the raw data of the selection.
     */
    getLength(): number
    /**
     * Gets the contents of the selection data as a #GdkPixbuf.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Retrieves the selection #GdkAtom of the selection data.
     */
    getSelection(): Gdk.Atom
    /**
     * Retrieves the target of the selection.
     */
    getTarget(): Gdk.Atom
    /**
     * Gets the contents of `selection_data` as an array of targets.
     * This can be used to interpret the results of getting
     * the standard TARGETS target that is always supplied for
     * any selection.
     */
    getTargets(): [ /* returnType */ boolean, /* targets */ Gdk.Atom[] ]
    /**
     * Gets the contents of the selection data as a UTF-8 string.
     */
    getText(): number
    /**
     * Gets the contents of the selection data as array of URIs.
     */
    getUris(): string[]
    /**
     * Stores new data into a #GtkSelectionData object. Should
     * <emphasis>only</emphasis> be called from a selection handler callback.
     * Zero-terminates the stored data.
     * @param type the type of selection data
     * @param format format (number of bits in a unit)
     * @param data pointer to the data (will be copied)
     */
    set(type: Gdk.Atom, format: number, data: Uint8Array): void
    /**
     * Sets the contents of the selection from a #GdkPixbuf
     * The pixbuf is converted to the form determined by
     * `selection_data->`target.
     * @param pixbuf a #GdkPixbuf
     */
    setPixbuf(pixbuf: GdkPixbuf.Pixbuf): boolean
    /**
     * Sets the contents of the selection from a UTF-8 encoded string.
     * The string is converted to the form determined by
     * `selection_data->`target.
     * @param str a UTF-8 string
     * @param len the length of `str,` or -1 if `str` is nul-terminated.
     */
    setText(str: string, len: number): boolean
    /**
     * Sets the contents of the selection from a list of URIs.
     * The string is converted to the form determined by
     * `selection_data->`target.
     * @param uris a %NULL-terminated array of     strings holding URIs
     */
    setUris(uris: string[]): boolean
    /**
     * Given a #GtkSelectionData object holding a list of targets,
     * determines if any of the targets in `targets` can be used to
     * provide a #GdkPixbuf.
     * @param writable whether to accept only targets for which GTK+ knows   how to convert a pixbuf into the format
     */
    targetsIncludeImage(writable: boolean): boolean
    /**
     * Given a #GtkSelectionData object holding a list of targets,
     * determines if any of the targets in `targets` can be used to
     * provide rich text.
     * @param buffer a #GtkTextBuffer
     */
    targetsIncludeRichText(buffer: TextBuffer): boolean
    /**
     * Given a #GtkSelectionData object holding a list of targets,
     * determines if any of the targets in `targets` can be used to
     * provide text.
     */
    targetsIncludeText(): boolean
    /**
     * Given a #GtkSelectionData object holding a list of targets,
     * determines if any of the targets in `targets` can be used to
     * provide a list or URIs.
     */
    targetsIncludeUri(): boolean
}

export class SelectionData {

    // Own properties of Gtk-2.0.Gtk.SelectionData

    static name: string
}

export interface SeparatorClass {

    // Own fields of Gtk-2.0.Gtk.SeparatorClass

    parentClass: WidgetClass
}

export abstract class SeparatorClass {

    // Own properties of Gtk-2.0.Gtk.SeparatorClass

    static name: string
}

export interface SeparatorMenuItemClass {

    // Own fields of Gtk-2.0.Gtk.SeparatorMenuItemClass

    parentClass: MenuItemClass
}

export abstract class SeparatorMenuItemClass {

    // Own properties of Gtk-2.0.Gtk.SeparatorMenuItemClass

    static name: string
}

export interface SeparatorToolItemClass {

    // Own fields of Gtk-2.0.Gtk.SeparatorToolItemClass

    parentClass: ToolItemClass
}

export abstract class SeparatorToolItemClass {

    // Own properties of Gtk-2.0.Gtk.SeparatorToolItemClass

    static name: string
}

export interface SeparatorToolItemPrivate {
}

export class SeparatorToolItemPrivate {

    // Own properties of Gtk-2.0.Gtk.SeparatorToolItemPrivate

    static name: string
}

export interface SettingsClass {

    // Own fields of Gtk-2.0.Gtk.SettingsClass

    parentClass: GObject.ObjectClass
}

export abstract class SettingsClass {

    // Own properties of Gtk-2.0.Gtk.SettingsClass

    static name: string
}

export interface SettingsPropertyValue {
}

export class SettingsPropertyValue {

    // Own properties of Gtk-2.0.Gtk.SettingsPropertyValue

    static name: string
}

export interface SettingsValue {

    // Own fields of Gtk-2.0.Gtk.SettingsValue

    origin: string
    value: any
}

export class SettingsValue {

    // Own properties of Gtk-2.0.Gtk.SettingsValue

    static name: string
}

export interface SizeGroupClass {

    // Own fields of Gtk-2.0.Gtk.SizeGroupClass

    parentClass: GObject.ObjectClass
}

export abstract class SizeGroupClass {

    // Own properties of Gtk-2.0.Gtk.SizeGroupClass

    static name: string
}

export interface SocketClass {

    // Own fields of Gtk-2.0.Gtk.SocketClass

    parentClass: ContainerClass
    plugAdded: (socket: Socket) => void
    plugRemoved: (socket: Socket) => boolean
}

export abstract class SocketClass {

    // Own properties of Gtk-2.0.Gtk.SocketClass

    static name: string
}

export interface SpinButtonClass {

    // Own fields of Gtk-2.0.Gtk.SpinButtonClass

    parentClass: EntryClass
    input: (spinButton: SpinButton, newValue: number) => number
    output: (spinButton: SpinButton) => number
    valueChanged: (spinButton: SpinButton) => void
    changeValue: (spinButton: SpinButton, scroll: ScrollType) => void
    wrapped: (spinButton: SpinButton) => void
}

export abstract class SpinButtonClass {

    // Own properties of Gtk-2.0.Gtk.SpinButtonClass

    static name: string
}

export interface SpinnerClass {

    // Own fields of Gtk-2.0.Gtk.SpinnerClass

    parentClass: DrawingAreaClass
}

export abstract class SpinnerClass {

    // Own properties of Gtk-2.0.Gtk.SpinnerClass

    static name: string
}

export interface SpinnerPrivate {
}

export class SpinnerPrivate {

    // Own properties of Gtk-2.0.Gtk.SpinnerPrivate

    static name: string
}

export interface StatusIconClass {

    // Own fields of Gtk-2.0.Gtk.StatusIconClass

    parentClass: GObject.ObjectClass
    activate: (statusIcon: StatusIcon) => void
    popupMenu: (statusIcon: StatusIcon, button: number, activateTime: number) => void
    sizeChanged: (statusIcon: StatusIcon, size: number) => boolean
    buttonPressEvent: (statusIcon: StatusIcon, event: Gdk.EventButton) => boolean
    buttonReleaseEvent: (statusIcon: StatusIcon, event: Gdk.EventButton) => boolean
    scrollEvent: (statusIcon: StatusIcon, event: Gdk.EventScroll) => boolean
    queryTooltip: (statusIcon: StatusIcon, x: number, y: number, keyboardMode: boolean, tooltip: Tooltip) => boolean
    gtkReserved1: object
    gtkReserved2: object
}

export abstract class StatusIconClass {

    // Own properties of Gtk-2.0.Gtk.StatusIconClass

    static name: string
}

export interface StatusIconPrivate {
}

export class StatusIconPrivate {

    // Own properties of Gtk-2.0.Gtk.StatusIconPrivate

    static name: string
}

export interface StatusbarClass {

    // Own fields of Gtk-2.0.Gtk.StatusbarClass

    parentClass: HBoxClass
    reserved: object
    textPushed: (statusbar: Statusbar, contextId: number, text: string) => void
    textPopped: (statusbar: Statusbar, contextId: number, text: string) => void
}

export abstract class StatusbarClass {

    // Own properties of Gtk-2.0.Gtk.StatusbarClass

    static name: string
}

export interface StockItem {

    // Own fields of Gtk-2.0.Gtk.StockItem

    stockId: string
    label: string
    modifier: Gdk.ModifierType
    keyval: number
    translationDomain: string

    // Owm methods of Gtk-2.0.Gtk.StockItem

    /**
     * Frees a stock item allocated on the heap, such as one returned by
     * gtk_stock_item_copy(). Also frees the fields inside the stock item,
     * if they are not %NULL.
     */
    free(): void
}

export class StockItem {

    // Own properties of Gtk-2.0.Gtk.StockItem

    static name: string
}

export interface StyleClass {

    // Own fields of Gtk-2.0.Gtk.StyleClass

    parentClass: GObject.ObjectClass
    realize: (style: Style) => void
    unrealize: (style: Style) => void
    copy: (style: Style, src: Style) => void
    initFromRc: (style: Style, rcStyle: RcStyle) => void
    setBackground: (style: Style, window: Gdk.Window, stateType: StateType) => void
    renderIcon: (style: Style, source: IconSource, direction: TextDirection, state: StateType, size: number, widget: Widget | null, detail: string | null) => GdkPixbuf.Pixbuf
    drawHline: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x1: number, x2: number, y: number) => void
    drawVline: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, y1: number, y2: number, x: number) => void
    drawShadow: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawPolygon: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, point: Gdk.Point, npoints: number, fill: boolean) => void
    drawArrow: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, arrowType: ArrowType, fill: boolean, x: number, y: number, width: number, height: number) => void
    drawDiamond: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawString: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, string: string) => void
    drawBox: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawFlatBox: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawCheck: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawOption: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawTab: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawShadowGap: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number) => void
    drawBoxGap: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, gapSide: PositionType, gapX: number, gapWidth: number) => void
    drawExtension: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, gapSide: PositionType) => void
    drawFocus: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number) => void
    drawSlider: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, orientation: Orientation) => void
    drawHandle: (style: Style, window: Gdk.Window, stateType: StateType, shadowType: ShadowType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, width: number, height: number, orientation: Orientation) => void
    drawExpander: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, expanderStyle: ExpanderStyle) => void
    drawLayout: (style: Style, window: Gdk.Window, stateType: StateType, useText: boolean, area: Gdk.Rectangle, widget: Widget, detail: string, x: number, y: number, layout: Pango.Layout) => void
    drawResizeGrip: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, edge: Gdk.WindowEdge, x: number, y: number, width: number, height: number) => void
    drawSpinner: (style: Style, window: Gdk.Window, stateType: StateType, area: Gdk.Rectangle, widget: Widget, detail: string, step: number, x: number, y: number, width: number, height: number) => void
}

export abstract class StyleClass {

    // Own properties of Gtk-2.0.Gtk.StyleClass

    static name: string
}

export interface TableChild {

    // Own fields of Gtk-2.0.Gtk.TableChild

    widget: Widget
    leftAttach: number
    rightAttach: number
    topAttach: number
    bottomAttach: number
    xpadding: number
    ypadding: number
    xexpand: number
    yexpand: number
    xshrink: number
    yshrink: number
    xfill: number
    yfill: number
}

export class TableChild {

    // Own properties of Gtk-2.0.Gtk.TableChild

    static name: string
}

export interface TableClass {

    // Own fields of Gtk-2.0.Gtk.TableClass

    parentClass: ContainerClass
}

export abstract class TableClass {

    // Own properties of Gtk-2.0.Gtk.TableClass

    static name: string
}

export interface TableRowCol {

    // Own fields of Gtk-2.0.Gtk.TableRowCol

    requisition: number
    allocation: number
    spacing: number
    needExpand: number
    needShrink: number
    expand: number
    shrink: number
    empty: number
}

export class TableRowCol {

    // Own properties of Gtk-2.0.Gtk.TableRowCol

    static name: string
}

export interface TargetEntry {

    // Own fields of Gtk-2.0.Gtk.TargetEntry

    target: string
    flags: number
    info: number
}

export class TargetEntry {

    // Own properties of Gtk-2.0.Gtk.TargetEntry

    static name: string
}

export interface TargetList {

    // Own fields of Gtk-2.0.Gtk.TargetList

    list: object[]
    refCount: number

    // Owm methods of Gtk-2.0.Gtk.TargetList

    /**
     * Appends another target to a #GtkTargetList.
     * @param target the interned atom representing the target
     * @param flags the flags for this target
     * @param info an ID that will be passed back to the application
     */
    add(target: Gdk.Atom, flags: number, info: number): void
    /**
     * Appends the image targets supported by #GtkSelection to
     * the target list. All targets are added with the same `info`.
     * @param info an ID that will be passed back to the application
     * @param writable whether to add only targets for which GTK+ knows   how to convert a pixbuf into the format
     */
    addImageTargets(info: number, writable: boolean): void
    /**
     * Appends the rich text targets registered with
     * gtk_text_buffer_register_serialize_format() or
     * gtk_text_buffer_register_deserialize_format() to the target list. All
     * targets are added with the same `info`.
     * @param info an ID that will be passed back to the application
     * @param deserializable if %TRUE, then deserializable rich text formats                  will be added, serializable formats otherwise.
     * @param buffer a #GtkTextBuffer.
     */
    addRichTextTargets(info: number, deserializable: boolean, buffer: TextBuffer): void
    /**
     * Prepends a table of #GtkTargetEntry to a target list.
     * @param targets the table of #GtkTargetEntry
     */
    addTable(targets: TargetEntry[]): void
    /**
     * Appends the text targets supported by #GtkSelection to
     * the target list. All targets are added with the same `info`.
     * @param info an ID that will be passed back to the application
     */
    addTextTargets(info: number): void
    /**
     * Appends the URI targets supported by #GtkSelection to
     * the target list. All targets are added with the same `info`.
     * @param info an ID that will be passed back to the application
     */
    addUriTargets(info: number): void
    /**
     * Looks up a given target in a #GtkTargetList.
     * @param target an interned atom representing the target to search for
     * @param info a pointer to the location to store application info for target,        or %NULL
     */
    find(target: Gdk.Atom, info: number): boolean
    /**
     * Increases the reference count of a #GtkTargetList by one.
     */
    ref(): TargetList
    /**
     * Removes a target from a target list.
     * @param target the interned atom representing the target
     */
    remove(target: Gdk.Atom): void
    /**
     * Decreases the reference count of a #GtkTargetList by one.
     * If the resulting reference count is zero, frees the list.
     */
    unref(): void
}

export class TargetList {

    // Own properties of Gtk-2.0.Gtk.TargetList

    static name: string

    // Constructors of Gtk-2.0.Gtk.TargetList

    /**
     * Creates a new #GtkTargetList from an array of #GtkTargetEntry.
     * @constructor 
     * @param targets Pointer to an array of #GtkTargetEntry
     */
    constructor(targets: TargetEntry[]) 
    /**
     * Creates a new #GtkTargetList from an array of #GtkTargetEntry.
     * @constructor 
     * @param targets Pointer to an array of #GtkTargetEntry
     */
    static new(targets: TargetEntry[]): TargetList
}

export interface TargetPair {

    // Own fields of Gtk-2.0.Gtk.TargetPair

    target: Gdk.Atom
    flags: number
    info: number
}

export class TargetPair {

    // Own properties of Gtk-2.0.Gtk.TargetPair

    static name: string
}

export interface TearoffMenuItemClass {

    // Own fields of Gtk-2.0.Gtk.TearoffMenuItemClass

    parentClass: MenuItemClass
}

export abstract class TearoffMenuItemClass {

    // Own properties of Gtk-2.0.Gtk.TearoffMenuItemClass

    static name: string
}

export interface TextAppearance {

    // Own fields of Gtk-2.0.Gtk.TextAppearance

    bgColor: Gdk.Color
    fgColor: Gdk.Color
    bgStipple: Gdk.Bitmap
    fgStipple: Gdk.Bitmap
    rise: number
    underline: number
    strikethrough: number
    drawBg: number
    insideSelection: number
    isText: number
}

export class TextAppearance {

    // Own properties of Gtk-2.0.Gtk.TextAppearance

    static name: string
}

export interface TextAttrAppearance {

    // Own fields of Gtk-2.0.Gtk.TextAttrAppearance

    attr: Pango.Attribute
    appearance: TextAppearance
}

export class TextAttrAppearance {

    // Own properties of Gtk-2.0.Gtk.TextAttrAppearance

    static name: string
}

export interface TextAttributes {

    // Own fields of Gtk-2.0.Gtk.TextAttributes

    appearance: TextAppearance
    justification: Justification
    direction: TextDirection
    font: Pango.FontDescription
    fontScale: number
    leftMargin: number
    indent: number
    rightMargin: number
    pixelsAboveLines: number
    pixelsBelowLines: number
    pixelsInsideWrap: number
    tabs: Pango.TabArray
    wrapMode: WrapMode
    language: Pango.Language
    invisible: number
    bgFullHeight: number
    editable: number
    realized: number

    // Owm methods of Gtk-2.0.Gtk.TextAttributes

    /**
     * Copies `src` and returns a new #GtkTextAttributes.
     */
    copy(): TextAttributes
    /**
     * Copies the values from `src` to `dest` so that `dest` has the same values
     * as `src`. Frees existing values in `dest`.
     * @param dest another #GtkTextAttributes
     */
    copyValues(dest: TextAttributes): void
    /**
     * Increments the reference count on `values`.
     */
    ref(): TextAttributes
    /**
     * Decrements the reference count on `values,` freeing the structure
     * if the reference count reaches 0.
     */
    unref(): void
}

export class TextAttributes {

    // Own properties of Gtk-2.0.Gtk.TextAttributes

    static name: string

    // Constructors of Gtk-2.0.Gtk.TextAttributes

    /**
     * Creates a #GtkTextAttributes, which describes
     * a set of properties on some text.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a #GtkTextAttributes, which describes
     * a set of properties on some text.
     * @constructor 
     */
    static new(): TextAttributes
}

export interface TextBTree {
}

export class TextBTree {

    // Own properties of Gtk-2.0.Gtk.TextBTree

    static name: string
}

export interface TextBufferClass {

    // Own fields of Gtk-2.0.Gtk.TextBufferClass

    parentClass: GObject.ObjectClass
    insertText: (buffer: TextBuffer, pos: TextIter, text: string, length: number) => void
    insertPixbuf: (buffer: TextBuffer, pos: TextIter, pixbuf: GdkPixbuf.Pixbuf) => void
    insertChildAnchor: (buffer: TextBuffer, pos: TextIter, anchor: TextChildAnchor) => void
    deleteRange: (buffer: TextBuffer, start: TextIter, end: TextIter) => void
    changed: (buffer: TextBuffer) => void
    modifiedChanged: (buffer: TextBuffer) => void
    markSet: (buffer: TextBuffer, location: TextIter, mark: TextMark) => void
    markDeleted: (buffer: TextBuffer, mark: TextMark) => void
    applyTag: (buffer: TextBuffer, tag: TextTag, startChar: TextIter, endChar: TextIter) => void
    removeTag: (buffer: TextBuffer, tag: TextTag, startChar: TextIter, endChar: TextIter) => void
    beginUserAction: (buffer: TextBuffer) => void
    endUserAction: (buffer: TextBuffer) => void
    pasteDone: (buffer: TextBuffer, clipboard: Clipboard) => void
}

export abstract class TextBufferClass {

    // Own properties of Gtk-2.0.Gtk.TextBufferClass

    static name: string
}

export interface TextChildAnchorClass {

    // Own fields of Gtk-2.0.Gtk.TextChildAnchorClass

    parentClass: GObject.ObjectClass
}

export abstract class TextChildAnchorClass {

    // Own properties of Gtk-2.0.Gtk.TextChildAnchorClass

    static name: string
}

export interface TextCursorDisplay {

    // Own fields of Gtk-2.0.Gtk.TextCursorDisplay

    x: number
    y: number
    height: number
    isStrong: number
    isWeak: number
}

export class TextCursorDisplay {

    // Own properties of Gtk-2.0.Gtk.TextCursorDisplay

    static name: string
}

export interface TextIter {

    // Owm methods of Gtk-2.0.Gtk.TextIter

    /**
     * Moves backward by one character offset. Returns %TRUE if movement
     * was possible; if `iter` was the first in the buffer (character
     * offset 0), gtk_text_iter_backward_char () returns %FALSE for convenience when
     * writing loops.
     */
    backwardChar(): boolean
    /**
     * Moves `count` characters backward, if possible (if `count` would move
     * past the start or end of the buffer, moves to the start or end of
     * the buffer).  The return value indicates whether the iterator moved
     * onto a dereferenceable position; if the iterator didn't move, or
     * moved onto the end iterator, then %FALSE is returned. If `count` is 0,
     * the function does nothing and returns %FALSE.
     * @param count number of characters to move
     */
    backwardChars(count: number): boolean
    /**
     * Like gtk_text_iter_forward_cursor_position(), but moves backward.
     */
    backwardCursorPosition(): boolean
    /**
     * Moves up to `count` cursor positions. See
     * gtk_text_iter_forward_cursor_position() for details.
     * @param count number of positions to move
     */
    backwardCursorPositions(count: number): boolean
    /**
     * Same as gtk_text_iter_forward_find_char(), but goes backward from `iter`.
     * @param pred function to be called on each character
     * @param limit search limit, or %NULL for none
     */
    backwardFindChar(pred: TextCharPredicate, limit: TextIter | null): boolean
    /**
     * Moves `iter` to the start of the previous line. Returns %TRUE if
     * `iter` could be moved; i.e. if `iter` was at character offset 0, this
     * function returns %FALSE. Therefore if `iter` was already on line 0,
     * but not at the start of the line, `iter` is snapped to the start of
     * the line and the function returns %TRUE. (Note that this implies that
     * in a loop calling this function, the line number may not change on
     * every iteration, if your first iteration is on line 0.)
     */
    backwardLine(): boolean
    /**
     * Moves `count` lines backward, if possible (if `count` would move
     * past the start or end of the buffer, moves to the start or end of
     * the buffer).  The return value indicates whether the iterator moved
     * onto a dereferenceable position; if the iterator didn't move, or
     * moved onto the end iterator, then %FALSE is returned. If `count` is 0,
     * the function does nothing and returns %FALSE. If `count` is negative,
     * moves forward by 0 - `count` lines.
     * @param count number of lines to move backward
     */
    backwardLines(count: number): boolean
    /**
     * Same as gtk_text_iter_forward_search(), but moves backward.
     * @param str search string
     * @param flags bitmask of flags affecting the search
     * @param limit location of last possible `match_start,` or %NULL for start of buffer
     */
    backwardSearch(str: string, flags: TextSearchFlags, limit: TextIter | null): [ /* returnType */ boolean, /* matchStart */ TextIter, /* matchEnd */ TextIter ]
    /**
     * Moves backward to the previous sentence start; if `iter` is already at
     * the start of a sentence, moves backward to the next one.  Sentence
     * boundaries are determined by Pango and should be correct for nearly
     * any language (if not, the correct fix would be to the Pango text
     * boundary algorithms).
     */
    backwardSentenceStart(): boolean
    /**
     * Calls gtk_text_iter_backward_sentence_start() up to `count` times,
     * or until it returns %FALSE. If `count` is negative, moves forward
     * instead of backward.
     * @param count number of sentences to move
     */
    backwardSentenceStarts(count: number): boolean
    /**
     * Moves backward to the next toggle (on or off) of the
     * #GtkTextTag `tag,` or to the next toggle of any tag if
     * `tag` is %NULL. If no matching tag toggles are found,
     * returns %FALSE, otherwise %TRUE. Does not return toggles
     * located at `iter,` only toggles before `iter`. Sets `iter`
     * to the location of the toggle, or the start of the buffer
     * if no toggle is found.
     * @param tag a #GtkTextTag, or %NULL
     */
    backwardToTagToggle(tag: TextTag | null): boolean
    /**
     * Moves `iter` forward to the previous visible cursor position. See
     * gtk_text_iter_backward_cursor_position() for details.
     */
    backwardVisibleCursorPosition(): boolean
    /**
     * Moves up to `count` visible cursor positions. See
     * gtk_text_iter_backward_cursor_position() for details.
     * @param count number of positions to move
     */
    backwardVisibleCursorPositions(count: number): boolean
    /**
     * Moves `iter` to the start of the previous visible line. Returns %TRUE if
     * `iter` could be moved; i.e. if `iter` was at character offset 0, this
     * function returns %FALSE. Therefore if `iter` was already on line 0,
     * but not at the start of the line, `iter` is snapped to the start of
     * the line and the function returns %TRUE. (Note that this implies that
     * in a loop calling this function, the line number may not change on
     * every iteration, if your first iteration is on line 0.)
     */
    backwardVisibleLine(): boolean
    /**
     * Moves `count` visible lines backward, if possible (if `count` would move
     * past the start or end of the buffer, moves to the start or end of
     * the buffer).  The return value indicates whether the iterator moved
     * onto a dereferenceable position; if the iterator didn't move, or
     * moved onto the end iterator, then %FALSE is returned. If `count` is 0,
     * the function does nothing and returns %FALSE. If `count` is negative,
     * moves forward by 0 - `count` lines.
     * @param count number of lines to move backward
     */
    backwardVisibleLines(count: number): boolean
    /**
     * Moves backward to the previous visible word start. (If `iter` is currently
     * on a word start, moves backward to the next one after that.) Word breaks
     * are determined by Pango and should be correct for nearly any
     * language (if not, the correct fix would be to the Pango word break
     * algorithms).
     */
    backwardVisibleWordStart(): boolean
    /**
     * Calls gtk_text_iter_backward_visible_word_start() up to `count` times.
     * @param count number of times to move
     */
    backwardVisibleWordStarts(count: number): boolean
    /**
     * Moves backward to the previous word start. (If `iter` is currently on a
     * word start, moves backward to the next one after that.) Word breaks
     * are determined by Pango and should be correct for nearly any
     * language (if not, the correct fix would be to the Pango word break
     * algorithms).
     */
    backwardWordStart(): boolean
    /**
     * Calls gtk_text_iter_backward_word_start() up to `count` times.
     * @param count number of times to move
     */
    backwardWordStarts(count: number): boolean
    /**
     * Returns %TRUE if `tag` is toggled on at exactly this point. If `tag`
     * is %NULL, returns %TRUE if any tag is toggled on at this point. Note
     * that the gtk_text_iter_begins_tag () returns %TRUE if `iter` is the
     * <emphasis>start</emphasis> of the tagged range;
     * gtk_text_iter_has_tag () tells you whether an iterator is
     * <emphasis>within</emphasis> a tagged range.
     * @param tag a #GtkTextTag, or %NULL
     */
    beginsTag(tag: TextTag | null): boolean
    /**
     * Considering the default editability of the buffer, and tags that
     * affect editability, determines whether text inserted at `iter` would
     * be editable. If text inserted at `iter` would be editable then the
     * user should be allowed to insert text at `iter`.
     * gtk_text_buffer_insert_interactive() uses this function to decide
     * whether insertions are allowed at a given position.
     * @param defaultEditability %TRUE if text is editable by default
     */
    canInsert(defaultEditability: boolean): boolean
    /**
     * A qsort()-style function that returns negative if `lhs` is less than
     * `rhs,` positive if `lhs` is greater than `rhs,` and 0 if they're equal.
     * Ordering is in character offset order, i.e. the first character in the buffer
     * is less than the second character in the buffer.
     * @param rhs another #GtkTextIter
     */
    compare(rhs: TextIter): number
    /**
     * Creates a dynamically-allocated copy of an iterator. This function
     * is not useful in applications, because iterators can be copied with a
     * simple assignment (<literal>GtkTextIter i = j;</literal>). The
     * function is used by language bindings.
     */
    copy(): TextIter
    /**
     * Returns whether the character at `iter` is within an editable region
     * of text.  Non-editable text is "locked" and can't be changed by the
     * user via #GtkTextView. This function is simply a convenience
     * wrapper around gtk_text_iter_get_attributes (). If no tags applied
     * to this text affect editability, `default_setting` will be returned.
     * 
     * You don't want to use this function to decide whether text can be
     * inserted at `iter,` because for insertion you don't want to know
     * whether the char at `iter` is inside an editable range, you want to
     * know whether a new character inserted at `iter` would be inside an
     * editable range. Use gtk_text_iter_can_insert() to handle this
     * case.
     * @param defaultSetting %TRUE if text is editable by default
     */
    editable(defaultSetting: boolean): boolean
    /**
     * Returns %TRUE if `iter` points to the start of the paragraph
     * delimiter characters for a line (delimiters will be either a
     * newline, a carriage return, a carriage return followed by a
     * newline, or a Unicode paragraph separator character). Note that an
     * iterator pointing to the \n of a \r\n pair will not be counted as
     * the end of a line, the line ends before the \r. The end iterator is
     * considered to be at the end of a line, even though there are no
     * paragraph delimiter chars there.
     */
    endsLine(): boolean
    /**
     * Determines whether `iter` ends a sentence.  Sentence boundaries are
     * determined by Pango and should be correct for nearly any language
     * (if not, the correct fix would be to the Pango text boundary
     * algorithms).
     */
    endsSentence(): boolean
    /**
     * Returns %TRUE if `tag` is toggled off at exactly this point. If `tag`
     * is %NULL, returns %TRUE if any tag is toggled off at this point. Note
     * that the gtk_text_iter_ends_tag () returns %TRUE if `iter` is the
     * <emphasis>end</emphasis> of the tagged range;
     * gtk_text_iter_has_tag () tells you whether an iterator is
     * <emphasis>within</emphasis> a tagged range.
     * @param tag a #GtkTextTag, or %NULL
     */
    endsTag(tag: TextTag | null): boolean
    /**
     * Determines whether `iter` ends a natural-language word.  Word breaks
     * are determined by Pango and should be correct for nearly any
     * language (if not, the correct fix would be to the Pango word break
     * algorithms).
     */
    endsWord(): boolean
    /**
     * Tests whether two iterators are equal, using the fastest possible
     * mechanism. This function is very fast; you can expect it to perform
     * better than e.g. getting the character offset for each iterator and
     * comparing the offsets yourself. Also, it's a bit faster than
     * gtk_text_iter_compare().
     * @param rhs another #GtkTextIter
     */
    equal(rhs: TextIter): boolean
    /**
     * Moves `iter` forward by one character offset. Note that images
     * embedded in the buffer occupy 1 character slot, so
     * gtk_text_iter_forward_char () may actually move onto an image instead
     * of a character, if you have images in your buffer.  If `iter` is the
     * end iterator or one character before it, `iter` will now point at
     * the end iterator, and gtk_text_iter_forward_char () returns %FALSE for
     * convenience when writing loops.
     */
    forwardChar(): boolean
    /**
     * Moves `count` characters if possible (if `count` would move past the
     * start or end of the buffer, moves to the start or end of the
     * buffer). The return value indicates whether the new position of
     * `iter` is different from its original position, and dereferenceable
     * (the last iterator in the buffer is not dereferenceable). If `count`
     * is 0, the function does nothing and returns %FALSE.
     * @param count number of characters to move, may be negative
     */
    forwardChars(count: number): boolean
    /**
     * Moves `iter` forward by a single cursor position. Cursor positions
     * are (unsurprisingly) positions where the cursor can appear. Perhaps
     * surprisingly, there may not be a cursor position between all
     * characters. The most common example for European languages would be
     * a carriage return/newline sequence. For some Unicode characters,
     * the equivalent of say the letter "a" with an accent mark will be
     * represented as two characters, first the letter then a "combining
     * mark" that causes the accent to be rendered; so the cursor can't go
     * between those two characters. See also the #PangoLogAttr structure and
     * pango_break() function.
     */
    forwardCursorPosition(): boolean
    /**
     * Moves up to `count` cursor positions. See
     * gtk_text_iter_forward_cursor_position() for details.
     * @param count number of positions to move
     */
    forwardCursorPositions(count: number): boolean
    /**
     * Advances `iter,` calling `pred` on each character. If
     * `pred` returns %TRUE, returns %TRUE and stops scanning.
     * If `pred` never returns %TRUE, `iter` is set to `limit` if
     * `limit` is non-%NULL, otherwise to the end iterator.
     * @param pred a function to be called on each character
     * @param limit search limit, or %NULL for none
     */
    forwardFindChar(pred: TextCharPredicate, limit: TextIter | null): boolean
    /**
     * Moves `iter` to the start of the next line. If the iter is already on the
     * last line of the buffer, moves the iter to the end of the current line.
     * If after the operation, the iter is at the end of the buffer and not
     * dereferencable, returns %FALSE. Otherwise, returns %TRUE.
     */
    forwardLine(): boolean
    /**
     * Moves `count` lines forward, if possible (if `count` would move
     * past the start or end of the buffer, moves to the start or end of
     * the buffer).  The return value indicates whether the iterator moved
     * onto a dereferenceable position; if the iterator didn't move, or
     * moved onto the end iterator, then %FALSE is returned. If `count` is 0,
     * the function does nothing and returns %FALSE. If `count` is negative,
     * moves backward by 0 - `count` lines.
     * @param count number of lines to move forward
     */
    forwardLines(count: number): boolean
    /**
     * Searches forward for `str`. Any match is returned by setting
     * `match_start` to the first character of the match and `match_end` to the
     * first character after the match. The search will not continue past
     * `limit`. Note that a search is a linear or O(n) operation, so you
     * may wish to use `limit` to avoid locking up your UI on large
     * buffers.
     * 
     * If the #GTK_TEXT_SEARCH_VISIBLE_ONLY flag is present, the match may
     * have invisible text interspersed in `str`. i.e. `str` will be a
     * possibly-noncontiguous subsequence of the matched range. similarly,
     * if you specify #GTK_TEXT_SEARCH_TEXT_ONLY, the match may have
     * pixbufs or child widgets mixed inside the matched range. If these
     * flags are not given, the match must be exact; the special 0xFFFC
     * character in `str` will match embedded pixbufs or child widgets.
     * @param str a search string
     * @param flags flags affecting how the search is done
     * @param limit bound for the search, or %NULL for the end of the buffer
     */
    forwardSearch(str: string, flags: TextSearchFlags, limit: TextIter | null): [ /* returnType */ boolean, /* matchStart */ TextIter, /* matchEnd */ TextIter ]
    /**
     * Moves forward to the next sentence end. (If `iter` is at the end of
     * a sentence, moves to the next end of sentence.)  Sentence
     * boundaries are determined by Pango and should be correct for nearly
     * any language (if not, the correct fix would be to the Pango text
     * boundary algorithms).
     */
    forwardSentenceEnd(): boolean
    /**
     * Calls gtk_text_iter_forward_sentence_end() `count` times (or until
     * gtk_text_iter_forward_sentence_end() returns %FALSE). If `count` is
     * negative, moves backward instead of forward.
     * @param count number of sentences to move
     */
    forwardSentenceEnds(count: number): boolean
    /**
     * Moves `iter` forward to the "end iterator," which points one past the last
     * valid character in the buffer. gtk_text_iter_get_char() called on the
     * end iterator returns 0, which is convenient for writing loops.
     */
    forwardToEnd(): void
    /**
     * Moves the iterator to point to the paragraph delimiter characters,
     * which will be either a newline, a carriage return, a carriage
     * return/newline in sequence, or the Unicode paragraph separator
     * character. If the iterator is already at the paragraph delimiter
     * characters, moves to the paragraph delimiter characters for the
     * next line. If `iter` is on the last line in the buffer, which does
     * not end in paragraph delimiters, moves to the end iterator (end of
     * the last line), and returns %FALSE.
     */
    forwardToLineEnd(): boolean
    /**
     * Moves forward to the next toggle (on or off) of the
     * #GtkTextTag `tag,` or to the next toggle of any tag if
     * `tag` is %NULL. If no matching tag toggles are found,
     * returns %FALSE, otherwise %TRUE. Does not return toggles
     * located at `iter,` only toggles after `iter`. Sets `iter` to
     * the location of the toggle, or to the end of the buffer
     * if no toggle is found.
     * @param tag a #GtkTextTag, or %NULL
     */
    forwardToTagToggle(tag: TextTag | null): boolean
    /**
     * Moves `iter` forward to the next visible cursor position. See
     * gtk_text_iter_forward_cursor_position() for details.
     */
    forwardVisibleCursorPosition(): boolean
    /**
     * Moves up to `count` visible cursor positions. See
     * gtk_text_iter_forward_cursor_position() for details.
     * @param count number of positions to move
     */
    forwardVisibleCursorPositions(count: number): boolean
    /**
     * Moves `iter` to the start of the next visible line. Returns %TRUE if there
     * was a next line to move to, and %FALSE if `iter` was simply moved to
     * the end of the buffer and is now not dereferenceable, or if `iter` was
     * already at the end of the buffer.
     */
    forwardVisibleLine(): boolean
    /**
     * Moves `count` visible lines forward, if possible (if `count` would move
     * past the start or end of the buffer, moves to the start or end of
     * the buffer).  The return value indicates whether the iterator moved
     * onto a dereferenceable position; if the iterator didn't move, or
     * moved onto the end iterator, then %FALSE is returned. If `count` is 0,
     * the function does nothing and returns %FALSE. If `count` is negative,
     * moves backward by 0 - `count` lines.
     * @param count number of lines to move forward
     */
    forwardVisibleLines(count: number): boolean
    /**
     * Moves forward to the next visible word end. (If `iter` is currently on a
     * word end, moves forward to the next one after that.) Word breaks
     * are determined by Pango and should be correct for nearly any
     * language (if not, the correct fix would be to the Pango word break
     * algorithms).
     */
    forwardVisibleWordEnd(): boolean
    /**
     * Calls gtk_text_iter_forward_visible_word_end() up to `count` times.
     * @param count number of times to move
     */
    forwardVisibleWordEnds(count: number): boolean
    /**
     * Moves forward to the next word end. (If `iter` is currently on a
     * word end, moves forward to the next one after that.) Word breaks
     * are determined by Pango and should be correct for nearly any
     * language (if not, the correct fix would be to the Pango word break
     * algorithms).
     */
    forwardWordEnd(): boolean
    /**
     * Calls gtk_text_iter_forward_word_end() up to `count` times.
     * @param count number of times to move
     */
    forwardWordEnds(count: number): boolean
    /**
     * Free an iterator allocated on the heap. This function
     * is intended for use in language bindings, and is not
     * especially useful for applications, because iterators can
     * simply be allocated on the stack.
     */
    free(): void
    /**
     * Computes the effect of any tags applied to this spot in the
     * text. The `values` parameter should be initialized to the default
     * settings you wish to use if no tags are in effect. You'd typically
     * obtain the defaults from gtk_text_view_get_default_attributes().
     * 
     * gtk_text_iter_get_attributes () will modify `values,` applying the
     * effects of any tags present at `iter`. If any tags affected `values,`
     * the function returns %TRUE.
     */
    getAttributes(): [ /* returnType */ boolean, /* values */ TextAttributes ]
    /**
     * Returns the #GtkTextBuffer this iterator is associated with.
     */
    getBuffer(): TextBuffer
    /**
     * Returns the number of bytes in the line containing `iter,`
     * including the paragraph delimiters.
     */
    getBytesInLine(): number
    /**
     * Returns the Unicode character at this iterator.  (Equivalent to
     * operator* on a C++ iterator.)  If the element at this iterator is a
     * non-character element, such as an image embedded in the buffer, the
     * Unicode "unknown" character 0xFFFC is returned. If invoked on
     * the end iterator, zero is returned; zero is not a valid Unicode character.
     * So you can write a loop which ends when gtk_text_iter_get_char ()
     * returns 0.
     */
    getChar(): string
    /**
     * Returns the number of characters in the line containing `iter,`
     * including the paragraph delimiters.
     */
    getCharsInLine(): number
    /**
     * If the location at `iter` contains a child anchor, the
     * anchor is returned (with no new reference count added). Otherwise,
     * %NULL is returned.
     */
    getChildAnchor(): TextChildAnchor
    /**
     * A convenience wrapper around gtk_text_iter_get_attributes (),
     * which returns the language in effect at `iter`. If no tags affecting
     * language apply to `iter,` the return value is identical to that of
     * gtk_get_default_language ().
     */
    getLanguage(): Pango.Language
    /**
     * Returns the line number containing the iterator. Lines in
     * a #GtkTextBuffer are numbered beginning with 0 for the first
     * line in the buffer.
     */
    getLine(): number
    /**
     * Returns the byte index of the iterator, counting
     * from the start of a newline-terminated line.
     * Remember that #GtkTextBuffer encodes text in
     * UTF-8, and that characters can require a variable
     * number of bytes to represent.
     */
    getLineIndex(): number
    /**
     * Returns the character offset of the iterator,
     * counting from the start of a newline-terminated line.
     * The first character on the line has offset 0.
     */
    getLineOffset(): number
    /**
     * Returns a list of all #GtkTextMark at this location. Because marks
     * are not iterable (they don't take up any "space" in the buffer,
     * they are just marks in between iterable locations), multiple marks
     * can exist in the same place. The returned list is not in any
     * meaningful order.
     */
    getMarks(): TextMark[]
    /**
     * Returns the character offset of an iterator.
     * Each character in a #GtkTextBuffer has an offset,
     * starting with 0 for the first character in the buffer.
     * Use gtk_text_buffer_get_iter_at_offset () to convert an
     * offset back into an iterator.
     */
    getOffset(): number
    /**
     * If the element at `iter` is a pixbuf, the pixbuf is returned
     * (with no new reference count added). Otherwise,
     * %NULL is returned.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Returns the text in the given range. A "slice" is an array of
     * characters encoded in UTF-8 format, including the Unicode "unknown"
     * character 0xFFFC for iterable non-character elements in the buffer,
     * such as images.  Because images are encoded in the slice, byte and
     * character offsets in the returned array will correspond to byte
     * offsets in the text buffer. Note that 0xFFFC can occur in normal
     * text as well, so it is not a reliable indicator that a pixbuf or
     * widget is in the buffer.
     * @param end iterator at end of a range
     */
    getSlice(end: TextIter): string
    /**
     * Returns a list of tags that apply to `iter,` in ascending order of
     * priority (highest-priority tags are last). The #GtkTextTag in the
     * list don't have a reference added, but you have to free the list
     * itself.
     */
    getTags(): TextTag[]
    /**
     * Returns <emphasis>text</emphasis> in the given range.  If the range
     * contains non-text elements such as images, the character and byte
     * offsets in the returned string will not correspond to character and
     * byte offsets in the buffer. If you want offsets to correspond, see
     * gtk_text_iter_get_slice ().
     * @param end iterator at end of a range
     */
    getText(end: TextIter): string
    /**
     * Returns a list of #GtkTextTag that are toggled on or off at this
     * point.  (If `toggled_on` is %TRUE, the list contains tags that are
     * toggled on.) If a tag is toggled on at `iter,` then some non-empty
     * range of characters following `iter` has that tag applied to it.  If
     * a tag is toggled off, then some non-empty range following `iter`
     * does <emphasis>not</emphasis> have the tag applied to it.
     * @param toggledOn %TRUE to get toggled-on tags
     */
    getToggledTags(toggledOn: boolean): TextTag[]
    /**
     * Returns the number of bytes from the start of the
     * line to the given `iter,` not counting bytes that
     * are invisible due to tags with the "invisible" flag
     * toggled on.
     */
    getVisibleLineIndex(): number
    /**
     * Returns the offset in characters from the start of the
     * line to the given `iter,` not counting characters that
     * are invisible due to tags with the "invisible" flag
     * toggled on.
     */
    getVisibleLineOffset(): number
    /**
     * Like gtk_text_iter_get_slice (), but invisible text is not included.
     * Invisible text is usually invisible because a #GtkTextTag with the
     * "invisible" attribute turned on has been applied to it.
     * @param end iterator at end of range
     */
    getVisibleSlice(end: TextIter): string
    /**
     * Like gtk_text_iter_get_text (), but invisible text is not included.
     * Invisible text is usually invisible because a #GtkTextTag with the
     * "invisible" attribute turned on has been applied to it.
     * @param end iterator at end of range
     */
    getVisibleText(end: TextIter): string
    /**
     * Returns %TRUE if `iter` is within a range tagged with `tag`.
     * @param tag a #GtkTextTag
     */
    hasTag(tag: TextTag): boolean
    /**
     * Checks whether `iter` falls in the range [`start,` `end)`.
     * `start` and `end` must be in ascending order.
     * @param start start of range
     * @param end end of range
     */
    inRange(start: TextIter, end: TextIter): boolean
    /**
     * Determines whether `iter` is inside a sentence (as opposed to in
     * between two sentences, e.g. after a period and before the first
     * letter of the next sentence).  Sentence boundaries are determined
     * by Pango and should be correct for nearly any language (if not, the
     * correct fix would be to the Pango text boundary algorithms).
     */
    insideSentence(): boolean
    /**
     * Determines whether `iter` is inside a natural-language word (as
     * opposed to say inside some whitespace).  Word breaks are determined
     * by Pango and should be correct for nearly any language (if not, the
     * correct fix would be to the Pango word break algorithms).
     */
    insideWord(): boolean
    /**
     * See gtk_text_iter_forward_cursor_position() or #PangoLogAttr or
     * pango_break() for details on what a cursor position is.
     */
    isCursorPosition(): boolean
    /**
     * Returns %TRUE if `iter` is the end iterator, i.e. one past the last
     * dereferenceable iterator in the buffer. gtk_text_iter_is_end () is
     * the most efficient way to check whether an iterator is the end
     * iterator.
     */
    isEnd(): boolean
    /**
     * Returns %TRUE if `iter` is the first iterator in the buffer, that is
     * if `iter` has a character offset of 0.
     */
    isStart(): boolean
    /**
     * Swaps the value of `first` and `second` if `second` comes before
     * `first` in the buffer. That is, ensures that `first` and `second` are
     * in sequence. Most text buffer functions that take a range call this
     * automatically on your behalf, so there's no real reason to call it yourself
     * in those cases. There are some exceptions, such as gtk_text_iter_in_range(),
     * that expect a pre-sorted range.
     * @param second another #GtkTextIter
     */
    order(second: TextIter): void
    /**
     * Moves iterator `iter` to the start of the line `line_number`.  If
     * `line_number` is negative or larger than the number of lines in the
     * buffer, moves `iter` to the start of the last line in the buffer.
     * @param lineNumber line number (counted from 0)
     */
    setLine(lineNumber: number): void
    /**
     * Same as gtk_text_iter_set_line_offset(), but works with a
     * <emphasis>byte</emphasis> index. The given byte index must be at
     * the start of a character, it can't be in the middle of a UTF-8
     * encoded character.
     * @param byteOnLine a byte index relative to the start of `iter'`s current line
     */
    setLineIndex(byteOnLine: number): void
    /**
     * Moves `iter` within a line, to a new <emphasis>character</emphasis>
     * (not byte) offset. The given character offset must be less than or
     * equal to the number of characters in the line; if equal, `iter`
     * moves to the start of the next line. See
     * gtk_text_iter_set_line_index() if you have a byte index rather than
     * a character offset.
     * @param charOnLine a character offset relative to the start of `iter'`s current line
     */
    setLineOffset(charOnLine: number): void
    /**
     * Sets `iter` to point to `char_offset`. `char_offset` counts from the start
     * of the entire text buffer, starting with 0.
     * @param charOffset a character number
     */
    setOffset(charOffset: number): void
    /**
     * Like gtk_text_iter_set_line_index(), but the index is in visible
     * bytes, i.e. text with a tag making it invisible is not counted
     * in the index.
     * @param byteOnLine a byte index
     */
    setVisibleLineIndex(byteOnLine: number): void
    /**
     * Like gtk_text_iter_set_line_offset(), but the offset is in visible
     * characters, i.e. text with a tag making it invisible is not
     * counted in the offset.
     * @param charOnLine a character offset
     */
    setVisibleLineOffset(charOnLine: number): void
    /**
     * Returns %TRUE if `iter` begins a paragraph,
     * i.e. if gtk_text_iter_get_line_offset () would return 0.
     * However this function is potentially more efficient than
     * gtk_text_iter_get_line_offset () because it doesn't have to compute
     * the offset, it just has to see whether it's 0.
     */
    startsLine(): boolean
    /**
     * Determines whether `iter` begins a sentence.  Sentence boundaries are
     * determined by Pango and should be correct for nearly any language
     * (if not, the correct fix would be to the Pango text boundary
     * algorithms).
     */
    startsSentence(): boolean
    /**
     * Determines whether `iter` begins a natural-language word.  Word
     * breaks are determined by Pango and should be correct for nearly any
     * language (if not, the correct fix would be to the Pango word break
     * algorithms).
     */
    startsWord(): boolean
    /**
     * This is equivalent to (gtk_text_iter_begins_tag () ||
     * gtk_text_iter_ends_tag ()), i.e. it tells you whether a range with
     * `tag` applied to it begins <emphasis>or</emphasis> ends at `iter`.
     * @param tag a #GtkTextTag, or %NULL
     */
    togglesTag(tag: TextTag | null): boolean
}

export class TextIter {

    // Own properties of Gtk-2.0.Gtk.TextIter

    static name: string
}

export interface TextLayoutClass {

    // Own fields of Gtk-2.0.Gtk.TextLayoutClass

    parentClass: GObject.ObjectClass
    invalidated: (layout: TextLayout) => void
    changed: (layout: TextLayout, y: number, oldHeight: number, newHeight: number) => void
    getLogAttrs: (layout: TextLayout, line: TextLine, attrs: Pango.LogAttr, nAttrs: number) => void
    invalidate: (layout: TextLayout, start: TextIter, end: TextIter) => void
    freeLineData: (layout: TextLayout, line: TextLine, lineData: TextLineData) => void
    allocateChild: (layout: TextLayout, child: Widget, x: number, y: number) => void
    invalidateCursors: (layout: TextLayout, start: TextIter, end: TextIter) => void
}

export abstract class TextLayoutClass {

    // Own properties of Gtk-2.0.Gtk.TextLayoutClass

    static name: string
}

export interface TextLine {
}

export class TextLine {

    // Own properties of Gtk-2.0.Gtk.TextLine

    static name: string
}

export interface TextLineData {
}

export class TextLineData {

    // Own properties of Gtk-2.0.Gtk.TextLineData

    static name: string
}

export interface TextLineDisplay {

    // Own fields of Gtk-2.0.Gtk.TextLineDisplay

    layout: Pango.Layout
    cursors: object[]
    shapedObjects: object[]
    direction: TextDirection
    width: number
    totalWidth: number
    height: number
    xOffset: number
    leftMargin: number
    rightMargin: number
    topMargin: number
    bottomMargin: number
    insertIndex: number
    sizeOnly: boolean
    line: TextLine
    pgBgColor: Gdk.Color
    blockCursor: Gdk.Rectangle
    cursorsInvalid: number
    hasBlockCursor: number
    cursorAtLineEnd: number
}

export class TextLineDisplay {

    // Own properties of Gtk-2.0.Gtk.TextLineDisplay

    static name: string
}

export interface TextLogAttrCache {
}

export class TextLogAttrCache {

    // Own properties of Gtk-2.0.Gtk.TextLogAttrCache

    static name: string
}

export interface TextMarkClass {

    // Own fields of Gtk-2.0.Gtk.TextMarkClass

    parentClass: GObject.ObjectClass
}

export abstract class TextMarkClass {

    // Own properties of Gtk-2.0.Gtk.TextMarkClass

    static name: string
}

export interface TextPendingScroll {
}

export class TextPendingScroll {

    // Own properties of Gtk-2.0.Gtk.TextPendingScroll

    static name: string
}

export interface TextTagClass {

    // Own fields of Gtk-2.0.Gtk.TextTagClass

    parentClass: GObject.ObjectClass
    event: (tag: TextTag, eventObject: GObject.Object, event: Gdk.Event, iter: TextIter) => boolean
}

export abstract class TextTagClass {

    // Own properties of Gtk-2.0.Gtk.TextTagClass

    static name: string
}

export interface TextTagTableClass {

    // Own fields of Gtk-2.0.Gtk.TextTagTableClass

    parentClass: GObject.ObjectClass
    tagChanged: (table: TextTagTable, tag: TextTag, sizeChanged: boolean) => void
    tagAdded: (table: TextTagTable, tag: TextTag) => void
    tagRemoved: (table: TextTagTable, tag: TextTag) => void
}

export abstract class TextTagTableClass {

    // Own properties of Gtk-2.0.Gtk.TextTagTableClass

    static name: string
}

export interface TextViewClass {

    // Own fields of Gtk-2.0.Gtk.TextViewClass

    parentClass: ContainerClass
    setScrollAdjustments: (textView: TextView, hadjustment: Adjustment, vadjustment: Adjustment) => void
    populatePopup: (textView: TextView, menu: Menu) => void
    moveCursor: (textView: TextView, step: MovementStep, count: number, extendSelection: boolean) => void
    pageHorizontally: (textView: TextView, count: number, extendSelection: boolean) => void
    setAnchor: (textView: TextView) => void
    insertAtCursor: (textView: TextView, str: string) => void
    deleteFromCursor: (textView: TextView, type: DeleteType, count: number) => void
    backspace: (textView: TextView) => void
    cutClipboard: (textView: TextView) => void
    copyClipboard: (textView: TextView) => void
    pasteClipboard: (textView: TextView) => void
    toggleOverwrite: (textView: TextView) => void
    moveFocus: (textView: TextView, direction: DirectionType) => void
}

export abstract class TextViewClass {

    // Own properties of Gtk-2.0.Gtk.TextViewClass

    static name: string
}

export interface TextWindow {
}

export class TextWindow {

    // Own properties of Gtk-2.0.Gtk.TextWindow

    static name: string
}

export interface ThemeEngine {
}

export class ThemeEngine {

    // Own properties of Gtk-2.0.Gtk.ThemeEngine

    static name: string
}

export interface TipsQueryClass {

    // Own fields of Gtk-2.0.Gtk.TipsQueryClass

    parentClass: LabelClass
    startQuery: (tipsQuery: TipsQuery) => void
    stopQuery: (tipsQuery: TipsQuery) => void
    widgetEntered: (tipsQuery: TipsQuery, widget: Widget, tipText: string, tipPrivate: string) => void
    widgetSelected: (tipsQuery: TipsQuery, widget: Widget, tipText: string, tipPrivate: string, event: Gdk.EventButton) => number
}

export abstract class TipsQueryClass {

    // Own properties of Gtk-2.0.Gtk.TipsQueryClass

    static name: string
}

export interface ToggleActionClass {

    // Own fields of Gtk-2.0.Gtk.ToggleActionClass

    parentClass: ActionClass
    toggled: (action: ToggleAction) => void
}

export abstract class ToggleActionClass {

    // Own properties of Gtk-2.0.Gtk.ToggleActionClass

    static name: string
}

export interface ToggleActionEntry {

    // Own fields of Gtk-2.0.Gtk.ToggleActionEntry

    name: string
    stockId: string
    label: string
    accelerator: string
    tooltip: string
    callback: GObject.Callback
    isActive: boolean
}

export class ToggleActionEntry {

    // Own properties of Gtk-2.0.Gtk.ToggleActionEntry

    static name: string
}

export interface ToggleActionPrivate {
}

export class ToggleActionPrivate {

    // Own properties of Gtk-2.0.Gtk.ToggleActionPrivate

    static name: string
}

export interface ToggleButtonClass {

    // Own fields of Gtk-2.0.Gtk.ToggleButtonClass

    parentClass: ButtonClass
    toggled: (toggleButton: ToggleButton) => void
}

export abstract class ToggleButtonClass {

    // Own properties of Gtk-2.0.Gtk.ToggleButtonClass

    static name: string
}

export interface ToggleToolButtonClass {

    // Own fields of Gtk-2.0.Gtk.ToggleToolButtonClass

    parentClass: ToolButtonClass
    toggled: (button: ToggleToolButton) => void
}

export abstract class ToggleToolButtonClass {

    // Own properties of Gtk-2.0.Gtk.ToggleToolButtonClass

    static name: string
}

export interface ToggleToolButtonPrivate {
}

export class ToggleToolButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.ToggleToolButtonPrivate

    static name: string
}

export interface ToolButtonClass {

    // Own fields of Gtk-2.0.Gtk.ToolButtonClass

    parentClass: ToolItemClass
    buttonType: GObject.GType
    clicked: (toolItem: ToolButton) => void
}

export abstract class ToolButtonClass {

    // Own properties of Gtk-2.0.Gtk.ToolButtonClass

    static name: string
}

export interface ToolButtonPrivate {
}

export class ToolButtonPrivate {

    // Own properties of Gtk-2.0.Gtk.ToolButtonPrivate

    static name: string
}

export interface ToolItemClass {

    // Own fields of Gtk-2.0.Gtk.ToolItemClass

    parentClass: BinClass
    createMenuProxy: (toolItem: ToolItem) => boolean
    toolbarReconfigured: (toolItem: ToolItem) => void
    setTooltip: (toolItem: ToolItem, tooltips: Tooltips, tipText: string, tipPrivate: string) => boolean
}

export abstract class ToolItemClass {

    // Own properties of Gtk-2.0.Gtk.ToolItemClass

    static name: string
}

export interface ToolItemGroupClass {

    // Own fields of Gtk-2.0.Gtk.ToolItemGroupClass

    parentClass: ContainerClass
}

export abstract class ToolItemGroupClass {

    // Own properties of Gtk-2.0.Gtk.ToolItemGroupClass

    static name: string
}

export interface ToolItemGroupPrivate {
}

export class ToolItemGroupPrivate {

    // Own properties of Gtk-2.0.Gtk.ToolItemGroupPrivate

    static name: string
}

export interface ToolItemPrivate {
}

export class ToolItemPrivate {

    // Own properties of Gtk-2.0.Gtk.ToolItemPrivate

    static name: string
}

export interface ToolPaletteClass {

    // Own fields of Gtk-2.0.Gtk.ToolPaletteClass

    parentClass: ContainerClass
    setScrollAdjustments: (widget: Widget, hadjustment: Adjustment, vadjustment: Adjustment) => void
}

export abstract class ToolPaletteClass {

    // Own properties of Gtk-2.0.Gtk.ToolPaletteClass

    static name: string
}

export interface ToolPalettePrivate {
}

export class ToolPalettePrivate {

    // Own properties of Gtk-2.0.Gtk.ToolPalettePrivate

    static name: string
}

export interface ToolShellIface {

    // Own fields of Gtk-2.0.Gtk.ToolShellIface

    getIconSize: (shell: ToolShell) => IconSize
    getOrientation: (shell: ToolShell) => Orientation
    getStyle: (shell: ToolShell) => ToolbarStyle
    getReliefStyle: (shell: ToolShell) => ReliefStyle
    rebuildMenu: (shell: ToolShell) => void
    getTextOrientation: (shell: ToolShell) => Orientation
    getTextAlignment: (shell: ToolShell) => number
    getEllipsizeMode: (shell: ToolShell) => Pango.EllipsizeMode
    getTextSizeGroup: (shell: ToolShell) => SizeGroup
}

/**
 * Virtual function table for the #GtkToolShell interface.
 * @record 
 */
export abstract class ToolShellIface {

    // Own properties of Gtk-2.0.Gtk.ToolShellIface

    static name: string
}

export interface ToolbarChild {

    // Own fields of Gtk-2.0.Gtk.ToolbarChild

    type: ToolbarChildType
    widget: Widget
    icon: Widget
    label: Widget
}

export class ToolbarChild {

    // Own properties of Gtk-2.0.Gtk.ToolbarChild

    static name: string
}

export interface ToolbarClass {

    // Own fields of Gtk-2.0.Gtk.ToolbarClass

    parentClass: ContainerClass
    orientationChanged: (toolbar: Toolbar, orientation: Orientation) => void
    styleChanged: (toolbar: Toolbar, style: ToolbarStyle) => void
    popupContextMenu: (toolbar: Toolbar, x: number, y: number, buttonNumber: number) => boolean
}

export abstract class ToolbarClass {

    // Own properties of Gtk-2.0.Gtk.ToolbarClass

    static name: string
}

export interface ToolbarPrivate {
}

export class ToolbarPrivate {

    // Own properties of Gtk-2.0.Gtk.ToolbarPrivate

    static name: string
}

export interface TooltipsClass {

    // Own fields of Gtk-2.0.Gtk.TooltipsClass

    parentClass: ObjectClass
}

export abstract class TooltipsClass {

    // Own properties of Gtk-2.0.Gtk.TooltipsClass

    static name: string
}

export interface TooltipsData {

    // Own fields of Gtk-2.0.Gtk.TooltipsData

    tooltips: Tooltips
    widget: Widget
    tipText: string
    tipPrivate: string
}

export class TooltipsData {

    // Own properties of Gtk-2.0.Gtk.TooltipsData

    static name: string
}

export interface TreeDragDestIface {

    // Own fields of Gtk-2.0.Gtk.TreeDragDestIface

    gIface: GObject.TypeInterface
    dragDataReceived: (dragDest: TreeDragDest, dest: TreePath, selectionData: SelectionData) => boolean
    rowDropPossible: (dragDest: TreeDragDest, destPath: TreePath, selectionData: SelectionData) => boolean
}

export abstract class TreeDragDestIface {

    // Own properties of Gtk-2.0.Gtk.TreeDragDestIface

    static name: string
}

export interface TreeDragSourceIface {

    // Own fields of Gtk-2.0.Gtk.TreeDragSourceIface

    gIface: GObject.TypeInterface
    rowDraggable: (dragSource: TreeDragSource, path: TreePath) => boolean
    dragDataGet: (dragSource: TreeDragSource, path: TreePath) => [ /* returnType */ boolean, /* selectionData */ SelectionData ]
    dragDataDelete: (dragSource: TreeDragSource, path: TreePath) => boolean
}

export abstract class TreeDragSourceIface {

    // Own properties of Gtk-2.0.Gtk.TreeDragSourceIface

    static name: string
}

export interface TreeIter {

    // Own fields of Gtk-2.0.Gtk.TreeIter

    stamp: number
    userData: object
    userData2: object
    userData3: object

    // Owm methods of Gtk-2.0.Gtk.TreeIter

    /**
     * Creates a dynamically allocated tree iterator as a copy of `iter`.
     * This function is not intended for use in applications, because you
     * can just copy the structs by value
     * (<literal>GtkTreeIter new_iter = iter;</literal>).
     * You must free this iter with gtk_tree_iter_free().
     */
    copy(): TreeIter
    /**
     * Frees an iterator that has been allocated by gtk_tree_iter_copy().
     * This function is mainly used for language bindings.
     */
    free(): void
}

export class TreeIter {

    // Own properties of Gtk-2.0.Gtk.TreeIter

    static name: string
}

export interface TreeModelFilterClass {

    // Own fields of Gtk-2.0.Gtk.TreeModelFilterClass

    parentClass: GObject.ObjectClass
}

export abstract class TreeModelFilterClass {

    // Own properties of Gtk-2.0.Gtk.TreeModelFilterClass

    static name: string
}

export interface TreeModelFilterPrivate {
}

export class TreeModelFilterPrivate {

    // Own properties of Gtk-2.0.Gtk.TreeModelFilterPrivate

    static name: string
}

export interface TreeModelIface {

    // Own fields of Gtk-2.0.Gtk.TreeModelIface

    gIface: GObject.TypeInterface
    rowChanged: (treeModel: TreeModel, path: TreePath, iter: TreeIter) => void
    rowInserted: (treeModel: TreeModel, path: TreePath, iter: TreeIter) => void
    rowHasChildToggled: (treeModel: TreeModel, path: TreePath, iter: TreeIter) => void
    rowDeleted: (treeModel: TreeModel, path: TreePath) => void
    rowsReordered: (treeModel: TreeModel, path: TreePath, iter: TreeIter, newOrder: number) => void
    getFlags: (treeModel: TreeModel) => TreeModelFlags
    getNColumns: (treeModel: TreeModel) => number
    getColumnType: (treeModel: TreeModel, index: number) => GObject.GType
    getIter: (treeModel: TreeModel, path: TreePath) => [ /* returnType */ boolean, /* iter */ TreeIter ]
    getPath: (treeModel: TreeModel, iter: TreeIter) => TreePath
    getValue: (treeModel: TreeModel, iter: TreeIter, column: number) => /* value */ any
    iterNext: (treeModel: TreeModel, iter: TreeIter) => boolean
    iterChildren: (treeModel: TreeModel, parent: TreeIter | null) => [ /* returnType */ boolean, /* iter */ TreeIter ]
    iterHasChild: (treeModel: TreeModel, iter: TreeIter) => boolean
    iterNChildren: (treeModel: TreeModel, iter: TreeIter | null) => number
    iterNthChild: (treeModel: TreeModel, parent: TreeIter | null, n: number) => [ /* returnType */ boolean, /* iter */ TreeIter ]
    iterParent: (treeModel: TreeModel, child: TreeIter) => [ /* returnType */ boolean, /* iter */ TreeIter ]
    refNode: (treeModel: TreeModel, iter: TreeIter) => void
    unrefNode: (treeModel: TreeModel, iter: TreeIter) => void
}

export abstract class TreeModelIface {

    // Own properties of Gtk-2.0.Gtk.TreeModelIface

    static name: string
}

export interface TreeModelSortClass {

    // Own fields of Gtk-2.0.Gtk.TreeModelSortClass

    parentClass: GObject.ObjectClass
}

export abstract class TreeModelSortClass {

    // Own properties of Gtk-2.0.Gtk.TreeModelSortClass

    static name: string
}

export interface TreePath {

    // Owm methods of Gtk-2.0.Gtk.TreePath

    /**
     * Appends a new index to a path.  As a result, the depth of the path is
     * increased.
     * @param index The index.
     */
    appendIndex(index: number): void
    /**
     * Compares two paths.  If `a` appears before `b` in a tree, then -1 is returned.
     * If `b` appears before `a,` then 1 is returned.  If the two nodes are equal,
     * then 0 is returned.
     * @param b A #GtkTreePath to compare with.
     */
    compare(b: TreePath): number
    /**
     * Creates a new #GtkTreePath as a copy of `path`.
     */
    copy(): TreePath
    /**
     * Moves `path` to point to the first child of the current path.
     */
    down(): void
    /**
     * Frees `path`.
     */
    free(): void
    /**
     * Returns the current depth of `path`.
     */
    getDepth(): number
    /**
     * Returns the current indices of `path`.  This is an array of integers, each
     * representing a node in a tree.  This value should not be freed.
     */
    getIndices(): number
    /**
     * Returns the current indices of `path`.
     * This is an array of integers, each representing a node in a tree.
     * It also returns the number of elements in the array.
     * The array should not be freed.
     */
    getIndicesWithDepth(): number[]
    /**
     * Returns %TRUE if `descendant` is a descendant of `path`.
     * @param descendant another #GtkTreePath
     */
    isAncestor(descendant: TreePath): boolean
    /**
     * Returns %TRUE if `path` is a descendant of `ancestor`.
     * @param ancestor another #GtkTreePath
     */
    isDescendant(ancestor: TreePath): boolean
    /**
     * Moves the `path` to point to the next node at the current depth.
     */
    next(): void
    /**
     * Prepends a new index to a path.  As a result, the depth of the path is
     * increased.
     * @param index The index.
     */
    prependIndex(index: number): void
    /**
     * Moves the `path` to point to the previous node at the current depth,
     * if it exists.
     */
    prev(): boolean
    /**
     * Generates a string representation of the path.  This string is a ':'
     * separated list of numbers.  For example, "4:10:0:3" would be an acceptable return value for this string.
     */
    toString(): string
    /**
     * Moves the `path` to point to its parent node, if it has a parent.
     */
    up(): boolean
}

export class TreePath {

    // Own properties of Gtk-2.0.Gtk.TreePath

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreePath

    /**
     * Creates a new #GtkTreePath.  This structure refers to a row.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a new #GtkTreePath.  This structure refers to a row.
     * @constructor 
     */
    static new(): TreePath
    /**
     * Creates a new #GtkTreePath.  The string representation of this path is "0"
     * @constructor 
     */
    static newFirst(): TreePath
    /**
     * Creates a new #GtkTreePath initialized to `path`.  `path` is expected to be a
     * colon separated list of numbers.  For example, the string "10:4:0" would
     * create a path of depth 3 pointing to the 11th child of the root node, the 5th
     * child of that 11th child, and the 1st child of that 5th child.  If an invalid
     * path string is passed in, %NULL is returned.
     * @constructor 
     * @param path The string representation of a path.
     */
    static newFromString(path: string): TreePath
}

export interface TreeRowReference {

    // Owm methods of Gtk-2.0.Gtk.TreeRowReference

    /**
     * Copies a #GtkTreeRowReference.
     */
    copy(): TreeRowReference
    /**
     * Free's `reference`. `reference` may be %NULL.
     */
    free(): void
    /**
     * Returns the model that the row reference is monitoring.
     */
    getModel(): TreeModel
    /**
     * Returns a path that the row reference currently points to, or %NULL if the
     * path pointed to is no longer valid.
     */
    getPath(): TreePath
    /**
     * Returns %TRUE if the `reference` is non-%NULL and refers to a current valid
     * path.
     */
    valid(): boolean
}

export class TreeRowReference {

    // Own properties of Gtk-2.0.Gtk.TreeRowReference

    static name: string

    // Constructors of Gtk-2.0.Gtk.TreeRowReference

    /**
     * Creates a row reference based on `path`.  This reference will keep pointing
     * to the node pointed to by `path,` so long as it exists.  It listens to all
     * signals emitted by `model,` and updates its path appropriately.  If `path`
     * isn't a valid path in `model,` then %NULL is returned.
     * @constructor 
     * @param model A #GtkTreeModel
     * @param path A valid #GtkTreePath to monitor
     */
    constructor(model: TreeModel, path: TreePath) 
    /**
     * Creates a row reference based on `path`.  This reference will keep pointing
     * to the node pointed to by `path,` so long as it exists.  It listens to all
     * signals emitted by `model,` and updates its path appropriately.  If `path`
     * isn't a valid path in `model,` then %NULL is returned.
     * @constructor 
     * @param model A #GtkTreeModel
     * @param path A valid #GtkTreePath to monitor
     */
    static new(model: TreeModel, path: TreePath): TreeRowReference
    /**
     * You do not need to use this function.  Creates a row reference based on
     * `path`.  This reference will keep pointing to the node pointed to by `path,`
     * so long as it exists.  If `path` isn't a valid path in `model,` then %NULL is
     * returned.  However, unlike references created with
     * gtk_tree_row_reference_new(), it does not listen to the model for changes.
     * The creator of the row reference must do this explicitly using
     * gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),
     * gtk_tree_row_reference_reordered().
     * 
     * These functions must be called exactly once per proxy when the
     * corresponding signal on the model is emitted. This single call
     * updates all row references for that proxy. Since built-in GTK+
     * objects like #GtkTreeView already use this mechanism internally,
     * using them as the proxy object will produce unpredictable results.
     * Further more, passing the same object as `model` and `proxy`
     * doesn't work for reasons of internal implementation.
     * 
     * This type of row reference is primarily meant by structures that need to
     * carefully monitor exactly when a row reference updates itself, and is not
     * generally needed by most applications.
     * @constructor 
     * @param proxy A proxy #GObject
     * @param model A #GtkTreeModel
     * @param path A valid #GtkTreePath to monitor
     */
    static newProxy(proxy: GObject.Object, model: TreeModel, path: TreePath): TreeRowReference
    /**
     * Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
     * know that the model emitted the "row_deleted" signal.
     * @param proxy A #GObject
     * @param path The path position that was deleted
     */
    static deleted(proxy: GObject.Object, path: TreePath): void
    /**
     * Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
     * know that the model emitted the "row_inserted" signal.
     * @param proxy A #GObject
     * @param path The row position that was inserted
     */
    static inserted(proxy: GObject.Object, path: TreePath): void
    /**
     * Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
     * know that the model emitted the "rows_reordered" signal.
     * @param proxy A #GObject
     * @param path The parent path of the reordered signal
     * @param iter The iter pointing to the parent of the reordered
     * @param newOrder The new order of rows
     */
    static reordered(proxy: GObject.Object, path: TreePath, iter: TreeIter, newOrder: number): void
}

export interface TreeSelectionClass {

    // Own fields of Gtk-2.0.Gtk.TreeSelectionClass

    parentClass: GObject.ObjectClass
    changed: (selection: TreeSelection) => void
}

export abstract class TreeSelectionClass {

    // Own properties of Gtk-2.0.Gtk.TreeSelectionClass

    static name: string
}

export interface TreeSortableIface {

    // Own fields of Gtk-2.0.Gtk.TreeSortableIface

    gIface: GObject.TypeInterface
    sortColumnChanged: (sortable: TreeSortable) => void
    getSortColumnId: (sortable: TreeSortable, sortColumnId: number, order: SortType) => boolean
    setSortColumnId: (sortable: TreeSortable, sortColumnId: number, order: SortType) => void
    setSortFunc: (sortable: TreeSortable, sortColumnId: number, func: TreeIterCompareFunc) => void
    setDefaultSortFunc: (sortable: TreeSortable, func: TreeIterCompareFunc) => void
    hasDefaultSortFunc: (sortable: TreeSortable) => boolean
}

export abstract class TreeSortableIface {

    // Own properties of Gtk-2.0.Gtk.TreeSortableIface

    static name: string
}

export interface TreeStoreClass {

    // Own fields of Gtk-2.0.Gtk.TreeStoreClass

    parentClass: GObject.ObjectClass
}

export abstract class TreeStoreClass {

    // Own properties of Gtk-2.0.Gtk.TreeStoreClass

    static name: string
}

export interface TreeViewClass {

    // Own fields of Gtk-2.0.Gtk.TreeViewClass

    parentClass: ContainerClass
    setScrollAdjustments: (treeView: TreeView, hadjustment: Adjustment, vadjustment: Adjustment) => void
    rowActivated: (treeView: TreeView, path: TreePath, column: TreeViewColumn) => void
    testExpandRow: (treeView: TreeView, iter: TreeIter, path: TreePath) => boolean
    testCollapseRow: (treeView: TreeView, iter: TreeIter, path: TreePath) => boolean
    rowExpanded: (treeView: TreeView, iter: TreeIter, path: TreePath) => void
    rowCollapsed: (treeView: TreeView, iter: TreeIter, path: TreePath) => void
    columnsChanged: (treeView: TreeView) => void
    cursorChanged: (treeView: TreeView) => void
    moveCursor: (treeView: TreeView, step: MovementStep, count: number) => boolean
    selectAll: (treeView: TreeView) => boolean
    unselectAll: (treeView: TreeView) => boolean
    selectCursorRow: (treeView: TreeView, startEditing: boolean) => boolean
    toggleCursorRow: (treeView: TreeView) => boolean
    expandCollapseCursorRow: (treeView: TreeView, logical: boolean, expand: boolean, openAll: boolean) => boolean
    selectCursorParent: (treeView: TreeView) => boolean
    startInteractiveSearch: (treeView: TreeView) => boolean
}

export abstract class TreeViewClass {

    // Own properties of Gtk-2.0.Gtk.TreeViewClass

    static name: string
}

export interface TreeViewColumnClass {

    // Own fields of Gtk-2.0.Gtk.TreeViewColumnClass

    parentClass: ObjectClass
    clicked: (treeColumn: TreeViewColumn) => void
}

export abstract class TreeViewColumnClass {

    // Own properties of Gtk-2.0.Gtk.TreeViewColumnClass

    static name: string
}

export interface TreeViewPrivate {
}

export class TreeViewPrivate {

    // Own properties of Gtk-2.0.Gtk.TreeViewPrivate

    static name: string
}

export interface TypeInfo {

    // Own fields of Gtk-2.0.Gtk.TypeInfo

    typeName: string
    objectSize: number
    classSize: number
    classInitFunc: ClassInitFunc
    objectInitFunc: ObjectInitFunc
    reserved1: object
    reserved2: object
    baseClassInitFunc: ClassInitFunc
}

export class TypeInfo {

    // Own properties of Gtk-2.0.Gtk.TypeInfo

    static name: string
}

export interface UIManagerClass {

    // Own fields of Gtk-2.0.Gtk.UIManagerClass

    parentClass: GObject.ObjectClass
    addWidget: (merge: UIManager, widget: Widget) => void
    actionsChanged: (merge: UIManager) => void
    connectProxy: (merge: UIManager, action: Action, proxy: Widget) => void
    disconnectProxy: (merge: UIManager, action: Action, proxy: Widget) => void
    preActivate: (merge: UIManager, action: Action) => void
    postActivate: (merge: UIManager, action: Action) => void
    getWidget: (manager: UIManager, path: string) => Widget
    getAction: (manager: UIManager, path: string) => Action
}

export abstract class UIManagerClass {

    // Own properties of Gtk-2.0.Gtk.UIManagerClass

    static name: string
}

export interface UIManagerPrivate {
}

export class UIManagerPrivate {

    // Own properties of Gtk-2.0.Gtk.UIManagerPrivate

    static name: string
}

export interface VBoxClass {

    // Own fields of Gtk-2.0.Gtk.VBoxClass

    parentClass: BoxClass
}

export abstract class VBoxClass {

    // Own properties of Gtk-2.0.Gtk.VBoxClass

    static name: string
}

export interface VButtonBoxClass {

    // Own fields of Gtk-2.0.Gtk.VButtonBoxClass

    parentClass: ButtonBoxClass
}

export abstract class VButtonBoxClass {

    // Own properties of Gtk-2.0.Gtk.VButtonBoxClass

    static name: string
}

export interface VPanedClass {

    // Own fields of Gtk-2.0.Gtk.VPanedClass

    parentClass: PanedClass
}

export abstract class VPanedClass {

    // Own properties of Gtk-2.0.Gtk.VPanedClass

    static name: string
}

export interface VRulerClass {

    // Own fields of Gtk-2.0.Gtk.VRulerClass

    parentClass: RulerClass
}

export abstract class VRulerClass {

    // Own properties of Gtk-2.0.Gtk.VRulerClass

    static name: string
}

export interface VScaleClass {

    // Own fields of Gtk-2.0.Gtk.VScaleClass

    parentClass: ScaleClass
}

export abstract class VScaleClass {

    // Own properties of Gtk-2.0.Gtk.VScaleClass

    static name: string
}

export interface VScrollbarClass {

    // Own fields of Gtk-2.0.Gtk.VScrollbarClass

    parentClass: ScrollbarClass
}

export abstract class VScrollbarClass {

    // Own properties of Gtk-2.0.Gtk.VScrollbarClass

    static name: string
}

export interface VSeparatorClass {

    // Own fields of Gtk-2.0.Gtk.VSeparatorClass

    parentClass: SeparatorClass
}

export abstract class VSeparatorClass {

    // Own properties of Gtk-2.0.Gtk.VSeparatorClass

    static name: string
}

export interface ViewportClass {

    // Own fields of Gtk-2.0.Gtk.ViewportClass

    parentClass: BinClass
    setScrollAdjustments: (viewport: Viewport, hadjustment: Adjustment, vadjustment: Adjustment) => void
}

export abstract class ViewportClass {

    // Own properties of Gtk-2.0.Gtk.ViewportClass

    static name: string
}

export interface VolumeButtonClass {

    // Own fields of Gtk-2.0.Gtk.VolumeButtonClass

    parentClass: ScaleButtonClass
}

export abstract class VolumeButtonClass {

    // Own properties of Gtk-2.0.Gtk.VolumeButtonClass

    static name: string
}

export interface WidgetAuxInfo {

    // Own fields of Gtk-2.0.Gtk.WidgetAuxInfo

    x: number
    y: number
    width: number
    height: number
    xSet: number
    ySet: number
}

export class WidgetAuxInfo {

    // Own properties of Gtk-2.0.Gtk.WidgetAuxInfo

    static name: string
}

export interface WidgetClass {

    // Own fields of Gtk-2.0.Gtk.WidgetClass

    parentClass: ObjectClass
    activateSignal: number
    setScrollAdjustmentsSignal: number
    dispatchChildPropertiesChanged: (widget: Widget, nPspecs: number, pspecs: GObject.ParamSpec) => void
    show: (widget: Widget) => void
    showAll: (widget: Widget) => void
    hide: (widget: Widget) => void
    hideAll: (widget: Widget) => void
    map: (widget: Widget) => void
    unmap: (widget: Widget) => void
    realize: (widget: Widget) => void
    unrealize: (widget: Widget) => void
    sizeRequest: (widget: Widget, requisition: Requisition) => void
    sizeAllocate: (widget: Widget, allocation: Allocation) => void
    stateChanged: (widget: Widget, previousState: StateType) => void
    parentSet: (widget: Widget, previousParent: Widget) => void
    hierarchyChanged: (widget: Widget, previousToplevel: Widget) => void
    styleSet: (widget: Widget, previousStyle: Style) => void
    directionChanged: (widget: Widget, previousDirection: TextDirection) => void
    grabNotify: (widget: Widget, wasGrabbed: boolean) => void
    childNotify: (widget: Widget, pspec: GObject.ParamSpec) => void
    mnemonicActivate: (widget: Widget, groupCycling: boolean) => boolean
    grabFocus: (widget: Widget) => void
    focus: (widget: Widget, direction: DirectionType) => boolean
    event: (widget: Widget, event: Gdk.Event) => boolean
    buttonPressEvent: (widget: Widget, event: Gdk.EventButton) => boolean
    buttonReleaseEvent: (widget: Widget, event: Gdk.EventButton) => boolean
    scrollEvent: (widget: Widget, event: Gdk.EventScroll) => boolean
    motionNotifyEvent: (widget: Widget, event: Gdk.EventMotion) => boolean
    deleteEvent: (widget: Widget, event: Gdk.EventAny) => boolean
    destroyEvent: (widget: Widget, event: Gdk.EventAny) => boolean
    exposeEvent: (widget: Widget, event: Gdk.EventExpose) => boolean
    keyPressEvent: (widget: Widget, event: Gdk.EventKey) => boolean
    keyReleaseEvent: (widget: Widget, event: Gdk.EventKey) => boolean
    enterNotifyEvent: (widget: Widget, event: Gdk.EventCrossing) => boolean
    leaveNotifyEvent: (widget: Widget, event: Gdk.EventCrossing) => boolean
    configureEvent: (widget: Widget, event: Gdk.EventConfigure) => boolean
    focusInEvent: (widget: Widget, event: Gdk.EventFocus) => boolean
    focusOutEvent: (widget: Widget, event: Gdk.EventFocus) => boolean
    mapEvent: (widget: Widget, event: Gdk.EventAny) => boolean
    unmapEvent: (widget: Widget, event: Gdk.EventAny) => boolean
    propertyNotifyEvent: (widget: Widget, event: Gdk.EventProperty) => boolean
    selectionClearEvent: (widget: Widget, event: Gdk.EventSelection) => boolean
    selectionRequestEvent: (widget: Widget, event: Gdk.EventSelection) => boolean
    selectionNotifyEvent: (widget: Widget, event: Gdk.EventSelection) => boolean
    proximityInEvent: (widget: Widget, event: Gdk.EventProximity) => boolean
    proximityOutEvent: (widget: Widget, event: Gdk.EventProximity) => boolean
    visibilityNotifyEvent: (widget: Widget, event: Gdk.EventVisibility) => boolean
    clientEvent: (widget: Widget, event: Gdk.EventClient) => boolean
    noExposeEvent: (widget: Widget, event: Gdk.EventAny) => boolean
    windowStateEvent: (widget: Widget, event: Gdk.EventWindowState) => boolean
    selectionGet: (widget: Widget, selectionData: SelectionData, info: number, time: number) => void
    selectionReceived: (widget: Widget, selectionData: SelectionData, time: number) => void
    dragBegin: (widget: Widget, context: Gdk.DragContext) => void
    dragEnd: (widget: Widget, context: Gdk.DragContext) => void
    dragDataGet: (widget: Widget, context: Gdk.DragContext, selectionData: SelectionData, info: number, time: number) => void
    dragDataDelete: (widget: Widget, context: Gdk.DragContext) => void
    dragLeave: (widget: Widget, context: Gdk.DragContext, time: number) => void
    dragMotion: (widget: Widget, context: Gdk.DragContext, x: number, y: number, time: number) => boolean
    dragDrop: (widget: Widget, context: Gdk.DragContext, x: number, y: number, time: number) => boolean
    dragDataReceived: (widget: Widget, context: Gdk.DragContext, x: number, y: number, selectionData: SelectionData, info: number, time: number) => void
    popupMenu: (widget: Widget) => boolean
    showHelp: (widget: Widget, helpType: WidgetHelpType) => boolean
    getAccessible: (widget: Widget) => Atk.Object
    screenChanged: (widget: Widget, previousScreen: Gdk.Screen) => void
    canActivateAccel: (widget: Widget, signalId: number) => boolean
    grabBrokenEvent: (widget: Widget, event: Gdk.EventGrabBroken) => boolean
    compositedChanged: (widget: Widget) => void
    queryTooltip: (widget: Widget, x: number, y: number, keyboardTooltip: boolean, tooltip: Tooltip) => boolean

    // Owm methods of Gtk-2.0.Gtk.WidgetClass

    /**
     * Finds a style property of a widget class by name.
     * @param propertyName the name of the style property to find
     */
    findStyleProperty(klass: Widget | Function | GObject.GType, propertyName: string): GObject.ParamSpec
    /**
     * Installs a style property on a widget class. The parser for the
     * style property is determined by the value type of `pspec`.
     * @param pspec the #GParamSpec for the property
     */
    installStyleProperty(klass: Widget | Function | GObject.GType, pspec: GObject.ParamSpec): void
    /**
     * Returns all style properties of a widget class.
     */
    listStyleProperties(klass: Widget | Function | GObject.GType): GObject.ParamSpec[]
}

/**
 * <structfield>activate_signal</structfield>
 * The signal to emit when a widget of this class is activated,
 * gtk_widget_activate() handles the emission. Implementation of this
 * signal is optional.
 * 
 * 
 * <structfield>set_scroll_adjustment_signal</structfield>
 * This signal is emitted  when a widget of this class is added
 * to a scrolling aware parent, gtk_widget_set_scroll_adjustments()
 * handles the emission.
 * Implementation of this signal is optional.
 * @record 
 */
export abstract class WidgetClass {

    // Own properties of Gtk-2.0.Gtk.WidgetClass

    static name: string
}

export interface WidgetShapeInfo {

    // Own fields of Gtk-2.0.Gtk.WidgetShapeInfo

    offsetX: number
    offsetY: number
    shapeMask: Gdk.Bitmap
}

export class WidgetShapeInfo {

    // Own properties of Gtk-2.0.Gtk.WidgetShapeInfo

    static name: string
}

export interface WindowClass {

    // Own fields of Gtk-2.0.Gtk.WindowClass

    parentClass: BinClass
    setFocus: (window: Window, focus: Widget | null) => void
    frameEvent: (window: Window, event: Gdk.Event) => boolean
    activateFocus: (window: Window) => void
    activateDefault: (window: Window) => void
    moveFocus: (window: Window, direction: DirectionType) => void
    keysChanged: (window: Window) => void
}

export abstract class WindowClass {

    // Own properties of Gtk-2.0.Gtk.WindowClass

    static name: string
}

export interface WindowGeometryInfo {
}

export class WindowGeometryInfo {

    // Own properties of Gtk-2.0.Gtk.WindowGeometryInfo

    static name: string
}

export interface WindowGroupClass {

    // Own fields of Gtk-2.0.Gtk.WindowGroupClass

    parentClass: GObject.ObjectClass
}

export abstract class WindowGroupClass {

    // Own properties of Gtk-2.0.Gtk.WindowGroupClass

    static name: string
}

export interface DitherInfo {

    // Own fields of Gtk-2.0.Gtk.DitherInfo

    s: number[]
    c: Uint8Array
}

export class DitherInfo {

    // Own properties of Gtk-2.0.Gtk.DitherInfo

    static name: string
}

    export type Allocation = Gdk.Rectangle
    export type ClassInitFunc = GObject.BaseInitFunc
    export type EnumValue = GObject.EnumValue
    export type FlagValue = GObject.FlagsValue
    export type FundamentalType = GObject.GType
    export type ObjectInitFunc = GObject.InstanceInitFunc
    export type SignalMarshaller = GObject.SignalCMarshaller
    export type Type = GObject.GType
    export type TypeClass = GObject.TypeClass
    export type TypeObject = GObject.TypeInstance